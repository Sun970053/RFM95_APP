
F411CE_RFM95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011798  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff0  08011938  08011938  00021938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012928  08012928  0003024c  2**0
                  CONTENTS
  4 .ARM          00000008  08012928  08012928  00022928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012930  08012930  0003024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012930  08012930  00022930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012934  08012934  00022934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08012938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c04  2000024c  08012b84  0003024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e50  08012b84  00032e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017806  00000000  00000000  000302bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347e  00000000  00000000  00047ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0004af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001123  00000000  00000000  0004c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a92d  00000000  00000000  0004d62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b345  00000000  00000000  00067f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad0e  00000000  00000000  0008329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007190  00000000  00000000  0011dfac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012513c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011920 	.word	0x08011920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	08011920 	.word	0x08011920

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_2

/* SPI Chip Select */
static void SELECT(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2104      	movs	r1, #4
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <SELECT+0x14>)
 800100a:	f003 fb87 	bl	800471c <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400

08001018 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2104      	movs	r1, #4
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DESELECT+0x14>)
 8001022:	f003 fb7b 	bl	800471c <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020400 	.word	0x40020400

08001030 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800103a:	bf00      	nop
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <SPI_TxByte+0x30>)
 800103e:	f005 f887 	bl	8006150 <HAL_SPI_GetState>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d1f9      	bne.n	800103c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001048:	1df9      	adds	r1, r7, #7
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <SPI_TxByte+0x30>)
 8001052:	f004 fc72 	bl	800593a <HAL_SPI_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000028c 	.word	0x2000028c

08001064 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800106a:	23ff      	movs	r3, #255	; 0xff
 800106c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001072:	bf00      	nop
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <SPI_RxByte+0x38>)
 8001076:	f005 f86b 	bl	8006150 <HAL_SPI_GetState>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d1f9      	bne.n	8001074 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001080:	1dba      	adds	r2, r7, #6
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <SPI_RxByte+0x38>)
 800108e:	f004 feaf 	bl	8005df0 <HAL_SPI_TransmitReceive>

  return data;
 8001092:	79bb      	ldrb	r3, [r7, #6]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000028c 	.word	0x2000028c

080010a0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80010a8:	f7ff ffdc 	bl	8001064 <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <SD_ReadyWait+0x34>)
 80010c4:	2232      	movs	r2, #50	; 0x32
 80010c6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010c8:	f7ff ffcc 	bl	8001064 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010cc:	f7ff ffca 	bl	8001064 <SPI_RxByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d004      	beq.n	80010e4 <SD_ReadyWait+0x28>
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SD_ReadyWait+0x34>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f3      	bne.n	80010cc <SD_ReadyWait+0x10>

  return res;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20002abe 	.word	0x20002abe

080010f4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80010fa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80010fe:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001100:	f7ff ff8a 	bl	8001018 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	e005      	b.n	8001116 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800110a:	20ff      	movs	r0, #255	; 0xff
 800110c:	f7ff ff90 	bl	8001030 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	3301      	adds	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b09      	cmp	r3, #9
 800111a:	ddf6      	ble.n	800110a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800111c:	f7ff ff70 	bl	8001000 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001134:	2395      	movs	r3, #149	; 0x95
 8001136:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e009      	b.n	8001152 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800113e:	1d3a      	adds	r2, r7, #4
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff72 	bl	8001030 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b05      	cmp	r3, #5
 8001156:	ddf2      	ble.n	800113e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001158:	e002      	b.n	8001160 <SD_PowerOn+0x6c>
  {
    Count--;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3b01      	subs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001160:	f7ff ff80 	bl	8001064 <SPI_RxByte>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <SD_PowerOn+0x7c>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f4      	bne.n	800115a <SD_PowerOn+0x66>
  }

  DESELECT();
 8001170:	f7ff ff52 	bl	8001018 <DESELECT>
  SPI_TxByte(0XFF);
 8001174:	20ff      	movs	r0, #255	; 0xff
 8001176:	f7ff ff5b 	bl	8001030 <SPI_TxByte>

  PowerFlag = 1;
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <SD_PowerOn+0x94>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000269 	.word	0x20000269

0800118c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <SD_PowerOff+0x14>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000269 	.word	0x20000269

080011a4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <SD_CheckPower+0x14>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000269 	.word	0x20000269

080011bc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <SD_RxDataBlock+0x68>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011cc:	f7ff ff4a 	bl	8001064 <SPI_RxByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d104      	bne.n	80011e4 <SD_RxDataBlock+0x28>
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SD_RxDataBlock+0x68>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f3      	bne.n	80011cc <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2bfe      	cmp	r3, #254	; 0xfe
 80011e8:	d001      	beq.n	80011ee <SD_RxDataBlock+0x32>
    return FALSE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e016      	b.n	800121c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff53 	bl	80010a0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff4d 	bl	80010a0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3b02      	subs	r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ed      	bne.n	80011ee <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001212:	f7ff ff27 	bl	8001064 <SPI_RxByte>
  SPI_RxByte();
 8001216:	f7ff ff25 	bl	8001064 <SPI_RxByte>

  return TRUE;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20002abd 	.word	0x20002abd

08001228 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001238:	f7ff ff40 	bl	80010bc <SD_ReadyWait>
 800123c:	4603      	mov	r3, r0
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d001      	beq.n	8001246 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001242:	2300      	movs	r3, #0
 8001244:	e040      	b.n	80012c8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fef1 	bl	8001030 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2bfd      	cmp	r3, #253	; 0xfd
 8001252:	d031      	beq.n	80012b8 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fee5 	bl	8001030 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fede 	bl	8001030 <SPI_TxByte>
    } while (--wc);
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	3b01      	subs	r3, #1
 8001278:	73bb      	strb	r3, [r7, #14]
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1eb      	bne.n	8001258 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001280:	f7ff fef0 	bl	8001064 <SPI_RxByte>
    SPI_RxByte();
 8001284:	f7ff feee 	bl	8001064 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001288:	e00b      	b.n	80012a2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800128a:	f7ff feeb 	bl	8001064 <SPI_RxByte>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b05      	cmp	r3, #5
 800129a:	d006      	beq.n	80012aa <SD_TxDataBlock+0x82>
        break;

      i++;
 800129c:	7b7b      	ldrb	r3, [r7, #13]
 800129e:	3301      	adds	r3, #1
 80012a0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	2b40      	cmp	r3, #64	; 0x40
 80012a6:	d9f0      	bls.n	800128a <SD_TxDataBlock+0x62>
 80012a8:	e000      	b.n	80012ac <SD_TxDataBlock+0x84>
        break;
 80012aa:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80012ac:	bf00      	nop
 80012ae:	f7ff fed9 	bl	8001064 <SPI_RxByte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0fa      	beq.n	80012ae <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d101      	bne.n	80012c6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012dc:	f7ff feee 	bl	80010bc <SD_ReadyWait>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d001      	beq.n	80012ea <SD_SendCmd+0x1a>
    return 0xFF;
 80012e6:	23ff      	movs	r3, #255	; 0xff
 80012e8:	e040      	b.n	800136c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe9f 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	0e1b      	lsrs	r3, r3, #24
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe99 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe93 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe8d 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe88 	bl	8001030 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b40      	cmp	r3, #64	; 0x40
 8001328:	d101      	bne.n	800132e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800132a:	2395      	movs	r3, #149	; 0x95
 800132c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b48      	cmp	r3, #72	; 0x48
 8001332:	d101      	bne.n	8001338 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001334:	2387      	movs	r3, #135	; 0x87
 8001336:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe78 	bl	8001030 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b4c      	cmp	r3, #76	; 0x4c
 8001344:	d101      	bne.n	800134a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001346:	f7ff fe8d 	bl	8001064 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800134a:	230a      	movs	r3, #10
 800134c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800134e:	f7ff fe89 	bl	8001064 <SPI_RxByte>
 8001352:	4603      	mov	r3, r0
 8001354:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001356:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da05      	bge.n	800136a <SD_SendCmd+0x9a>
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	3b01      	subs	r3, #1
 8001362:	73bb      	strb	r3, [r7, #14]
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f1      	bne.n	800134e <SD_SendCmd+0x7e>

  return res;
 800136a:	7b7b      	ldrb	r3, [r7, #13]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d5      	b.n	8001534 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <SD_disk_initialize+0x1c8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <SD_disk_initialize+0x2a>
    return Stat;
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <SD_disk_initialize+0x1c8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e0ca      	b.n	8001534 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800139e:	f7ff fea9 	bl	80010f4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80013a2:	f7ff fe2d 	bl	8001000 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80013aa:	2100      	movs	r1, #0
 80013ac:	2040      	movs	r0, #64	; 0x40
 80013ae:	f7ff ff8f 	bl	80012d0 <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 80a5 	bne.w	8001504 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80013ba:	4b61      	ldr	r3, [pc, #388]	; (8001540 <SD_disk_initialize+0x1cc>)
 80013bc:	2264      	movs	r2, #100	; 0x64
 80013be:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013c4:	2048      	movs	r0, #72	; 0x48
 80013c6:	f7ff ff83 	bl	80012d0 <SD_SendCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d158      	bne.n	8001482 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e00c      	b.n	80013f0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80013d6:	7bfc      	ldrb	r4, [r7, #15]
 80013d8:	f7ff fe44 	bl	8001064 <SPI_RxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	f104 0310 	add.w	r3, r4, #16
 80013e4:	443b      	add	r3, r7
 80013e6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d9ef      	bls.n	80013d6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 8083 	bne.w	8001504 <SD_disk_initialize+0x190>
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	2baa      	cmp	r3, #170	; 0xaa
 8001402:	d17f      	bne.n	8001504 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001404:	2100      	movs	r1, #0
 8001406:	2077      	movs	r0, #119	; 0x77
 8001408:	f7ff ff62 	bl	80012d0 <SD_SendCmd>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d807      	bhi.n	8001422 <SD_disk_initialize+0xae>
 8001412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001416:	2069      	movs	r0, #105	; 0x69
 8001418:	f7ff ff5a 	bl	80012d0 <SD_SendCmd>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <SD_disk_initialize+0x1cc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1eb      	bne.n	8001404 <SD_disk_initialize+0x90>
 800142c:	e000      	b.n	8001430 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800142e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <SD_disk_initialize+0x1cc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d064      	beq.n	8001504 <SD_disk_initialize+0x190>
 800143a:	2100      	movs	r1, #0
 800143c:	207a      	movs	r0, #122	; 0x7a
 800143e:	f7ff ff47 	bl	80012d0 <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d15d      	bne.n	8001504 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e00c      	b.n	8001468 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800144e:	7bfc      	ldrb	r4, [r7, #15]
 8001450:	f7ff fe08 	bl	8001064 <SPI_RxByte>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	f104 0310 	add.w	r3, r4, #16
 800145c:	443b      	add	r3, r7
 800145e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	3301      	adds	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d9ef      	bls.n	800144e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800146e:	7a3b      	ldrb	r3, [r7, #8]
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SD_disk_initialize+0x108>
 8001478:	2306      	movs	r3, #6
 800147a:	e000      	b.n	800147e <SD_disk_initialize+0x10a>
 800147c:	2302      	movs	r3, #2
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	e040      	b.n	8001504 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001482:	2100      	movs	r1, #0
 8001484:	2077      	movs	r0, #119	; 0x77
 8001486:	f7ff ff23 	bl	80012d0 <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d808      	bhi.n	80014a2 <SD_disk_initialize+0x12e>
 8001490:	2100      	movs	r1, #0
 8001492:	2069      	movs	r0, #105	; 0x69
 8001494:	f7ff ff1c 	bl	80012d0 <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d801      	bhi.n	80014a2 <SD_disk_initialize+0x12e>
 800149e:	2302      	movs	r3, #2
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x130>
 80014a2:	2301      	movs	r3, #1
 80014a4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10e      	bne.n	80014ca <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014ac:	2100      	movs	r1, #0
 80014ae:	2077      	movs	r0, #119	; 0x77
 80014b0:	f7ff ff0e 	bl	80012d0 <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d80e      	bhi.n	80014d8 <SD_disk_initialize+0x164>
 80014ba:	2100      	movs	r1, #0
 80014bc:	2069      	movs	r0, #105	; 0x69
 80014be:	f7ff ff07 	bl	80012d0 <SD_SendCmd>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014c8:	e00d      	b.n	80014e6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014ca:	2100      	movs	r1, #0
 80014cc:	2041      	movs	r0, #65	; 0x41
 80014ce:	f7ff feff 	bl	80012d0 <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <SD_disk_initialize+0x1cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e1      	bne.n	80014a6 <SD_disk_initialize+0x132>
 80014e2:	e000      	b.n	80014e6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80014e4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <SD_disk_initialize+0x1cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <SD_disk_initialize+0x18c>
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	2050      	movs	r0, #80	; 0x50
 80014f6:	f7ff feeb 	bl	80012d0 <SD_SendCmd>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <SD_disk_initialize+0x1d0>)
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800150a:	f7ff fd85 	bl	8001018 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800150e:	f7ff fda9 	bl	8001064 <SPI_RxByte>

  if (type)
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <SD_disk_initialize+0x1c8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SD_disk_initialize+0x1c8>)
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e001      	b.n	800152e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800152a:	f7ff fe2f 	bl	800118c <SD_PowerOff>
  }

  return Stat;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <SD_disk_initialize+0x1c8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20002abd 	.word	0x20002abd
 8001544:	20000268 	.word	0x20000268

08001548 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001558:	2301      	movs	r3, #1
 800155a:	e002      	b.n	8001562 <SD_disk_status+0x1a>

  return Stat;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SD_disk_status+0x28>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000

08001574 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <SD_disk_read+0x1c>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <SD_disk_read+0x20>
    return RES_PARERR;
 8001590:	2304      	movs	r3, #4
 8001592:	e051      	b.n	8001638 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <SD_disk_read+0xcc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e048      	b.n	8001638 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <SD_disk_read+0xd0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	607b      	str	r3, [r7, #4]

  SELECT();
 80015b8:	f7ff fd22 	bl	8001000 <SELECT>

  if (count == 1)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d111      	bne.n	80015e6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2051      	movs	r0, #81	; 0x51
 80015c6:	f7ff fe83 	bl	80012d0 <SD_SendCmd>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d129      	bne.n	8001624 <SD_disk_read+0xb0>
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f7ff fdf1 	bl	80011bc <SD_RxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <SD_disk_read+0xb0>
      count = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	e01e      	b.n	8001624 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2052      	movs	r0, #82	; 0x52
 80015ea:	f7ff fe71 	bl	80012d0 <SD_SendCmd>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d117      	bne.n	8001624 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80015f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7ff fddf 	bl	80011bc <SD_RxDataBlock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00a      	beq.n	800161a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800160a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ed      	bne.n	80015f4 <SD_disk_read+0x80>
 8001618:	e000      	b.n	800161c <SD_disk_read+0xa8>
          break;
 800161a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800161c:	2100      	movs	r1, #0
 800161e:	204c      	movs	r0, #76	; 0x4c
 8001620:	f7ff fe56 	bl	80012d0 <SD_SendCmd>
    }
  }

  DESELECT();
 8001624:	f7ff fcf8 	bl	8001018 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001628:	f7ff fd1c 	bl	8001064 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000268 	.word	0x20000268

08001648 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <SD_disk_write+0x1c>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <SD_disk_write+0x20>
    return RES_PARERR;
 8001664:	2304      	movs	r3, #4
 8001666:	e06b      	b.n	8001740 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <SD_disk_write+0x100>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001676:	2303      	movs	r3, #3
 8001678:	e062      	b.n	8001740 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <SD_disk_write+0x100>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001688:	2302      	movs	r3, #2
 800168a:	e059      	b.n	8001740 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <SD_disk_write+0x104>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	607b      	str	r3, [r7, #4]

  SELECT();
 800169e:	f7ff fcaf 	bl	8001000 <SELECT>

  if (count == 1)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d110      	bne.n	80016ca <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	2058      	movs	r0, #88	; 0x58
 80016ac:	f7ff fe10 	bl	80012d0 <SD_SendCmd>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d13a      	bne.n	800172c <SD_disk_write+0xe4>
 80016b6:	21fe      	movs	r1, #254	; 0xfe
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f7ff fdb5 	bl	8001228 <SD_TxDataBlock>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d033      	beq.n	800172c <SD_disk_write+0xe4>
      count = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	e030      	b.n	800172c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <SD_disk_write+0x104>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2077      	movs	r0, #119	; 0x77
 80016da:	f7ff fdf9 	bl	80012d0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	2057      	movs	r0, #87	; 0x57
 80016e2:	f7ff fdf5 	bl	80012d0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	2059      	movs	r0, #89	; 0x59
 80016ea:	f7ff fdf1 	bl	80012d0 <SD_SendCmd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d11b      	bne.n	800172c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80016f4:	21fc      	movs	r1, #252	; 0xfc
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f7ff fd96 	bl	8001228 <SD_TxDataBlock>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001708:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ee      	bne.n	80016f4 <SD_disk_write+0xac>
 8001716:	e000      	b.n	800171a <SD_disk_write+0xd2>
          break;
 8001718:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800171a:	21fd      	movs	r1, #253	; 0xfd
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fd83 	bl	8001228 <SD_TxDataBlock>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <SD_disk_write+0xe4>
      {
        count = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800172c:	f7ff fc74 	bl	8001018 <DESELECT>
  SPI_RxByte();
 8001730:	f7ff fc98 	bl	8001064 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000268 	.word	0x20000268

08001750 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	603a      	str	r2, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	460b      	mov	r3, r1
 800175e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800176a:	2304      	movs	r3, #4
 800176c:	e11b      	b.n	80019a6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d129      	bne.n	80017ce <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d017      	beq.n	80017b2 <SD_disk_ioctl+0x62>
 8001782:	2b02      	cmp	r3, #2
 8001784:	dc1f      	bgt.n	80017c6 <SD_disk_ioctl+0x76>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <SD_disk_ioctl+0x40>
 800178a:	2b01      	cmp	r3, #1
 800178c:	d00b      	beq.n	80017a6 <SD_disk_ioctl+0x56>
 800178e:	e01a      	b.n	80017c6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001790:	f7ff fd08 	bl	80011a4 <SD_CheckPower>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800179a:	f7ff fcf7 	bl	800118c <SD_PowerOff>
      res = RES_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017a4:	e0fd      	b.n	80019a2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80017a6:	f7ff fca5 	bl	80010f4 <SD_PowerOn>
      res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017b0:	e0f7      	b.n	80019a2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	1c5c      	adds	r4, r3, #1
 80017b6:	f7ff fcf5 	bl	80011a4 <SD_CheckPower>
 80017ba:	4603      	mov	r3, r0
 80017bc:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017c4:	e0ed      	b.n	80019a2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80017c6:	2304      	movs	r3, #4
 80017c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017cc:	e0e9      	b.n	80019a2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <SD_disk_ioctl+0x260>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0e2      	b.n	80019a6 <SD_disk_ioctl+0x256>

    SELECT();
 80017e0:	f7ff fc0e 	bl	8001000 <SELECT>

    switch (ctrl)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b0d      	cmp	r3, #13
 80017e8:	f200 80cc 	bhi.w	8001984 <SD_disk_ioctl+0x234>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <SD_disk_ioctl+0xa4>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	080018ef 	.word	0x080018ef
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	080018df 	.word	0x080018df
 8001800:	08001985 	.word	0x08001985
 8001804:	08001985 	.word	0x08001985
 8001808:	08001985 	.word	0x08001985
 800180c:	08001985 	.word	0x08001985
 8001810:	08001985 	.word	0x08001985
 8001814:	08001985 	.word	0x08001985
 8001818:	08001985 	.word	0x08001985
 800181c:	08001985 	.word	0x08001985
 8001820:	08001901 	.word	0x08001901
 8001824:	08001925 	.word	0x08001925
 8001828:	08001949 	.word	0x08001949
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800182c:	2100      	movs	r1, #0
 800182e:	2049      	movs	r0, #73	; 0x49
 8001830:	f7ff fd4e 	bl	80012d0 <SD_SendCmd>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80a8 	bne.w	800198c <SD_disk_ioctl+0x23c>
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2110      	movs	r1, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fcba 	bl	80011bc <SD_RxDataBlock>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 809e 	beq.w	800198c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001850:	7b3b      	ldrb	r3, [r7, #12]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	b29a      	uxth	r2, r3
 800185e:	7d3b      	ldrb	r3, [r7, #20]
 8001860:	b29b      	uxth	r3, r3
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	3301      	adds	r3, #1
 800186c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800186e:	8bfb      	ldrh	r3, [r7, #30]
 8001870:	029a      	lsls	r2, r3, #10
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e02e      	b.n	80018d6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001878:	7c7b      	ldrb	r3, [r7, #17]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	b2da      	uxtb	r2, r3
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	09db      	lsrs	r3, r3, #7
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2da      	uxtb	r2, r3
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0306 	and.w	r3, r3, #6
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3302      	adds	r3, #2
 800189c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018a0:	7d3b      	ldrb	r3, [r7, #20]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	7cfb      	ldrb	r3, [r7, #19]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	7cbb      	ldrb	r3, [r7, #18]
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018c8:	8bfa      	ldrh	r2, [r7, #30]
 80018ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ce:	3b09      	subs	r3, #9
 80018d0:	409a      	lsls	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80018dc:	e056      	b.n	800198c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018ec:	e055      	b.n	800199a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80018ee:	f7ff fbe5 	bl	80010bc <SD_ReadyWait>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d14b      	bne.n	8001990 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018fe:	e047      	b.n	8001990 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001900:	2100      	movs	r1, #0
 8001902:	2049      	movs	r0, #73	; 0x49
 8001904:	f7ff fce4 	bl	80012d0 <SD_SendCmd>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d142      	bne.n	8001994 <SD_disk_ioctl+0x244>
 800190e:	2110      	movs	r1, #16
 8001910:	6a38      	ldr	r0, [r7, #32]
 8001912:	f7ff fc53 	bl	80011bc <SD_RxDataBlock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03b      	beq.n	8001994 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001922:	e037      	b.n	8001994 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001924:	2100      	movs	r1, #0
 8001926:	204a      	movs	r0, #74	; 0x4a
 8001928:	f7ff fcd2 	bl	80012d0 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d132      	bne.n	8001998 <SD_disk_ioctl+0x248>
 8001932:	2110      	movs	r1, #16
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f7ff fc41 	bl	80011bc <SD_RxDataBlock>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d02b      	beq.n	8001998 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001946:	e027      	b.n	8001998 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001948:	2100      	movs	r1, #0
 800194a:	207a      	movs	r0, #122	; 0x7a
 800194c:	f7ff fcc0 	bl	80012d0 <SD_SendCmd>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800195c:	e00b      	b.n	8001976 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800195e:	6a3c      	ldr	r4, [r7, #32]
 8001960:	1c63      	adds	r3, r4, #1
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	f7ff fb7e 	bl	8001064 <SPI_RxByte>
 8001968:	4603      	mov	r3, r0
 800196a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800196c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001970:	3301      	adds	r3, #1
 8001972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800197a:	2b03      	cmp	r3, #3
 800197c:	d9ef      	bls.n	800195e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001984:	2304      	movs	r3, #4
 8001986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800198a:	e006      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 800198c:	bf00      	nop
 800198e:	e004      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001990:	bf00      	nop
 8001992:	e002      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001998:	bf00      	nop
    }

    DESELECT();
 800199a:	f7ff fb3d 	bl	8001018 <DESELECT>
    SPI_RxByte();
 800199e:	f7ff fb61 	bl	8001064 <SPI_RxByte>
  }

  return res;
 80019a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	372c      	adds	r7, #44	; 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000000 	.word	0x20000000

080019b4 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80019bc:	1d39      	adds	r1, r7, #4
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	2201      	movs	r2, #1
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <__io_putchar+0x20>)
 80019c6:	f005 fa25 	bl	8006e14 <HAL_UART_Transmit>
	return ch;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200003bc 	.word	0x200003bc

080019d8 <HAL_GPIO_EXTI_Callback>:
uint8_t STM32_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout);
uint8_t STM32_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout);
uint8_t STM32_SPI_CheckState(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
	// The user push button on your black pill board is connected between PA0 and GND.
	if(GPIO_Pin == BTN_Pin)
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x16>
	{
		txFlag = true;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x30>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == DIO0_Pin)
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d102      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x22>
	{
		rxFlag = true;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x34>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
	}
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000470 	.word	0x20000470
 8001a0c:	20000471 	.word	0x20000471

08001a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <HAL_UART_RxCpltCallback+0x15c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f040 80a0 	bne.w	8001b64 <HAL_UART_RxCpltCallback+0x154>
	{
		/* Enabling interrupt receive again */
		HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxData,1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	4952      	ldr	r1, [pc, #328]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001a28:	4852      	ldr	r0, [pc, #328]	; (8001b74 <HAL_UART_RxCpltCallback+0x164>)
 8001a2a:	f005 fa7e 	bl	8006f2a <HAL_UART_Receive_IT>
		switch(rxData)
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b0d      	cmp	r3, #13
 8001a34:	d030      	beq.n	8001a98 <HAL_UART_RxCpltCallback+0x88>
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	f040 8081 	bne.w	8001b3e <HAL_UART_RxCpltCallback+0x12e>
		{
		case ' ':
			// clear array
			if(myRxCmd.cmdLen)
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_UART_RxCpltCallback+0x46>
				memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	484a      	ldr	r0, [pc, #296]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001a52:	f00c fcc1 	bl	800e3d8 <memset>
			memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4946      	ldr	r1, [pc, #280]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a60:	4846      	ldr	r0, [pc, #280]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001a62:	f00c fd5a 	bl	800e51a <memcpy>
			memset(myRxCmd.temp, '\0', pos + 1);
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4841      	ldr	r0, [pc, #260]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a72:	f00c fcb1 	bl	800e3d8 <memset>
			myRxCmd.cmdLen = pos + 1;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			pos = 0;
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			uartFlag = 1;
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
			printf(" ");
 8001a90:	2020      	movs	r0, #32
 8001a92:	f00c fb45 	bl	800e120 <putchar>
			break;
 8001a96:	e065      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
		case '\r':
			if(uartFlag)
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <HAL_UART_RxCpltCallback+0xcc>
			{
				// clear array
				if(myRxCmd.paramLen)
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001aa4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_UART_RxCpltCallback+0xac>
					memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001aae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4834      	ldr	r0, [pc, #208]	; (8001b88 <HAL_UART_RxCpltCallback+0x178>)
 8001ab8:	f00c fc8e 	bl	800e3d8 <memset>
				memcpy(myRxCmd.param, myRxCmd.temp, pos + 1);
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	492c      	ldr	r1, [pc, #176]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ac6:	4830      	ldr	r0, [pc, #192]	; (8001b88 <HAL_UART_RxCpltCallback+0x178>)
 8001ac8:	f00c fd27 	bl	800e51a <memcpy>
				myRxCmd.paramLen = pos + 1;
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ad6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001ada:	e01b      	b.n	8001b14 <HAL_UART_RxCpltCallback+0x104>
			}
			else
			{
				// clear array
				if(myRxCmd.cmdLen)
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ade:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_UART_RxCpltCallback+0xe6>
					memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ae8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	4822      	ldr	r0, [pc, #136]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001af2:	f00c fc71 	bl	800e3d8 <memset>
				memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	461a      	mov	r2, r3
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b00:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001b02:	f00c fd0a 	bl	800e51a <memcpy>
				myRxCmd.cmdLen = pos + 1;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			memset(myRxCmd.temp, '\0', pos + 1);
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b20:	f00c fc5a 	bl	800e3d8 <memset>
			pos = 0;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
			uartFlag = 0;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			/* Start execute command */
			cmdFlag = 1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_UART_RxCpltCallback+0x17c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
			printf("\r\n");
 8001b36:	4816      	ldr	r0, [pc, #88]	; (8001b90 <HAL_UART_RxCpltCallback+0x180>)
 8001b38:	f00c fb4e 	bl	800e1d8 <puts>
			break;
 8001b3c:	e012      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
		default:
			myRxCmd.temp[pos] = rxData;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001b46:	7819      	ldrb	r1, [r3, #0]
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b4a:	5499      	strb	r1, [r3, r2]
			pos++;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b56:	701a      	strb	r2, [r3, #0]
			printf("%c", rxData);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00c fadf 	bl	800e120 <putchar>
		}
	}
}
 8001b62:	e7ff      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	20002ab9 	.word	0x20002ab9
 8001b74:	200003bc 	.word	0x200003bc
 8001b78:	20002a70 	.word	0x20002a70
 8001b7c:	20002a8e 	.word	0x20002a8e
 8001b80:	20002ab8 	.word	0x20002ab8
 8001b84:	20002aba 	.word	0x20002aba
 8001b88:	20002a98 	.word	0x20002a98
 8001b8c:	20002abb 	.word	0x20002abb
 8001b90:	08011938 	.word	0x08011938

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	f5ad 5d21 	sub.w	sp, sp, #10304	; 0x2840
 8001b9a:	b08f      	sub	sp, #60	; 0x3c
 8001b9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9e:	f002 f9e7 	bl	8003f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba2:	f001 f9ff 	bl	8002fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba6:	f001 fc0d 	bl	80033c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001baa:	f001 fabf 	bl	800312c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bae:	f001 faf3 	bl	8003198 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001bb2:	f001 fbdd 	bl	8003370 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001bb6:	f006 f933 	bl	8007e20 <MX_FATFS_Init>
  MX_RTC_Init();
 8001bba:	f001 fa5d 	bl	8003078 <MX_RTC_Init>
  MX_TIM2_Init();
 8001bbe:	f001 fb3b 	bl	8003238 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bc2:	f001 fb87 	bl	80032d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001bc6:	48b6      	ldr	r0, [pc, #728]	; (8001ea0 <main+0x30c>)
 8001bc8:	f004 fc62 	bl	8006490 <HAL_TIM_Base_Start>
	/* Enabling interrupt receive again */
	HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxData,1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	49b5      	ldr	r1, [pc, #724]	; (8001ea4 <main+0x310>)
 8001bd0:	48b5      	ldr	r0, [pc, #724]	; (8001ea8 <main+0x314>)
 8001bd2:	f005 f9aa 	bl	8006f2a <HAL_UART_Receive_IT>
//	__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
	/* LoRa initialization */
	rfm95.DIO.DIO0 = STM32_DIO0;
 8001bd6:	4bb5      	ldr	r3, [pc, #724]	; (8001eac <main+0x318>)
 8001bd8:	4ab5      	ldr	r2, [pc, #724]	; (8001eb0 <main+0x31c>)
 8001bda:	621a      	str	r2, [r3, #32]
	rfm95.NRST = STM32_NRST;
 8001bdc:	4bb3      	ldr	r3, [pc, #716]	; (8001eac <main+0x318>)
 8001bde:	4ab5      	ldr	r2, [pc, #724]	; (8001eb4 <main+0x320>)
 8001be0:	61da      	str	r2, [r3, #28]
	rfm95.NSEL = STM32_NSEL;
 8001be2:	4bb2      	ldr	r3, [pc, #712]	; (8001eac <main+0x318>)
 8001be4:	4ab4      	ldr	r2, [pc, #720]	; (8001eb8 <main+0x324>)
 8001be6:	619a      	str	r2, [r3, #24]
	rfm95.DelayUs = STM32_DelayUs;
 8001be8:	4bb0      	ldr	r3, [pc, #704]	; (8001eac <main+0x318>)
 8001bea:	4ab4      	ldr	r2, [pc, #720]	; (8001ebc <main+0x328>)
 8001bec:	615a      	str	r2, [r3, #20]
	rfm95.SPI_Write = STM32_SPI_Write;
 8001bee:	4baf      	ldr	r3, [pc, #700]	; (8001eac <main+0x318>)
 8001bf0:	4ab3      	ldr	r2, [pc, #716]	; (8001ec0 <main+0x32c>)
 8001bf2:	601a      	str	r2, [r3, #0]
	rfm95.SPI_Read = STM32_SPI_Read;
 8001bf4:	4bad      	ldr	r3, [pc, #692]	; (8001eac <main+0x318>)
 8001bf6:	4ab3      	ldr	r2, [pc, #716]	; (8001ec4 <main+0x330>)
 8001bf8:	605a      	str	r2, [r3, #4]
	rfm95.SPI_WriteRead = STM32_SPI_WriteRead;
 8001bfa:	4bac      	ldr	r3, [pc, #688]	; (8001eac <main+0x318>)
 8001bfc:	4ab2      	ldr	r2, [pc, #712]	; (8001ec8 <main+0x334>)
 8001bfe:	609a      	str	r2, [r3, #8]
	rfm95.SPI_CheckState = STM32_SPI_CheckState;
 8001c00:	4baa      	ldr	r3, [pc, #680]	; (8001eac <main+0x318>)
 8001c02:	4ab2      	ldr	r2, [pc, #712]	; (8001ecc <main+0x338>)
 8001c04:	60da      	str	r2, [r3, #12]
	rfm95.spi_ok = (uint8_t)HAL_SPI_STATE_READY;
 8001c06:	4ba9      	ldr	r3, [pc, #676]	; (8001eac <main+0x318>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	741a      	strb	r2, [r3, #16]

	uint8_t ret = RFM95_LoRa_Init(&rfm95);
 8001c0c:	48a7      	ldr	r0, [pc, #668]	; (8001eac <main+0x318>)
 8001c0e:	f00b f815 	bl	800cc3c <RFM95_LoRa_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001c18:	f102 020e 	add.w	r2, r2, #14
 8001c1c:	7013      	strb	r3, [r2, #0]
	if(ret != RFM95_OK)
 8001c1e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001c22:	f103 030e 	add.w	r3, r3, #14
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <main+0xb2>
	{
	  printf("Init... fail!\r\n");
 8001c2c:	48a8      	ldr	r0, [pc, #672]	; (8001ed0 <main+0x33c>)
 8001c2e:	f00c fad3 	bl	800e1d8 <puts>
	  printf("Error code: %d\r\n", ret);
 8001c32:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001c36:	f103 030e 	add.w	r3, r3, #14
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	48a5      	ldr	r0, [pc, #660]	; (8001ed4 <main+0x340>)
 8001c40:	f00c fa5c 	bl	800e0fc <iprintf>
 8001c44:	e002      	b.n	8001c4c <main+0xb8>
	}
	else
	{
	  printf("Init... success!\r\n");
 8001c46:	48a4      	ldr	r0, [pc, #656]	; (8001ed8 <main+0x344>)
 8001c48:	f00c fac6 	bl	800e1d8 <puts>
	}
	RFM95_LoRa_setSyncWord(&rfm95, 0x34);
 8001c4c:	2134      	movs	r1, #52	; 0x34
 8001c4e:	4897      	ldr	r0, [pc, #604]	; (8001eac <main+0x318>)
 8001c50:	f00a ff14 	bl	800ca7c <RFM95_LoRa_setSyncWord>
	HAL_Delay(500);
 8001c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c58:	f002 f9fc 	bl	8004054 <HAL_Delay>
	/* Initialize the SD card, verify file creation, updating and deletion of file. */
	SD_init();
 8001c5c:	f001 fcc4 	bl	80035e8 <SD_init>
	HAL_Delay(500);
 8001c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c64:	f002 f9f6 	bl	8004054 <HAL_Delay>
	/* Display operating commands */
	Cmd_display();
 8001c68:	f001 fc6e 	bl	8003548 <Cmd_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cmdFlag)
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	; (8001edc <main+0x348>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0fa      	beq.n	8001c6c <main+0xd8>
	  {
		  if(strncmp("mk", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001c76:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <main+0x34c>)
 8001c78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4999      	ldr	r1, [pc, #612]	; (8001ee4 <main+0x350>)
 8001c80:	4899      	ldr	r0, [pc, #612]	; (8001ee8 <main+0x354>)
 8001c82:	f00c fbb1 	bl	800e3e8 <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d157      	bne.n	8001d3c <main+0x1a8>
		  {
			  if(myRxCmd.paramLen == 0)
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <main+0x34c>)
 8001c8e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <main+0x10a>
			  {
				  printf("File name is invalid !\r\n");
 8001c96:	4895      	ldr	r0, [pc, #596]	; (8001eec <main+0x358>)
 8001c98:	f00c fa9e 	bl	800e1d8 <puts>
 8001c9c:	e032      	b.n	8001d04 <main+0x170>
			  }
			  else
			  {
				  uint8_t filename[20];
				  memcpy(filename, myRxCmd.param, myRxCmd.paramLen);
 8001c9e:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <main+0x34c>)
 8001ca0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001caa:	f103 030c 	add.w	r3, r3, #12
 8001cae:	4990      	ldr	r1, [pc, #576]	; (8001ef0 <main+0x35c>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00c fc32 	bl	800e51a <memcpy>
				  /* Creating/Reading a file */
				  fresult = f_open(&file, (char*)filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001cb6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001cba:	f103 030c 	add.w	r3, r3, #12
 8001cbe:	2213      	movs	r2, #19
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	488c      	ldr	r0, [pc, #560]	; (8001ef4 <main+0x360>)
 8001cc4:	f008 fd6e 	bl	800a7a4 <f_open>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <main+0x364>)
 8001cce:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Create file %s successfully !\r\n", filename);
 8001cd0:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <main+0x364>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <main+0x154>
 8001cd8:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001cdc:	f103 030c 	add.w	r3, r3, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4886      	ldr	r0, [pc, #536]	; (8001efc <main+0x368>)
 8001ce4:	f00c fa0a 	bl	800e0fc <iprintf>
				  /* Close file */
				  fresult = f_close(&file);
 8001ce8:	4882      	ldr	r0, [pc, #520]	; (8001ef4 <main+0x360>)
 8001cea:	f009 fa98 	bl	800b21e <f_close>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <main+0x364>)
 8001cf4:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Close file !\r\n");
 8001cf6:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <main+0x364>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <main+0x170>
 8001cfe:	4880      	ldr	r0, [pc, #512]	; (8001f00 <main+0x36c>)
 8001d00:	f00c fa6a 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001d04:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <main+0x34c>)
 8001d06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4875      	ldr	r0, [pc, #468]	; (8001ee4 <main+0x350>)
 8001d10:	f00c fb62 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <main+0x34c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <main+0x34c>)
 8001d1e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001d22:	461a      	mov	r2, r3
 8001d24:	2100      	movs	r1, #0
 8001d26:	4872      	ldr	r0, [pc, #456]	; (8001ef0 <main+0x35c>)
 8001d28:	f00c fb56 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <main+0x34c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <main+0x348>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e797      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("del", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <main+0x34c>)
 8001d3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d42:	461a      	mov	r2, r3
 8001d44:	4967      	ldr	r1, [pc, #412]	; (8001ee4 <main+0x350>)
 8001d46:	486f      	ldr	r0, [pc, #444]	; (8001f04 <main+0x370>)
 8001d48:	f00c fb4e 	bl	800e3e8 <strncmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13c      	bne.n	8001dcc <main+0x238>
		  {
			  if(myRxCmd.paramLen == 0)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <main+0x34c>)
 8001d54:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <main+0x1d0>
			  {
				  printf("File name is invalid !\r\n");
 8001d5c:	4863      	ldr	r0, [pc, #396]	; (8001eec <main+0x358>)
 8001d5e:	f00c fa3b 	bl	800e1d8 <puts>
 8001d62:	e017      	b.n	8001d94 <main+0x200>
			  }
			  else
			  {
				  /* Remove files */
				  fresult = f_unlink((char*)myRxCmd.param);
 8001d64:	4862      	ldr	r0, [pc, #392]	; (8001ef0 <main+0x35c>)
 8001d66:	f009 fe33 	bl	800b9d0 <f_unlink>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <main+0x364>)
 8001d70:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK)
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <main+0x364>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d104      	bne.n	8001d84 <main+0x1f0>
					  printf("%s removed successfully !\r\n", myRxCmd.param);
 8001d7a:	495d      	ldr	r1, [pc, #372]	; (8001ef0 <main+0x35c>)
 8001d7c:	4862      	ldr	r0, [pc, #392]	; (8001f08 <main+0x374>)
 8001d7e:	f00c f9bd 	bl	800e0fc <iprintf>
 8001d82:	e007      	b.n	8001d94 <main+0x200>
				  else if(fresult == FR_NO_FILE)
 8001d84:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <main+0x364>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d103      	bne.n	8001d94 <main+0x200>
					  printf("%s is not found !\r\n", myRxCmd.param);
 8001d8c:	4958      	ldr	r1, [pc, #352]	; (8001ef0 <main+0x35c>)
 8001d8e:	485f      	ldr	r0, [pc, #380]	; (8001f0c <main+0x378>)
 8001d90:	f00c f9b4 	bl	800e0fc <iprintf>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001d94:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <main+0x34c>)
 8001d96:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4851      	ldr	r0, [pc, #324]	; (8001ee4 <main+0x350>)
 8001da0:	f00c fb1a 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <main+0x34c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <main+0x34c>)
 8001dae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001db2:	461a      	mov	r2, r3
 8001db4:	2100      	movs	r1, #0
 8001db6:	484e      	ldr	r0, [pc, #312]	; (8001ef0 <main+0x35c>)
 8001db8:	f00c fb0e 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <main+0x34c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001dc4:	4b45      	ldr	r3, [pc, #276]	; (8001edc <main+0x348>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e74f      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("read", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001dcc:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <main+0x34c>)
 8001dce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <main+0x350>)
 8001dd6:	484e      	ldr	r0, [pc, #312]	; (8001f10 <main+0x37c>)
 8001dd8:	f00c fb06 	bl	800e3e8 <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 809e 	bne.w	8001f20 <main+0x38c>
		  {
			  if(myRxCmd.paramLen == 0)
 8001de4:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <main+0x34c>)
 8001de6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <main+0x262>
			  {
				  printf("File name is invalid !\r\n");
 8001dee:	483f      	ldr	r0, [pc, #252]	; (8001eec <main+0x358>)
 8001df0:	f00c f9f2 	bl	800e1d8 <puts>
 8001df4:	e037      	b.n	8001e66 <main+0x2d2>
			  }
			  else
			  {
				  uint8_t readBuff[10240] = {0};
 8001df6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8001dfa:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00c fae4 	bl	800e3d8 <memset>
				  /* Open file to read */
				  fresult = f_open(&file, (char*)myRxCmd.param, FA_READ);
 8001e10:	2201      	movs	r2, #1
 8001e12:	4937      	ldr	r1, [pc, #220]	; (8001ef0 <main+0x35c>)
 8001e14:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <main+0x360>)
 8001e16:	f008 fcc5 	bl	800a7a4 <f_open>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <main+0x364>)
 8001e20:	701a      	strb	r2, [r3, #0]
				  /* Read string from the file */
				  f_read(&file, readBuff, f_size(&file), &br);
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <main+0x360>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f107 0120 	add.w	r1, r7, #32
 8001e2a:	3914      	subs	r1, #20
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <main+0x380>)
 8001e2e:	4831      	ldr	r0, [pc, #196]	; (8001ef4 <main+0x360>)
 8001e30:	f008 fe84 	bl	800ab3c <f_read>
				  printf("Read %s :\r\n", myRxCmd.param);
 8001e34:	492e      	ldr	r1, [pc, #184]	; (8001ef0 <main+0x35c>)
 8001e36:	4838      	ldr	r0, [pc, #224]	; (8001f18 <main+0x384>)
 8001e38:	f00c f960 	bl	800e0fc <iprintf>
				  printf("%s\r\n", readBuff);
 8001e3c:	f107 0320 	add.w	r3, r7, #32
 8001e40:	3b14      	subs	r3, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4835      	ldr	r0, [pc, #212]	; (8001f1c <main+0x388>)
 8001e46:	f00c f959 	bl	800e0fc <iprintf>
				  /* Close file */
				  fresult = f_close(&file);
 8001e4a:	482a      	ldr	r0, [pc, #168]	; (8001ef4 <main+0x360>)
 8001e4c:	f009 f9e7 	bl	800b21e <f_close>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <main+0x364>)
 8001e56:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Close file !\r\n");
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <main+0x364>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <main+0x2d2>
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <main+0x36c>)
 8001e62:	f00c f9b9 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <main+0x34c>)
 8001e68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <main+0x350>)
 8001e72:	f00c fab1 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <main+0x34c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <main+0x34c>)
 8001e80:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e84:	461a      	mov	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <main+0x35c>)
 8001e8a:	f00c faa5 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <main+0x34c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <main+0x348>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e6e6      	b.n	8001c6c <main+0xd8>
 8001e9e:	bf00      	nop
 8001ea0:	200002e4 	.word	0x200002e4
 8001ea4:	20002ab9 	.word	0x20002ab9
 8001ea8:	200003bc 	.word	0x200003bc
 8001eac:	20000404 	.word	0x20000404
 8001eb0:	08003845 	.word	0x08003845
 8001eb4:	08003865 	.word	0x08003865
 8001eb8:	08003889 	.word	0x08003889
 8001ebc:	080038ad 	.word	0x080038ad
 8001ec0:	080038dd 	.word	0x080038dd
 8001ec4:	08003909 	.word	0x08003909
 8001ec8:	08003935 	.word	0x08003935
 8001ecc:	080039a5 	.word	0x080039a5
 8001ed0:	0801193c 	.word	0x0801193c
 8001ed4:	0801194c 	.word	0x0801194c
 8001ed8:	08011960 	.word	0x08011960
 8001edc:	20002abb 	.word	0x20002abb
 8001ee0:	20002a70 	.word	0x20002a70
 8001ee4:	20002a8e 	.word	0x20002a8e
 8001ee8:	08011974 	.word	0x08011974
 8001eec:	08011978 	.word	0x08011978
 8001ef0:	20002a98 	.word	0x20002a98
 8001ef4:	200014c0 	.word	0x200014c0
 8001ef8:	200024f0 	.word	0x200024f0
 8001efc:	08011990 	.word	0x08011990
 8001f00:	080119b0 	.word	0x080119b0
 8001f04:	080119c0 	.word	0x080119c0
 8001f08:	080119c4 	.word	0x080119c4
 8001f0c:	080119e0 	.word	0x080119e0
 8001f10:	080119f4 	.word	0x080119f4
 8001f14:	200028f4 	.word	0x200028f4
 8001f18:	080119fc 	.word	0x080119fc
 8001f1c:	08011a08 	.word	0x08011a08
		  }
		  else if(strncmp("ls", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001f20:	4b95      	ldr	r3, [pc, #596]	; (8002178 <main+0x5e4>)
 8001f22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f26:	461a      	mov	r2, r3
 8001f28:	4994      	ldr	r1, [pc, #592]	; (800217c <main+0x5e8>)
 8001f2a:	4895      	ldr	r0, [pc, #596]	; (8002180 <main+0x5ec>)
 8001f2c:	f00c fa5c 	bl	800e3e8 <strncmp>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d126      	bne.n	8001f84 <main+0x3f0>
		  {
			  f_opendir(&dir, "/");
 8001f36:	4993      	ldr	r1, [pc, #588]	; (8002184 <main+0x5f0>)
 8001f38:	4893      	ldr	r0, [pc, #588]	; (8002188 <main+0x5f4>)
 8001f3a:	f009 fbbe 	bl	800b6ba <f_opendir>
			  do{
				  f_readdir(&dir, &fno);
 8001f3e:	4993      	ldr	r1, [pc, #588]	; (800218c <main+0x5f8>)
 8001f40:	4891      	ldr	r0, [pc, #580]	; (8002188 <main+0x5f4>)
 8001f42:	f009 fc53 	bl	800b7ec <f_readdir>
				  if(fno.fname[0] != 0)
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <main+0x5f8>)
 8001f48:	7d9b      	ldrb	r3, [r3, #22]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <main+0x3c2>
					  printf("File found: %s \r\n", fno.fname);
 8001f4e:	4990      	ldr	r1, [pc, #576]	; (8002190 <main+0x5fc>)
 8001f50:	4890      	ldr	r0, [pc, #576]	; (8002194 <main+0x600>)
 8001f52:	f00c f8d3 	bl	800e0fc <iprintf>
			  }while(fno.fname[0]);
 8001f56:	4b8d      	ldr	r3, [pc, #564]	; (800218c <main+0x5f8>)
 8001f58:	7d9b      	ldrb	r3, [r3, #22]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ef      	bne.n	8001f3e <main+0x3aa>
			  f_closedir(&dir);
 8001f5e:	488a      	ldr	r0, [pc, #552]	; (8002188 <main+0x5f4>)
 8001f60:	f009 fc1e 	bl	800b7a0 <f_closedir>
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001f64:	4b84      	ldr	r3, [pc, #528]	; (8002178 <main+0x5e4>)
 8001f66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4883      	ldr	r0, [pc, #524]	; (800217c <main+0x5e8>)
 8001f70:	f00c fa32 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8001f74:	4b80      	ldr	r3, [pc, #512]	; (8002178 <main+0x5e4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 8001f7c:	4b86      	ldr	r3, [pc, #536]	; (8002198 <main+0x604>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e673      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("rtc", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001f84:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <main+0x5e4>)
 8001f86:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	497b      	ldr	r1, [pc, #492]	; (800217c <main+0x5e8>)
 8001f8e:	4883      	ldr	r0, [pc, #524]	; (800219c <main+0x608>)
 8001f90:	f00c fa2a 	bl	800e3e8 <strncmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d154      	bne.n	8002044 <main+0x4b0>
		  {
			  if(strncmp("on", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8001f9a:	4b77      	ldr	r3, [pc, #476]	; (8002178 <main+0x5e4>)
 8001f9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	497f      	ldr	r1, [pc, #508]	; (80021a0 <main+0x60c>)
 8001fa4:	487f      	ldr	r0, [pc, #508]	; (80021a4 <main+0x610>)
 8001fa6:	f00c fa1f 	bl	800e3e8 <strncmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11e      	bne.n	8001fee <main+0x45a>
			  {
				  get_Date_Time();
 8001fb0:	f001 fc34 	bl	800381c <get_Date_Time>
				  printf("%02d-%02d-%04d\r\n", gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <main+0x614>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <main+0x614>)
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <main+0x614>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fc8:	4878      	ldr	r0, [pc, #480]	; (80021ac <main+0x618>)
 8001fca:	f00c f897 	bl	800e0fc <iprintf>
				  printf("%02d:%02d:%02d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001fce:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <main+0x61c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <main+0x61c>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <main+0x61c>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	4875      	ldr	r0, [pc, #468]	; (80021b4 <main+0x620>)
 8001fe0:	f00c f88c 	bl	800e0fc <iprintf>
				  HAL_Delay(5000);
 8001fe4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fe8:	f002 f834 	bl	8004054 <HAL_Delay>
 8001fec:	e63e      	b.n	8001c6c <main+0xd8>
			  }
			  else if(strncmp("off", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8001fee:	4b62      	ldr	r3, [pc, #392]	; (8002178 <main+0x5e4>)
 8001ff0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	496a      	ldr	r1, [pc, #424]	; (80021a0 <main+0x60c>)
 8001ff8:	486f      	ldr	r0, [pc, #444]	; (80021b8 <main+0x624>)
 8001ffa:	f00c f9f5 	bl	800e3e8 <strncmp>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11b      	bne.n	800203c <main+0x4a8>
			  {
				  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <main+0x5e4>)
 8002006:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800200a:	461a      	mov	r2, r3
 800200c:	2100      	movs	r1, #0
 800200e:	485b      	ldr	r0, [pc, #364]	; (800217c <main+0x5e8>)
 8002010:	f00c f9e2 	bl	800e3d8 <memset>
				  myRxCmd.cmdLen = 0;
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <main+0x5e4>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <main+0x5e4>)
 800201e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002022:	461a      	mov	r2, r3
 8002024:	2100      	movs	r1, #0
 8002026:	485e      	ldr	r0, [pc, #376]	; (80021a0 <main+0x60c>)
 8002028:	f00c f9d6 	bl	800e3d8 <memset>
				  myRxCmd.paramLen = 0;
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <main+0x5e4>)
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				  cmdFlag = 0;
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <main+0x604>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e617      	b.n	8001c6c <main+0xd8>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 800203c:	485f      	ldr	r0, [pc, #380]	; (80021bc <main+0x628>)
 800203e:	f00c f8cb 	bl	800e1d8 <puts>
 8002042:	e613      	b.n	8001c6c <main+0xd8>
			  }
		  }
		  else if(strncmp("ready", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <main+0x5e4>)
 8002046:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800204a:	461a      	mov	r2, r3
 800204c:	494b      	ldr	r1, [pc, #300]	; (800217c <main+0x5e8>)
 800204e:	485c      	ldr	r0, [pc, #368]	; (80021c0 <main+0x62c>)
 8002050:	f00c f9ca 	bl	800e3e8 <strncmp>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d133      	bne.n	80020c2 <main+0x52e>
		  {
			  ret = RFM95_LoRa_prepareReceive(&rfm95, true);
 800205a:	2101      	movs	r1, #1
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <main+0x630>)
 800205e:	f00a fc24 	bl	800c8aa <RFM95_LoRa_prepareReceive>
 8002062:	4603      	mov	r3, r0
 8002064:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002068:	f102 020e 	add.w	r2, r2, #14
 800206c:	7013      	strb	r3, [r2, #0]
			  if(ret != RFM95_OK)
 800206e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002072:	f103 030e 	add.w	r3, r3, #14
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <main+0x502>
			  {
				  printf("Rx init.. fail !\r\n");
 800207c:	4852      	ldr	r0, [pc, #328]	; (80021c8 <main+0x634>)
 800207e:	f00c f8ab 	bl	800e1d8 <puts>
				  printf("Error code: %d\r\n", ret);
 8002082:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002086:	f103 030e 	add.w	r3, r3, #14
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	484f      	ldr	r0, [pc, #316]	; (80021cc <main+0x638>)
 8002090:	f00c f834 	bl	800e0fc <iprintf>
 8002094:	e002      	b.n	800209c <main+0x508>
			  }
			  else
			  {
				  printf("Rx init.. success !\r\n");
 8002096:	484e      	ldr	r0, [pc, #312]	; (80021d0 <main+0x63c>)
 8002098:	f00c f89e 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <main+0x5e4>)
 800209e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	4835      	ldr	r0, [pc, #212]	; (800217c <main+0x5e8>)
 80020a8:	f00c f996 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <main+0x5e4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <main+0x604>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
			  /* able to initialize timer interrupt once. */
			  timerStartFlag = 1;
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <main+0x640>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e5d4      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("stop", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <main+0x5e4>)
 80020c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020c8:	461a      	mov	r2, r3
 80020ca:	492c      	ldr	r1, [pc, #176]	; (800217c <main+0x5e8>)
 80020cc:	4842      	ldr	r0, [pc, #264]	; (80021d8 <main+0x644>)
 80020ce:	f00c f98b 	bl	800e3e8 <strncmp>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13a      	bne.n	800214e <main+0x5ba>
		  {
			  ret = RFM95_LoRa_setOpMode(&rfm95, SLEEP_MODE);
 80020d8:	2100      	movs	r1, #0
 80020da:	483a      	ldr	r0, [pc, #232]	; (80021c4 <main+0x630>)
 80020dc:	f009 fefa 	bl	800bed4 <RFM95_LoRa_setOpMode>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80020e6:	f102 020e 	add.w	r2, r2, #14
 80020ea:	7013      	strb	r3, [r2, #0]
			  if(ret == RFM95_OK)
 80020ec:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80020f0:	f103 030e 	add.w	r3, r3, #14
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <main+0x56c>
				  printf("Exit rx mode !\r\n");
 80020fa:	4838      	ldr	r0, [pc, #224]	; (80021dc <main+0x648>)
 80020fc:	f00c f86c 	bl	800e1d8 <puts>
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <main+0x5e4>)
 8002102:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002106:	461a      	mov	r2, r3
 8002108:	2100      	movs	r1, #0
 800210a:	481c      	ldr	r0, [pc, #112]	; (800217c <main+0x5e8>)
 800210c:	f00c f964 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <main+0x5e4>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <main+0x604>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
			  id = 0;
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <main+0x64c>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
			  /* restart the timer */
			  htim2.Instance->CNT &= 0x0;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <main+0x650>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <main+0x650>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Stop_IT(&htim2);
 8002132:	482c      	ldr	r0, [pc, #176]	; (80021e4 <main+0x650>)
 8002134:	f004 fa68 	bl	8006608 <HAL_TIM_Base_Stop_IT>
			  htim3.Instance->CNT &= 0x0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <main+0x654>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <main+0x654>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Stop_IT(&htim3);
 8002146:	4828      	ldr	r0, [pc, #160]	; (80021e8 <main+0x654>)
 8002148:	f004 fa5e 	bl	8006608 <HAL_TIM_Base_Stop_IT>
 800214c:	e58e      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("rx", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <main+0x5e4>)
 8002150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002154:	461a      	mov	r2, r3
 8002156:	4909      	ldr	r1, [pc, #36]	; (800217c <main+0x5e8>)
 8002158:	4824      	ldr	r0, [pc, #144]	; (80021ec <main+0x658>)
 800215a:	f00c f945 	bl	800e3e8 <strncmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 82db 	bne.w	800271c <main+0xb88>
		  {
			  if(myRxCmd.paramLen == 0)
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <main+0x5e4>)
 8002168:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13f      	bne.n	80021f0 <main+0x65c>
			  {
				  printf("Invalid parameter !\r\n");
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <main+0x628>)
 8002172:	f00c f831 	bl	800e1d8 <puts>
 8002176:	e579      	b.n	8001c6c <main+0xd8>
 8002178:	20002a70 	.word	0x20002a70
 800217c:	20002a8e 	.word	0x20002a8e
 8002180:	08011a10 	.word	0x08011a10
 8002184:	08011a14 	.word	0x08011a14
 8002188:	20002908 	.word	0x20002908
 800218c:	2000293c 	.word	0x2000293c
 8002190:	20002952 	.word	0x20002952
 8002194:	08011a18 	.word	0x08011a18
 8002198:	20002abb 	.word	0x20002abb
 800219c:	08011a2c 	.word	0x08011a2c
 80021a0:	20002a98 	.word	0x20002a98
 80021a4:	08011a30 	.word	0x08011a30
 80021a8:	20002a54 	.word	0x20002a54
 80021ac:	08011a34 	.word	0x08011a34
 80021b0:	20002a58 	.word	0x20002a58
 80021b4:	08011a48 	.word	0x08011a48
 80021b8:	08011a5c 	.word	0x08011a5c
 80021bc:	08011a60 	.word	0x08011a60
 80021c0:	08011a78 	.word	0x08011a78
 80021c4:	20000404 	.word	0x20000404
 80021c8:	08011a80 	.word	0x08011a80
 80021cc:	0801194c 	.word	0x0801194c
 80021d0:	08011a94 	.word	0x08011a94
 80021d4:	20002a6c 	.word	0x20002a6c
 80021d8:	08011aac 	.word	0x08011aac
 80021dc:	08011ab4 	.word	0x08011ab4
 80021e0:	20000484 	.word	0x20000484
 80021e4:	2000032c 	.word	0x2000032c
 80021e8:	20000374 	.word	0x20000374
 80021ec:	08011ac4 	.word	0x08011ac4
			  }
			  else
			  {
				  /* Timer interrupt and RTC time recorder startup to alignment time */
				  if(timerStartFlag)
 80021f0:	4bab      	ldr	r3, [pc, #684]	; (80024a0 <main+0x90c>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d04b      	beq.n	8002290 <main+0x6fc>
				  {
					  /* restart the timer */
					  htim2.Instance->CNT &= 0x0;
 80021f8:	4baa      	ldr	r3, [pc, #680]	; (80024a4 <main+0x910>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4ba9      	ldr	r3, [pc, #676]	; (80024a4 <main+0x910>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim2);
 8002206:	48a7      	ldr	r0, [pc, #668]	; (80024a4 <main+0x910>)
 8002208:	f004 f99c 	bl	8006544 <HAL_TIM_Base_Start_IT>
					  /* initialize RTC to 00:00 */
					  init_Date_Time();
 800220c:	f001 fae6 	bl	80037dc <init_Date_Time>
					  /* According to the parameter, define counter period value (AutoReload Register). */
					  uint8_t row,col; // row: cr, column: sf
					  row = (rfm95.Settings.LoRa.codingRate >> 1) - 1;
 8002210:	4ba5      	ldr	r3, [pc, #660]	; (80024a8 <main+0x914>)
 8002212:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002220:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8002224:	7013      	strb	r3, [r2, #0]
					  col = rfm95.Settings.LoRa.spreadingFactor - 7;
 8002226:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <main+0x914>)
 8002228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800222c:	3b07      	subs	r3, #7
 800222e:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002232:	f102 0229 	add.w	r2, r2, #41	; 0x29
 8002236:	7013      	strb	r3, [r2, #0]
					  printf("Matrix[%d][%d]\r\n", row, col);
 8002238:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800223c:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002246:	f102 0229 	add.w	r2, r2, #41	; 0x29
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	4897      	ldr	r0, [pc, #604]	; (80024ac <main+0x918>)
 8002250:	f00b ff54 	bl	800e0fc <iprintf>
					  htim3.Instance->ARR = cr_sf_array[row][col] * 10 - 1;
 8002254:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002258:	f103 032a 	add.w	r3, r3, #42	; 0x2a
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002262:	f103 0329 	add.w	r3, r3, #41	; 0x29
 8002266:	7819      	ldrb	r1, [r3, #0]
 8002268:	4891      	ldr	r0, [pc, #580]	; (80024b0 <main+0x91c>)
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	440b      	add	r3, r1
 8002274:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	461a      	mov	r2, r3
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <main+0x920>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3a01      	subs	r2, #1
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
					  timerStartFlag = 0;
 800228a:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <main+0x90c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
				  }
				  /* If it exceeded threshold, triggering Timer interrupt */
				  if(timer2Flag | timer3Flag)
 8002290:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <main+0x924>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b89      	ldr	r3, [pc, #548]	; (80024bc <main+0x928>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 80af 	beq.w	8002400 <main+0x86c>
				  {
					  uint8_t buff[50] = {0};
 80022a2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80022a6:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	3304      	adds	r3, #4
 80022b0:	222e      	movs	r2, #46	; 0x2e
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00c f88f 	bl	800e3d8 <memset>
					  /* Receive data fail */
					  /* Update time */
					  get_Date_Time();
 80022ba:	f001 faaf 	bl	800381c <get_Date_Time>
					  printf("Rx didn't receive the predicted signal !\r\n");
 80022be:	4880      	ldr	r0, [pc, #512]	; (80024c0 <main+0x92c>)
 80022c0:	f00b ff8a 	bl	800e1d8 <puts>
					  /* id, status, mm:ss.ooo */
					  int milisec = (1.0f - (float)gTime.SubSeconds / (float)gTime.SecondFraction) * 1000;
 80022c4:	4b7f      	ldr	r3, [pc, #508]	; (80024c4 <main+0x930>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d0:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <main+0x930>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	ee07 3a90 	vmov	s15, r3
 80022d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80024c8 <main+0x934>
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f4:	ee17 3a90 	vmov	r3, s15
 80022f8:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80022fc:	f102 021c 	add.w	r2, r2, #28
 8002300:	6013      	str	r3, [r2, #0]
					  if(milisec >= 1000) milisec = 999;
 8002302:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002306:	f103 031c 	add.w	r3, r3, #28
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002310:	db06      	blt.n	8002320 <main+0x78c>
 8002312:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002316:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800231a:	f102 021c 	add.w	r2, r2, #28
 800231e:	6013      	str	r3, [r2, #0]
					  sprintf((char*)buff, "%d,%d,%02d:%02d.%03d\n", id++, -1, gTime.Minutes, gTime.Seconds, milisec);
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <main+0x938>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	1c53      	adds	r3, r2, #1
 8002326:	4969      	ldr	r1, [pc, #420]	; (80024cc <main+0x938>)
 8002328:	600b      	str	r3, [r1, #0]
 800232a:	4b66      	ldr	r3, [pc, #408]	; (80024c4 <main+0x930>)
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	4619      	mov	r1, r3
 8002330:	4b64      	ldr	r3, [pc, #400]	; (80024c4 <main+0x930>)
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	461c      	mov	r4, r3
 8002336:	f107 0020 	add.w	r0, r7, #32
 800233a:	3814      	subs	r0, #20
 800233c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002340:	f103 031c 	add.w	r3, r3, #28
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	9401      	str	r4, [sp, #4]
 800234a:	9100      	str	r1, [sp, #0]
 800234c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002350:	495f      	ldr	r1, [pc, #380]	; (80024d0 <main+0x93c>)
 8002352:	f00b ff49 	bl	800e1e8 <siprintf>
					  printf("Current time: %02d:%02d.%03d \r\n", gTime.Minutes, gTime.Seconds, milisec);
 8002356:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <main+0x930>)
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	4619      	mov	r1, r3
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <main+0x930>)
 800235e:	789b      	ldrb	r3, [r3, #2]
 8002360:	461a      	mov	r2, r3
 8002362:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002366:	f103 031c 	add.w	r3, r3, #28
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4859      	ldr	r0, [pc, #356]	; (80024d4 <main+0x940>)
 800236e:	f00b fec5 	bl	800e0fc <iprintf>
					  /* Updating an existing file */
					  fresult = f_open(&file, (char*)myRxCmd.param, FA_OPEN_ALWAYS | FA_WRITE);
 8002372:	2212      	movs	r2, #18
 8002374:	4958      	ldr	r1, [pc, #352]	; (80024d8 <main+0x944>)
 8002376:	4859      	ldr	r0, [pc, #356]	; (80024dc <main+0x948>)
 8002378:	f008 fa14 	bl	800a7a4 <f_open>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4b57      	ldr	r3, [pc, #348]	; (80024e0 <main+0x94c>)
 8002382:	701a      	strb	r2, [r3, #0]
					  if(fresult == FR_OK) printf("%s opened successfully !\r\n", myRxCmd.param);
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <main+0x94c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <main+0x800>
 800238c:	4952      	ldr	r1, [pc, #328]	; (80024d8 <main+0x944>)
 800238e:	4855      	ldr	r0, [pc, #340]	; (80024e4 <main+0x950>)
 8002390:	f00b feb4 	bl	800e0fc <iprintf>
					  /* Move to offset to the end to the file */
					  fresult = f_lseek(&file, f_size(&file));
 8002394:	4b51      	ldr	r3, [pc, #324]	; (80024dc <main+0x948>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4619      	mov	r1, r3
 800239a:	4850      	ldr	r0, [pc, #320]	; (80024dc <main+0x948>)
 800239c:	f008 ff69 	bl	800b272 <f_lseek>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b4e      	ldr	r3, [pc, #312]	; (80024e0 <main+0x94c>)
 80023a6:	701a      	strb	r2, [r3, #0]
					  /* Writing text */
					  fresult = f_puts((char*)buff, &file);
 80023a8:	f107 0320 	add.w	r3, r7, #32
 80023ac:	3b14      	subs	r3, #20
 80023ae:	494b      	ldr	r1, [pc, #300]	; (80024dc <main+0x948>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f009 fc2f 	bl	800bc14 <f_puts>
 80023b6:	4603      	mov	r3, r0
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <main+0x94c>)
 80023bc:	701a      	strb	r2, [r3, #0]
					  /* Close file */
					  fresult = f_close(&file);
 80023be:	4847      	ldr	r0, [pc, #284]	; (80024dc <main+0x948>)
 80023c0:	f008 ff2d 	bl	800b21e <f_close>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <main+0x94c>)
 80023ca:	701a      	strb	r2, [r3, #0]
					  if(fresult == FR_OK) printf("Close file !\r\n");
 80023cc:	4b44      	ldr	r3, [pc, #272]	; (80024e0 <main+0x94c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <main+0x846>
 80023d4:	4844      	ldr	r0, [pc, #272]	; (80024e8 <main+0x954>)
 80023d6:	f00b feff 	bl	800e1d8 <puts>

					  timer2Flag = 0;
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <main+0x924>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
					  HAL_TIM_Base_Stop_IT(&htim2);
 80023e0:	4830      	ldr	r0, [pc, #192]	; (80024a4 <main+0x910>)
 80023e2:	f004 f911 	bl	8006608 <HAL_TIM_Base_Stop_IT>
					  timer3Flag = 0;
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <main+0x928>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]

					  htim3.Instance->CNT &= 0x0;
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <main+0x920>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <main+0x920>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim3);
 80023fa:	482e      	ldr	r0, [pc, #184]	; (80024b4 <main+0x920>)
 80023fc:	f004 f8a2 	bl	8006544 <HAL_TIM_Base_Start_IT>
				  }
				  // DIO0 interrupt
				  if(rxFlag)
 8002400:	4b3a      	ldr	r3, [pc, #232]	; (80024ec <main+0x958>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f43f ac31 	beq.w	8001c6c <main+0xd8>
				  {
					  /* Refresh Timer2 Interrupt */
					  htim2.Instance->CNT &= 0x0;
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <main+0x910>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <main+0x910>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim2);
 8002418:	4822      	ldr	r0, [pc, #136]	; (80024a4 <main+0x910>)
 800241a:	f004 f893 	bl	8006544 <HAL_TIM_Base_Start_IT>
					  /* Stop Timer3 Interrupt */
					  htim3.Instance->CNT &= 0x0;
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <main+0x920>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <main+0x920>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Stop_IT(&htim3);
 800242c:	4821      	ldr	r0, [pc, #132]	; (80024b4 <main+0x920>)
 800242e:	f004 f8eb 	bl	8006608 <HAL_TIM_Base_Stop_IT>

					  ret = RFM95_LoRa_receive(&rfm95, rxBuff, 16);
 8002432:	2210      	movs	r2, #16
 8002434:	492e      	ldr	r1, [pc, #184]	; (80024f0 <main+0x95c>)
 8002436:	481c      	ldr	r0, [pc, #112]	; (80024a8 <main+0x914>)
 8002438:	f00a faaa 	bl	800c990 <RFM95_LoRa_receive>
 800243c:	4603      	mov	r3, r0
 800243e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002442:	f102 020e 	add.w	r2, r2, #14
 8002446:	7013      	strb	r3, [r2, #0]
					  if(ret != RFM95_ERR_RX_FAIL)
 8002448:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800244c:	f103 030e 	add.w	r3, r3, #14
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b2b      	cmp	r3, #43	; 0x2b
 8002454:	f000 8151 	beq.w	80026fa <main+0xb66>
					  {
						  int8_t crc = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800245e:	f102 021b 	add.w	r2, r2, #27
 8002462:	7013      	strb	r3, [r2, #0]
						  uint8_t buff[50] = {0};
 8002464:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8002468:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	3304      	adds	r3, #4
 8002472:	222e      	movs	r2, #46	; 0x2e
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f00b ffae 	bl	800e3d8 <memset>
						  if(ret == RFM95_ERR_RX_PAYLOAD_CRC)
 800247c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002480:	f103 030e 	add.w	r3, r3, #14
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b29      	cmp	r3, #41	; 0x29
 8002488:	d136      	bne.n	80024f8 <main+0x964>
						  {
							  crc = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002490:	f102 021b 	add.w	r2, r2, #27
 8002494:	7013      	strb	r3, [r2, #0]
							  printf("Rx.. crc error !\r\n");
 8002496:	4817      	ldr	r0, [pc, #92]	; (80024f4 <main+0x960>)
 8002498:	f00b fe9e 	bl	800e1d8 <puts>
 800249c:	e03c      	b.n	8002518 <main+0x984>
 800249e:	bf00      	nop
 80024a0:	20002a6c 	.word	0x20002a6c
 80024a4:	2000032c 	.word	0x2000032c
 80024a8:	20000404 	.word	0x20000404
 80024ac:	08011ac8 	.word	0x08011ac8
 80024b0:	20000004 	.word	0x20000004
 80024b4:	20000374 	.word	0x20000374
 80024b8:	20002a6d 	.word	0x20002a6d
 80024bc:	20002a6e 	.word	0x20002a6e
 80024c0:	08011adc 	.word	0x08011adc
 80024c4:	20002a58 	.word	0x20002a58
 80024c8:	447a0000 	.word	0x447a0000
 80024cc:	20000484 	.word	0x20000484
 80024d0:	08011b08 	.word	0x08011b08
 80024d4:	08011b20 	.word	0x08011b20
 80024d8:	20002a98 	.word	0x20002a98
 80024dc:	200014c0 	.word	0x200014c0
 80024e0:	200024f0 	.word	0x200024f0
 80024e4:	08011b40 	.word	0x08011b40
 80024e8:	080119b0 	.word	0x080119b0
 80024ec:	20000471 	.word	0x20000471
 80024f0:	20000474 	.word	0x20000474
 80024f4:	08011b5c 	.word	0x08011b5c
						  }
						  else if(ret == RFM95_OK)
 80024f8:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80024fc:	f103 030e 	add.w	r3, r3, #14
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d108      	bne.n	8002518 <main+0x984>
						  {
							  crc = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800250c:	f102 021b 	add.w	r2, r2, #27
 8002510:	7013      	strb	r3, [r2, #0]
							  printf("Rx.. success!\r\n");
 8002512:	48b0      	ldr	r0, [pc, #704]	; (80027d4 <main+0xc40>)
 8002514:	f00b fe60 	bl	800e1d8 <puts>
						  }
						  int16_t rssi = RFM95_getPcktRSSI(&rfm95);
 8002518:	48af      	ldr	r0, [pc, #700]	; (80027d8 <main+0xc44>)
 800251a:	f00a faef 	bl	800cafc <RFM95_getPcktRSSI>
 800251e:	4603      	mov	r3, r0
 8002520:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002524:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8002528:	8013      	strh	r3, [r2, #0]
						  float snr = RFM95_getPcktSNR(&rfm95);
 800252a:	48ab      	ldr	r0, [pc, #684]	; (80027d8 <main+0xc44>)
 800252c:	f00a fabc 	bl	800caa8 <RFM95_getPcktSNR>
 8002530:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002534:	f103 0320 	add.w	r3, r3, #32
 8002538:	ed83 0a00 	vstr	s0, [r3]
						  printf("RSSI: %d, SNR: %f\r\n", rssi, snr);
 800253c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002540:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8002544:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002548:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800254c:	f103 0320 	add.w	r3, r3, #32
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4621      	mov	r1, r4
 800255c:	489f      	ldr	r0, [pc, #636]	; (80027dc <main+0xc48>)
 800255e:	f00b fdcd 	bl	800e0fc <iprintf>
						  for(int i = 0; i<16;i++)
 8002562:	2300      	movs	r3, #0
 8002564:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002568:	f102 0214 	add.w	r2, r2, #20
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	e016      	b.n	800259e <main+0xa0a>
						  {
							  printf("%02x ", rxBuff[i]);
 8002570:	4a9b      	ldr	r2, [pc, #620]	; (80027e0 <main+0xc4c>)
 8002572:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002576:	f103 0314 	add.w	r3, r3, #20
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4413      	add	r3, r2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4898      	ldr	r0, [pc, #608]	; (80027e4 <main+0xc50>)
 8002584:	f00b fdba 	bl	800e0fc <iprintf>
						  for(int i = 0; i<16;i++)
 8002588:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800258c:	f103 0314 	add.w	r3, r3, #20
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002598:	f102 0214 	add.w	r2, r2, #20
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80025a2:	f103 0314 	add.w	r3, r3, #20
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	dde1      	ble.n	8002570 <main+0x9dc>
						  }
						  printf("\r\n");
 80025ac:	488e      	ldr	r0, [pc, #568]	; (80027e8 <main+0xc54>)
 80025ae:	f00b fe13 	bl	800e1d8 <puts>

						  /* Update time */
						  get_Date_Time();
 80025b2:	f001 f933 	bl	800381c <get_Date_Time>
						  /* id, status, mm:ss.ooo */
						  int milisec = (1.0f - (float)gTime.SubSeconds / (float)gTime.SecondFraction) * 1000;
 80025b6:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <main+0xc58>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c2:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <main+0xc58>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025da:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80027f0 <main+0xc5c>
 80025de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e6:	ee17 3a90 	vmov	r3, s15
 80025ea:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80025ee:	f102 0210 	add.w	r2, r2, #16
 80025f2:	6013      	str	r3, [r2, #0]
						  if(milisec >= 1000) milisec = 999;
 80025f4:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80025f8:	f103 0310 	add.w	r3, r3, #16
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	db06      	blt.n	8002612 <main+0xa7e>
 8002604:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002608:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800260c:	f102 0210 	add.w	r2, r2, #16
 8002610:	6013      	str	r3, [r2, #0]
						  sprintf((char*)buff, "%d,%d,%02d:%02d.%03d,%d,%.2f\n", id++, crc, gTime.Minutes, gTime.Seconds, milisec, rssi, snr);
 8002612:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <main+0xc60>)
 8002614:	681c      	ldr	r4, [r3, #0]
 8002616:	1c63      	adds	r3, r4, #1
 8002618:	4a76      	ldr	r2, [pc, #472]	; (80027f4 <main+0xc60>)
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002620:	f103 031b 	add.w	r3, r3, #27
 8002624:	f993 6000 	ldrsb.w	r6, [r3]
 8002628:	4b70      	ldr	r3, [pc, #448]	; (80027ec <main+0xc58>)
 800262a:	785b      	ldrb	r3, [r3, #1]
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <main+0xc58>)
 8002630:	789b      	ldrb	r3, [r3, #2]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	f507 5120 	add.w	r1, r7, #10240	; 0x2800
 8002638:	f101 0126 	add.w	r1, r1, #38	; 0x26
 800263c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8002640:	f507 5120 	add.w	r1, r7, #10240	; 0x2800
 8002644:	f101 0120 	add.w	r1, r1, #32
 8002648:	6808      	ldr	r0, [r1, #0]
 800264a:	f7fd ff85 	bl	8000558 <__aeabi_f2d>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	f107 0020 	add.w	r0, r7, #32
 8002656:	3814      	subs	r0, #20
 8002658:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800265c:	9503      	str	r5, [sp, #12]
 800265e:	f507 5121 	add.w	r1, r7, #10304	; 0x2840
 8002662:	f101 0110 	add.w	r1, r1, #16
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	9201      	str	r2, [sp, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	4633      	mov	r3, r6
 8002674:	4622      	mov	r2, r4
 8002676:	4960      	ldr	r1, [pc, #384]	; (80027f8 <main+0xc64>)
 8002678:	f00b fdb6 	bl	800e1e8 <siprintf>
						  printf("Current time: %02d:%02d.%03d \r\n", gTime.Minutes, gTime.Seconds, milisec);
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <main+0xc58>)
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	4619      	mov	r1, r3
 8002682:	4b5a      	ldr	r3, [pc, #360]	; (80027ec <main+0xc58>)
 8002684:	789b      	ldrb	r3, [r3, #2]
 8002686:	461a      	mov	r2, r3
 8002688:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800268c:	f103 0310 	add.w	r3, r3, #16
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	485a      	ldr	r0, [pc, #360]	; (80027fc <main+0xc68>)
 8002694:	f00b fd32 	bl	800e0fc <iprintf>
						  /* Updating an existing file */
						  fresult = f_open(&file, (char*)myRxCmd.param, FA_OPEN_ALWAYS | FA_WRITE);
 8002698:	2212      	movs	r2, #18
 800269a:	4959      	ldr	r1, [pc, #356]	; (8002800 <main+0xc6c>)
 800269c:	4859      	ldr	r0, [pc, #356]	; (8002804 <main+0xc70>)
 800269e:	f008 f881 	bl	800a7a4 <f_open>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b58      	ldr	r3, [pc, #352]	; (8002808 <main+0xc74>)
 80026a8:	701a      	strb	r2, [r3, #0]
						  if(fresult == FR_OK) printf("%s opened successfully !\r\n", myRxCmd.param);
 80026aa:	4b57      	ldr	r3, [pc, #348]	; (8002808 <main+0xc74>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <main+0xb26>
 80026b2:	4953      	ldr	r1, [pc, #332]	; (8002800 <main+0xc6c>)
 80026b4:	4855      	ldr	r0, [pc, #340]	; (800280c <main+0xc78>)
 80026b6:	f00b fd21 	bl	800e0fc <iprintf>
						  /* Move to offset to the end to the file */
						  fresult = f_lseek(&file, f_size(&file));
 80026ba:	4b52      	ldr	r3, [pc, #328]	; (8002804 <main+0xc70>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4619      	mov	r1, r3
 80026c0:	4850      	ldr	r0, [pc, #320]	; (8002804 <main+0xc70>)
 80026c2:	f008 fdd6 	bl	800b272 <f_lseek>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <main+0xc74>)
 80026cc:	701a      	strb	r2, [r3, #0]
						  /* Writing text */
						  fresult = f_puts((char*)buff, &file);
 80026ce:	f107 0320 	add.w	r3, r7, #32
 80026d2:	3b14      	subs	r3, #20
 80026d4:	494b      	ldr	r1, [pc, #300]	; (8002804 <main+0xc70>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f009 fa9c 	bl	800bc14 <f_puts>
 80026dc:	4603      	mov	r3, r0
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	4b49      	ldr	r3, [pc, #292]	; (8002808 <main+0xc74>)
 80026e2:	701a      	strb	r2, [r3, #0]
						  /* Close file */
						  f_close(&file);
 80026e4:	4847      	ldr	r0, [pc, #284]	; (8002804 <main+0xc70>)
 80026e6:	f008 fd9a 	bl	800b21e <f_close>
						  if(fresult == FR_OK) printf("Close file !\r\n");
 80026ea:	4b47      	ldr	r3, [pc, #284]	; (8002808 <main+0xc74>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10f      	bne.n	8002712 <main+0xb7e>
 80026f2:	4847      	ldr	r0, [pc, #284]	; (8002810 <main+0xc7c>)
 80026f4:	f00b fd70 	bl	800e1d8 <puts>
 80026f8:	e00b      	b.n	8002712 <main+0xb7e>
					  }
					  else
					  {
						  printf("Rx.. fail!\r\n");
 80026fa:	4846      	ldr	r0, [pc, #280]	; (8002814 <main+0xc80>)
 80026fc:	f00b fd6c 	bl	800e1d8 <puts>
						  printf("ERROR CODE: %d\r\n", ret);
 8002700:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002704:	f103 030e 	add.w	r3, r3, #14
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4842      	ldr	r0, [pc, #264]	; (8002818 <main+0xc84>)
 800270e:	f00b fcf5 	bl	800e0fc <iprintf>
					  }
					  rxFlag = false;
 8002712:	4b42      	ldr	r3, [pc, #264]	; (800281c <main+0xc88>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	f7ff baa8 	b.w	8001c6c <main+0xd8>
				  }
			  }
		  }
		  else if(strncmp("sf", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 800271c:	4b40      	ldr	r3, [pc, #256]	; (8002820 <main+0xc8c>)
 800271e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002722:	461a      	mov	r2, r3
 8002724:	493f      	ldr	r1, [pc, #252]	; (8002824 <main+0xc90>)
 8002726:	4840      	ldr	r0, [pc, #256]	; (8002828 <main+0xc94>)
 8002728:	f00b fe5e 	bl	800e3e8 <strncmp>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	f040 80a4 	bne.w	800287c <main+0xce8>
		  {
			  int sf = atoi((char*)myRxCmd.param);
 8002734:	4832      	ldr	r0, [pc, #200]	; (8002800 <main+0xc6c>)
 8002736:	f00a fc5b 	bl	800cff0 <atoi>
 800273a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800273e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002742:	6018      	str	r0, [r3, #0]
			  if(sf >= 7 && sf <= 12 )
 8002744:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002748:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b06      	cmp	r3, #6
 8002750:	dd74      	ble.n	800283c <main+0xca8>
 8002752:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002756:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b0c      	cmp	r3, #12
 800275e:	dc6d      	bgt.n	800283c <main+0xca8>
			  {
				  uint8_t ret;
				  ret = RFM95_LoRa_setSpreadingFactor(&rfm95, sf);
 8002760:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002764:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4619      	mov	r1, r3
 800276e:	481a      	ldr	r0, [pc, #104]	; (80027d8 <main+0xc44>)
 8002770:	f009 fe0f 	bl	800c392 <RFM95_LoRa_setSpreadingFactor>
 8002774:	4603      	mov	r3, r0
 8002776:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800277a:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 800277e:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002780:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002784:	f103 032b 	add.w	r3, r3, #43	; 0x2b
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <main+0xc0e>
 800278e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002792:	f103 032b 	add.w	r3, r3, #43	; 0x2b
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	481f      	ldr	r0, [pc, #124]	; (8002818 <main+0xc84>)
 800279c:	f00b fcae 	bl	800e0fc <iprintf>
 80027a0:	e007      	b.n	80027b2 <main+0xc1e>
				  else printf("SF %d is set.\r\n", sf);
 80027a2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80027a6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027aa:	6819      	ldr	r1, [r3, #0]
 80027ac:	481f      	ldr	r0, [pc, #124]	; (800282c <main+0xc98>)
 80027ae:	f00b fca5 	bl	800e0fc <iprintf>
				  if(sf > 10)
 80027b2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80027b6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b0a      	cmp	r3, #10
 80027be:	dd04      	ble.n	80027ca <main+0xc36>
				  {
					  htim2.Instance->ARR = 5000000-1;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <main+0xc9c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <main+0xca0>)
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c
			  {
 80027c8:	e03b      	b.n	8002842 <main+0xcae>
				  }
				  else
					  htim2.Instance->ARR = 3000000-1;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <main+0xc9c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <main+0xca4>)
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
			  {
 80027d2:	e036      	b.n	8002842 <main+0xcae>
 80027d4:	08011b70 	.word	0x08011b70
 80027d8:	20000404 	.word	0x20000404
 80027dc:	08011b80 	.word	0x08011b80
 80027e0:	20000474 	.word	0x20000474
 80027e4:	08011b94 	.word	0x08011b94
 80027e8:	08011938 	.word	0x08011938
 80027ec:	20002a58 	.word	0x20002a58
 80027f0:	447a0000 	.word	0x447a0000
 80027f4:	20000484 	.word	0x20000484
 80027f8:	08011b9c 	.word	0x08011b9c
 80027fc:	08011b20 	.word	0x08011b20
 8002800:	20002a98 	.word	0x20002a98
 8002804:	200014c0 	.word	0x200014c0
 8002808:	200024f0 	.word	0x200024f0
 800280c:	08011b40 	.word	0x08011b40
 8002810:	080119b0 	.word	0x080119b0
 8002814:	08011bbc 	.word	0x08011bbc
 8002818:	08011bc8 	.word	0x08011bc8
 800281c:	20000471 	.word	0x20000471
 8002820:	20002a70 	.word	0x20002a70
 8002824:	20002a8e 	.word	0x20002a8e
 8002828:	08011bdc 	.word	0x08011bdc
 800282c:	08011be0 	.word	0x08011be0
 8002830:	2000032c 	.word	0x2000032c
 8002834:	004c4b3f 	.word	0x004c4b3f
 8002838:	002dc6bf 	.word	0x002dc6bf
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 800283c:	48c4      	ldr	r0, [pc, #784]	; (8002b50 <main+0xfbc>)
 800283e:	f00b fccb 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002842:	4bc4      	ldr	r3, [pc, #784]	; (8002b54 <main+0xfc0>)
 8002844:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002848:	461a      	mov	r2, r3
 800284a:	2100      	movs	r1, #0
 800284c:	48c2      	ldr	r0, [pc, #776]	; (8002b58 <main+0xfc4>)
 800284e:	f00b fdc3 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002852:	4bc0      	ldr	r3, [pc, #768]	; (8002b54 <main+0xfc0>)
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 800285a:	4bbe      	ldr	r3, [pc, #760]	; (8002b54 <main+0xfc0>)
 800285c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002860:	461a      	mov	r2, r3
 8002862:	2100      	movs	r1, #0
 8002864:	48bd      	ldr	r0, [pc, #756]	; (8002b5c <main+0xfc8>)
 8002866:	f00b fdb7 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 800286a:	4bba      	ldr	r3, [pc, #744]	; (8002b54 <main+0xfc0>)
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002872:	4bbb      	ldr	r3, [pc, #748]	; (8002b60 <main+0xfcc>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
 8002878:	f7ff b9f8 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("bw", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 800287c:	4bb5      	ldr	r3, [pc, #724]	; (8002b54 <main+0xfc0>)
 800287e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002882:	461a      	mov	r2, r3
 8002884:	49b4      	ldr	r1, [pc, #720]	; (8002b58 <main+0xfc4>)
 8002886:	48b7      	ldr	r0, [pc, #732]	; (8002b64 <main+0xfd0>)
 8002888:	f00b fdae 	bl	800e3e8 <strncmp>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 80ee 	bne.w	8002a70 <main+0xedc>
		  {
			  int bw = atoi((char*)myRxCmd.param);
 8002894:	48b1      	ldr	r0, [pc, #708]	; (8002b5c <main+0xfc8>)
 8002896:	f00a fbab 	bl	800cff0 <atoi>
 800289a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800289e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80028a2:	6018      	str	r0, [r3, #0]
			  if(bw >= 7 && bw <=500)
 80028a4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028a8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	f340 80be 	ble.w	8002a30 <main+0xe9c>
 80028b4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028b8:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028c2:	f300 80b5 	bgt.w	8002a30 <main+0xe9c>
			  {
				  lora_bw lbw;
				  if(bw <= 8)
 80028c6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028ca:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	dc06      	bgt.n	80028e2 <main+0xd4e>
					  lbw = BW_7_8_kHz;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80028da:	f102 020f 	add.w	r2, r2, #15
 80028de:	7013      	strb	r3, [r2, #0]
 80028e0:	e07d      	b.n	80029de <main+0xe4a>
				  else if(bw <= 11)
 80028e2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028e6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b0b      	cmp	r3, #11
 80028ee:	dc06      	bgt.n	80028fe <main+0xd6a>
					  lbw = BW_10_4_kHz;
 80028f0:	2310      	movs	r3, #16
 80028f2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80028f6:	f102 020f 	add.w	r2, r2, #15
 80028fa:	7013      	strb	r3, [r2, #0]
 80028fc:	e06f      	b.n	80029de <main+0xe4a>
				  else if(bw <= 16)
 80028fe:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002902:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b10      	cmp	r3, #16
 800290a:	dc06      	bgt.n	800291a <main+0xd86>
					  lbw = BW_15_6_kHz;
 800290c:	2320      	movs	r3, #32
 800290e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002912:	f102 020f 	add.w	r2, r2, #15
 8002916:	7013      	strb	r3, [r2, #0]
 8002918:	e061      	b.n	80029de <main+0xe4a>
				  else if(bw <= 21)
 800291a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800291e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b15      	cmp	r3, #21
 8002926:	dc06      	bgt.n	8002936 <main+0xda2>
					  lbw = BW_20_8_kHz;
 8002928:	2330      	movs	r3, #48	; 0x30
 800292a:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800292e:	f102 020f 	add.w	r2, r2, #15
 8002932:	7013      	strb	r3, [r2, #0]
 8002934:	e053      	b.n	80029de <main+0xe4a>
				  else if(bw <= 32)
 8002936:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800293a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b20      	cmp	r3, #32
 8002942:	dc06      	bgt.n	8002952 <main+0xdbe>
					  lbw = BW_31_25_kHz;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800294a:	f102 020f 	add.w	r2, r2, #15
 800294e:	7013      	strb	r3, [r2, #0]
 8002950:	e045      	b.n	80029de <main+0xe4a>
				  else if(bw <= 42)
 8002952:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002956:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b2a      	cmp	r3, #42	; 0x2a
 800295e:	dc06      	bgt.n	800296e <main+0xdda>
					  lbw = BW_41_7_kHz;
 8002960:	2350      	movs	r3, #80	; 0x50
 8002962:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002966:	f102 020f 	add.w	r2, r2, #15
 800296a:	7013      	strb	r3, [r2, #0]
 800296c:	e037      	b.n	80029de <main+0xe4a>
				  else if(bw <= 63)
 800296e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002972:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b3f      	cmp	r3, #63	; 0x3f
 800297a:	dc06      	bgt.n	800298a <main+0xdf6>
					  lbw = BW_62_5_kHz;
 800297c:	2360      	movs	r3, #96	; 0x60
 800297e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002982:	f102 020f 	add.w	r2, r2, #15
 8002986:	7013      	strb	r3, [r2, #0]
 8002988:	e029      	b.n	80029de <main+0xe4a>
				  else if(bw <= 125)
 800298a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800298e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b7d      	cmp	r3, #125	; 0x7d
 8002996:	dc06      	bgt.n	80029a6 <main+0xe12>
					  lbw = BW_125_kHz;
 8002998:	2370      	movs	r3, #112	; 0x70
 800299a:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800299e:	f102 020f 	add.w	r2, r2, #15
 80029a2:	7013      	strb	r3, [r2, #0]
 80029a4:	e01b      	b.n	80029de <main+0xe4a>
				  else if(bw <= 250)
 80029a6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80029aa:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2bfa      	cmp	r3, #250	; 0xfa
 80029b2:	dc06      	bgt.n	80029c2 <main+0xe2e>
					  lbw = BW_250_kHz;
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80029ba:	f102 020f 	add.w	r2, r2, #15
 80029be:	7013      	strb	r3, [r2, #0]
 80029c0:	e00d      	b.n	80029de <main+0xe4a>
				  else if(bw <= 500)
 80029c2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80029c6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029d0:	dc05      	bgt.n	80029de <main+0xe4a>
					  lbw = BW_500_kHz;
 80029d2:	2390      	movs	r3, #144	; 0x90
 80029d4:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80029d8:	f102 020f 	add.w	r2, r2, #15
 80029dc:	7013      	strb	r3, [r2, #0]

				  uint8_t ret = RFM95_LoRa_setBandwidth(&rfm95, lbw);
 80029de:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80029e2:	f103 030f 	add.w	r3, r3, #15
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	485f      	ldr	r0, [pc, #380]	; (8002b68 <main+0xfd4>)
 80029ec:	f009 fd8a 	bl	800c504 <RFM95_LoRa_setBandwidth>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 80029f6:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80029fa:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 80029fc:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a00:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <main+0xe8a>
 8002a0a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a0e:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4855      	ldr	r0, [pc, #340]	; (8002b6c <main+0xfd8>)
 8002a18:	f00b fb70 	bl	800e0fc <iprintf>
			  {
 8002a1c:	e00b      	b.n	8002a36 <main+0xea2>
				  else printf("BW %d is set.\r\n", bw);
 8002a1e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a22:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	4851      	ldr	r0, [pc, #324]	; (8002b70 <main+0xfdc>)
 8002a2a:	f00b fb67 	bl	800e0fc <iprintf>
			  {
 8002a2e:	e002      	b.n	8002a36 <main+0xea2>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002a30:	4847      	ldr	r0, [pc, #284]	; (8002b50 <main+0xfbc>)
 8002a32:	f00b fbd1 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <main+0xfc0>)
 8002a38:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4845      	ldr	r0, [pc, #276]	; (8002b58 <main+0xfc4>)
 8002a42:	f00b fcc9 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002a46:	4b43      	ldr	r3, [pc, #268]	; (8002b54 <main+0xfc0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <main+0xfc0>)
 8002a50:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a54:	461a      	mov	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	4840      	ldr	r0, [pc, #256]	; (8002b5c <main+0xfc8>)
 8002a5a:	f00b fcbd 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <main+0xfc0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <main+0xfcc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	f7ff b8fe 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("cr", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <main+0xfc0>)
 8002a72:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a76:	461a      	mov	r2, r3
 8002a78:	4937      	ldr	r1, [pc, #220]	; (8002b58 <main+0xfc4>)
 8002a7a:	483e      	ldr	r0, [pc, #248]	; (8002b74 <main+0xfe0>)
 8002a7c:	f00b fcb4 	bl	800e3e8 <strncmp>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d17a      	bne.n	8002b7c <main+0xfe8>
		  {
			  int cr = atoi((char*)myRxCmd.param);
 8002a86:	4835      	ldr	r0, [pc, #212]	; (8002b5c <main+0xfc8>)
 8002a88:	f00a fab2 	bl	800cff0 <atoi>
 8002a8c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a94:	6018      	str	r0, [r3, #0]
			  if(cr >= 1 && cr <=4)
 8002a96:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a9a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	dd34      	ble.n	8002b0e <main+0xf7a>
 8002aa4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002aa8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	dc2d      	bgt.n	8002b0e <main+0xf7a>
			  {
				  uint8_t ret = RFM95_LoRa_setCodingRate(&rfm95, cr*2);
 8002ab2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002ab6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4828      	ldr	r0, [pc, #160]	; (8002b68 <main+0xfd4>)
 8002ac6:	f009 fd89 	bl	800c5dc <RFM95_LoRa_setCodingRate>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002ad0:	f102 023b 	add.w	r2, r2, #59	; 0x3b
 8002ad4:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002ad6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002ada:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <main+0xf64>
 8002ae4:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002ae8:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	481e      	ldr	r0, [pc, #120]	; (8002b6c <main+0xfd8>)
 8002af2:	f00b fb03 	bl	800e0fc <iprintf>
			  {
 8002af6:	e00d      	b.n	8002b14 <main+0xf80>
				  else printf("CR 4/%d is set.\r\n", cr + 4);
 8002af8:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002afc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <main+0xfe4>)
 8002b08:	f00b faf8 	bl	800e0fc <iprintf>
			  {
 8002b0c:	e002      	b.n	8002b14 <main+0xf80>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002b0e:	4810      	ldr	r0, [pc, #64]	; (8002b50 <main+0xfbc>)
 8002b10:	f00b fb62 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <main+0xfc0>)
 8002b16:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	480e      	ldr	r0, [pc, #56]	; (8002b58 <main+0xfc4>)
 8002b20:	f00b fc5a 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <main+0xfc0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <main+0xfc0>)
 8002b2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b32:	461a      	mov	r2, r3
 8002b34:	2100      	movs	r1, #0
 8002b36:	4809      	ldr	r0, [pc, #36]	; (8002b5c <main+0xfc8>)
 8002b38:	f00b fc4e 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <main+0xfc0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <main+0xfcc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	f7ff b88f 	b.w	8001c6c <main+0xd8>
 8002b4e:	bf00      	nop
 8002b50:	08011a60 	.word	0x08011a60
 8002b54:	20002a70 	.word	0x20002a70
 8002b58:	20002a8e 	.word	0x20002a8e
 8002b5c:	20002a98 	.word	0x20002a98
 8002b60:	20002abb 	.word	0x20002abb
 8002b64:	08011bf0 	.word	0x08011bf0
 8002b68:	20000404 	.word	0x20000404
 8002b6c:	08011bc8 	.word	0x08011bc8
 8002b70:	08011bf4 	.word	0x08011bf4
 8002b74:	08011c04 	.word	0x08011c04
 8002b78:	08011c08 	.word	0x08011c08
		  }
		  else if(strncmp("freq", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002b7c:	4bbb      	ldr	r3, [pc, #748]	; (8002e6c <main+0x12d8>)
 8002b7e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b82:	461a      	mov	r2, r3
 8002b84:	49ba      	ldr	r1, [pc, #744]	; (8002e70 <main+0x12dc>)
 8002b86:	48bb      	ldr	r0, [pc, #748]	; (8002e74 <main+0x12e0>)
 8002b88:	f00b fc2e 	bl	800e3e8 <strncmp>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d169      	bne.n	8002c66 <main+0x10d2>
		  {
			  int kHz = atoi((char*)myRxCmd.param);
 8002b92:	48b9      	ldr	r0, [pc, #740]	; (8002e78 <main+0x12e4>)
 8002b94:	f00a fa2c 	bl	800cff0 <atoi>
 8002b98:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002b9c:	f103 0304 	add.w	r3, r3, #4
 8002ba0:	6018      	str	r0, [r3, #0]
			  if(kHz >= 902000 && kHz <= 928000)
 8002ba2:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002ba6:	f103 0304 	add.w	r3, r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4ab3      	ldr	r2, [pc, #716]	; (8002e7c <main+0x12e8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	dd39      	ble.n	8002c26 <main+0x1092>
 8002bb2:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002bb6:	f103 0304 	add.w	r3, r3, #4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4ab0      	ldr	r2, [pc, #704]	; (8002e80 <main+0x12ec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	dc31      	bgt.n	8002c26 <main+0x1092>
			  {
				  uint8_t ret = RFM95_setFrequency(&rfm95, kHz*1000);
 8002bc2:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002bc6:	f103 0304 	add.w	r3, r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	48ab      	ldr	r0, [pc, #684]	; (8002e84 <main+0x12f0>)
 8002bd8:	f009 fa02 	bl	800bfe0 <RFM95_setFrequency>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002be2:	f102 0203 	add.w	r2, r2, #3
 8002be6:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002be8:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002bec:	f103 0303 	add.w	r3, r3, #3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <main+0x1076>
 8002bf6:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002bfa:	f103 0303 	add.w	r3, r3, #3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	48a1      	ldr	r0, [pc, #644]	; (8002e88 <main+0x12f4>)
 8002c04:	f00b fa7a 	bl	800e0fc <iprintf>
			  {
 8002c08:	e010      	b.n	8002c2c <main+0x1098>
				  else printf("Frequency %d is set.\r\n", kHz*1000);
 8002c0a:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002c0e:	f103 0304 	add.w	r3, r3, #4
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c18:	fb02 f303 	mul.w	r3, r2, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	489b      	ldr	r0, [pc, #620]	; (8002e8c <main+0x12f8>)
 8002c20:	f00b fa6c 	bl	800e0fc <iprintf>
			  {
 8002c24:	e002      	b.n	8002c2c <main+0x1098>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002c26:	489a      	ldr	r0, [pc, #616]	; (8002e90 <main+0x12fc>)
 8002c28:	f00b fad6 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002c2c:	4b8f      	ldr	r3, [pc, #572]	; (8002e6c <main+0x12d8>)
 8002c2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c32:	461a      	mov	r2, r3
 8002c34:	2100      	movs	r1, #0
 8002c36:	488e      	ldr	r0, [pc, #568]	; (8002e70 <main+0x12dc>)
 8002c38:	f00b fbce 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002c3c:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <main+0x12d8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002c44:	4b89      	ldr	r3, [pc, #548]	; (8002e6c <main+0x12d8>)
 8002c46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	488a      	ldr	r0, [pc, #552]	; (8002e78 <main+0x12e4>)
 8002c50:	f00b fbc2 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002c54:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <main+0x12d8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002c5c:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <main+0x1300>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	f7ff b803 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("mount", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002c66:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <main+0x12d8>)
 8002c68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4980      	ldr	r1, [pc, #512]	; (8002e70 <main+0x12dc>)
 8002c70:	4889      	ldr	r0, [pc, #548]	; (8002e98 <main+0x1304>)
 8002c72:	f00b fbb9 	bl	800e3e8 <strncmp>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d174      	bne.n	8002d66 <main+0x11d2>
		  {
			  fresult = f_mount(&fs, "", 0);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	4987      	ldr	r1, [pc, #540]	; (8002e9c <main+0x1308>)
 8002c80:	4887      	ldr	r0, [pc, #540]	; (8002ea0 <main+0x130c>)
 8002c82:	f007 fd49 	bl	800a718 <f_mount>
 8002c86:	4603      	mov	r3, r0
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b86      	ldr	r3, [pc, #536]	; (8002ea4 <main+0x1310>)
 8002c8c:	701a      	strb	r2, [r3, #0]
			  if(fresult != FR_OK)
 8002c8e:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <main+0x1310>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <main+0x110a>
				  printf("error in mounting SD CARD... \r\n");
 8002c96:	4884      	ldr	r0, [pc, #528]	; (8002ea8 <main+0x1314>)
 8002c98:	f00b fa9e 	bl	800e1d8 <puts>
 8002c9c:	e002      	b.n	8002ca4 <main+0x1110>
			  else
				  printf("SD CARD mounted successfully... \r\n");
 8002c9e:	4883      	ldr	r0, [pc, #524]	; (8002eac <main+0x1318>)
 8002ca0:	f00b fa9a 	bl	800e1d8 <puts>
			  /* Check free space */
			  f_getfree("", &fre_clust, &pfs);
 8002ca4:	4a82      	ldr	r2, [pc, #520]	; (8002eb0 <main+0x131c>)
 8002ca6:	4983      	ldr	r1, [pc, #524]	; (8002eb4 <main+0x1320>)
 8002ca8:	487c      	ldr	r0, [pc, #496]	; (8002e9c <main+0x1308>)
 8002caa:	f008 fddc 	bl	800b866 <f_getfree>

			  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <main+0x131c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	4a7e      	ldr	r2, [pc, #504]	; (8002eb0 <main+0x131c>)
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	8952      	ldrh	r2, [r2, #10]
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc27 	bl	8000514 <__aeabi_ui2d>
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <main+0x1324>)
 8002ccc:	f7fd fc9c 	bl	8000608 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff6e 	bl	8000bb8 <__aeabi_d2uiz>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a77      	ldr	r2, [pc, #476]	; (8002ebc <main+0x1328>)
 8002ce0:	6013      	str	r3, [r2, #0]
			  printf("SD CARD total size: \t%lu\r\n", total);
 8002ce2:	4b76      	ldr	r3, [pc, #472]	; (8002ebc <main+0x1328>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4875      	ldr	r0, [pc, #468]	; (8002ec0 <main+0x132c>)
 8002cea:	f00b fa07 	bl	800e0fc <iprintf>
			  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002cee:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <main+0x131c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	895b      	ldrh	r3, [r3, #10]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <main+0x1320>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc08 	bl	8000514 <__aeabi_ui2d>
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <main+0x1324>)
 8002d0a:	f7fd fc7d 	bl	8000608 <__aeabi_dmul>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff4f 	bl	8000bb8 <__aeabi_d2uiz>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <main+0x1330>)
 8002d1e:	6013      	str	r3, [r2, #0]
			  printf("SD CARD free space: \t%lu\r\n", free_space);
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <main+0x1330>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	4868      	ldr	r0, [pc, #416]	; (8002ec8 <main+0x1334>)
 8002d28:	f00b f9e8 	bl	800e0fc <iprintf>

			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002d2c:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <main+0x12d8>)
 8002d2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d32:	461a      	mov	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	484e      	ldr	r0, [pc, #312]	; (8002e70 <main+0x12dc>)
 8002d38:	f00b fb4e 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <main+0x12d8>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002d44:	4b49      	ldr	r3, [pc, #292]	; (8002e6c <main+0x12d8>)
 8002d46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	484a      	ldr	r0, [pc, #296]	; (8002e78 <main+0x12e4>)
 8002d50:	f00b fb42 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002d54:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <main+0x12d8>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <main+0x1300>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	f7fe bf83 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("ldro", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <main+0x12d8>)
 8002d68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4940      	ldr	r1, [pc, #256]	; (8002e70 <main+0x12dc>)
 8002d70:	4856      	ldr	r0, [pc, #344]	; (8002ecc <main+0x1338>)
 8002d72:	f00b fb39 	bl	800e3e8 <strncmp>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 80af 	bne.w	8002edc <main+0x1348>
		  {
			  if(strncmp("on", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <main+0x12d8>)
 8002d80:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d84:	461a      	mov	r2, r3
 8002d86:	493c      	ldr	r1, [pc, #240]	; (8002e78 <main+0x12e4>)
 8002d88:	4851      	ldr	r0, [pc, #324]	; (8002ed0 <main+0x133c>)
 8002d8a:	f00b fb2d 	bl	800e3e8 <strncmp>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11f      	bne.n	8002dd4 <main+0x1240>
			  {
				  uint8_t ret = RFM95_LoRa_setLowDataRateOpt(&rfm95, true);
 8002d94:	2101      	movs	r1, #1
 8002d96:	483b      	ldr	r0, [pc, #236]	; (8002e84 <main+0x12f0>)
 8002d98:	f009 fccc 	bl	800c734 <RFM95_LoRa_setLowDataRateOpt>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002da2:	f102 020b 	add.w	r2, r2, #11
 8002da6:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002da8:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002dac:	f103 030b 	add.w	r3, r3, #11
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <main+0x1236>
 8002db6:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002dba:	f103 030b 	add.w	r3, r3, #11
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4831      	ldr	r0, [pc, #196]	; (8002e88 <main+0x12f4>)
 8002dc4:	f00b f99a 	bl	800e0fc <iprintf>
 8002dc8:	e032      	b.n	8002e30 <main+0x129c>
				  else printf("Low Data Rate Opt: %d.\r\n", 1);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4841      	ldr	r0, [pc, #260]	; (8002ed4 <main+0x1340>)
 8002dce:	f00b f995 	bl	800e0fc <iprintf>
 8002dd2:	e02d      	b.n	8002e30 <main+0x129c>
			  }
			  else if(strncmp("off", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <main+0x12d8>)
 8002dd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4926      	ldr	r1, [pc, #152]	; (8002e78 <main+0x12e4>)
 8002dde:	483e      	ldr	r0, [pc, #248]	; (8002ed8 <main+0x1344>)
 8002de0:	f00b fb02 	bl	800e3e8 <strncmp>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11f      	bne.n	8002e2a <main+0x1296>
			  {
				  uint8_t ret = RFM95_LoRa_setLowDataRateOpt(&rfm95, false);
 8002dea:	2100      	movs	r1, #0
 8002dec:	4825      	ldr	r0, [pc, #148]	; (8002e84 <main+0x12f0>)
 8002dee:	f009 fca1 	bl	800c734 <RFM95_LoRa_setLowDataRateOpt>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002df8:	f102 020c 	add.w	r2, r2, #12
 8002dfc:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002dfe:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002e02:	f103 030c 	add.w	r3, r3, #12
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d009      	beq.n	8002e20 <main+0x128c>
 8002e0c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002e10:	f103 030c 	add.w	r3, r3, #12
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4619      	mov	r1, r3
 8002e18:	481b      	ldr	r0, [pc, #108]	; (8002e88 <main+0x12f4>)
 8002e1a:	f00b f96f 	bl	800e0fc <iprintf>
 8002e1e:	e007      	b.n	8002e30 <main+0x129c>
				  else printf("Low Data Rate Opt: %d.\r\n", 0);
 8002e20:	2100      	movs	r1, #0
 8002e22:	482c      	ldr	r0, [pc, #176]	; (8002ed4 <main+0x1340>)
 8002e24:	f00b f96a 	bl	800e0fc <iprintf>
 8002e28:	e002      	b.n	8002e30 <main+0x129c>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002e2a:	4819      	ldr	r0, [pc, #100]	; (8002e90 <main+0x12fc>)
 8002e2c:	f00b f9d4 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <main+0x12d8>)
 8002e32:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002e36:	461a      	mov	r2, r3
 8002e38:	2100      	movs	r1, #0
 8002e3a:	480d      	ldr	r0, [pc, #52]	; (8002e70 <main+0x12dc>)
 8002e3c:	f00b facc 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <main+0x12d8>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <main+0x12d8>)
 8002e4a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	4809      	ldr	r0, [pc, #36]	; (8002e78 <main+0x12e4>)
 8002e54:	f00b fac0 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <main+0x12d8>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <main+0x1300>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	f7fe bf01 	b.w	8001c6c <main+0xd8>
 8002e6a:	bf00      	nop
 8002e6c:	20002a70 	.word	0x20002a70
 8002e70:	20002a8e 	.word	0x20002a8e
 8002e74:	08011c1c 	.word	0x08011c1c
 8002e78:	20002a98 	.word	0x20002a98
 8002e7c:	000dc36f 	.word	0x000dc36f
 8002e80:	000e2900 	.word	0x000e2900
 8002e84:	20000404 	.word	0x20000404
 8002e88:	08011bc8 	.word	0x08011bc8
 8002e8c:	08011c24 	.word	0x08011c24
 8002e90:	08011a60 	.word	0x08011a60
 8002e94:	20002abb 	.word	0x20002abb
 8002e98:	08011c3c 	.word	0x08011c3c
 8002e9c:	08011c44 	.word	0x08011c44
 8002ea0:	20000488 	.word	0x20000488
 8002ea4:	200024f0 	.word	0x200024f0
 8002ea8:	08011c48 	.word	0x08011c48
 8002eac:	08011c68 	.word	0x08011c68
 8002eb0:	200028f8 	.word	0x200028f8
 8002eb4:	200028fc 	.word	0x200028fc
 8002eb8:	3fe00000 	.word	0x3fe00000
 8002ebc:	20002900 	.word	0x20002900
 8002ec0:	08011c8c 	.word	0x08011c8c
 8002ec4:	20002904 	.word	0x20002904
 8002ec8:	08011ca8 	.word	0x08011ca8
 8002ecc:	08011cc4 	.word	0x08011cc4
 8002ed0:	08011a30 	.word	0x08011a30
 8002ed4:	08011ccc 	.word	0x08011ccc
 8002ed8:	08011a5c 	.word	0x08011a5c
		  }
		  else if(strncmp("init", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <main+0x13e8>)
 8002ede:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4926      	ldr	r1, [pc, #152]	; (8002f80 <main+0x13ec>)
 8002ee6:	4827      	ldr	r0, [pc, #156]	; (8002f84 <main+0x13f0>)
 8002ee8:	f00b fa7e 	bl	800e3e8 <strncmp>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d13c      	bne.n	8002f6c <main+0x13d8>
		  {
			  uint8_t ret = RFM95_LoRa_Init(&rfm95);
 8002ef2:	4825      	ldr	r0, [pc, #148]	; (8002f88 <main+0x13f4>)
 8002ef4:	f009 fea2 	bl	800cc3c <RFM95_LoRa_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002efe:	f102 020d 	add.w	r2, r2, #13
 8002f02:	7013      	strb	r3, [r2, #0]
			  if(ret != RFM95_OK)
 8002f04:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002f08:	f103 030d 	add.w	r3, r3, #13
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <main+0x1398>
			  {
				  printf("Init... fail!\r\n");
 8002f12:	481e      	ldr	r0, [pc, #120]	; (8002f8c <main+0x13f8>)
 8002f14:	f00b f960 	bl	800e1d8 <puts>
				  printf("Error code: %d\r\n", ret);
 8002f18:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002f1c:	f103 030d 	add.w	r3, r3, #13
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	481a      	ldr	r0, [pc, #104]	; (8002f90 <main+0x13fc>)
 8002f26:	f00b f8e9 	bl	800e0fc <iprintf>
 8002f2a:	e002      	b.n	8002f32 <main+0x139e>
			  }
			  else
			  {
				  printf("Init... success!\r\n");
 8002f2c:	4819      	ldr	r0, [pc, #100]	; (8002f94 <main+0x1400>)
 8002f2e:	f00b f953 	bl	800e1d8 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <main+0x13e8>)
 8002f34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4810      	ldr	r0, [pc, #64]	; (8002f80 <main+0x13ec>)
 8002f3e:	f00b fa4b 	bl	800e3d8 <memset>
			  myRxCmd.cmdLen = 0;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <main+0x13e8>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <main+0x13e8>)
 8002f4c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002f50:	461a      	mov	r2, r3
 8002f52:	2100      	movs	r1, #0
 8002f54:	4810      	ldr	r0, [pc, #64]	; (8002f98 <main+0x1404>)
 8002f56:	f00b fa3f 	bl	800e3d8 <memset>
			  myRxCmd.paramLen = 0;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <main+0x13e8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <main+0x1408>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	f7fe be80 	b.w	8001c6c <main+0xd8>
		  }
		  else
		  {
			  printf("Invalid command !\r\n");
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <main+0x140c>)
 8002f6e:	f00b f933 	bl	800e1d8 <puts>
			  cmdFlag = 0;
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <main+0x1408>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
	  if(cmdFlag)
 8002f78:	f7fe be78 	b.w	8001c6c <main+0xd8>
 8002f7c:	20002a70 	.word	0x20002a70
 8002f80:	20002a8e 	.word	0x20002a8e
 8002f84:	08011ce8 	.word	0x08011ce8
 8002f88:	20000404 	.word	0x20000404
 8002f8c:	0801193c 	.word	0x0801193c
 8002f90:	0801194c 	.word	0x0801194c
 8002f94:	08011960 	.word	0x08011960
 8002f98:	20002a98 	.word	0x20002a98
 8002f9c:	20002abb 	.word	0x20002abb
 8002fa0:	08011cf0 	.word	0x08011cf0

08002fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b094      	sub	sp, #80	; 0x50
 8002fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002faa:	f107 0320 	add.w	r3, r7, #32
 8002fae:	2230      	movs	r2, #48	; 0x30
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00b fa10 	bl	800e3d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <SystemClock_Config+0xcc>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <SystemClock_Config+0xcc>)
 8002fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <SystemClock_Config+0xcc>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <SystemClock_Config+0xd0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a21      	ldr	r2, [pc, #132]	; (8003074 <SystemClock_Config+0xd0>)
 8002fee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <SystemClock_Config+0xd0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003000:	2306      	movs	r3, #6
 8003002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003004:	2301      	movs	r3, #1
 8003006:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003008:	2301      	movs	r3, #1
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800300c:	2310      	movs	r3, #16
 800300e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003010:	2302      	movs	r3, #2
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003018:	2308      	movs	r3, #8
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003020:	2302      	movs	r3, #2
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003024:	2304      	movs	r3, #4
 8003026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003028:	f107 0320 	add.w	r3, r7, #32
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fba7 	bl	8004780 <HAL_RCC_OscConfig>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003038:	f000 fcbe 	bl	80039b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800303c:	230f      	movs	r3, #15
 800303e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003040:	2302      	movs	r3, #2
 8003042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003052:	f107 030c 	add.w	r3, r7, #12
 8003056:	2103      	movs	r1, #3
 8003058:	4618      	mov	r0, r3
 800305a:	f001 fe09 	bl	8004c70 <HAL_RCC_ClockConfig>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003064:	f000 fca8 	bl	80039b8 <Error_Handler>
  }
}
 8003068:	bf00      	nop
 800306a:	3750      	adds	r7, #80	; 0x50
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000

08003078 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800308c:	2300      	movs	r3, #0
 800308e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <MX_RTC_Init+0xac>)
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <MX_RTC_Init+0xb0>)
 8003094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003096:	4b23      	ldr	r3, [pc, #140]	; (8003124 <MX_RTC_Init+0xac>)
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <MX_RTC_Init+0xac>)
 800309e:	227f      	movs	r2, #127	; 0x7f
 80030a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <MX_RTC_Init+0xac>)
 80030a4:	22ff      	movs	r2, #255	; 0xff
 80030a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <MX_RTC_Init+0xac>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <MX_RTC_Init+0xac>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <MX_RTC_Init+0xac>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030ba:	481a      	ldr	r0, [pc, #104]	; (8003124 <MX_RTC_Init+0xac>)
 80030bc:	f002 f8a8 	bl	8005210 <HAL_RTC_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80030c6:	f000 fc77 	bl	80039b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 80030ca:	2321      	movs	r3, #33	; 0x21
 80030cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 80030ce:	2350      	movs	r3, #80	; 0x50
 80030d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2201      	movs	r2, #1
 80030e2:	4619      	mov	r1, r3
 80030e4:	480f      	ldr	r0, [pc, #60]	; (8003124 <MX_RTC_Init+0xac>)
 80030e6:	f002 f916 	bl	8005316 <HAL_RTC_SetTime>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80030f0:	f000 fc62 	bl	80039b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80030f4:	2306      	movs	r3, #6
 80030f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 80030fc:	2324      	movs	r3, #36	; 0x24
 80030fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8003100:	2324      	movs	r3, #36	; 0x24
 8003102:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003104:	463b      	mov	r3, r7
 8003106:	2201      	movs	r2, #1
 8003108:	4619      	mov	r1, r3
 800310a:	4806      	ldr	r0, [pc, #24]	; (8003124 <MX_RTC_Init+0xac>)
 800310c:	f002 f9fb 	bl	8005506 <HAL_RTC_SetDate>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003116:	f000 fc4f 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	2000026c 	.word	0x2000026c
 8003128:	40002800 	.word	0x40002800

0800312c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_SPI1_Init+0x64>)
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <MX_SPI1_Init+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <MX_SPI1_Init+0x64>)
 8003138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800313c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <MX_SPI1_Init+0x64>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_SPI1_Init+0x64>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <MX_SPI1_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_SPI1_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_SPI1_Init+0x64>)
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_SPI1_Init+0x64>)
 8003160:	2228      	movs	r2, #40	; 0x28
 8003162:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <MX_SPI1_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_SPI1_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <MX_SPI1_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_SPI1_Init+0x64>)
 8003178:	220a      	movs	r2, #10
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_SPI1_Init+0x64>)
 800317e:	f002 fb53 	bl	8005828 <HAL_SPI_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003188:	f000 fc16 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	2000028c 	.word	0x2000028c
 8003194:	40013000 	.word	0x40013000

08003198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ac:	463b      	mov	r3, r7
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <MX_TIM1_Init+0x98>)
 80031b6:	4a1f      	ldr	r2, [pc, #124]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <MX_TIM1_Init+0x98>)
 80031bc:	2263      	movs	r2, #99	; 0x63
 80031be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <MX_TIM1_Init+0x98>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <MX_TIM1_Init+0x98>)
 80031c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <MX_TIM1_Init+0x98>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <MX_TIM1_Init+0x98>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031da:	4b15      	ldr	r3, [pc, #84]	; (8003230 <MX_TIM1_Init+0x98>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031e0:	4813      	ldr	r0, [pc, #76]	; (8003230 <MX_TIM1_Init+0x98>)
 80031e2:	f003 f905 	bl	80063f0 <HAL_TIM_Base_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80031ec:	f000 fbe4 	bl	80039b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031f6:	f107 0308 	add.w	r3, r7, #8
 80031fa:	4619      	mov	r1, r3
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <MX_TIM1_Init+0x98>)
 80031fe:	f003 fb22 	bl	8006846 <HAL_TIM_ConfigClockSource>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003208:	f000 fbd6 	bl	80039b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003214:	463b      	mov	r3, r7
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	; (8003230 <MX_TIM1_Init+0x98>)
 800321a:	f003 fd29 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003224:	f000 fbc8 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	200002e4 	.word	0x200002e4
 8003234:	40010000 	.word	0x40010000

08003238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324c:	463b      	mov	r3, r7
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <MX_TIM2_Init+0x94>)
 8003256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <MX_TIM2_Init+0x94>)
 800325e:	2263      	movs	r2, #99	; 0x63
 8003260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <MX_TIM2_Init+0x94>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000000-1;
 8003268:	4b18      	ldr	r3, [pc, #96]	; (80032cc <MX_TIM2_Init+0x94>)
 800326a:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <MX_TIM2_Init+0x98>)
 800326c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <MX_TIM2_Init+0x94>)
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <MX_TIM2_Init+0x94>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800327a:	4814      	ldr	r0, [pc, #80]	; (80032cc <MX_TIM2_Init+0x94>)
 800327c:	f003 f8b8 	bl	80063f0 <HAL_TIM_Base_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003286:	f000 fb97 	bl	80039b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800328e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003290:	f107 0308 	add.w	r3, r7, #8
 8003294:	4619      	mov	r1, r3
 8003296:	480d      	ldr	r0, [pc, #52]	; (80032cc <MX_TIM2_Init+0x94>)
 8003298:	f003 fad5 	bl	8006846 <HAL_TIM_ConfigClockSource>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80032a2:	f000 fb89 	bl	80039b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ae:	463b      	mov	r3, r7
 80032b0:	4619      	mov	r1, r3
 80032b2:	4806      	ldr	r0, [pc, #24]	; (80032cc <MX_TIM2_Init+0x94>)
 80032b4:	f003 fcdc 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80032be:	f000 fb7b 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000032c 	.word	0x2000032c
 80032d0:	002dc6bf 	.word	0x002dc6bf

080032d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e8:	463b      	mov	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <MX_TIM3_Init+0x94>)
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <MX_TIM3_Init+0x98>)
 80032f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <MX_TIM3_Init+0x94>)
 80032f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80032fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <MX_TIM3_Init+0x94>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <MX_TIM3_Init+0x94>)
 8003306:	f246 12a7 	movw	r2, #24999	; 0x61a7
 800330a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <MX_TIM3_Init+0x94>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <MX_TIM3_Init+0x94>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003318:	4813      	ldr	r0, [pc, #76]	; (8003368 <MX_TIM3_Init+0x94>)
 800331a:	f003 f869 	bl	80063f0 <HAL_TIM_Base_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003324:	f000 fb48 	bl	80039b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4619      	mov	r1, r3
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <MX_TIM3_Init+0x94>)
 8003336:	f003 fa86 	bl	8006846 <HAL_TIM_ConfigClockSource>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003340:	f000 fb3a 	bl	80039b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800334c:	463b      	mov	r3, r7
 800334e:	4619      	mov	r1, r3
 8003350:	4805      	ldr	r0, [pc, #20]	; (8003368 <MX_TIM3_Init+0x94>)
 8003352:	f003 fc8d 	bl	8006c70 <HAL_TIMEx_MasterConfigSynchronization>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800335c:	f000 fb2c 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000374 	.word	0x20000374
 800336c:	40000400 	.word	0x40000400

08003370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <MX_USART1_UART_Init+0x50>)
 8003378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 800337c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 8003384:	2200      	movs	r2, #0
 8003386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 800338a:	2200      	movs	r2, #0
 800338c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800338e:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 8003396:	220c      	movs	r2, #12
 8003398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033a6:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_USART1_UART_Init+0x4c>)
 80033a8:	f003 fce4 	bl	8006d74 <HAL_UART_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033b2:	f000 fb01 	bl	80039b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200003bc 	.word	0x200003bc
 80033c0:	40011000 	.word	0x40011000

080033c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	605a      	str	r2, [r3, #4]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <MX_GPIO_Init+0x134>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <MX_GPIO_Init+0x134>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <MX_GPIO_Init+0x134>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <MX_GPIO_Init+0x134>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <MX_GPIO_Init+0x134>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <MX_GPIO_Init+0x134>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 800344a:	2200      	movs	r2, #0
 800344c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003450:	482a      	ldr	r0, [pc, #168]	; (80034fc <MX_GPIO_Init+0x138>)
 8003452:	f001 f963 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin|SD_CS_Pin, GPIO_PIN_SET);
 8003456:	2201      	movs	r2, #1
 8003458:	2107      	movs	r1, #7
 800345a:	4829      	ldr	r0, [pc, #164]	; (8003500 <MX_GPIO_Init+0x13c>)
 800345c:	f001 f95e 	bl	800471c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8003460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4619      	mov	r1, r3
 8003478:	4820      	ldr	r0, [pc, #128]	; (80034fc <MX_GPIO_Init+0x138>)
 800347a:	f000 ffb3 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800347e:	2301      	movs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003482:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003488:	2301      	movs	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4619      	mov	r1, r3
 8003492:	481c      	ldr	r0, [pc, #112]	; (8003504 <MX_GPIO_Init+0x140>)
 8003494:	f000 ffa6 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003498:	2310      	movs	r3, #16
 800349a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800349c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	4815      	ldr	r0, [pc, #84]	; (8003504 <MX_GPIO_Init+0x140>)
 80034ae:	f000 ff99 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|SD_CS_Pin;
 80034b2:	2307      	movs	r3, #7
 80034b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ba:	2301      	movs	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	4619      	mov	r1, r3
 80034c8:	480d      	ldr	r0, [pc, #52]	; (8003500 <MX_GPIO_Init+0x13c>)
 80034ca:	f000 ff8b 	bl	80043e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2105      	movs	r1, #5
 80034d2:	2006      	movs	r0, #6
 80034d4:	f000 febd 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80034d8:	2006      	movs	r0, #6
 80034da:	f000 fed6 	bl	800428a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2105      	movs	r1, #5
 80034e2:	200a      	movs	r0, #10
 80034e4:	f000 feb5 	bl	8004252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80034e8:	200a      	movs	r0, #10
 80034ea:	f000 fece 	bl	800428a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020400 	.word	0x40020400
 8003504:	40020000 	.word	0x40020000

08003508 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Trigger Timer Interrupt per 3 seconds */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d102      	bne.n	800351e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer2Flag = 1;
 8003518:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
	}
	if(htim == &htim3)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d102      	bne.n	800352c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		timer3Flag = 1;
 8003526:	4b07      	ldr	r3, [pc, #28]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
	}
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	2000032c 	.word	0x2000032c
 800353c:	20002a6d 	.word	0x20002a6d
 8003540:	20000374 	.word	0x20000374
 8003544:	20002a6e 	.word	0x20002a6e

08003548 <Cmd_display>:

void Cmd_display(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
	printf("Create file -----------------> mk    [filename] \r\n");
 800354c:	4817      	ldr	r0, [pc, #92]	; (80035ac <Cmd_display+0x64>)
 800354e:	f00a fe43 	bl	800e1d8 <puts>
	printf("Delete file -----------------> del   [filename] \r\n");
 8003552:	4817      	ldr	r0, [pc, #92]	; (80035b0 <Cmd_display+0x68>)
 8003554:	f00a fe40 	bl	800e1d8 <puts>
	printf("Read file -------------------> read  [filename] \r\n");
 8003558:	4816      	ldr	r0, [pc, #88]	; (80035b4 <Cmd_display+0x6c>)
 800355a:	f00a fe3d 	bl	800e1d8 <puts>
	printf("Listing files ---------------> ls \r\n");
 800355e:	4816      	ldr	r0, [pc, #88]	; (80035b8 <Cmd_display+0x70>)
 8003560:	f00a fe3a 	bl	800e1d8 <puts>
	printf("Rx mode turn on -------------> ready \r\n");
 8003564:	4815      	ldr	r0, [pc, #84]	; (80035bc <Cmd_display+0x74>)
 8003566:	f00a fe37 	bl	800e1d8 <puts>
	printf("Rx mode turn off ------------> stop \r\n");
 800356a:	4815      	ldr	r0, [pc, #84]	; (80035c0 <Cmd_display+0x78>)
 800356c:	f00a fe34 	bl	800e1d8 <puts>
	printf("Persist data to a file ------> rx    [filename] \r\n");
 8003570:	4814      	ldr	r0, [pc, #80]	; (80035c4 <Cmd_display+0x7c>)
 8003572:	f00a fe31 	bl	800e1d8 <puts>
	printf("Get current time ------------> rtc   [on/off]\r\n");
 8003576:	4814      	ldr	r0, [pc, #80]	; (80035c8 <Cmd_display+0x80>)
 8003578:	f00a fe2e 	bl	800e1d8 <puts>
	printf("Set Spreading Factor --------> sf    [number] \r\n");
 800357c:	4813      	ldr	r0, [pc, #76]	; (80035cc <Cmd_display+0x84>)
 800357e:	f00a fe2b 	bl	800e1d8 <puts>
	printf("Set Bandwidth ---------------> bw    [kHz] \r\n");
 8003582:	4813      	ldr	r0, [pc, #76]	; (80035d0 <Cmd_display+0x88>)
 8003584:	f00a fe28 	bl	800e1d8 <puts>
	printf("Set Coding Rate -------------> cr    [number] \r\n");
 8003588:	4812      	ldr	r0, [pc, #72]	; (80035d4 <Cmd_display+0x8c>)
 800358a:	f00a fe25 	bl	800e1d8 <puts>
	printf("Set Frequency ---------------> freq  [kHz] \r\n");
 800358e:	4812      	ldr	r0, [pc, #72]	; (80035d8 <Cmd_display+0x90>)
 8003590:	f00a fe22 	bl	800e1d8 <puts>
	printf("Set LDRO --------------------> ldro  [on/off] \r\n");
 8003594:	4811      	ldr	r0, [pc, #68]	; (80035dc <Cmd_display+0x94>)
 8003596:	f00a fe1f 	bl	800e1d8 <puts>
	printf("Initialize RFM-95 -----------> init \r\n");
 800359a:	4811      	ldr	r0, [pc, #68]	; (80035e0 <Cmd_display+0x98>)
 800359c:	f00a fe1c 	bl	800e1d8 <puts>
	printf("Reset SD Card ---------------> mount \r\n");
 80035a0:	4810      	ldr	r0, [pc, #64]	; (80035e4 <Cmd_display+0x9c>)
 80035a2:	f00a fe19 	bl	800e1d8 <puts>
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	08011d04 	.word	0x08011d04
 80035b0:	08011d38 	.word	0x08011d38
 80035b4:	08011d6c 	.word	0x08011d6c
 80035b8:	08011da0 	.word	0x08011da0
 80035bc:	08011dc4 	.word	0x08011dc4
 80035c0:	08011dec 	.word	0x08011dec
 80035c4:	08011e14 	.word	0x08011e14
 80035c8:	08011e48 	.word	0x08011e48
 80035cc:	08011e78 	.word	0x08011e78
 80035d0:	08011ea8 	.word	0x08011ea8
 80035d4:	08011ed8 	.word	0x08011ed8
 80035d8:	08011f08 	.word	0x08011f08
 80035dc:	08011f38 	.word	0x08011f38
 80035e0:	08011f68 	.word	0x08011f68
 80035e4:	08011f90 	.word	0x08011f90

080035e8 <SD_init>:

void SD_init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
	/* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	4967      	ldr	r1, [pc, #412]	; (800378c <SD_init+0x1a4>)
 80035f0:	4867      	ldr	r0, [pc, #412]	; (8003790 <SD_init+0x1a8>)
 80035f2:	f007 f891 	bl	800a718 <f_mount>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <SD_init+0x1ac>)
 80035fc:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <SD_init+0x1ac>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <SD_init+0x26>
		printf("error in mounting SD CARD... \r\n");
 8003606:	4864      	ldr	r0, [pc, #400]	; (8003798 <SD_init+0x1b0>)
 8003608:	f00a fde6 	bl	800e1d8 <puts>
 800360c:	e002      	b.n	8003614 <SD_init+0x2c>
	else
		printf("SD CARD mounted successfully... \r\n");
 800360e:	4863      	ldr	r0, [pc, #396]	; (800379c <SD_init+0x1b4>)
 8003610:	f00a fde2 	bl	800e1d8 <puts>
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 8003614:	4a62      	ldr	r2, [pc, #392]	; (80037a0 <SD_init+0x1b8>)
 8003616:	4963      	ldr	r1, [pc, #396]	; (80037a4 <SD_init+0x1bc>)
 8003618:	485c      	ldr	r0, [pc, #368]	; (800378c <SD_init+0x1a4>)
 800361a:	f008 f924 	bl	800b866 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800361e:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <SD_init+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	3b02      	subs	r3, #2
 8003626:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <SD_init+0x1b8>)
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	8952      	ldrh	r2, [r2, #10]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff6f 	bl	8000514 <__aeabi_ui2d>
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <SD_init+0x1c0>)
 800363c:	f7fc ffe4 	bl	8000608 <__aeabi_dmul>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd fab6 	bl	8000bb8 <__aeabi_d2uiz>
 800364c:	4603      	mov	r3, r0
 800364e:	4a57      	ldr	r2, [pc, #348]	; (80037ac <SD_init+0x1c4>)
 8003650:	6013      	str	r3, [r2, #0]
	printf("SD CARD total size: \t%lu\r\n", total);
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <SD_init+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	4855      	ldr	r0, [pc, #340]	; (80037b0 <SD_init+0x1c8>)
 800365a:	f00a fd4f 	bl	800e0fc <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800365e:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <SD_init+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	895b      	ldrh	r3, [r3, #10]
 8003664:	461a      	mov	r2, r3
 8003666:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <SD_init+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff50 	bl	8000514 <__aeabi_ui2d>
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <SD_init+0x1c0>)
 800367a:	f7fc ffc5 	bl	8000608 <__aeabi_dmul>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	f7fd fa97 	bl	8000bb8 <__aeabi_d2uiz>
 800368a:	4603      	mov	r3, r0
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <SD_init+0x1cc>)
 800368e:	6013      	str	r3, [r2, #0]
	printf("SD CARD free space: \t%lu\r\n", free_space);
 8003690:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <SD_init+0x1cc>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4619      	mov	r1, r3
 8003696:	4848      	ldr	r0, [pc, #288]	; (80037b8 <SD_init+0x1d0>)
 8003698:	f00a fd30 	bl	800e0fc <iprintf>
	/* Creating/Reading a file */
	fresult = f_open(&file, "test.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800369c:	2213      	movs	r2, #19
 800369e:	4947      	ldr	r1, [pc, #284]	; (80037bc <SD_init+0x1d4>)
 80036a0:	4847      	ldr	r0, [pc, #284]	; (80037c0 <SD_init+0x1d8>)
 80036a2:	f007 f87f 	bl	800a7a4 <f_open>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <SD_init+0x1ac>)
 80036ac:	701a      	strb	r2, [r3, #0]
	/* Writing text */
	fresult = f_puts("First line\n", &file);
 80036ae:	4944      	ldr	r1, [pc, #272]	; (80037c0 <SD_init+0x1d8>)
 80036b0:	4844      	ldr	r0, [pc, #272]	; (80037c4 <SD_init+0x1dc>)
 80036b2:	f008 faaf 	bl	800bc14 <f_puts>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <SD_init+0x1ac>)
 80036bc:	701a      	strb	r2, [r3, #0]
	/* Close file */
	fresult = f_close(&file);
 80036be:	4840      	ldr	r0, [pc, #256]	; (80037c0 <SD_init+0x1d8>)
 80036c0:	f007 fdad 	bl	800b21e <f_close>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b32      	ldr	r3, [pc, #200]	; (8003794 <SD_init+0x1ac>)
 80036ca:	701a      	strb	r2, [r3, #0]
	/* Open file to read */
	fresult = f_open(&file, "test.txt", FA_READ);
 80036cc:	2201      	movs	r2, #1
 80036ce:	493b      	ldr	r1, [pc, #236]	; (80037bc <SD_init+0x1d4>)
 80036d0:	483b      	ldr	r0, [pc, #236]	; (80037c0 <SD_init+0x1d8>)
 80036d2:	f007 f867 	bl	800a7a4 <f_open>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <SD_init+0x1ac>)
 80036dc:	701a      	strb	r2, [r3, #0]
	/* Read string from the file */
	f_read(&file, buffer, f_size(&file), &br);
 80036de:	4b38      	ldr	r3, [pc, #224]	; (80037c0 <SD_init+0x1d8>)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <SD_init+0x1e0>)
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <SD_init+0x1e4>)
 80036e6:	4836      	ldr	r0, [pc, #216]	; (80037c0 <SD_init+0x1d8>)
 80036e8:	f007 fa28 	bl	800ab3c <f_read>
	printf("%s\r\n", buffer);
 80036ec:	4937      	ldr	r1, [pc, #220]	; (80037cc <SD_init+0x1e4>)
 80036ee:	4838      	ldr	r0, [pc, #224]	; (80037d0 <SD_init+0x1e8>)
 80036f0:	f00a fd04 	bl	800e0fc <iprintf>
	/* Close file */
	fresult = f_close(&file);
 80036f4:	4832      	ldr	r0, [pc, #200]	; (80037c0 <SD_init+0x1d8>)
 80036f6:	f007 fd92 	bl	800b21e <f_close>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b25      	ldr	r3, [pc, #148]	; (8003794 <SD_init+0x1ac>)
 8003700:	701a      	strb	r2, [r3, #0]

	/* Updating an existing file */
	fresult = f_open(&file, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8003702:	2212      	movs	r2, #18
 8003704:	492d      	ldr	r1, [pc, #180]	; (80037bc <SD_init+0x1d4>)
 8003706:	482e      	ldr	r0, [pc, #184]	; (80037c0 <SD_init+0x1d8>)
 8003708:	f007 f84c 	bl	800a7a4 <f_open>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	4b20      	ldr	r3, [pc, #128]	; (8003794 <SD_init+0x1ac>)
 8003712:	701a      	strb	r2, [r3, #0]
	/* Move to offset to the end to the file */
	fresult = f_lseek(&file, f_size(&file));
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <SD_init+0x1d8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4619      	mov	r1, r3
 800371a:	4829      	ldr	r0, [pc, #164]	; (80037c0 <SD_init+0x1d8>)
 800371c:	f007 fda9 	bl	800b272 <f_lseek>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <SD_init+0x1ac>)
 8003726:	701a      	strb	r2, [r3, #0]
	/* Writing text */
	fresult = f_puts("This is updated data and it should be in the end\n", &file);
 8003728:	4925      	ldr	r1, [pc, #148]	; (80037c0 <SD_init+0x1d8>)
 800372a:	482a      	ldr	r0, [pc, #168]	; (80037d4 <SD_init+0x1ec>)
 800372c:	f008 fa72 	bl	800bc14 <f_puts>
 8003730:	4603      	mov	r3, r0
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b17      	ldr	r3, [pc, #92]	; (8003794 <SD_init+0x1ac>)
 8003736:	701a      	strb	r2, [r3, #0]
	f_close(&file);
 8003738:	4821      	ldr	r0, [pc, #132]	; (80037c0 <SD_init+0x1d8>)
 800373a:	f007 fd70 	bl	800b21e <f_close>
	/* Open file to read */
	fresult = f_open(&file, "test.txt", FA_READ);
 800373e:	2201      	movs	r2, #1
 8003740:	491e      	ldr	r1, [pc, #120]	; (80037bc <SD_init+0x1d4>)
 8003742:	481f      	ldr	r0, [pc, #124]	; (80037c0 <SD_init+0x1d8>)
 8003744:	f007 f82e 	bl	800a7a4 <f_open>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <SD_init+0x1ac>)
 800374e:	701a      	strb	r2, [r3, #0]
	/* Read string from the file */
	f_read(&file, buffer, f_size(&file), &br);
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <SD_init+0x1d8>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <SD_init+0x1e0>)
 8003756:	491d      	ldr	r1, [pc, #116]	; (80037cc <SD_init+0x1e4>)
 8003758:	4819      	ldr	r0, [pc, #100]	; (80037c0 <SD_init+0x1d8>)
 800375a:	f007 f9ef 	bl	800ab3c <f_read>
	printf("%s\r\n", buffer);
 800375e:	491b      	ldr	r1, [pc, #108]	; (80037cc <SD_init+0x1e4>)
 8003760:	481b      	ldr	r0, [pc, #108]	; (80037d0 <SD_init+0x1e8>)
 8003762:	f00a fccb 	bl	800e0fc <iprintf>
	f_close(&file);
 8003766:	4816      	ldr	r0, [pc, #88]	; (80037c0 <SD_init+0x1d8>)
 8003768:	f007 fd59 	bl	800b21e <f_close>
	/* Remove files */
	fresult = f_unlink("test.txt");
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <SD_init+0x1d4>)
 800376e:	f008 f92f 	bl	800b9d0 <f_unlink>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <SD_init+0x1ac>)
 8003778:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK) printf("test.txt removed successfully\r\n");
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <SD_init+0x1ac>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <SD_init+0x1a0>
 8003782:	4815      	ldr	r0, [pc, #84]	; (80037d8 <SD_init+0x1f0>)
 8003784:	f00a fd28 	bl	800e1d8 <puts>
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	08011c44 	.word	0x08011c44
 8003790:	20000488 	.word	0x20000488
 8003794:	200024f0 	.word	0x200024f0
 8003798:	08011c48 	.word	0x08011c48
 800379c:	08011c68 	.word	0x08011c68
 80037a0:	200028f8 	.word	0x200028f8
 80037a4:	200028fc 	.word	0x200028fc
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	20002900 	.word	0x20002900
 80037b0:	08011c8c 	.word	0x08011c8c
 80037b4:	20002904 	.word	0x20002904
 80037b8:	08011ca8 	.word	0x08011ca8
 80037bc:	08011fb8 	.word	0x08011fb8
 80037c0:	200014c0 	.word	0x200014c0
 80037c4:	08011fc4 	.word	0x08011fc4
 80037c8:	200028f4 	.word	0x200028f4
 80037cc:	200024f4 	.word	0x200024f4
 80037d0:	08011a08 	.word	0x08011a08
 80037d4:	08011fd0 	.word	0x08011fd0
 80037d8:	08012004 	.word	0x08012004

080037dc <init_Date_Time>:

void init_Date_Time()
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
	gTime.Hours = 0x14;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <init_Date_Time+0x34>)
 80037e2:	2214      	movs	r2, #20
 80037e4:	701a      	strb	r2, [r3, #0]
	gTime.Minutes = 0x00;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <init_Date_Time+0x34>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
	gTime.Seconds = 0x00;
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <init_Date_Time+0x34>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	709a      	strb	r2, [r3, #2]
	gDate.Date = 0x26;
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <init_Date_Time+0x38>)
 80037f4:	2226      	movs	r2, #38	; 0x26
 80037f6:	709a      	strb	r2, [r3, #2]
	/* Get the RTC current Time */
	HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80037f8:	2200      	movs	r2, #0
 80037fa:	4905      	ldr	r1, [pc, #20]	; (8003810 <init_Date_Time+0x34>)
 80037fc:	4806      	ldr	r0, [pc, #24]	; (8003818 <init_Date_Time+0x3c>)
 80037fe:	f001 fd8a 	bl	8005316 <HAL_RTC_SetTime>
	/* Get the RTC current Date */
	HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003802:	2200      	movs	r2, #0
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <init_Date_Time+0x38>)
 8003806:	4804      	ldr	r0, [pc, #16]	; (8003818 <init_Date_Time+0x3c>)
 8003808:	f001 fe7d 	bl	8005506 <HAL_RTC_SetDate>
}
 800380c:	bf00      	nop
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20002a58 	.word	0x20002a58
 8003814:	20002a54 	.word	0x20002a54
 8003818:	2000026c 	.word	0x2000026c

0800381c <get_Date_Time>:

void get_Date_Time(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003820:	2200      	movs	r2, #0
 8003822:	4905      	ldr	r1, [pc, #20]	; (8003838 <get_Date_Time+0x1c>)
 8003824:	4805      	ldr	r0, [pc, #20]	; (800383c <get_Date_Time+0x20>)
 8003826:	f001 fe10 	bl	800544a <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800382a:	2200      	movs	r2, #0
 800382c:	4904      	ldr	r1, [pc, #16]	; (8003840 <get_Date_Time+0x24>)
 800382e:	4803      	ldr	r0, [pc, #12]	; (800383c <get_Date_Time+0x20>)
 8003830:	f001 feed 	bl	800560e <HAL_RTC_GetDate>
}
 8003834:	bf00      	nop
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20002a58 	.word	0x20002a58
 800383c:	2000026c 	.word	0x2000026c
 8003840:	20002a54 	.word	0x20002a54

08003844 <STM32_DIO0>:

bool STM32_DIO0(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
	return (bool)HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin);
 8003848:	2110      	movs	r1, #16
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <STM32_DIO0+0x1c>)
 800384c:	f000 ff4e 	bl	80046ec <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	bf14      	ite	ne
 8003856:	2301      	movne	r3, #1
 8003858:	2300      	moveq	r3, #0
 800385a:	b2db      	uxtb	r3, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40020000 	.word	0x40020000

08003864 <STM32_NRST>:

void STM32_NRST(bool val)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, (GPIO_PinState)val);
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	461a      	mov	r2, r3
 8003872:	2102      	movs	r1, #2
 8003874:	4803      	ldr	r0, [pc, #12]	; (8003884 <STM32_NRST+0x20>)
 8003876:	f000 ff51 	bl	800471c <HAL_GPIO_WritePin>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40020400 	.word	0x40020400

08003888 <STM32_NSEL>:

void STM32_NSEL(bool val)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, (GPIO_PinState)val);
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	461a      	mov	r2, r3
 8003896:	2101      	movs	r1, #1
 8003898:	4803      	ldr	r0, [pc, #12]	; (80038a8 <STM32_NSEL+0x20>)
 800389a:	f000 ff3f 	bl	800471c <HAL_GPIO_WritePin>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40020400 	.word	0x40020400

080038ac <STM32_DelayUs>:

void STM32_DelayUs(uint32_t delay)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <STM32_DelayUs+0x2c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < delay);
 80038bc:	bf00      	nop
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <STM32_DelayUs+0x2c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d8f9      	bhi.n	80038be <STM32_DelayUs+0x12>
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	200002e4 	.word	0x200002e4

080038dc <STM32_SPI_Write>:

uint8_t STM32_SPI_Write(uint8_t* pTxData, uint8_t dataLen, uint32_t timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	460b      	mov	r3, r1
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	72fb      	strb	r3, [r7, #11]
	return (uint8_t)HAL_SPI_Transmit(&hspi1, pTxData, dataLen, timeout);
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	4804      	ldr	r0, [pc, #16]	; (8003904 <STM32_SPI_Write+0x28>)
 80038f4:	f002 f821 	bl	800593a <HAL_SPI_Transmit>
 80038f8:	4603      	mov	r3, r0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000028c 	.word	0x2000028c

08003908 <STM32_SPI_Read>:

uint8_t STM32_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	460b      	mov	r3, r1
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	72fb      	strb	r3, [r7, #11]
	return (uint8_t)HAL_SPI_Receive(&hspi1, pRxData, dataLen, timeout);
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	b29a      	uxth	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68f9      	ldr	r1, [r7, #12]
 800391e:	4804      	ldr	r0, [pc, #16]	; (8003930 <STM32_SPI_Read+0x28>)
 8003920:	f002 f94e 	bl	8005bc0 <HAL_SPI_Receive>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000028c 	.word	0x2000028c

08003934 <STM32_SPI_WriteRead>:

uint8_t STM32_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	71fb      	strb	r3, [r7, #7]
	uint8_t* rxbuff = (uint8_t*)malloc((dataLen) * sizeof(uint8_t));
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	4618      	mov	r0, r3
 8003948:	f009 fb56 	bl	800cff8 <malloc>
 800394c:	4603      	mov	r3, r0
 800394e:	61bb      	str	r3, [r7, #24]
	uint8_t ret;
	ret = (uint8_t)HAL_SPI_TransmitReceive(&hspi1, pTxData, rxbuff, dataLen, timeout);
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	b29a      	uxth	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	4810      	ldr	r0, [pc, #64]	; (80039a0 <STM32_SPI_WriteRead+0x6c>)
 8003960:	f002 fa46 	bl	8005df0 <HAL_SPI_TransmitReceive>
 8003964:	4603      	mov	r3, r0
 8003966:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < dataLen - 1; i++)
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e00b      	b.n	8003986 <STM32_SPI_WriteRead+0x52>
	{
		pRxData[i] = rxbuff[i + 1];
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	441a      	add	r2, r3
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	440b      	add	r3, r1
 800397c:	7812      	ldrb	r2, [r2, #0]
 800397e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLen - 1; i++)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	3301      	adds	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	3b01      	subs	r3, #1
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbee      	blt.n	800396e <STM32_SPI_WriteRead+0x3a>
	}
	free(rxbuff);
 8003990:	69b8      	ldr	r0, [r7, #24]
 8003992:	f009 fb39 	bl	800d008 <free>
	return ret;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000028c 	.word	0x2000028c

080039a4 <STM32_SPI_CheckState>:

uint8_t STM32_SPI_CheckState(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_SPI_GetState(&hspi1);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <STM32_SPI_CheckState+0x10>)
 80039aa:	f002 fbd1 	bl	8006150 <HAL_SPI_GetState>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	2000028c 	.word	0x2000028c

080039b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039bc:	b672      	cpsid	i
}
 80039be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c0:	e7fe      	b.n	80039c0 <Error_Handler+0x8>
	...

080039c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_MspInit+0x4c>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <HAL_MspInit+0x4c>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6453      	str	r3, [r2, #68]	; 0x44
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <HAL_MspInit+0x4c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_MspInit+0x4c>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_MspInit+0x4c>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6413      	str	r3, [r2, #64]	; 0x40
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_MspInit+0x4c>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
 8003a2c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <HAL_RTC_MspInit+0x50>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d111      	bne.n	8003a5c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a40:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 faf2 	bl	8005030 <HAL_RCCEx_PeriphCLKConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a52:	f7ff ffb1 	bl	80039b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_RTC_MspInit+0x54>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40002800 	.word	0x40002800
 8003a68:	42470e3c 	.word	0x42470e3c

08003a6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	; 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <HAL_SPI_MspInit+0x84>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12b      	bne.n	8003ae6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a10      	ldr	r2, [pc, #64]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_SPI_MspInit+0x88>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ac6:	23e0      	movs	r3, #224	; 0xe0
 8003ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4805      	ldr	r0, [pc, #20]	; (8003af8 <HAL_SPI_MspInit+0x8c>)
 8003ae2:	f000 fc7f 	bl	80043e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003ae6:	bf00      	nop
 8003ae8:	3728      	adds	r7, #40	; 0x28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40013000 	.word	0x40013000
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020000 	.word	0x40020000

08003afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <HAL_TIM_Base_MspInit+0xa8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b2a:	e036      	b.n	8003b9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d116      	bne.n	8003b64 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2104      	movs	r1, #4
 8003b56:	201c      	movs	r0, #28
 8003b58:	f000 fb7b 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b5c:	201c      	movs	r0, #28
 8003b5e:	f000 fb94 	bl	800428a <HAL_NVIC_EnableIRQ>
}
 8003b62:	e01a      	b.n	8003b9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_TIM_Base_MspInit+0xb0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d115      	bne.n	8003b9a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <HAL_TIM_Base_MspInit+0xac>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	201d      	movs	r0, #29
 8003b90:	f000 fb5f 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b94:	201d      	movs	r0, #29
 8003b96:	f000 fb78 	bl	800428a <HAL_NVIC_EnableIRQ>
}
 8003b9a:	bf00      	nop
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40000400 	.word	0x40000400

08003bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <HAL_UART_MspInit+0x94>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d134      	bne.n	8003c3c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003bdc:	f043 0310 	orr.w	r3, r3, #16
 8003be0:	6453      	str	r3, [r2, #68]	; 0x44
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_UART_MspInit+0x98>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c10:	2302      	movs	r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c1c:	2307      	movs	r3, #7
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4619      	mov	r1, r3
 8003c26:	4809      	ldr	r0, [pc, #36]	; (8003c4c <HAL_UART_MspInit+0x9c>)
 8003c28:	f000 fbdc 	bl	80043e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2106      	movs	r1, #6
 8003c30:	2025      	movs	r0, #37	; 0x25
 8003c32:	f000 fb0e 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c36:	2025      	movs	r0, #37	; 0x25
 8003c38:	f000 fb27 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003c3c:	bf00      	nop
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020000 	.word	0x40020000

08003c50 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <SDTimer_Handler+0x40>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <SDTimer_Handler+0x1c>
		Timer1--;
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <SDTimer_Handler+0x40>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <SDTimer_Handler+0x40>)
 8003c6a:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <SDTimer_Handler+0x44>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <SDTimer_Handler+0x34>
		Timer2--;
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <SDTimer_Handler+0x44>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SDTimer_Handler+0x44>)
 8003c82:	701a      	strb	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20002abd 	.word	0x20002abd
 8003c94:	20002abe 	.word	0x20002abe

08003c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c9c:	e7fe      	b.n	8003c9c <NMI_Handler+0x4>

08003c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ca2:	e7fe      	b.n	8003ca2 <HardFault_Handler+0x4>

08003ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ca8:	e7fe      	b.n	8003ca8 <MemManage_Handler+0x4>

08003caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cae:	e7fe      	b.n	8003cae <BusFault_Handler+0x4>

08003cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <UsageFault_Handler+0x4>

08003cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003ce4:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <SysTick_Handler+0x30>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <SysTick_Handler+0x30>)
 8003cf0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003cf2:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <SysTick_Handler+0x30>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b09      	cmp	r3, #9
 8003cfa:	d904      	bls.n	8003d06 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <SysTick_Handler+0x30>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003d02:	f7ff ffa5 	bl	8003c50 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d06:	f000 f985 	bl	8004014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20002abc 	.word	0x20002abc

08003d14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f000 fd19 	bl	8004750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8003d26:	2010      	movs	r0, #16
 8003d28:	f000 fd12 	bl	8004750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <TIM2_IRQHandler+0x10>)
 8003d36:	f002 fc96 	bl	8006666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000032c 	.word	0x2000032c

08003d44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <TIM3_IRQHandler+0x10>)
 8003d4a:	f002 fc8c 	bl	8006666 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000374 	.word	0x20000374

08003d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <USART1_IRQHandler+0x10>)
 8003d5e:	f003 f909 	bl	8006f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200003bc 	.word	0x200003bc

08003d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return 1;
 8003d70:	2301      	movs	r3, #1
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <_kill>:

int _kill(int pid, int sig)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d86:	f00a fb9b 	bl	800e4c0 <__errno>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2216      	movs	r2, #22
 8003d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_exit>:

void _exit (int status)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ffe7 	bl	8003d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dae:	e7fe      	b.n	8003dae <_exit+0x12>

08003db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e00a      	b.n	8003dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dc2:	f3af 8000 	nop.w
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	b2ca      	uxtb	r2, r1
 8003dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	dbf0      	blt.n	8003dc2 <_read+0x12>
  }

  return len;
 8003de0:	687b      	ldr	r3, [r7, #4]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e009      	b.n	8003e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	60ba      	str	r2, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fdd5 	bl	80019b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	dbf1      	blt.n	8003dfc <_write+0x12>
  }
  return len;
 8003e18:	687b      	ldr	r3, [r7, #4]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_close>:

int _close(int file)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_isatty>:

int _isatty(int file)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e62:	2301      	movs	r3, #1
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <_sbrk+0x5c>)
 8003e96:	4b15      	ldr	r3, [pc, #84]	; (8003eec <_sbrk+0x60>)
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <_sbrk+0x64>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <_sbrk+0x64>)
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <_sbrk+0x68>)
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <_sbrk+0x64>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d207      	bcs.n	8003ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ebc:	f00a fb00 	bl	800e4c0 <__errno>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eca:	e009      	b.n	8003ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <_sbrk+0x64>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4413      	add	r3, r2
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <_sbrk+0x64>)
 8003edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ede:	68fb      	ldr	r3, [r7, #12]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20020000 	.word	0x20020000
 8003eec:	00000400 	.word	0x00000400
 8003ef0:	20002ac0 	.word	0x20002ac0
 8003ef4:	20002e50 	.word	0x20002e50

08003ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <SystemInit+0x20>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <SystemInit+0x20>)
 8003f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000ed00 	.word	0xe000ed00

08003f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f20:	f7ff ffea 	bl	8003ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f24:	480c      	ldr	r0, [pc, #48]	; (8003f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f26:	490d      	ldr	r1, [pc, #52]	; (8003f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f28:	4a0d      	ldr	r2, [pc, #52]	; (8003f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f2c:	e002      	b.n	8003f34 <LoopCopyDataInit>

08003f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f32:	3304      	adds	r3, #4

08003f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f38:	d3f9      	bcc.n	8003f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f3c:	4c0a      	ldr	r4, [pc, #40]	; (8003f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f40:	e001      	b.n	8003f46 <LoopFillZerobss>

08003f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f44:	3204      	adds	r2, #4

08003f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f48:	d3fb      	bcc.n	8003f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f4a:	f00a fabf 	bl	800e4cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f4e:	f7fd fe21 	bl	8001b94 <main>
  bx  lr    
 8003f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f5c:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8003f60:	08012938 	.word	0x08012938
  ldr r2, =_sbss
 8003f64:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8003f68:	20002e50 	.word	0x20002e50

08003f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f6c:	e7fe      	b.n	8003f6c <ADC_IRQHandler>
	...

08003f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_Init+0x40>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <HAL_Init+0x40>)
 8003f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_Init+0x40>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_Init+0x40>)
 8003f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <HAL_Init+0x40>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f98:	2003      	movs	r0, #3
 8003f9a:	f000 f94f 	bl	800423c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f9e:	200f      	movs	r0, #15
 8003fa0:	f000 f808 	bl	8003fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa4:	f7ff fd0e 	bl	80039c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00

08003fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fbc:	4b12      	ldr	r3, [pc, #72]	; (8004008 <HAL_InitTick+0x54>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_InitTick+0x58>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f967 	bl	80042a6 <HAL_SYSTICK_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e00e      	b.n	8004000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b0f      	cmp	r3, #15
 8003fe6:	d80a      	bhi.n	8003ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fe8:	2200      	movs	r2, #0
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff0:	f000 f92f 	bl	8004252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ff4:	4a06      	ldr	r2, [pc, #24]	; (8004010 <HAL_InitTick+0x5c>)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e000      	b.n	8004000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000064 	.word	0x20000064
 800400c:	2000006c 	.word	0x2000006c
 8004010:	20000068 	.word	0x20000068

08004014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_IncTick+0x20>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_IncTick+0x24>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4413      	add	r3, r2
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <HAL_IncTick+0x24>)
 8004026:	6013      	str	r3, [r2, #0]
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000006c 	.word	0x2000006c
 8004038:	20002ac4 	.word	0x20002ac4

0800403c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return uwTick;
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <HAL_GetTick+0x14>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20002ac4 	.word	0x20002ac4

08004054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7ff ffee 	bl	800403c <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406c:	d005      	beq.n	800407a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_Delay+0x44>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800407a:	bf00      	nop
 800407c:	f7ff ffde 	bl	800403c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	429a      	cmp	r2, r3
 800408a:	d8f7      	bhi.n	800407c <HAL_Delay+0x28>
  {
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2000006c 	.word	0x2000006c

0800409c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <__NVIC_SetPriorityGrouping+0x44>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040b8:	4013      	ands	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ce:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <__NVIC_SetPriorityGrouping+0x44>)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	60d3      	str	r3, [r2, #12]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040e8:	4b04      	ldr	r3, [pc, #16]	; (80040fc <__NVIC_GetPriorityGrouping+0x18>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	0a1b      	lsrs	r3, r3, #8
 80040ee:	f003 0307 	and.w	r3, r3, #7
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	2b00      	cmp	r3, #0
 8004110:	db0b      	blt.n	800412a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	f003 021f 	and.w	r2, r3, #31
 8004118:	4907      	ldr	r1, [pc, #28]	; (8004138 <__NVIC_EnableIRQ+0x38>)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2001      	movs	r0, #1
 8004122:	fa00 f202 	lsl.w	r2, r0, r2
 8004126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	e000e100 	.word	0xe000e100

0800413c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	; (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	; (800418c <__NVIC_SetPriority+0x50>)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf28      	it	cs
 80041ae:	2304      	movcs	r3, #4
 80041b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d902      	bls.n	80041c0 <NVIC_EncodePriority+0x30>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3b03      	subs	r3, #3
 80041be:	e000      	b.n	80041c2 <NVIC_EncodePriority+0x32>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	4313      	orrs	r3, r2
         );
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004208:	d301      	bcc.n	800420e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800420a:	2301      	movs	r3, #1
 800420c:	e00f      	b.n	800422e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <SysTick_Config+0x40>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004216:	210f      	movs	r1, #15
 8004218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800421c:	f7ff ff8e 	bl	800413c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <SysTick_Config+0x40>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SysTick_Config+0x40>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff29 	bl	800409c <__NVIC_SetPriorityGrouping>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004264:	f7ff ff3e 	bl	80040e4 <__NVIC_GetPriorityGrouping>
 8004268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ff8e 	bl	8004190 <NVIC_EncodePriority>
 8004274:	4602      	mov	r2, r0
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff5d 	bl	800413c <__NVIC_SetPriority>
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff31 	bl	8004100 <__NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ffa2 	bl	80041f8 <SysTick_Config>
 80042b4:	4603      	mov	r3, r0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff feb6 	bl	800403c <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d008      	beq.n	80042f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2280      	movs	r2, #128	; 0x80
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e052      	b.n	8004396 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0216 	bic.w	r2, r2, #22
 80042fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695a      	ldr	r2, [r3, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800430e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <HAL_DMA_Abort+0x62>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0208 	bic.w	r2, r2, #8
 800432e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004340:	e013      	b.n	800436a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004342:	f7ff fe7b 	bl	800403c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b05      	cmp	r3, #5
 800434e:	d90c      	bls.n	800436a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2203      	movs	r2, #3
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e015      	b.n	8004396 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e4      	bne.n	8004342 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	223f      	movs	r2, #63	; 0x3f
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d004      	beq.n	80043bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e00c      	b.n	80043d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2205      	movs	r2, #5
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0201 	bic.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	; 0x24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	e159      	b.n	80046b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4013      	ands	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 8148 	bne.w	80046ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d005      	beq.n	8004436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004432:	2b02      	cmp	r3, #2
 8004434:	d130      	bne.n	8004498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800446c:	2201      	movs	r2, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 0201 	and.w	r2, r3, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d017      	beq.n	80044d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d123      	bne.n	8004528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	08da      	lsrs	r2, r3, #3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3208      	adds	r2, #8
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	220f      	movs	r2, #15
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4013      	ands	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4313      	orrs	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	08da      	lsrs	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3208      	adds	r2, #8
 8004522:	69b9      	ldr	r1, [r7, #24]
 8004524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	2203      	movs	r2, #3
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a2 	beq.w	80046ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	4b57      	ldr	r3, [pc, #348]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4a56      	ldr	r2, [pc, #344]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 8004574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004578:	6453      	str	r3, [r2, #68]	; 0x44
 800457a:	4b54      	ldr	r3, [pc, #336]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004586:	4a52      	ldr	r2, [pc, #328]	; (80046d0 <HAL_GPIO_Init+0x2ec>)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	3302      	adds	r3, #2
 800458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a49      	ldr	r2, [pc, #292]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d019      	beq.n	80045e6 <HAL_GPIO_Init+0x202>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a48      	ldr	r2, [pc, #288]	; (80046d8 <HAL_GPIO_Init+0x2f4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <HAL_GPIO_Init+0x1fe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a47      	ldr	r2, [pc, #284]	; (80046dc <HAL_GPIO_Init+0x2f8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00d      	beq.n	80045de <HAL_GPIO_Init+0x1fa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a46      	ldr	r2, [pc, #280]	; (80046e0 <HAL_GPIO_Init+0x2fc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <HAL_GPIO_Init+0x1f6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a45      	ldr	r2, [pc, #276]	; (80046e4 <HAL_GPIO_Init+0x300>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <HAL_GPIO_Init+0x1f2>
 80045d2:	2304      	movs	r3, #4
 80045d4:	e008      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045d6:	2307      	movs	r3, #7
 80045d8:	e006      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045da:	2303      	movs	r3, #3
 80045dc:	e004      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045de:	2302      	movs	r3, #2
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_GPIO_Init+0x204>
 80045e6:	2300      	movs	r3, #0
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f002 0203 	and.w	r2, r2, #3
 80045ee:	0092      	lsls	r2, r2, #2
 80045f0:	4093      	lsls	r3, r2
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045f8:	4935      	ldr	r1, [pc, #212]	; (80046d0 <HAL_GPIO_Init+0x2ec>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004606:	4b38      	ldr	r3, [pc, #224]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <HAL_GPIO_Init+0x304>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <HAL_GPIO_Init+0x304>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_GPIO_Init+0x304>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046a8:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <HAL_GPIO_Init+0x304>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	f67f aea2 	bls.w	8004400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	3724      	adds	r7, #36	; 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40020000 	.word	0x40020000
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40020c00 	.word	0x40020c00
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40013c00 	.word	0x40013c00

080046ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e001      	b.n	800470e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
 8004728:	4613      	mov	r3, r2
 800472a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800472c:	787b      	ldrb	r3, [r7, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004738:	e003      	b.n	8004742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800473a:	887b      	ldrh	r3, [r7, #2]
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	619a      	str	r2, [r3, #24]
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004766:	4a05      	ldr	r2, [pc, #20]	; (800477c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd f932 	bl	80019d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	40013c00 	.word	0x40013c00

08004780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e267      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479e:	4b88      	ldr	r3, [pc, #544]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00c      	beq.n	80047c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047aa:	4b85      	ldr	r3, [pc, #532]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d112      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b6:	4b82      	ldr	r3, [pc, #520]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047c2:	d10b      	bne.n	80047dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047c4:	4b7e      	ldr	r3, [pc, #504]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05b      	beq.n	8004888 <HAL_RCC_OscConfig+0x108>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d157      	bne.n	8004888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e242      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d106      	bne.n	80047f4 <HAL_RCC_OscConfig+0x74>
 80047e6:	4b76      	ldr	r3, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a75      	ldr	r2, [pc, #468]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	e01d      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047fc:	d10c      	bne.n	8004818 <HAL_RCC_OscConfig+0x98>
 80047fe:	4b70      	ldr	r3, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6f      	ldr	r2, [pc, #444]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	4b6d      	ldr	r3, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e00b      	b.n	8004830 <HAL_RCC_OscConfig+0xb0>
 8004818:	4b69      	ldr	r3, [pc, #420]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a68      	ldr	r2, [pc, #416]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b66      	ldr	r3, [pc, #408]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a65      	ldr	r2, [pc, #404]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7ff fc00 	bl	800403c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004840:	f7ff fbfc 	bl	800403c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e207      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b5b      	ldr	r3, [pc, #364]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0xc0>
 800485e:	e014      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7ff fbec 	bl	800403c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7ff fbe8 	bl	800403c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1f3      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0xe8>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004896:	4b4a      	ldr	r3, [pc, #296]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d11c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ae:	4b44      	ldr	r3, [pc, #272]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d116      	bne.n	80048e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ba:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1c7      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	4937      	ldr	r1, [pc, #220]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	e03a      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d020      	beq.n	8004932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7ff fba1 	bl	800403c <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048fe:	f7ff fb9d 	bl	800403c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e1a8      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4925      	ldr	r1, [pc, #148]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_OscConfig+0x244>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7ff fb80 	bl	800403c <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004940:	f7ff fb7c 	bl	800403c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e187      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d036      	beq.n	80049d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7ff fb60 	bl	800403c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004980:	f7ff fb5c 	bl	800403c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e167      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x240>)
 8004994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x200>
 800499e:	e01b      	b.n	80049d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_RCC_OscConfig+0x248>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a6:	f7ff fb49 	bl	800403c <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	e00e      	b.n	80049cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049ae:	f7ff fb45 	bl	800403c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d907      	bls.n	80049cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e150      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470000 	.word	0x42470000
 80049c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049cc:	4b88      	ldr	r3, [pc, #544]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ea      	bne.n	80049ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8097 	beq.w	8004b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ea:	4b81      	ldr	r3, [pc, #516]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]
 80049fa:	4b7d      	ldr	r3, [pc, #500]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a04:	6413      	str	r3, [r2, #64]	; 0x40
 8004a06:	4b7a      	ldr	r3, [pc, #488]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	60bb      	str	r3, [r7, #8]
 8004a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a16:	4b77      	ldr	r3, [pc, #476]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d118      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a22:	4b74      	ldr	r3, [pc, #464]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2e:	f7ff fb05 	bl	800403c <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7ff fb01 	bl	800403c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e10c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_OscConfig+0x474>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d106      	bne.n	8004a6a <HAL_RCC_OscConfig+0x2ea>
 8004a5c:	4b64      	ldr	r3, [pc, #400]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a63      	ldr	r2, [pc, #396]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	e01c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x30c>
 8004a72:	4b5f      	ldr	r3, [pc, #380]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a5e      	ldr	r2, [pc, #376]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7e:	4b5c      	ldr	r3, [pc, #368]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8a:	e00b      	b.n	8004aa4 <HAL_RCC_OscConfig+0x324>
 8004a8c:	4b58      	ldr	r3, [pc, #352]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a57      	ldr	r2, [pc, #348]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	4b55      	ldr	r3, [pc, #340]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d015      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7ff fac6 	bl	800403c <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7ff fac2 	bl	800403c <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0cb      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ee      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x334>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7ff fab0 	bl	800403c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7ff faac 	bl	800403c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e0b5      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ee      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d105      	bne.n	8004b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	4a38      	ldr	r2, [pc, #224]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a1 	beq.w	8004c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b1e:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d05c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d141      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	4b31      	ldr	r3, [pc, #196]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7ff fa80 	bl	800403c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b40:	f7ff fa7c 	bl	800403c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e087      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	085b      	lsrs	r3, r3, #1
 8004b76:	3b01      	subs	r3, #1
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	061b      	lsls	r3, r3, #24
 8004b82:	491b      	ldr	r1, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7ff fa55 	bl	800403c <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b96:	f7ff fa51 	bl	800403c <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e05c      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x416>
 8004bb4:	e054      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_RCC_OscConfig+0x478>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7ff fa3e 	bl	800403c <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7ff fa3a 	bl	800403c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e045      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f0      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x444>
 8004be2:	e03d      	b.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e038      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_RCC_OscConfig+0x4ec>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d028      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d121      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d11a      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d111      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	3b01      	subs	r3, #1
 8004c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d001      	beq.n	8004c60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0cc      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c84:	4b68      	ldr	r3, [pc, #416]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d90c      	bls.n	8004cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b65      	ldr	r3, [pc, #404]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0b8      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d020      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cc4:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cdc:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4a52      	ldr	r2, [pc, #328]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce8:	4b50      	ldr	r3, [pc, #320]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	494d      	ldr	r1, [pc, #308]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d044      	beq.n	8004d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d107      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d119      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e07f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d003      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e06f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3e:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e067      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 0203 	bic.w	r2, r3, #3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4934      	ldr	r1, [pc, #208]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d60:	f7ff f96c 	bl	800403c <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d68:	f7ff f968 	bl	800403c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e04f      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	4b2b      	ldr	r3, [pc, #172]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 020c 	and.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1eb      	bne.n	8004d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d20c      	bcs.n	8004db8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b22      	ldr	r3, [pc, #136]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b20      	ldr	r3, [pc, #128]	; (8004e28 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4916      	ldr	r1, [pc, #88]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	490e      	ldr	r1, [pc, #56]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df6:	f000 f821 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	5ccb      	ldrb	r3, [r1, r3]
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff f8cc 	bl	8003fb4 <HAL_InitTick>

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023c00 	.word	0x40023c00
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	080120a8 	.word	0x080120a8
 8004e34:	20000064 	.word	0x20000064
 8004e38:	20000068 	.word	0x20000068

08004e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b090      	sub	sp, #64	; 0x40
 8004e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
 8004e48:	2300      	movs	r3, #0
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e54:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 030c 	and.w	r3, r3, #12
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d00d      	beq.n	8004e7c <HAL_RCC_GetSysClockFreq+0x40>
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	f200 80a1 	bhi.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x34>
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e6e:	e09b      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e70:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e74:	e09b      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e76:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004e7a:	e098      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e7c:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e86:	4b4d      	ldr	r3, [pc, #308]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d028      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e92:	4b4a      	ldr	r3, [pc, #296]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	2200      	movs	r2, #0
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ea8:	fb03 f201 	mul.w	r2, r3, r1
 8004eac:	2300      	movs	r3, #0
 8004eae:	fb00 f303 	mul.w	r3, r0, r3
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4a43      	ldr	r2, [pc, #268]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eb6:	fba0 1202 	umull	r1, r2, r0, r2
 8004eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec2:	4413      	add	r3, r2
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec8:	2200      	movs	r2, #0
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	61fa      	str	r2, [r7, #28]
 8004ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ed6:	f7fb fedf 	bl	8000c98 <__aeabi_uldivmod>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4613      	mov	r3, r2
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee2:	e053      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	2200      	movs	r2, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	617a      	str	r2, [r7, #20]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ef6:	f04f 0b00 	mov.w	fp, #0
 8004efa:	4652      	mov	r2, sl
 8004efc:	465b      	mov	r3, fp
 8004efe:	f04f 0000 	mov.w	r0, #0
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0c:	0150      	lsls	r0, r2, #5
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	ebb2 080a 	subs.w	r8, r2, sl
 8004f16:	eb63 090b 	sbc.w	r9, r3, fp
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f2e:	ebb2 0408 	subs.w	r4, r2, r8
 8004f32:	eb63 0509 	sbc.w	r5, r3, r9
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	00eb      	lsls	r3, r5, #3
 8004f40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f44:	00e2      	lsls	r2, r4, #3
 8004f46:	4614      	mov	r4, r2
 8004f48:	461d      	mov	r5, r3
 8004f4a:	eb14 030a 	adds.w	r3, r4, sl
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	eb45 030b 	adc.w	r3, r5, fp
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f62:	4629      	mov	r1, r5
 8004f64:	028b      	lsls	r3, r1, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	028a      	lsls	r2, r1, #10
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	2200      	movs	r2, #0
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	60fa      	str	r2, [r7, #12]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	f7fb fe8a 	bl	8000c98 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3740      	adds	r7, #64	; 0x40
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	017d7840 	.word	0x017d7840

08004fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fcc:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000064 	.word	0x20000064

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff0 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	080120b8 	.word	0x080120b8

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800500c:	f7ff ffdc 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0b5b      	lsrs	r3, r3, #13
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	080120b8 	.word	0x080120b8

08005030 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005054:	2b00      	cmp	r3, #0
 8005056:	d038      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005058:	4b68      	ldr	r3, [pc, #416]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800505e:	f7fe ffed 	bl	800403c <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005064:	e008      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005066:	f7fe ffe9 	bl	800403c <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e0bd      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005078:	4b61      	ldr	r3, [pc, #388]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	019b      	lsls	r3, r3, #6
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	071b      	lsls	r3, r3, #28
 8005096:	495a      	ldr	r1, [pc, #360]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800509e:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050a4:	f7fe ffca 	bl	800403c <HAL_GetTick>
 80050a8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ac:	f7fe ffc6 	bl	800403c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e09a      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050be:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8083 	beq.w	80051de <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	4b48      	ldr	r3, [pc, #288]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	4a47      	ldr	r2, [pc, #284]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6413      	str	r3, [r2, #64]	; 0x40
 80050e8:	4b45      	ldr	r3, [pc, #276]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050f4:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a42      	ldr	r2, [pc, #264]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005100:	f7fe ff9c 	bl	800403c <HAL_GetTick>
 8005104:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005108:	f7fe ff98 	bl	800403c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e06c      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800511a:	4b3a      	ldr	r3, [pc, #232]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005126:	4b36      	ldr	r3, [pc, #216]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02f      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	429a      	cmp	r2, r3
 8005142:	d028      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005144:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800514e:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005150:	2201      	movs	r2, #1
 8005152:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005154:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800515a:	4a29      	ldr	r2, [pc, #164]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d114      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe ff66 	bl	800403c <HAL_GetTick>
 8005170:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fe ff62 	bl	800403c <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e034      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	4b1d      	ldr	r3, [pc, #116]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0ee      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a2:	d10d      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80051a4:	4b16      	ldr	r3, [pc, #88]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b8:	4911      	ldr	r1, [pc, #68]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]
 80051be:	e005      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051ca:	6093      	str	r3, [r2, #8]
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	4909      	ldr	r1, [pc, #36]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7d1a      	ldrb	r2, [r3, #20]
 80051ee:	4b07      	ldr	r3, [pc, #28]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80051f0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	42470068 	.word	0x42470068
 8005200:	40023800 	.word	0x40023800
 8005204:	40007000 	.word	0x40007000
 8005208:	42470e40 	.word	0x42470e40
 800520c:	424711e0 	.word	0x424711e0

08005210 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e073      	b.n	800530e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7f5b      	ldrb	r3, [r3, #29]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d105      	bne.n	800523c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fe fbec 	bl	8003a14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d055      	beq.n	80052fc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	22ca      	movs	r2, #202	; 0xca
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2253      	movs	r2, #83	; 0x53
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa49 	bl	80056f8 <RTC_EnterInitMode>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d12c      	bne.n	80052ca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68d2      	ldr	r2, [r2, #12]
 80052aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	041a      	lsls	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa50 	bl	8005766 <RTC_ExitInitMode>
 80052c6:	4603      	mov	r3, r0
 80052c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d110      	bne.n	80052f2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	22ff      	movs	r2, #255	; 0xff
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
 80052fa:	e001      	b.n	8005300 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	7f1b      	ldrb	r3, [r3, #28]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_RTC_SetTime+0x1c>
 800532e:	2302      	movs	r3, #2
 8005330:	e087      	b.n	8005442 <HAL_RTC_SetTime+0x12c>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2202      	movs	r2, #2
 800533c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d126      	bne.n	8005392 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fa27 	bl	80057b0 <RTC_ByteToBcd2>
 8005362:	4603      	mov	r3, r0
 8005364:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fa20 	bl	80057b0 <RTC_ByteToBcd2>
 8005370:	4603      	mov	r3, r0
 8005372:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005374:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	789b      	ldrb	r3, [r3, #2]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fa18 	bl	80057b0 <RTC_ByteToBcd2>
 8005380:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005382:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	78db      	ldrb	r3, [r3, #3]
 800538a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e018      	b.n	80053c4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053b2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80053b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	78db      	ldrb	r3, [r3, #3]
 80053be:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	22ca      	movs	r2, #202	; 0xca
 80053ca:	625a      	str	r2, [r3, #36]	; 0x24
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2253      	movs	r2, #83	; 0x53
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f98f 	bl	80056f8 <RTC_EnterInitMode>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d120      	bne.n	8005426 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053f2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005402:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	431a      	orrs	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f9a2 	bl	8005766 <RTC_ExitInitMode>
 8005422:	4603      	mov	r3, r0
 8005424:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]

  return status;
 8005440:	7cfb      	ldrb	r3, [r7, #19]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}

0800544a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800547c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005480:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	0c1b      	lsrs	r3, r3, #16
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	0a1b      	lsrs	r3, r3, #8
 8005496:	b2db      	uxtb	r3, r3
 8005498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800549c:	b2da      	uxtb	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0d9b      	lsrs	r3, r3, #22
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11a      	bne.n	80054fc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f98e 	bl	80057ec <RTC_Bcd2ToByte>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f985 	bl	80057ec <RTC_Bcd2ToByte>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	789b      	ldrb	r3, [r3, #2]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f97c 	bl	80057ec <RTC_Bcd2ToByte>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005506:	b590      	push	{r4, r7, lr}
 8005508:	b087      	sub	sp, #28
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	7f1b      	ldrb	r3, [r3, #28]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_RTC_SetDate+0x1c>
 800551e:	2302      	movs	r3, #2
 8005520:	e071      	b.n	8005606 <HAL_RTC_SetDate+0x100>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2202      	movs	r2, #2
 800552c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10e      	bne.n	8005552 <HAL_RTC_SetDate+0x4c>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	f023 0310 	bic.w	r3, r3, #16
 8005548:	b2db      	uxtb	r3, r3
 800554a:	330a      	adds	r3, #10
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11c      	bne.n	8005592 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f927 	bl	80057b0 <RTC_ByteToBcd2>
 8005562:	4603      	mov	r3, r0
 8005564:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f920 	bl	80057b0 <RTC_ByteToBcd2>
 8005570:	4603      	mov	r3, r0
 8005572:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005574:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	789b      	ldrb	r3, [r3, #2]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f918 	bl	80057b0 <RTC_ByteToBcd2>
 8005580:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005582:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e00e      	b.n	80055b0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	78db      	ldrb	r3, [r3, #3]
 8005596:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800559e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	22ca      	movs	r2, #202	; 0xca
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2253      	movs	r2, #83	; 0x53
 80055be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f899 	bl	80056f8 <RTC_EnterInitMode>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10c      	bne.n	80055ea <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80055de:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f8c0 	bl	8005766 <RTC_ExitInitMode>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	22ff      	movs	r2, #255	; 0xff
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]

  return status;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
}
 8005606:	4618      	mov	r0, r3
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}

0800560e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800562c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	0b5b      	lsrs	r3, r3, #13
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11a      	bne.n	80056a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f8bb 	bl	80057ec <RTC_Bcd2ToByte>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f8b2 	bl	80057ec <RTC_Bcd2ToByte>
 8005688:	4603      	mov	r3, r0
 800568a:	461a      	mov	r2, r3
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	789b      	ldrb	r3, [r3, #2]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f8a9 	bl	80057ec <RTC_Bcd2ToByte>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <HAL_RTC_WaitForSynchro+0x48>)
 80056be:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056c0:	f7fe fcbc 	bl	800403c <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056c6:	e009      	b.n	80056dc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056c8:	f7fe fcb8 	bl	800403c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056d6:	d901      	bls.n	80056dc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e007      	b.n	80056ec <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ee      	beq.n	80056c8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	00013f5f 	.word	0x00013f5f

080056f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d122      	bne.n	800575c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005724:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005726:	f7fe fc89 	bl	800403c <HAL_GetTick>
 800572a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800572c:	e00c      	b.n	8005748 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800572e:	f7fe fc85 	bl	800403c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573c:	d904      	bls.n	8005748 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2204      	movs	r2, #4
 8005742:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <RTC_EnterInitMode+0x64>
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d1e8      	bne.n	800572e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005780:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ff8b 	bl	80056ac <HAL_RTC_WaitForSynchro>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2204      	movs	r2, #4
 80057a0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80057be:	e005      	b.n	80057cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	3b0a      	subs	r3, #10
 80057ca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d8f6      	bhi.n	80057c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	4313      	orrs	r3, r2
 80057de:	b2db      	uxtb	r3, r3
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	091b      	lsrs	r3, r3, #4
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	461a      	mov	r2, r3
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	b2db      	uxtb	r3, r3
 8005818:	4413      	add	r3, r2
 800581a:	b2db      	uxtb	r3, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e07b      	b.n	8005932 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	d108      	bne.n	8005854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584a:	d009      	beq.n	8005860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	61da      	str	r2, [r3, #28]
 8005852:	e005      	b.n	8005860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fe f8f6 	bl	8003a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e4:	ea42 0103 	orr.w	r1, r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0104 	and.w	r1, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	f003 0210 	and.w	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005920:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b088      	sub	sp, #32
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_SPI_Transmit+0x22>
 8005958:	2302      	movs	r3, #2
 800595a:	e12d      	b.n	8005bb8 <HAL_SPI_Transmit+0x27e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005964:	f7fe fb6a 	bl	800403c <HAL_GetTick>
 8005968:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d002      	beq.n	8005980 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800597a:	2302      	movs	r3, #2
 800597c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800597e:	e116      	b.n	8005bae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_SPI_Transmit+0x52>
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005990:	e10d      	b.n	8005bae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2203      	movs	r2, #3
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	88fa      	ldrh	r2, [r7, #6]
 80059b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d8:	d10f      	bne.n	80059fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d007      	beq.n	8005a18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a20:	d14f      	bne.n	8005ac2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Transmit+0xf6>
 8005a2a:	8afb      	ldrh	r3, [r7, #22]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d142      	bne.n	8005ab6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	1c9a      	adds	r2, r3, #2
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a54:	e02f      	b.n	8005ab6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d112      	bne.n	8005a8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a88:	e015      	b.n	8005ab6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8a:	f7fe fad7 	bl	800403c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d803      	bhi.n	8005aa2 <HAL_SPI_Transmit+0x168>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa0:	d102      	bne.n	8005aa8 <HAL_SPI_Transmit+0x16e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d106      	bne.n	8005ab6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ab4:	e07b      	b.n	8005bae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ca      	bne.n	8005a56 <HAL_SPI_Transmit+0x11c>
 8005ac0:	e050      	b.n	8005b64 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_SPI_Transmit+0x196>
 8005aca:	8afb      	ldrh	r3, [r7, #22]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d144      	bne.n	8005b5a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005af6:	e030      	b.n	8005b5a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d113      	bne.n	8005b2e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b2c:	e015      	b.n	8005b5a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2e:	f7fe fa85 	bl	800403c <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d803      	bhi.n	8005b46 <HAL_SPI_Transmit+0x20c>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b44:	d102      	bne.n	8005b4c <HAL_SPI_Transmit+0x212>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b58:	e029      	b.n	8005bae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1c9      	bne.n	8005af8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fbed 	bl	8006348 <SPI_EndRxTxTransaction>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e003      	b.n	8005bae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005be4:	e0fb      	b.n	8005dde <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d112      	bne.n	8005c16 <HAL_SPI_Receive+0x56>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10e      	bne.n	8005c16 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c00:	88fa      	ldrh	r2, [r7, #6]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	4613      	mov	r3, r2
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f8ef 	bl	8005df0 <HAL_SPI_TransmitReceive>
 8005c12:	4603      	mov	r3, r0
 8005c14:	e0e8      	b.n	8005de8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_SPI_Receive+0x64>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e0e1      	b.n	8005de8 <HAL_SPI_Receive+0x228>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c2c:	f7fe fa06 	bl	800403c <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_SPI_Receive+0x7e>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d102      	bne.n	8005c44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c42:	e0cc      	b.n	8005dde <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2204      	movs	r2, #4
 8005c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	88fa      	ldrh	r2, [r7, #6]
 8005c62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8a:	d10f      	bne.n	8005cac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005caa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b40      	cmp	r3, #64	; 0x40
 8005cb8:	d007      	beq.n	8005cca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d16a      	bne.n	8005da8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cd2:	e032      	b.n	8005d3a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d115      	bne.n	8005d0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f103 020c 	add.w	r2, r3, #12
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d0c:	e015      	b.n	8005d3a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0e:	f7fe f995 	bl	800403c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d803      	bhi.n	8005d26 <HAL_SPI_Receive+0x166>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Receive+0x16c>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d38:	e051      	b.n	8005dde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1c7      	bne.n	8005cd4 <HAL_SPI_Receive+0x114>
 8005d44:	e035      	b.n	8005db2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d113      	bne.n	8005d7c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	b292      	uxth	r2, r2
 8005d60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	1c9a      	adds	r2, r3, #2
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d7a:	e015      	b.n	8005da8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7c:	f7fe f95e 	bl	800403c <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d803      	bhi.n	8005d94 <HAL_SPI_Receive+0x1d4>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d92:	d102      	bne.n	8005d9a <HAL_SPI_Receive+0x1da>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005da6:	e01a      	b.n	8005dde <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1c9      	bne.n	8005d46 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fa60 	bl	800627c <SPI_EndRxTransaction>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	75fb      	strb	r3, [r7, #23]
 8005dd4:	e003      	b.n	8005dde <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08c      	sub	sp, #48	; 0x30
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_SPI_TransmitReceive+0x26>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e198      	b.n	8006148 <HAL_SPI_TransmitReceive+0x358>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e1e:	f7fe f90d 	bl	800403c <HAL_GetTick>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d00f      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x70>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e46:	d107      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x68>
 8005e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d003      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e5e:	e16d      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x82>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_SPI_TransmitReceive+0x82>
 8005e6c:	887b      	ldrh	r3, [r7, #2]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e78:	e160      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d003      	beq.n	8005e8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	887a      	ldrh	r2, [r7, #2]
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	887a      	ldrh	r2, [r7, #2]
 8005eb0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	887a      	ldrh	r2, [r7, #2]
 8005eb6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d007      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eea:	d17c      	bne.n	8005fe6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_TransmitReceive+0x10a>
 8005ef4:	8b7b      	ldrh	r3, [r7, #26]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d16a      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	1c9a      	adds	r2, r3, #2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f1e:	e057      	b.n	8005fd0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d11b      	bne.n	8005f66 <HAL_SPI_TransmitReceive+0x176>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d016      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x176>
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d113      	bne.n	8005f66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d119      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x1b8>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d014      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fa8:	f7fe f848 	bl	800403c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d80b      	bhi.n	8005fd0 <HAL_SPI_TransmitReceive+0x1e0>
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fbe:	d007      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005fce:	e0b5      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1a2      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x130>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d19d      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x130>
 8005fe4:	e080      	b.n	80060e8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_TransmitReceive+0x204>
 8005fee:	8b7b      	ldrh	r3, [r7, #26]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d16f      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601a:	e05b      	b.n	80060d4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d11c      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x274>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d017      	beq.n	8006064 <HAL_SPI_TransmitReceive+0x274>
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d114      	bne.n	8006064 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b01      	cmp	r3, #1
 8006070:	d119      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x2b6>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d014      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060a2:	2301      	movs	r3, #1
 80060a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060a6:	f7fd ffc9 	bl	800403c <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <HAL_SPI_TransmitReceive+0x2ce>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060bc:	d102      	bne.n	80060c4 <HAL_SPI_TransmitReceive+0x2d4>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80060d2:	e033      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d19e      	bne.n	800601c <HAL_SPI_TransmitReceive+0x22c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d199      	bne.n	800601c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f92b 	bl	8006348 <SPI_EndRxTxTransaction>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d006      	beq.n	8006106 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006104:	e01a      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e003      	b.n	800613c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006144:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006148:	4618      	mov	r0, r3
 800614a:	3730      	adds	r7, #48	; 0x30
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615e:	b2db      	uxtb	r3, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800617c:	f7fd ff5e 	bl	800403c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	4413      	add	r3, r2
 800618a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800618c:	f7fd ff56 	bl	800403c <HAL_GetTick>
 8006190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006192:	4b39      	ldr	r3, [pc, #228]	; (8006278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	015b      	lsls	r3, r3, #5
 8006198:	0d1b      	lsrs	r3, r3, #20
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	e054      	b.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061aa:	d050      	beq.n	800624e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ac:	f7fd ff46 	bl	800403c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d902      	bls.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061da:	d111      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d004      	beq.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d107      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d10f      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e017      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3b01      	subs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	429a      	cmp	r2, r3
 800625c:	bf0c      	ite	eq
 800625e:	2301      	moveq	r3, #1
 8006260:	2300      	movne	r3, #0
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	429a      	cmp	r2, r3
 800626a:	d19b      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000064 	.word	0x20000064

0800627c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006290:	d111      	bne.n	80062b6 <SPI_EndRxTransaction+0x3a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629a:	d004      	beq.n	80062a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a4:	d107      	bne.n	80062b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062be:	d12a      	bne.n	8006316 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c8:	d012      	beq.n	80062f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff ff49 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02d      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e026      	b.n	800633e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	2101      	movs	r1, #1
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ff36 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d01a      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630a:	f043 0220 	orr.w	r2, r3, #32
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e013      	b.n	800633e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2200      	movs	r2, #0
 800631e:	2101      	movs	r1, #1
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7ff ff23 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d007      	beq.n	800633c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	f043 0220 	orr.w	r2, r3, #32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e000      	b.n	800633e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2201      	movs	r2, #1
 800635c:	2102      	movs	r1, #2
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f7ff ff04 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636e:	f043 0220 	orr.w	r2, r3, #32
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e032      	b.n	80063e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800637a:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <SPI_EndRxTxTransaction+0xa0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1b      	ldr	r2, [pc, #108]	; (80063ec <SPI_EndRxTxTransaction+0xa4>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	0d5b      	lsrs	r3, r3, #21
 8006386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006398:	d112      	bne.n	80063c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	; 0x80
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fee1 	bl	800616c <SPI_WaitFlagStateUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b80      	cmp	r3, #128	; 0x80
 80063d8:	d0f2      	beq.n	80063c0 <SPI_EndRxTxTransaction+0x78>
 80063da:	e000      	b.n	80063de <SPI_EndRxTxTransaction+0x96>
        break;
 80063dc:	bf00      	nop
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000064 	.word	0x20000064
 80063ec:	165e9f81 	.word	0x165e9f81

080063f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e041      	b.n	8006486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d106      	bne.n	800641c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7fd fb70 	bl	8003afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3304      	adds	r3, #4
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f000 faf8 	bl	8006a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
	...

08006490 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d001      	beq.n	80064a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e03c      	b.n	8006522 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	; (8006530 <HAL_TIM_Base_Start+0xa0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d018      	beq.n	80064ec <HAL_TIM_Base_Start+0x5c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d013      	beq.n	80064ec <HAL_TIM_Base_Start+0x5c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_TIM_Base_Start+0xa4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <HAL_TIM_Base_Start+0x5c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_TIM_Base_Start+0xa8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <HAL_TIM_Base_Start+0x5c>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <HAL_TIM_Base_Start+0xac>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <HAL_TIM_Base_Start+0x5c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a16      	ldr	r2, [pc, #88]	; (8006540 <HAL_TIM_Base_Start+0xb0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d111      	bne.n	8006510 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d010      	beq.n	8006520 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0201 	orr.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	e007      	b.n	8006520 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40014000 	.word	0x40014000

08006544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e044      	b.n	80065e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a1e      	ldr	r2, [pc, #120]	; (80065f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x6c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006586:	d013      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1a      	ldr	r2, [pc, #104]	; (80065f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x6c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a19      	ldr	r2, [pc, #100]	; (80065fc <HAL_TIM_Base_Start_IT+0xb8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x6c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a17      	ldr	r2, [pc, #92]	; (8006600 <HAL_TIM_Base_Start_IT+0xbc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x6c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_TIM_Base_Start_IT+0xc0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d111      	bne.n	80065d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b06      	cmp	r3, #6
 80065c0:	d010      	beq.n	80065e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	e007      	b.n	80065e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40010000 	.word	0x40010000
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40000c00 	.word	0x40000c00
 8006604:	40014000 	.word	0x40014000

08006608 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6a1a      	ldr	r2, [r3, #32]
 8006626:	f241 1311 	movw	r3, #4369	; 0x1111
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <HAL_TIM_Base_Stop_IT+0x48>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6a1a      	ldr	r2, [r3, #32]
 8006636:	f240 4344 	movw	r3, #1092	; 0x444
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d107      	bne.n	8006650 <HAL_TIM_Base_Stop_IT+0x48>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0202 	mvn.w	r2, #2
 800669a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f003 0303 	and.w	r3, r3, #3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f999 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 80066b6:	e005      	b.n	80066c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f98b 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f99c 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d020      	beq.n	8006716 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01b      	beq.n	8006716 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f06f 0204 	mvn.w	r2, #4
 80066e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f973 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 8006702:	e005      	b.n	8006710 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f965 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f976 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d020      	beq.n	8006762 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01b      	beq.n	8006762 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0208 	mvn.w	r2, #8
 8006732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2204      	movs	r2, #4
 8006738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f94d 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 800674e:	e005      	b.n	800675c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f93f 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f950 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	d01b      	beq.n	80067ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f06f 0210 	mvn.w	r2, #16
 800677e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2208      	movs	r2, #8
 8006784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f927 	bl	80069e8 <HAL_TIM_IC_CaptureCallback>
 800679a:	e005      	b.n	80067a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f919 	bl	80069d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f92a 	bl	80069fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f06f 0201 	mvn.w	r2, #1
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fc fe9b 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00c      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d007      	beq.n	80067f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fab5 	bl	8006d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00c      	beq.n	800681a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8fb 	bl	8006a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00c      	beq.n	800683e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f06f 0220 	mvn.w	r2, #32
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa87 	bl	8006d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_TIM_ConfigClockSource+0x1c>
 800685e:	2302      	movs	r3, #2
 8006860:	e0b4      	b.n	80069cc <HAL_TIM_ConfigClockSource+0x186>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006880:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006888:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800689a:	d03e      	beq.n	800691a <HAL_TIM_ConfigClockSource+0xd4>
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	f200 8087 	bhi.w	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a8:	f000 8086 	beq.w	80069b8 <HAL_TIM_ConfigClockSource+0x172>
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d87f      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068b2:	2b70      	cmp	r3, #112	; 0x70
 80068b4:	d01a      	beq.n	80068ec <HAL_TIM_ConfigClockSource+0xa6>
 80068b6:	2b70      	cmp	r3, #112	; 0x70
 80068b8:	d87b      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068ba:	2b60      	cmp	r3, #96	; 0x60
 80068bc:	d050      	beq.n	8006960 <HAL_TIM_ConfigClockSource+0x11a>
 80068be:	2b60      	cmp	r3, #96	; 0x60
 80068c0:	d877      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068c2:	2b50      	cmp	r3, #80	; 0x50
 80068c4:	d03c      	beq.n	8006940 <HAL_TIM_ConfigClockSource+0xfa>
 80068c6:	2b50      	cmp	r3, #80	; 0x50
 80068c8:	d873      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d058      	beq.n	8006980 <HAL_TIM_ConfigClockSource+0x13a>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d86f      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068d2:	2b30      	cmp	r3, #48	; 0x30
 80068d4:	d064      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x15a>
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d86b      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d060      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x15a>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d867      	bhi.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d05c      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x15a>
 80068e6:	2b10      	cmp	r3, #16
 80068e8:	d05a      	beq.n	80069a0 <HAL_TIM_ConfigClockSource+0x15a>
 80068ea:	e062      	b.n	80069b2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068fc:	f000 f998 	bl	8006c30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800690e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	609a      	str	r2, [r3, #8]
      break;
 8006918:	e04f      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800692a:	f000 f981 	bl	8006c30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800693c:	609a      	str	r2, [r3, #8]
      break;
 800693e:	e03c      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800694c:	461a      	mov	r2, r3
 800694e:	f000 f8f5 	bl	8006b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2150      	movs	r1, #80	; 0x50
 8006958:	4618      	mov	r0, r3
 800695a:	f000 f94e 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800695e:	e02c      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696c:	461a      	mov	r2, r3
 800696e:	f000 f914 	bl	8006b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2160      	movs	r1, #96	; 0x60
 8006978:	4618      	mov	r0, r3
 800697a:	f000 f93e 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800697e:	e01c      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800698c:	461a      	mov	r2, r3
 800698e:	f000 f8d5 	bl	8006b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2140      	movs	r1, #64	; 0x40
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f92e 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800699e:	e00c      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f000 f925 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80069b0:	e003      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	73fb      	strb	r3, [r7, #15]
      break;
 80069b6:	e000      	b.n	80069ba <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a3a      	ldr	r2, [pc, #232]	; (8006b20 <TIM_Base_SetConfig+0xfc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00f      	beq.n	8006a5c <TIM_Base_SetConfig+0x38>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a42:	d00b      	beq.n	8006a5c <TIM_Base_SetConfig+0x38>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a37      	ldr	r2, [pc, #220]	; (8006b24 <TIM_Base_SetConfig+0x100>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d007      	beq.n	8006a5c <TIM_Base_SetConfig+0x38>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a36      	ldr	r2, [pc, #216]	; (8006b28 <TIM_Base_SetConfig+0x104>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d003      	beq.n	8006a5c <TIM_Base_SetConfig+0x38>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a35      	ldr	r2, [pc, #212]	; (8006b2c <TIM_Base_SetConfig+0x108>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d108      	bne.n	8006a6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2b      	ldr	r2, [pc, #172]	; (8006b20 <TIM_Base_SetConfig+0xfc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d01b      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d017      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a28      	ldr	r2, [pc, #160]	; (8006b24 <TIM_Base_SetConfig+0x100>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <TIM_Base_SetConfig+0x104>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00f      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <TIM_Base_SetConfig+0x108>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d00b      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a25      	ldr	r2, [pc, #148]	; (8006b30 <TIM_Base_SetConfig+0x10c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d007      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a24      	ldr	r2, [pc, #144]	; (8006b34 <TIM_Base_SetConfig+0x110>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_Base_SetConfig+0x8a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a23      	ldr	r2, [pc, #140]	; (8006b38 <TIM_Base_SetConfig+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d108      	bne.n	8006ac0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a0e      	ldr	r2, [pc, #56]	; (8006b20 <TIM_Base_SetConfig+0xfc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d103      	bne.n	8006af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	611a      	str	r2, [r3, #16]
  }
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800

08006b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f023 0201 	bic.w	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 030a 	bic.w	r3, r3, #10
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b087      	sub	sp, #28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	f023 0210 	bic.w	r2, r3, #16
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	031b      	lsls	r3, r3, #12
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f043 0307 	orr.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	021a      	lsls	r2, r3, #8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e050      	b.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10c      	bne.n	8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000

08006d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e042      	b.n	8006e0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fc ff08 	bl	8003bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	; 0x24
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fdbd 	bl	8007938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d175      	bne.n	8006f20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_UART_Transmit+0x2c>
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e06e      	b.n	8006f22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2221      	movs	r2, #33	; 0x21
 8006e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e52:	f7fd f8f3 	bl	800403c <HAL_GetTick>
 8006e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	88fa      	ldrh	r2, [r7, #6]
 8006e62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6c:	d108      	bne.n	8006e80 <HAL_UART_Transmit+0x6c>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	e003      	b.n	8006e88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e88:	e02e      	b.n	8006ee8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2200      	movs	r2, #0
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fb1f 	bl	80074d8 <UART_WaitOnFlagUntilTimeout>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e03a      	b.n	8006f22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10b      	bne.n	8006eca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	e007      	b.n	8006eda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	781a      	ldrb	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1cb      	bne.n	8006e8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	2140      	movs	r1, #64	; 0x40
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 faeb 	bl	80074d8 <UART_WaitOnFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3720      	adds	r7, #32
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d112      	bne.n	8006f6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_UART_Receive_IT+0x26>
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e00b      	b.n	8006f6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fb12 	bl	800758a <UART_Start_Receive_IT>
 8006f66:	4603      	mov	r3, r0
 8006f68:	e000      	b.n	8006f6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b0ba      	sub	sp, #232	; 0xe8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10f      	bne.n	8006fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_UART_IRQHandler+0x66>
 8006fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fbf2 	bl	80077bc <UART_Receive_IT>
      return;
 8006fd8:	e25b      	b.n	8007492 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 80de 	beq.w	80071a0 <HAL_UART_IRQHandler+0x22c>
 8006fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d106      	bne.n	8006ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80d1 	beq.w	80071a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <HAL_UART_IRQHandler+0xae>
 800700a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <HAL_UART_IRQHandler+0xd2>
 800702e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703e:	f043 0202 	orr.w	r2, r3, #2
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_UART_IRQHandler+0xf6>
 8007052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007062:	f043 0204 	orr.w	r2, r3, #4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800706a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706e:	f003 0308 	and.w	r3, r3, #8
 8007072:	2b00      	cmp	r3, #0
 8007074:	d011      	beq.n	800709a <HAL_UART_IRQHandler+0x126>
 8007076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007092:	f043 0208 	orr.w	r2, r3, #8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 81f2 	beq.w	8007488 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_UART_IRQHandler+0x14e>
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb7d 	bl	80077bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <HAL_UART_IRQHandler+0x17a>
 80070e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d04f      	beq.n	800718e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fa85 	bl	80075fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d141      	bne.n	8007186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3314      	adds	r3, #20
 8007108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800711c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3314      	adds	r3, #20
 800712a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800712e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800713a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1d9      	bne.n	8007102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007152:	2b00      	cmp	r3, #0
 8007154:	d013      	beq.n	800717e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	4a7e      	ldr	r2, [pc, #504]	; (8007354 <HAL_UART_IRQHandler+0x3e0>)
 800715c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	4618      	mov	r0, r3
 8007164:	f7fd f91b 	bl	800439e <HAL_DMA_Abort_IT>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717c:	e00e      	b.n	800719c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f994 	bl	80074ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	e00a      	b.n	800719c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f990 	bl	80074ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	e006      	b.n	800719c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f98c 	bl	80074ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800719a:	e175      	b.n	8007488 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800719c:	bf00      	nop
    return;
 800719e:	e173      	b.n	8007488 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 814f 	bne.w	8007448 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80071aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ae:	f003 0310 	and.w	r3, r3, #16
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8148 	beq.w	8007448 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 8141 	beq.w	8007448 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	f040 80b6 	bne.w	8007358 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8145 	beq.w	800748c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800720a:	429a      	cmp	r2, r3
 800720c:	f080 813e 	bcs.w	800748c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007222:	f000 8088 	beq.w	8007336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800723c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800725e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800726a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1d9      	bne.n	8007226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3314      	adds	r3, #20
 8007278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007284:	f023 0301 	bic.w	r3, r3, #1
 8007288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3314      	adds	r3, #20
 8007292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800729a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800729e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072a2:	e841 2300 	strex	r3, r2, [r1]
 80072a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1e1      	bne.n	8007272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80072be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80072d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80072d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80072d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80072e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	330c      	adds	r3, #12
 80072fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007306:	f023 0310 	bic.w	r3, r3, #16
 800730a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007318:	65ba      	str	r2, [r7, #88]	; 0x58
 800731a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800731e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007330:	4618      	mov	r0, r3
 8007332:	f7fc ffc4 	bl	80042be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007344:	b29b      	uxth	r3, r3
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	b29b      	uxth	r3, r3
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8b7 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007352:	e09b      	b.n	800748c <HAL_UART_IRQHandler+0x518>
 8007354:	080076c5 	.word	0x080076c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007360:	b29b      	uxth	r3, r3
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 808e 	beq.w	8007490 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8089 	beq.w	8007490 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007394:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	330c      	adds	r3, #12
 800739e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073a2:	647a      	str	r2, [r7, #68]	; 0x44
 80073a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e3      	bne.n	800737e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	623b      	str	r3, [r7, #32]
   return(result);
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3314      	adds	r3, #20
 80073d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80073da:	633a      	str	r2, [r7, #48]	; 0x30
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e3      	bne.n	80073b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	e853 3f00 	ldrex	r3, [r3]
 800740a:	60fb      	str	r3, [r7, #12]
   return(result);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0310 	bic.w	r3, r3, #16
 8007412:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007420:	61fa      	str	r2, [r7, #28]
 8007422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007424:	69b9      	ldr	r1, [r7, #24]
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	e841 2300 	strex	r3, r2, [r1]
 800742c:	617b      	str	r3, [r7, #20]
   return(result);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1e3      	bne.n	80073fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800743a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f83d 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007446:	e023      	b.n	8007490 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_UART_IRQHandler+0x4f4>
 8007454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f943 	bl	80076ec <UART_Transmit_IT>
    return;
 8007466:	e014      	b.n	8007492 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00e      	beq.n	8007492 <HAL_UART_IRQHandler+0x51e>
 8007474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f983 	bl	800778c <UART_EndTransmit_IT>
    return;
 8007486:	e004      	b.n	8007492 <HAL_UART_IRQHandler+0x51e>
    return;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <HAL_UART_IRQHandler+0x51e>
      return;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <HAL_UART_IRQHandler+0x51e>
      return;
 8007490:	bf00      	nop
  }
}
 8007492:	37e8      	adds	r7, #232	; 0xe8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	603b      	str	r3, [r7, #0]
 80074e4:	4613      	mov	r3, r2
 80074e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e8:	e03b      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f0:	d037      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f2:	f7fc fda3 	bl	800403c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	6a3a      	ldr	r2, [r7, #32]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <UART_WaitOnFlagUntilTimeout+0x30>
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e03a      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d023      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b80      	cmp	r3, #128	; 0x80
 800751e:	d020      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d01d      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b08      	cmp	r3, #8
 8007532:	d116      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 f857 	bl	80075fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2208      	movs	r2, #8
 8007554:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e00f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d0b4      	beq.n	80074ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	4613      	mov	r3, r2
 8007596:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2222      	movs	r2, #34	; 0x22
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d007      	beq.n	80075d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68da      	ldr	r2, [r3, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0220 	orr.w	r2, r2, #32
 80075ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075fe:	b480      	push	{r7}
 8007600:	b095      	sub	sp, #84	; 0x54
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800761c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007626:	643a      	str	r2, [r7, #64]	; 0x40
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800762c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3314      	adds	r3, #20
 8007640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	61fb      	str	r3, [r7, #28]
   return(result);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800765a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800765c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	2b01      	cmp	r3, #1
 8007674:	d119      	bne.n	80076aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	330c      	adds	r3, #12
 800767c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	60bb      	str	r3, [r7, #8]
   return(result);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f023 0310 	bic.w	r3, r3, #16
 800768c:	647b      	str	r3, [r7, #68]	; 0x44
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007696:	61ba      	str	r2, [r7, #24]
 8007698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6979      	ldr	r1, [r7, #20]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	613b      	str	r3, [r7, #16]
   return(result);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e5      	bne.n	8007676 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076b8:	bf00      	nop
 80076ba:	3754      	adds	r7, #84	; 0x54
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fee4 	bl	80074ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b21      	cmp	r3, #33	; 0x21
 80076fe:	d13e      	bne.n	800777e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d114      	bne.n	8007734 <UART_Transmit_IT+0x48>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d110      	bne.n	8007734 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007726:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	1c9a      	adds	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]
 8007732:	e008      	b.n	8007746 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	1c59      	adds	r1, r3, #1
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6211      	str	r1, [r2, #32]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29b      	uxth	r3, r3
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	4619      	mov	r1, r3
 8007754:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10f      	bne.n	800777a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007768:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007778:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	e000      	b.n	8007780 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800777e:	2302      	movs	r3, #2
  }
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fe73 	bl	8007498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b08c      	sub	sp, #48	; 0x30
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b22      	cmp	r3, #34	; 0x22
 80077ce:	f040 80ae 	bne.w	800792e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077da:	d117      	bne.n	800780c <UART_Receive_IT+0x50>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d113      	bne.n	800780c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	1c9a      	adds	r2, r3, #2
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	629a      	str	r2, [r3, #40]	; 0x28
 800780a:	e026      	b.n	800785a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800781e:	d007      	beq.n	8007830 <UART_Receive_IT+0x74>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <UART_Receive_IT+0x82>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e008      	b.n	8007850 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784a:	b2da      	uxtb	r2, r3
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29b      	uxth	r3, r3
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	4619      	mov	r1, r3
 8007868:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800786a:	2b00      	cmp	r3, #0
 800786c:	d15d      	bne.n	800792a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0220 	bic.w	r2, r2, #32
 800787c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800788c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0201 	bic.w	r2, r2, #1
 800789c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d135      	bne.n	8007920 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f023 0310 	bic.w	r3, r3, #16
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	623a      	str	r2, [r7, #32]
 80078dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	69f9      	ldr	r1, [r7, #28]
 80078e0:	6a3a      	ldr	r2, [r7, #32]
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e5      	bne.n	80078ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d10a      	bne.n	8007912 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fdd1 	bl	80074c0 <HAL_UARTEx_RxEventCallback>
 800791e:	e002      	b.n	8007926 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fa f875 	bl	8001a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e002      	b.n	8007930 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3730      	adds	r7, #48	; 0x30
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800793c:	b0c0      	sub	sp, #256	; 0x100
 800793e:	af00      	add	r7, sp, #0
 8007940:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	68d9      	ldr	r1, [r3, #12]
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	ea40 0301 	orr.w	r3, r0, r1
 8007960:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	431a      	orrs	r2, r3
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	431a      	orrs	r2, r3
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007990:	f021 010c 	bic.w	r1, r1, #12
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800799e:	430b      	orrs	r3, r1
 80079a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b2:	6999      	ldr	r1, [r3, #24]
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	ea40 0301 	orr.w	r3, r0, r1
 80079be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4b8f      	ldr	r3, [pc, #572]	; (8007c04 <UART_SetConfig+0x2cc>)
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d005      	beq.n	80079d8 <UART_SetConfig+0xa0>
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b8d      	ldr	r3, [pc, #564]	; (8007c08 <UART_SetConfig+0x2d0>)
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d104      	bne.n	80079e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079d8:	f7fd fb16 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 80079dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079e0:	e003      	b.n	80079ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079e2:	f7fd fafd 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 80079e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079f4:	f040 810c 	bne.w	8007c10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079fc:	2200      	movs	r2, #0
 80079fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	1891      	adds	r1, r2, r2
 8007a10:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a12:	415b      	adcs	r3, r3
 8007a14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	eb12 0801 	adds.w	r8, r2, r1
 8007a20:	4629      	mov	r1, r5
 8007a22:	eb43 0901 	adc.w	r9, r3, r1
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a3a:	4690      	mov	r8, r2
 8007a3c:	4699      	mov	r9, r3
 8007a3e:	4623      	mov	r3, r4
 8007a40:	eb18 0303 	adds.w	r3, r8, r3
 8007a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a48:	462b      	mov	r3, r5
 8007a4a:	eb49 0303 	adc.w	r3, r9, r3
 8007a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a66:	460b      	mov	r3, r1
 8007a68:	18db      	adds	r3, r3, r3
 8007a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	eb42 0303 	adc.w	r3, r2, r3
 8007a72:	657b      	str	r3, [r7, #84]	; 0x54
 8007a74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a7c:	f7f9 f90c 	bl	8000c98 <__aeabi_uldivmod>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4b61      	ldr	r3, [pc, #388]	; (8007c0c <UART_SetConfig+0x2d4>)
 8007a86:	fba3 2302 	umull	r2, r3, r3, r2
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	011c      	lsls	r4, r3, #4
 8007a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	1891      	adds	r1, r2, r2
 8007aa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007aa8:	415b      	adcs	r3, r3
 8007aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	eb12 0a01 	adds.w	sl, r2, r1
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	eb43 0b01 	adc.w	fp, r3, r1
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ac8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007acc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ad0:	4692      	mov	sl, r2
 8007ad2:	469b      	mov	fp, r3
 8007ad4:	4643      	mov	r3, r8
 8007ad6:	eb1a 0303 	adds.w	r3, sl, r3
 8007ada:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007af4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007af8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007afc:	460b      	mov	r3, r1
 8007afe:	18db      	adds	r3, r3, r3
 8007b00:	643b      	str	r3, [r7, #64]	; 0x40
 8007b02:	4613      	mov	r3, r2
 8007b04:	eb42 0303 	adc.w	r3, r2, r3
 8007b08:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b12:	f7f9 f8c1 	bl	8000c98 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4b3b      	ldr	r3, [pc, #236]	; (8007c0c <UART_SetConfig+0x2d4>)
 8007b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	2264      	movs	r2, #100	; 0x64
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	1acb      	subs	r3, r1, r3
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b32:	4b36      	ldr	r3, [pc, #216]	; (8007c0c <UART_SetConfig+0x2d4>)
 8007b34:	fba3 2302 	umull	r2, r3, r3, r2
 8007b38:	095b      	lsrs	r3, r3, #5
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b40:	441c      	add	r4, r3
 8007b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b54:	4642      	mov	r2, r8
 8007b56:	464b      	mov	r3, r9
 8007b58:	1891      	adds	r1, r2, r2
 8007b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b5c:	415b      	adcs	r3, r3
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b64:	4641      	mov	r1, r8
 8007b66:	1851      	adds	r1, r2, r1
 8007b68:	6339      	str	r1, [r7, #48]	; 0x30
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	414b      	adcs	r3, r1
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b70:	f04f 0200 	mov.w	r2, #0
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	00cb      	lsls	r3, r1, #3
 8007b80:	4651      	mov	r1, sl
 8007b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b86:	4651      	mov	r1, sl
 8007b88:	00ca      	lsls	r2, r1, #3
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4642      	mov	r2, r8
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b98:	464b      	mov	r3, r9
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bb8:	460b      	mov	r3, r1
 8007bba:	18db      	adds	r3, r3, r3
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	eb42 0303 	adc.w	r3, r2, r3
 8007bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bce:	f7f9 f863 	bl	8000c98 <__aeabi_uldivmod>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <UART_SetConfig+0x2d4>)
 8007bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	2164      	movs	r1, #100	; 0x64
 8007be0:	fb01 f303 	mul.w	r3, r1, r3
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	3332      	adds	r3, #50	; 0x32
 8007bea:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <UART_SetConfig+0x2d4>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	f003 0207 	and.w	r2, r3, #7
 8007bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4422      	add	r2, r4
 8007bfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c00:	e106      	b.n	8007e10 <UART_SetConfig+0x4d8>
 8007c02:	bf00      	nop
 8007c04:	40011000 	.word	0x40011000
 8007c08:	40011400 	.word	0x40011400
 8007c0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	1891      	adds	r1, r2, r2
 8007c28:	6239      	str	r1, [r7, #32]
 8007c2a:	415b      	adcs	r3, r3
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c32:	4641      	mov	r1, r8
 8007c34:	1854      	adds	r4, r2, r1
 8007c36:	4649      	mov	r1, r9
 8007c38:	eb43 0501 	adc.w	r5, r3, r1
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	00eb      	lsls	r3, r5, #3
 8007c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c4a:	00e2      	lsls	r2, r4, #3
 8007c4c:	4614      	mov	r4, r2
 8007c4e:	461d      	mov	r5, r3
 8007c50:	4643      	mov	r3, r8
 8007c52:	18e3      	adds	r3, r4, r3
 8007c54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c58:	464b      	mov	r3, r9
 8007c5a:	eb45 0303 	adc.w	r3, r5, r3
 8007c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c7e:	4629      	mov	r1, r5
 8007c80:	008b      	lsls	r3, r1, #2
 8007c82:	4621      	mov	r1, r4
 8007c84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c88:	4621      	mov	r1, r4
 8007c8a:	008a      	lsls	r2, r1, #2
 8007c8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c90:	f7f9 f802 	bl	8000c98 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4b60      	ldr	r3, [pc, #384]	; (8007e1c <UART_SetConfig+0x4e4>)
 8007c9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	011c      	lsls	r4, r3, #4
 8007ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	61b9      	str	r1, [r7, #24]
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	1851      	adds	r1, r2, r1
 8007cc8:	6139      	str	r1, [r7, #16]
 8007cca:	4649      	mov	r1, r9
 8007ccc:	414b      	adcs	r3, r1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cdc:	4659      	mov	r1, fp
 8007cde:	00cb      	lsls	r3, r1, #3
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	00ca      	lsls	r2, r1, #3
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	eb42 0303 	adc.w	r3, r2, r3
 8007d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	008b      	lsls	r3, r1, #2
 8007d20:	4641      	mov	r1, r8
 8007d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d26:	4641      	mov	r1, r8
 8007d28:	008a      	lsls	r2, r1, #2
 8007d2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d2e:	f7f8 ffb3 	bl	8000c98 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	4b38      	ldr	r3, [pc, #224]	; (8007e1c <UART_SetConfig+0x4e4>)
 8007d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	2264      	movs	r2, #100	; 0x64
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	1acb      	subs	r3, r1, r3
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	3332      	adds	r3, #50	; 0x32
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <UART_SetConfig+0x4e4>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	095b      	lsrs	r3, r3, #5
 8007d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d58:	441c      	add	r4, r3
 8007d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d5e:	2200      	movs	r2, #0
 8007d60:	673b      	str	r3, [r7, #112]	; 0x70
 8007d62:	677a      	str	r2, [r7, #116]	; 0x74
 8007d64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	1891      	adds	r1, r2, r2
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	415b      	adcs	r3, r3
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d78:	4641      	mov	r1, r8
 8007d7a:	1851      	adds	r1, r2, r1
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	4649      	mov	r1, r9
 8007d80:	414b      	adcs	r3, r1
 8007d82:	607b      	str	r3, [r7, #4]
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d90:	4659      	mov	r1, fp
 8007d92:	00cb      	lsls	r3, r1, #3
 8007d94:	4651      	mov	r1, sl
 8007d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d9a:	4651      	mov	r1, sl
 8007d9c:	00ca      	lsls	r2, r1, #3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4619      	mov	r1, r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	4642      	mov	r2, r8
 8007da6:	189b      	adds	r3, r3, r2
 8007da8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007daa:	464b      	mov	r3, r9
 8007dac:	460a      	mov	r2, r1
 8007dae:	eb42 0303 	adc.w	r3, r2, r3
 8007db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dbe:	667a      	str	r2, [r7, #100]	; 0x64
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dcc:	4649      	mov	r1, r9
 8007dce:	008b      	lsls	r3, r1, #2
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dd6:	4641      	mov	r1, r8
 8007dd8:	008a      	lsls	r2, r1, #2
 8007dda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007dde:	f7f8 ff5b 	bl	8000c98 <__aeabi_uldivmod>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <UART_SetConfig+0x4e4>)
 8007de8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dec:	095b      	lsrs	r3, r3, #5
 8007dee:	2164      	movs	r1, #100	; 0x64
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	011b      	lsls	r3, r3, #4
 8007df8:	3332      	adds	r3, #50	; 0x32
 8007dfa:	4a08      	ldr	r2, [pc, #32]	; (8007e1c <UART_SetConfig+0x4e4>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	f003 020f 	and.w	r2, r3, #15
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4422      	add	r2, r4
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	bf00      	nop
 8007e12:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e16:	46bd      	mov	sp, r7
 8007e18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e1c:	51eb851f 	.word	0x51eb851f

08007e20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e24:	4904      	ldr	r1, [pc, #16]	; (8007e38 <MX_FATFS_Init+0x18>)
 8007e26:	4805      	ldr	r0, [pc, #20]	; (8007e3c <MX_FATFS_Init+0x1c>)
 8007e28:	f003 ff64 	bl	800bcf4 <FATFS_LinkDriver>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <MX_FATFS_Init+0x20>)
 8007e32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e34:	bf00      	nop
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20002acc 	.word	0x20002acc
 8007e3c:	20000070 	.word	0x20000070
 8007e40:	20002ac8 	.word	0x20002ac8

08007e44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7f9 fa87 	bl	8001374 <SD_disk_initialize>
 8007e66:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007e7a:	79fb      	ldrb	r3, [r7, #7]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7f9 fb63 	bl	8001548 <SD_disk_status>
 8007e82:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007e9c:	7bf8      	ldrb	r0, [r7, #15]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	f7f9 fb66 	bl	8001574 <SD_disk_read>
 8007ea8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007ec2:	7bf8      	ldrb	r0, [r7, #15]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68b9      	ldr	r1, [r7, #8]
 8007eca:	f7f9 fbbd 	bl	8001648 <SD_disk_write>
 8007ece:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	603a      	str	r2, [r7, #0]
 8007ee2:	71fb      	strb	r3, [r7, #7]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007ee8:	79b9      	ldrb	r1, [r7, #6]
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f9 fc2e 	bl	8001750 <SD_disk_ioctl>
 8007ef4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <disk_status+0x30>)
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	4905      	ldr	r1, [pc, #20]	; (8007f30 <disk_status+0x30>)
 8007f1a:	440a      	add	r2, r1
 8007f1c:	7a12      	ldrb	r2, [r2, #8]
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	20002cf8 	.word	0x20002cf8

08007f34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f42:	79fb      	ldrb	r3, [r7, #7]
 8007f44:	4a0e      	ldr	r2, [pc, #56]	; (8007f80 <disk_initialize+0x4c>)
 8007f46:	5cd3      	ldrb	r3, [r2, r3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d114      	bne.n	8007f76 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	4a0c      	ldr	r2, [pc, #48]	; (8007f80 <disk_initialize+0x4c>)
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	79fa      	ldrb	r2, [r7, #7]
 8007f5a:	4909      	ldr	r1, [pc, #36]	; (8007f80 <disk_initialize+0x4c>)
 8007f5c:	440a      	add	r2, r1
 8007f5e:	7a12      	ldrb	r2, [r2, #8]
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <disk_initialize+0x4c>)
 8007f72:	2101      	movs	r1, #1
 8007f74:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20002cf8 	.word	0x20002cf8

08007f84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f84:	b590      	push	{r4, r7, lr}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <disk_read+0x3c>)
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	689c      	ldr	r4, [r3, #8]
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <disk_read+0x3c>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	7a18      	ldrb	r0, [r3, #8]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	68b9      	ldr	r1, [r7, #8]
 8007fae:	47a0      	blx	r4
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20002cf8 	.word	0x20002cf8

08007fc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <disk_write+0x3c>)
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	68dc      	ldr	r4, [r3, #12]
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4a07      	ldr	r2, [pc, #28]	; (8008000 <disk_write+0x3c>)
 8007fe4:	4413      	add	r3, r2
 8007fe6:	7a18      	ldrb	r0, [r3, #8]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	47a0      	blx	r4
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd90      	pop	{r4, r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20002cf8 	.word	0x20002cf8

08008004 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	4603      	mov	r3, r0
 800800c:	603a      	str	r2, [r7, #0]
 800800e:	71fb      	strb	r3, [r7, #7]
 8008010:	460b      	mov	r3, r1
 8008012:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	4a09      	ldr	r2, [pc, #36]	; (800803c <disk_ioctl+0x38>)
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	79fa      	ldrb	r2, [r7, #7]
 8008022:	4906      	ldr	r1, [pc, #24]	; (800803c <disk_ioctl+0x38>)
 8008024:	440a      	add	r2, r1
 8008026:	7a10      	ldrb	r0, [r2, #8]
 8008028:	79b9      	ldrb	r1, [r7, #6]
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4798      	blx	r3
 800802e:	4603      	mov	r3, r0
 8008030:	73fb      	strb	r3, [r7, #15]
  return res;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20002cf8 	.word	0x20002cf8

08008040 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	b21a      	sxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b21b      	sxth	r3, r3
 800805c:	4313      	orrs	r3, r2
 800805e:	b21b      	sxth	r3, r3
 8008060:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008062:	89fb      	ldrh	r3, [r7, #14]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3303      	adds	r3, #3
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	3202      	adds	r2, #2
 8008088:	7812      	ldrb	r2, [r2, #0]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	3201      	adds	r2, #1
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80080a8:	68fb      	ldr	r3, [r7, #12]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	887a      	ldrh	r2, [r7, #2]
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	0a1b      	lsrs	r3, r3, #8
 80080d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	887a      	ldrh	r2, [r7, #2]
 80080dc:	b2d2      	uxtb	r2, r2
 80080de:	701a      	strb	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	0a1b      	lsrs	r3, r3, #8
 8008106:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	b2d2      	uxtb	r2, r2
 8008112:	701a      	strb	r2, [r3, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	0a1b      	lsrs	r3, r3, #8
 8008118:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	b2d2      	uxtb	r2, r2
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00d      	beq.n	800817a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	1c53      	adds	r3, r2, #1
 8008162:	613b      	str	r3, [r7, #16]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	1c59      	adds	r1, r3, #1
 8008168:	6179      	str	r1, [r7, #20]
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3b01      	subs	r3, #1
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1f1      	bne.n	800815e <mem_cpy+0x1a>
	}
}
 800817a:	bf00      	nop
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008186:	b480      	push	{r7}
 8008188:	b087      	sub	sp, #28
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	617a      	str	r2, [r7, #20]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1f3      	bne.n	8008196 <mem_set+0x10>
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80081bc:	b480      	push	{r7}
 80081be:	b089      	sub	sp, #36	; 0x24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	61fa      	str	r2, [r7, #28]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	4619      	mov	r1, r3
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	61ba      	str	r2, [r7, #24]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	1acb      	subs	r3, r1, r3
 80081e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	607b      	str	r3, [r7, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d002      	beq.n	80081fc <mem_cmp+0x40>
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0eb      	beq.n	80081d4 <mem_cmp+0x18>

	return r;
 80081fc:	697b      	ldr	r3, [r7, #20]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3724      	adds	r7, #36	; 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008214:	e002      	b.n	800821c <chk_chr+0x12>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3301      	adds	r3, #1
 800821a:	607b      	str	r3, [r7, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <chk_chr+0x26>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	4293      	cmp	r3, r2
 800822e:	d1f2      	bne.n	8008216 <chk_chr+0xc>
	return *str;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	781b      	ldrb	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800824a:	2300      	movs	r3, #0
 800824c:	60bb      	str	r3, [r7, #8]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e029      	b.n	80082a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008254:	4a27      	ldr	r2, [pc, #156]	; (80082f4 <chk_lock+0xb4>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4413      	add	r3, r2
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01d      	beq.n	800829e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008262:	4a24      	ldr	r2, [pc, #144]	; (80082f4 <chk_lock+0xb4>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	4413      	add	r3, r2
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d116      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <chk_lock+0xb4>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	011b      	lsls	r3, r3, #4
 800827a:	4413      	add	r3, r2
 800827c:	3304      	adds	r3, #4
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008284:	429a      	cmp	r2, r3
 8008286:	d10c      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008288:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <chk_lock+0xb4>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	4413      	add	r3, r2
 8008290:	3308      	adds	r3, #8
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008298:	429a      	cmp	r2, r3
 800829a:	d102      	bne.n	80082a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800829c:	e007      	b.n	80082ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3301      	adds	r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d9d2      	bls.n	8008254 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d109      	bne.n	80082c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <chk_lock+0x80>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d101      	bne.n	80082c4 <chk_lock+0x84>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e010      	b.n	80082e6 <chk_lock+0xa6>
 80082c4:	2312      	movs	r3, #18
 80082c6:	e00e      	b.n	80082e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d108      	bne.n	80082e0 <chk_lock+0xa0>
 80082ce:	4a09      	ldr	r2, [pc, #36]	; (80082f4 <chk_lock+0xb4>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	4413      	add	r3, r2
 80082d6:	330c      	adds	r3, #12
 80082d8:	881b      	ldrh	r3, [r3, #0]
 80082da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082de:	d101      	bne.n	80082e4 <chk_lock+0xa4>
 80082e0:	2310      	movs	r3, #16
 80082e2:	e000      	b.n	80082e6 <chk_lock+0xa6>
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20002ad8 	.word	0x20002ad8

080082f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082fe:	2300      	movs	r3, #0
 8008300:	607b      	str	r3, [r7, #4]
 8008302:	e002      	b.n	800830a <enq_lock+0x12>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3301      	adds	r3, #1
 8008308:	607b      	str	r3, [r7, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d806      	bhi.n	800831e <enq_lock+0x26>
 8008310:	4a09      	ldr	r2, [pc, #36]	; (8008338 <enq_lock+0x40>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	011b      	lsls	r3, r3, #4
 8008316:	4413      	add	r3, r2
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f2      	bne.n	8008304 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b02      	cmp	r3, #2
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	20002ad8 	.word	0x20002ad8

0800833c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e01f      	b.n	800838c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800834c:	4a41      	ldr	r2, [pc, #260]	; (8008454 <inc_lock+0x118>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	4413      	add	r3, r2
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d113      	bne.n	8008386 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800835e:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <inc_lock+0x118>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	4413      	add	r3, r2
 8008366:	3304      	adds	r3, #4
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800836e:	429a      	cmp	r2, r3
 8008370:	d109      	bne.n	8008386 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008372:	4a38      	ldr	r2, [pc, #224]	; (8008454 <inc_lock+0x118>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	4413      	add	r3, r2
 800837a:	3308      	adds	r3, #8
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008382:	429a      	cmp	r2, r3
 8008384:	d006      	beq.n	8008394 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3301      	adds	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d9dc      	bls.n	800834c <inc_lock+0x10>
 8008392:	e000      	b.n	8008396 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008394:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d132      	bne.n	8008402 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e002      	b.n	80083a8 <inc_lock+0x6c>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d806      	bhi.n	80083bc <inc_lock+0x80>
 80083ae:	4a29      	ldr	r2, [pc, #164]	; (8008454 <inc_lock+0x118>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	4413      	add	r3, r2
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1f2      	bne.n	80083a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d101      	bne.n	80083c6 <inc_lock+0x8a>
 80083c2:	2300      	movs	r3, #0
 80083c4:	e040      	b.n	8008448 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	4922      	ldr	r1, [pc, #136]	; (8008454 <inc_lock+0x118>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	440b      	add	r3, r1
 80083d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	491e      	ldr	r1, [pc, #120]	; (8008454 <inc_lock+0x118>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	440b      	add	r3, r1
 80083e0:	3304      	adds	r3, #4
 80083e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	491a      	ldr	r1, [pc, #104]	; (8008454 <inc_lock+0x118>)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	440b      	add	r3, r1
 80083f0:	3308      	adds	r3, #8
 80083f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083f4:	4a17      	ldr	r2, [pc, #92]	; (8008454 <inc_lock+0x118>)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	4413      	add	r3, r2
 80083fc:	330c      	adds	r3, #12
 80083fe:	2200      	movs	r2, #0
 8008400:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d009      	beq.n	800841c <inc_lock+0xe0>
 8008408:	4a12      	ldr	r2, [pc, #72]	; (8008454 <inc_lock+0x118>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	4413      	add	r3, r2
 8008410:	330c      	adds	r3, #12
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <inc_lock+0xe0>
 8008418:	2300      	movs	r3, #0
 800841a:	e015      	b.n	8008448 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d108      	bne.n	8008434 <inc_lock+0xf8>
 8008422:	4a0c      	ldr	r2, [pc, #48]	; (8008454 <inc_lock+0x118>)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	011b      	lsls	r3, r3, #4
 8008428:	4413      	add	r3, r2
 800842a:	330c      	adds	r3, #12
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	3301      	adds	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	e001      	b.n	8008438 <inc_lock+0xfc>
 8008434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008438:	4906      	ldr	r1, [pc, #24]	; (8008454 <inc_lock+0x118>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	011b      	lsls	r3, r3, #4
 800843e:	440b      	add	r3, r1
 8008440:	330c      	adds	r3, #12
 8008442:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3301      	adds	r3, #1
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20002ad8 	.word	0x20002ad8

08008458 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	3b01      	subs	r3, #1
 8008464:	607b      	str	r3, [r7, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d825      	bhi.n	80084b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <dec_lock+0x74>)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	4413      	add	r3, r2
 8008474:	330c      	adds	r3, #12
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800847a:	89fb      	ldrh	r3, [r7, #14]
 800847c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008480:	d101      	bne.n	8008486 <dec_lock+0x2e>
 8008482:	2300      	movs	r3, #0
 8008484:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008486:	89fb      	ldrh	r3, [r7, #14]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <dec_lock+0x3a>
 800848c:	89fb      	ldrh	r3, [r7, #14]
 800848e:	3b01      	subs	r3, #1
 8008490:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008492:	4a0e      	ldr	r2, [pc, #56]	; (80084cc <dec_lock+0x74>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	330c      	adds	r3, #12
 800849c:	89fa      	ldrh	r2, [r7, #14]
 800849e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80084a0:	89fb      	ldrh	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d105      	bne.n	80084b2 <dec_lock+0x5a>
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <dec_lock+0x74>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	737b      	strb	r3, [r7, #13]
 80084b6:	e001      	b.n	80084bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80084b8:	2302      	movs	r3, #2
 80084ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80084bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20002ad8 	.word	0x20002ad8

080084d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084d8:	2300      	movs	r3, #0
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	e010      	b.n	8008500 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084de:	4a0d      	ldr	r2, [pc, #52]	; (8008514 <clear_lock+0x44>)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d105      	bne.n	80084fa <clear_lock+0x2a>
 80084ee:	4a09      	ldr	r2, [pc, #36]	; (8008514 <clear_lock+0x44>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	4413      	add	r3, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3301      	adds	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d9eb      	bls.n	80084de <clear_lock+0xe>
	}
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20002ad8 	.word	0x20002ad8

08008518 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	78db      	ldrb	r3, [r3, #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d034      	beq.n	8008596 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7858      	ldrb	r0, [r3, #1]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800853c:	2301      	movs	r3, #1
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	f7ff fd40 	bl	8007fc4 <disk_write>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <sync_window+0x38>
			res = FR_DISK_ERR;
 800854a:	2301      	movs	r3, #1
 800854c:	73fb      	strb	r3, [r7, #15]
 800854e:	e022      	b.n	8008596 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	1ad2      	subs	r2, r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	429a      	cmp	r2, r3
 8008564:	d217      	bcs.n	8008596 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	789b      	ldrb	r3, [r3, #2]
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	e010      	b.n	8008590 <sync_window+0x78>
					wsect += fs->fsize;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4413      	add	r3, r2
 8008576:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7858      	ldrb	r0, [r3, #1]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008582:	2301      	movs	r3, #1
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	f7ff fd1d 	bl	8007fc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	3b01      	subs	r3, #1
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d8eb      	bhi.n	800856e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d01b      	beq.n	80085f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7ff ffad 	bl	8008518 <sync_window>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d113      	bne.n	80085f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7858      	ldrb	r0, [r3, #1]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085d2:	2301      	movs	r3, #1
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f7ff fcd5 	bl	8007f84 <disk_read>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff87 	bl	8008518 <sync_window>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d159      	bne.n	80086c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d149      	bne.n	80086b0 <sync_fs+0xb4>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d145      	bne.n	80086b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	899b      	ldrh	r3, [r3, #12]
 800862e:	461a      	mov	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	f7ff fda8 	bl	8008186 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3338      	adds	r3, #56	; 0x38
 800863a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800863e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff fd37 	bl	80080b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3338      	adds	r3, #56	; 0x38
 800864c:	4921      	ldr	r1, [pc, #132]	; (80086d4 <sync_fs+0xd8>)
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fd4c 	bl	80080ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3338      	adds	r3, #56	; 0x38
 8008658:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800865c:	491e      	ldr	r1, [pc, #120]	; (80086d8 <sync_fs+0xdc>)
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fd44 	bl	80080ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3338      	adds	r3, #56	; 0x38
 8008668:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f7ff fd3a 	bl	80080ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3338      	adds	r3, #56	; 0x38
 800867c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7ff fd30 	bl	80080ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7858      	ldrb	r0, [r3, #1]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086a4:	2301      	movs	r3, #1
 80086a6:	f7ff fc8d 	bl	8007fc4 <disk_write>
			fs->fsi_flag = 0;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff fca3 	bl	8008004 <disk_ioctl>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <sync_fs+0xcc>
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	41615252 	.word	0x41615252
 80086d8:	61417272 	.word	0x61417272

080086dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	3b02      	subs	r3, #2
 80086ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d301      	bcc.n	80086fc <clust2sect+0x20>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e008      	b.n	800870e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	461a      	mov	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	fb03 f202 	mul.w	r2, r3, r2
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	4413      	add	r3, r2
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b086      	sub	sp, #24
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d904      	bls.n	800873a <get_fat+0x20>
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <get_fat+0x26>
		val = 1;	/* Internal error */
 800873a:	2301      	movs	r3, #1
 800873c:	617b      	str	r3, [r7, #20]
 800873e:	e0bb      	b.n	80088b8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008744:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b03      	cmp	r3, #3
 800874c:	f000 8083 	beq.w	8008856 <get_fat+0x13c>
 8008750:	2b03      	cmp	r3, #3
 8008752:	f300 80a7 	bgt.w	80088a4 <get_fat+0x18a>
 8008756:	2b01      	cmp	r3, #1
 8008758:	d002      	beq.n	8008760 <get_fat+0x46>
 800875a:	2b02      	cmp	r3, #2
 800875c:	d056      	beq.n	800880c <get_fat+0xf2>
 800875e:	e0a1      	b.n	80088a4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	899b      	ldrh	r3, [r3, #12]
 8008776:	4619      	mov	r1, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	fbb3 f3f1 	udiv	r3, r3, r1
 800877e:	4413      	add	r3, r2
 8008780:	4619      	mov	r1, r3
 8008782:	6938      	ldr	r0, [r7, #16]
 8008784:	f7ff ff0c 	bl	80085a0 <move_window>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	f040 808d 	bne.w	80088aa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	60fa      	str	r2, [r7, #12]
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	8992      	ldrh	r2, [r2, #12]
 800879a:	fbb3 f1f2 	udiv	r1, r3, r2
 800879e:	fb01 f202 	mul.w	r2, r1, r2
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	899b      	ldrh	r3, [r3, #12]
 80087b6:	4619      	mov	r1, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80087be:	4413      	add	r3, r2
 80087c0:	4619      	mov	r1, r3
 80087c2:	6938      	ldr	r0, [r7, #16]
 80087c4:	f7ff feec 	bl	80085a0 <move_window>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d16f      	bne.n	80088ae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	461a      	mov	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087da:	fb01 f202 	mul.w	r2, r1, r2
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	4413      	add	r3, r2
 80087e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087e8:	021b      	lsls	r3, r3, #8
 80087ea:	461a      	mov	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <get_fat+0xe8>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	091b      	lsrs	r3, r3, #4
 8008800:	e002      	b.n	8008808 <get_fat+0xee>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008808:	617b      	str	r3, [r7, #20]
			break;
 800880a:	e055      	b.n	80088b8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	899b      	ldrh	r3, [r3, #12]
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	b29b      	uxth	r3, r3
 8008818:	4619      	mov	r1, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008820:	4413      	add	r3, r2
 8008822:	4619      	mov	r1, r3
 8008824:	6938      	ldr	r0, [r7, #16]
 8008826:	f7ff febb 	bl	80085a0 <move_window>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d140      	bne.n	80088b2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	8992      	ldrh	r2, [r2, #12]
 800883e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008842:	fb00 f202 	mul.w	r2, r0, r2
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	440b      	add	r3, r1
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fbf8 	bl	8008040 <ld_word>
 8008850:	4603      	mov	r3, r0
 8008852:	617b      	str	r3, [r7, #20]
			break;
 8008854:	e030      	b.n	80088b8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	899b      	ldrh	r3, [r3, #12]
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	b29b      	uxth	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	fbb3 f3f1 	udiv	r3, r3, r1
 800886a:	4413      	add	r3, r2
 800886c:	4619      	mov	r1, r3
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f7ff fe96 	bl	80085a0 <move_window>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d11d      	bne.n	80088b6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	8992      	ldrh	r2, [r2, #12]
 8008888:	fbb3 f0f2 	udiv	r0, r3, r2
 800888c:	fb00 f202 	mul.w	r2, r0, r2
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	440b      	add	r3, r1
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fbeb 	bl	8008070 <ld_dword>
 800889a:	4603      	mov	r3, r0
 800889c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80088a0:	617b      	str	r3, [r7, #20]
			break;
 80088a2:	e009      	b.n	80088b8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e006      	b.n	80088b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088aa:	bf00      	nop
 80088ac:	e004      	b.n	80088b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ae:	bf00      	nop
 80088b0:	e002      	b.n	80088b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80088b2:	bf00      	nop
 80088b4:	e000      	b.n	80088b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80088b6:	bf00      	nop
		}
	}

	return val;
 80088b8:	697b      	ldr	r3, [r7, #20]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088c2:	b590      	push	{r4, r7, lr}
 80088c4:	b089      	sub	sp, #36	; 0x24
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088ce:	2302      	movs	r3, #2
 80088d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f240 8109 	bls.w	8008aec <put_fat+0x22a>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	f080 8103 	bcs.w	8008aec <put_fat+0x22a>
		switch (fs->fs_type) {
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	f000 80b6 	beq.w	8008a5c <put_fat+0x19a>
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	f300 80fb 	bgt.w	8008aec <put_fat+0x22a>
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d003      	beq.n	8008902 <put_fat+0x40>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	f000 8083 	beq.w	8008a06 <put_fat+0x144>
 8008900:	e0f4      	b.n	8008aec <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	4413      	add	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	899b      	ldrh	r3, [r3, #12]
 8008918:	4619      	mov	r1, r3
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008920:	4413      	add	r3, r2
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff fe3b 	bl	80085a0 <move_window>
 800892a:	4603      	mov	r3, r0
 800892c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800892e:	7ffb      	ldrb	r3, [r7, #31]
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 80d4 	bne.w	8008ade <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	61ba      	str	r2, [r7, #24]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	8992      	ldrh	r2, [r2, #12]
 8008946:	fbb3 f0f2 	udiv	r0, r3, r2
 800894a:	fb00 f202 	mul.w	r2, r0, r2
 800894e:	1a9b      	subs	r3, r3, r2
 8008950:	440b      	add	r3, r1
 8008952:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00d      	beq.n	800897a <put_fat+0xb8>
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	b25b      	sxtb	r3, r3
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	b25a      	sxtb	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	b25b      	sxtb	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b25b      	sxtb	r3, r3
 8008976:	b2db      	uxtb	r3, r3
 8008978:	e001      	b.n	800897e <put_fat+0xbc>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	899b      	ldrh	r3, [r3, #12]
 8008990:	4619      	mov	r1, r3
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	fbb3 f3f1 	udiv	r3, r3, r1
 8008998:	4413      	add	r3, r2
 800899a:	4619      	mov	r1, r3
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff fdff 	bl	80085a0 <move_window>
 80089a2:	4603      	mov	r3, r0
 80089a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089a6:	7ffb      	ldrb	r3, [r7, #31]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 809a 	bne.w	8008ae2 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	461a      	mov	r2, r3
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c0:	fb00 f202 	mul.w	r2, r0, r2
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	440b      	add	r3, r1
 80089c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <put_fat+0x11a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	091b      	lsrs	r3, r3, #4
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e00e      	b.n	80089fa <put_fat+0x138>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	b25b      	sxtb	r3, r3
 80089e2:	f023 030f 	bic.w	r3, r3, #15
 80089e6:	b25a      	sxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	b25b      	sxtb	r3, r3
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b25b      	sxtb	r3, r3
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2201      	movs	r2, #1
 8008a02:	70da      	strb	r2, [r3, #3]
			break;
 8008a04:	e072      	b.n	8008aec <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	899b      	ldrh	r3, [r3, #12]
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	4619      	mov	r1, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fdbe 	bl	80085a0 <move_window>
 8008a24:	4603      	mov	r3, r0
 8008a26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a28:	7ffb      	ldrb	r3, [r7, #31]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d15b      	bne.n	8008ae6 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	8992      	ldrh	r2, [r2, #12]
 8008a3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a40:	fb00 f202 	mul.w	r2, r0, r2
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	440b      	add	r3, r1
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fb31 	bl	80080b6 <st_word>
			fs->wflag = 1;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
			break;
 8008a5a:	e047      	b.n	8008aec <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	899b      	ldrh	r3, [r3, #12]
 8008a64:	089b      	lsrs	r3, r3, #2
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	4619      	mov	r1, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a70:	4413      	add	r3, r2
 8008a72:	4619      	mov	r1, r3
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff fd93 	bl	80085a0 <move_window>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a7e:	7ffb      	ldrb	r3, [r7, #31]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d132      	bne.n	8008aea <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	8992      	ldrh	r2, [r2, #12]
 8008a98:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a9c:	fb00 f202 	mul.w	r2, r0, r2
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7ff fae3 	bl	8008070 <ld_dword>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ab0:	4323      	orrs	r3, r4
 8008ab2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	8992      	ldrh	r2, [r2, #12]
 8008ac2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ac6:	fb00 f202 	mul.w	r2, r0, r2
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	440b      	add	r3, r1
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fb0b 	bl	80080ec <st_dword>
			fs->wflag = 1;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	70da      	strb	r2, [r3, #3]
			break;
 8008adc:	e006      	b.n	8008aec <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <put_fat+0x22a>
			if (res != FR_OK) break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <put_fat+0x22a>
			if (res != FR_OK) break;
 8008aea:	bf00      	nop
		}
	}
	return res;
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3724      	adds	r7, #36	; 0x24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd90      	pop	{r4, r7, pc}

08008af6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b088      	sub	sp, #32
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d904      	bls.n	8008b1c <remove_chain+0x26>
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d301      	bcc.n	8008b20 <remove_chain+0x2a>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e04b      	b.n	8008bb8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00c      	beq.n	8008b40 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	69b8      	ldr	r0, [r7, #24]
 8008b2e:	f7ff fec8 	bl	80088c2 <put_fat>
 8008b32:	4603      	mov	r3, r0
 8008b34:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b36:	7ffb      	ldrb	r3, [r7, #31]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <remove_chain+0x4a>
 8008b3c:	7ffb      	ldrb	r3, [r7, #31]
 8008b3e:	e03b      	b.n	8008bb8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b40:	68b9      	ldr	r1, [r7, #8]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff fde9 	bl	800871a <get_fat>
 8008b48:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d031      	beq.n	8008bb4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d101      	bne.n	8008b5a <remove_chain+0x64>
 8008b56:	2302      	movs	r3, #2
 8008b58:	e02e      	b.n	8008bb8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b60:	d101      	bne.n	8008b66 <remove_chain+0x70>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e028      	b.n	8008bb8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b66:	2200      	movs	r2, #0
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	69b8      	ldr	r0, [r7, #24]
 8008b6c:	f7ff fea9 	bl	80088c2 <put_fat>
 8008b70:	4603      	mov	r3, r0
 8008b72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b74:	7ffb      	ldrb	r3, [r7, #31]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <remove_chain+0x88>
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	e01c      	b.n	8008bb8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	3b02      	subs	r3, #2
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d20b      	bcs.n	8008ba4 <remove_chain+0xae>
			fs->free_clst++;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	791b      	ldrb	r3, [r3, #4]
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d3c6      	bcc.n	8008b40 <remove_chain+0x4a>
 8008bb2:	e000      	b.n	8008bb6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008bb4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b088      	sub	sp, #32
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10d      	bne.n	8008bf2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <create_chain+0x2c>
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d31b      	bcc.n	8008c24 <create_chain+0x64>
 8008bec:	2301      	movs	r3, #1
 8008bee:	61bb      	str	r3, [r7, #24]
 8008bf0:	e018      	b.n	8008c24 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff fd90 	bl	800871a <get_fat>
 8008bfa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d801      	bhi.n	8008c06 <create_chain+0x46>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e070      	b.n	8008ce8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0c:	d101      	bne.n	8008c12 <create_chain+0x52>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	e06a      	b.n	8008ce8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d201      	bcs.n	8008c20 <create_chain+0x60>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	e063      	b.n	8008ce8 <create_chain+0x128>
		scl = clst;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d307      	bcc.n	8008c48 <create_chain+0x88>
				ncl = 2;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c3c:	69fa      	ldr	r2, [r7, #28]
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d901      	bls.n	8008c48 <create_chain+0x88>
 8008c44:	2300      	movs	r3, #0
 8008c46:	e04f      	b.n	8008ce8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c48:	69f9      	ldr	r1, [r7, #28]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fd65 	bl	800871a <get_fat>
 8008c50:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00e      	beq.n	8008c76 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d003      	beq.n	8008c66 <create_chain+0xa6>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c64:	d101      	bne.n	8008c6a <create_chain+0xaa>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	e03e      	b.n	8008ce8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c6a:	69fa      	ldr	r2, [r7, #28]
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d1da      	bne.n	8008c28 <create_chain+0x68>
 8008c72:	2300      	movs	r3, #0
 8008c74:	e038      	b.n	8008ce8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c76:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c7c:	69f9      	ldr	r1, [r7, #28]
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f7ff fe1f 	bl	80088c2 <put_fat>
 8008c84:	4603      	mov	r3, r0
 8008c86:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d109      	bne.n	8008ca2 <create_chain+0xe2>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6938      	ldr	r0, [r7, #16]
 8008c9a:	f7ff fe12 	bl	80088c2 <put_fat>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ca2:	7dfb      	ldrb	r3, [r7, #23]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d116      	bne.n	8008cd6 <create_chain+0x116>
		fs->last_clst = ncl;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	699a      	ldr	r2, [r3, #24]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	3b02      	subs	r3, #2
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d804      	bhi.n	8008cc6 <create_chain+0x106>
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	791b      	ldrb	r3, [r3, #4]
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	711a      	strb	r2, [r3, #4]
 8008cd4:	e007      	b.n	8008ce6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d102      	bne.n	8008ce2 <create_chain+0x122>
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ce0:	e000      	b.n	8008ce4 <create_chain+0x124>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008ce6:	69fb      	ldr	r3, [r7, #28]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3720      	adds	r7, #32
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	3304      	adds	r3, #4
 8008d06:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	899b      	ldrh	r3, [r3, #12]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	8952      	ldrh	r2, [r2, #10]
 8008d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	613a      	str	r2, [r7, #16]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <clmt_clust+0x42>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e010      	b.n	8008d54 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d307      	bcc.n	8008d4a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	617b      	str	r3, [r7, #20]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3304      	adds	r3, #4
 8008d46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d48:	e7e9      	b.n	8008d1e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008d4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	4413      	add	r3, r2
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d76:	d204      	bcs.n	8008d82 <dir_sdi+0x22>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d82:	2302      	movs	r3, #2
 8008d84:	e071      	b.n	8008e6a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <dir_sdi+0x46>
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d902      	bls.n	8008da6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10c      	bne.n	8008dc6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	8912      	ldrh	r2, [r2, #8]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d301      	bcc.n	8008dbc <dir_sdi+0x5c>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e056      	b.n	8008e6a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	61da      	str	r2, [r3, #28]
 8008dc4:	e02d      	b.n	8008e22 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	895b      	ldrh	r3, [r3, #10]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	899b      	ldrh	r3, [r3, #12]
 8008dd0:	fb02 f303 	mul.w	r3, r2, r3
 8008dd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dd6:	e019      	b.n	8008e0c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6979      	ldr	r1, [r7, #20]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7ff fc9c 	bl	800871a <get_fat>
 8008de2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dea:	d101      	bne.n	8008df0 <dir_sdi+0x90>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e03c      	b.n	8008e6a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d904      	bls.n	8008e00 <dir_sdi+0xa0>
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d301      	bcc.n	8008e04 <dir_sdi+0xa4>
 8008e00:	2302      	movs	r3, #2
 8008e02:	e032      	b.n	8008e6a <dir_sdi+0x10a>
			ofs -= csz;
 8008e04:	683a      	ldr	r2, [r7, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d2e1      	bcs.n	8008dd8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008e14:	6979      	ldr	r1, [r7, #20]
 8008e16:	6938      	ldr	r0, [r7, #16]
 8008e18:	f7ff fc60 	bl	80086dc <clust2sect>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <dir_sdi+0xd4>
 8008e30:	2302      	movs	r3, #2
 8008e32:	e01a      	b.n	8008e6a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	899b      	ldrh	r3, [r3, #12]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e44:	441a      	add	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	899b      	ldrh	r3, [r3, #12]
 8008e54:	461a      	mov	r2, r3
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e5c:	fb00 f202 	mul.w	r2, r0, r2
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	18ca      	adds	r2, r1, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b086      	sub	sp, #24
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	3320      	adds	r3, #32
 8008e88:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <dir_next+0x28>
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e98:	d301      	bcc.n	8008e9e <dir_next+0x2c>
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	e0bb      	b.n	8009016 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	899b      	ldrh	r3, [r3, #12]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eaa:	fb01 f202 	mul.w	r2, r1, r2
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f040 809d 	bne.w	8008ff0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	095b      	lsrs	r3, r3, #5
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	8912      	ldrh	r2, [r2, #8]
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	f0c0 808d 	bcc.w	8008ff0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	61da      	str	r2, [r3, #28]
 8008edc:	2304      	movs	r3, #4
 8008ede:	e09a      	b.n	8009016 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	899b      	ldrh	r3, [r3, #12]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	8952      	ldrh	r2, [r2, #10]
 8008ef0:	3a01      	subs	r2, #1
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d17b      	bne.n	8008ff0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f7ff fc0a 	bl	800871a <get_fat>
 8008f06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d801      	bhi.n	8008f12 <dir_next+0xa0>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e081      	b.n	8009016 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f18:	d101      	bne.n	8008f1e <dir_next+0xac>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e07b      	b.n	8009016 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d359      	bcc.n	8008fdc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	61da      	str	r2, [r3, #28]
 8008f34:	2304      	movs	r3, #4
 8008f36:	e06e      	b.n	8009016 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7ff fe3d 	bl	8008bc0 <create_chain>
 8008f46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <dir_next+0xe0>
 8008f4e:	2307      	movs	r3, #7
 8008f50:	e061      	b.n	8009016 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <dir_next+0xea>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e05c      	b.n	8009016 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f62:	d101      	bne.n	8008f68 <dir_next+0xf6>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e056      	b.n	8009016 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff fad5 	bl	8008518 <sync_window>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <dir_next+0x106>
 8008f74:	2301      	movs	r3, #1
 8008f76:	e04e      	b.n	8009016 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	899b      	ldrh	r3, [r3, #12]
 8008f82:	461a      	mov	r2, r3
 8008f84:	2100      	movs	r1, #0
 8008f86:	f7ff f8fe 	bl	8008186 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]
 8008f8e:	6979      	ldr	r1, [r7, #20]
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fba3 	bl	80086dc <clust2sect>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8008f9c:	e012      	b.n	8008fc4 <dir_next+0x152>
						fs->wflag = 1;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fab7 	bl	8008518 <sync_window>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <dir_next+0x142>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e030      	b.n	8009016 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	635a      	str	r2, [r3, #52]	; 0x34
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	895b      	ldrh	r3, [r3, #10]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d3e6      	bcc.n	8008f9e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	1ad2      	subs	r2, r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fe2:	6979      	ldr	r1, [r7, #20]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff fb79 	bl	80086dc <clust2sect>
 8008fea:	4602      	mov	r2, r0
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	899b      	ldrh	r3, [r3, #12]
 8009000:	461a      	mov	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	fbb3 f0f2 	udiv	r0, r3, r2
 8009008:	fb00 f202 	mul.w	r2, r0, r2
 800900c:	1a9b      	subs	r3, r3, r2
 800900e:	18ca      	adds	r2, r1, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b086      	sub	sp, #24
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f7ff fe95 	bl	8008d60 <dir_sdi>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d12b      	bne.n	8009098 <dir_alloc+0x7a>
		n = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	4619      	mov	r1, r3
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff faa8 	bl	80085a0 <move_window>
 8009050:	4603      	mov	r3, r0
 8009052:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009054:	7dfb      	ldrb	r3, [r7, #23]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d11d      	bne.n	8009096 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2be5      	cmp	r3, #229	; 0xe5
 8009062:	d004      	beq.n	800906e <dir_alloc+0x50>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d107      	bne.n	800907e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3301      	adds	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d102      	bne.n	8009082 <dir_alloc+0x64>
 800907c:	e00c      	b.n	8009098 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009082:	2101      	movs	r1, #1
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fef4 	bl	8008e72 <dir_next>
 800908a:	4603      	mov	r3, r0
 800908c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0d7      	beq.n	8009044 <dir_alloc+0x26>
 8009094:	e000      	b.n	8009098 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009096:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b04      	cmp	r3, #4
 800909c:	d101      	bne.n	80090a2 <dir_alloc+0x84>
 800909e:	2307      	movs	r3, #7
 80090a0:	75fb      	strb	r3, [r7, #23]
	return res;
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	331a      	adds	r3, #26
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe ffc0 	bl	8008040 <ld_word>
 80090c0:	4603      	mov	r3, r0
 80090c2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d109      	bne.n	80090e0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe ffb5 	bl	8008040 <ld_word>
 80090d6:	4603      	mov	r3, r0
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090e0:	68fb      	ldr	r3, [r7, #12]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	331a      	adds	r3, #26
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	b292      	uxth	r2, r2
 80090fe:	4611      	mov	r1, r2
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe ffd8 	bl	80080b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b03      	cmp	r3, #3
 800910c:	d109      	bne.n	8009122 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f103 0214 	add.w	r2, r3, #20
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	b29b      	uxth	r3, r3
 800911a:	4619      	mov	r1, r3
 800911c:	4610      	mov	r0, r2
 800911e:	f7fe ffca 	bl	80080b6 <st_word>
	}
}
 8009122:	bf00      	nop
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800912c:	b590      	push	{r4, r7, lr}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	331a      	adds	r3, #26
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe ff80 	bl	8008040 <ld_word>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <cmp_lfn+0x1e>
 8009146:	2300      	movs	r3, #0
 8009148:	e059      	b.n	80091fe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009152:	1e5a      	subs	r2, r3, #1
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009160:	2301      	movs	r3, #1
 8009162:	81fb      	strh	r3, [r7, #14]
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
 8009168:	e033      	b.n	80091d2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800916a:	4a27      	ldr	r2, [pc, #156]	; (8009208 <cmp_lfn+0xdc>)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	4413      	add	r3, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f7fe ff61 	bl	8008040 <ld_word>
 800917e:	4603      	mov	r3, r0
 8009180:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009182:	89fb      	ldrh	r3, [r7, #14]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01a      	beq.n	80091be <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2bfe      	cmp	r3, #254	; 0xfe
 800918c:	d812      	bhi.n	80091b4 <cmp_lfn+0x88>
 800918e:	89bb      	ldrh	r3, [r7, #12]
 8009190:	4618      	mov	r0, r3
 8009192:	f002 fdfb 	bl	800bd8c <ff_wtoupper>
 8009196:	4603      	mov	r3, r0
 8009198:	461c      	mov	r4, r3
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	617a      	str	r2, [r7, #20]
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	881b      	ldrh	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 fdef 	bl	800bd8c <ff_wtoupper>
 80091ae:	4603      	mov	r3, r0
 80091b0:	429c      	cmp	r4, r3
 80091b2:	d001      	beq.n	80091b8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80091b4:	2300      	movs	r3, #0
 80091b6:	e022      	b.n	80091fe <cmp_lfn+0xd2>
			}
			wc = uc;
 80091b8:	89bb      	ldrh	r3, [r7, #12]
 80091ba:	81fb      	strh	r3, [r7, #14]
 80091bc:	e006      	b.n	80091cc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091be:	89bb      	ldrh	r3, [r7, #12]
 80091c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d001      	beq.n	80091cc <cmp_lfn+0xa0>
 80091c8:	2300      	movs	r3, #0
 80091ca:	e018      	b.n	80091fe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3301      	adds	r3, #1
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b0c      	cmp	r3, #12
 80091d6:	d9c8      	bls.n	800916a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <cmp_lfn+0xd0>
 80091e4:	89fb      	ldrh	r3, [r7, #14]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d008      	beq.n	80091fc <cmp_lfn+0xd0>
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <cmp_lfn+0xd0>
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80091fc:	2301      	movs	r3, #1
}
 80091fe:	4618      	mov	r0, r3
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd90      	pop	{r4, r7, pc}
 8009206:	bf00      	nop
 8009208:	08012140 	.word	0x08012140

0800920c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	331a      	adds	r3, #26
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe ff10 	bl	8008040 <ld_word>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <pick_lfn+0x1e>
 8009226:	2300      	movs	r3, #0
 8009228:	e04d      	b.n	80092c6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009232:	1e5a      	subs	r2, r3, #1
 8009234:	4613      	mov	r3, r2
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009240:	2301      	movs	r3, #1
 8009242:	81fb      	strh	r3, [r7, #14]
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
 8009248:	e028      	b.n	800929c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800924a:	4a21      	ldr	r2, [pc, #132]	; (80092d0 <pick_lfn+0xc4>)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	4413      	add	r3, r2
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	4413      	add	r3, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe fef1 	bl	8008040 <ld_word>
 800925e:	4603      	mov	r3, r0
 8009260:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009262:	89fb      	ldrh	r3, [r7, #14]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00f      	beq.n	8009288 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2bfe      	cmp	r3, #254	; 0xfe
 800926c:	d901      	bls.n	8009272 <pick_lfn+0x66>
 800926e:	2300      	movs	r3, #0
 8009270:	e029      	b.n	80092c6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009272:	89bb      	ldrh	r3, [r7, #12]
 8009274:	81fb      	strh	r3, [r7, #14]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	617a      	str	r2, [r7, #20]
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	89fa      	ldrh	r2, [r7, #14]
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	e006      	b.n	8009296 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009288:	89bb      	ldrh	r3, [r7, #12]
 800928a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800928e:	4293      	cmp	r3, r2
 8009290:	d001      	beq.n	8009296 <pick_lfn+0x8a>
 8009292:	2300      	movs	r3, #0
 8009294:	e017      	b.n	80092c6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	2b0c      	cmp	r3, #12
 80092a0:	d9d3      	bls.n	800924a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2bfe      	cmp	r3, #254	; 0xfe
 80092b2:	d901      	bls.n	80092b8 <pick_lfn+0xac>
 80092b4:	2300      	movs	r3, #0
 80092b6:	e006      	b.n	80092c6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	4413      	add	r3, r2
 80092c0:	2200      	movs	r2, #0
 80092c2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80092c4:	2301      	movs	r3, #1
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	08012140 	.word	0x08012140

080092d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	460b      	mov	r3, r1
 80092e4:	71fb      	strb	r3, [r7, #7]
 80092e6:	4613      	mov	r3, r2
 80092e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	330d      	adds	r3, #13
 80092ee:	79ba      	ldrb	r2, [r7, #6]
 80092f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	330b      	adds	r3, #11
 80092f6:	220f      	movs	r2, #15
 80092f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	330c      	adds	r3, #12
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	331a      	adds	r3, #26
 8009306:	2100      	movs	r1, #0
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fed4 	bl	80080b6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	4613      	mov	r3, r2
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	4413      	add	r3, r2
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	82fb      	strh	r3, [r7, #22]
 8009322:	2300      	movs	r3, #0
 8009324:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009326:	8afb      	ldrh	r3, [r7, #22]
 8009328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932c:	4293      	cmp	r3, r2
 800932e:	d007      	beq.n	8009340 <put_lfn+0x6c>
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	61fa      	str	r2, [r7, #28]
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009340:	4a17      	ldr	r2, [pc, #92]	; (80093a0 <put_lfn+0xcc>)
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	4413      	add	r3, r2
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	8afa      	ldrh	r2, [r7, #22]
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe feaf 	bl	80080b6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009358:	8afb      	ldrh	r3, [r7, #22]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <put_lfn+0x90>
 800935e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009362:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	3301      	adds	r3, #1
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	2b0c      	cmp	r3, #12
 800936e:	d9da      	bls.n	8009326 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009370:	8afb      	ldrh	r3, [r7, #22]
 8009372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009376:	4293      	cmp	r3, r2
 8009378:	d006      	beq.n	8009388 <put_lfn+0xb4>
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <put_lfn+0xbc>
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800938e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	79fa      	ldrb	r2, [r7, #7]
 8009394:	701a      	strb	r2, [r3, #0]
}
 8009396:	bf00      	nop
 8009398:	3720      	adds	r7, #32
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	08012140 	.word	0x08012140

080093a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b08c      	sub	sp, #48	; 0x30
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80093b2:	220b      	movs	r2, #11
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7fe fec4 	bl	8008144 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d92b      	bls.n	800941a <gen_numname+0x76>
		sr = seq;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80093c6:	e022      	b.n	800940e <gen_numname+0x6a>
			wc = *lfn++;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	1c9a      	adds	r2, r3, #2
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80093d2:	2300      	movs	r3, #0
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d6:	e017      	b.n	8009408 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005a      	lsls	r2, r3, #1
 80093dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	4413      	add	r3, r2
 80093e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80093e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <gen_numname+0x5e>
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80093fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009400:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	3301      	adds	r3, #1
 8009406:	62bb      	str	r3, [r7, #40]	; 0x28
 8009408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940a:	2b0f      	cmp	r3, #15
 800940c:	d9e4      	bls.n	80093d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1d8      	bne.n	80093c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800941a:	2307      	movs	r3, #7
 800941c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	b2db      	uxtb	r3, r3
 8009428:	3330      	adds	r3, #48	; 0x30
 800942a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800942e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009432:	2b39      	cmp	r3, #57	; 0x39
 8009434:	d904      	bls.n	8009440 <gen_numname+0x9c>
 8009436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800943a:	3307      	adds	r3, #7
 800943c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	62ba      	str	r2, [r7, #40]	; 0x28
 8009446:	3330      	adds	r3, #48	; 0x30
 8009448:	443b      	add	r3, r7
 800944a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800944e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	091b      	lsrs	r3, r3, #4
 8009456:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1df      	bne.n	800941e <gen_numname+0x7a>
	ns[i] = '~';
 800945e:	f107 0214 	add.w	r2, r7, #20
 8009462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009464:	4413      	add	r3, r2
 8009466:	227e      	movs	r2, #126	; 0x7e
 8009468:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800946a:	2300      	movs	r3, #0
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
 800946e:	e002      	b.n	8009476 <gen_numname+0xd2>
 8009470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009472:	3301      	adds	r3, #1
 8009474:	627b      	str	r3, [r7, #36]	; 0x24
 8009476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947a:	429a      	cmp	r2, r3
 800947c:	d205      	bcs.n	800948a <gen_numname+0xe6>
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	4413      	add	r3, r2
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b20      	cmp	r3, #32
 8009488:	d1f2      	bne.n	8009470 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	2b07      	cmp	r3, #7
 800948e:	d807      	bhi.n	80094a0 <gen_numname+0xfc>
 8009490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	62ba      	str	r2, [r7, #40]	; 0x28
 8009496:	3330      	adds	r3, #48	; 0x30
 8009498:	443b      	add	r3, r7
 800949a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800949e:	e000      	b.n	80094a2 <gen_numname+0xfe>
 80094a0:	2120      	movs	r1, #32
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	627a      	str	r2, [r7, #36]	; 0x24
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4413      	add	r3, r2
 80094ac:	460a      	mov	r2, r1
 80094ae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	d9e9      	bls.n	800948a <gen_numname+0xe6>
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	3730      	adds	r7, #48	; 0x30
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80094cc:	230b      	movs	r3, #11
 80094ce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	0852      	lsrs	r2, r2, #1
 80094d6:	01db      	lsls	r3, r3, #7
 80094d8:	4313      	orrs	r3, r2
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	1c59      	adds	r1, r3, #1
 80094e0:	6079      	str	r1, [r7, #4]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	4413      	add	r3, r2
 80094e6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1ed      	bne.n	80094d0 <sum_sfn+0x10>
	return sum;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr

08009502 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800950c:	2304      	movs	r3, #4
 800950e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009516:	23ff      	movs	r3, #255	; 0xff
 8009518:	757b      	strb	r3, [r7, #21]
 800951a:	23ff      	movs	r3, #255	; 0xff
 800951c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800951e:	e081      	b.n	8009624 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	4619      	mov	r1, r3
 8009526:	6938      	ldr	r0, [r7, #16]
 8009528:	f7ff f83a 	bl	80085a0 <move_window>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d17c      	bne.n	8009630 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800953e:	7dbb      	ldrb	r3, [r7, #22]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009544:	2304      	movs	r3, #4
 8009546:	75fb      	strb	r3, [r7, #23]
 8009548:	e077      	b.n	800963a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	330b      	adds	r3, #11
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009556:	73fb      	strb	r3, [r7, #15]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800955e:	7dbb      	ldrb	r3, [r7, #22]
 8009560:	2be5      	cmp	r3, #229	; 0xe5
 8009562:	d00e      	beq.n	8009582 <dir_read+0x80>
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	2b2e      	cmp	r3, #46	; 0x2e
 8009568:	d00b      	beq.n	8009582 <dir_read+0x80>
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	f023 0320 	bic.w	r3, r3, #32
 8009570:	2b08      	cmp	r3, #8
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	4293      	cmp	r3, r2
 8009580:	d002      	beq.n	8009588 <dir_read+0x86>
				ord = 0xFF;
 8009582:	23ff      	movs	r3, #255	; 0xff
 8009584:	757b      	strb	r3, [r7, #21]
 8009586:	e044      	b.n	8009612 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b0f      	cmp	r3, #15
 800958c:	d12f      	bne.n	80095ee <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00d      	beq.n	80095b4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	7b5b      	ldrb	r3, [r3, #13]
 800959e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80095a0:	7dbb      	ldrb	r3, [r7, #22]
 80095a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095a6:	75bb      	strb	r3, [r7, #22]
 80095a8:	7dbb      	ldrb	r3, [r7, #22]
 80095aa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695a      	ldr	r2, [r3, #20]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80095b4:	7dba      	ldrb	r2, [r7, #22]
 80095b6:	7d7b      	ldrb	r3, [r7, #21]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d115      	bne.n	80095e8 <dir_read+0xe6>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	330d      	adds	r3, #13
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	7d3a      	ldrb	r2, [r7, #20]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d10e      	bne.n	80095e8 <dir_read+0xe6>
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f7ff fe19 	bl	800920c <pick_lfn>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <dir_read+0xe6>
 80095e0:	7d7b      	ldrb	r3, [r7, #21]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	e000      	b.n	80095ea <dir_read+0xe8>
 80095e8:	23ff      	movs	r3, #255	; 0xff
 80095ea:	757b      	strb	r3, [r7, #21]
 80095ec:	e011      	b.n	8009612 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80095ee:	7d7b      	ldrb	r3, [r7, #21]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d109      	bne.n	8009608 <dir_read+0x106>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff ff61 	bl	80094c0 <sum_sfn>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	7d3b      	ldrb	r3, [r7, #20]
 8009604:	4293      	cmp	r3, r2
 8009606:	d015      	beq.n	8009634 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8009610:	e010      	b.n	8009634 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009612:	2100      	movs	r1, #0
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff fc2c 	bl	8008e72 <dir_next>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d109      	bne.n	8009638 <dir_read+0x136>
	while (dp->sect) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f47f af79 	bne.w	8009520 <dir_read+0x1e>
 800962e:	e004      	b.n	800963a <dir_read+0x138>
		if (res != FR_OK) break;
 8009630:	bf00      	nop
 8009632:	e002      	b.n	800963a <dir_read+0x138>
					break;
 8009634:	bf00      	nop
 8009636:	e000      	b.n	800963a <dir_read+0x138>
		if (res != FR_OK) break;
 8009638:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800963a:	7dfb      	ldrb	r3, [r7, #23]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <dir_read+0x144>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	61da      	str	r2, [r3, #28]
	return res;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3718      	adds	r7, #24
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff fb7d 	bl	8008d60 <dir_sdi>
 8009666:	4603      	mov	r3, r0
 8009668:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <dir_find+0x24>
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	e0a9      	b.n	80097c8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009674:	23ff      	movs	r3, #255	; 0xff
 8009676:	753b      	strb	r3, [r7, #20]
 8009678:	7d3b      	ldrb	r3, [r7, #20]
 800967a:	757b      	strb	r3, [r7, #21]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	4619      	mov	r1, r3
 800968a:	6938      	ldr	r0, [r7, #16]
 800968c:	f7fe ff88 	bl	80085a0 <move_window>
 8009690:	4603      	mov	r3, r0
 8009692:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009694:	7dfb      	ldrb	r3, [r7, #23]
 8009696:	2b00      	cmp	r3, #0
 8009698:	f040 8090 	bne.w	80097bc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80096a4:	7dbb      	ldrb	r3, [r7, #22]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <dir_find+0x60>
 80096aa:	2304      	movs	r3, #4
 80096ac:	75fb      	strb	r3, [r7, #23]
 80096ae:	e08a      	b.n	80097c6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	330b      	adds	r3, #11
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096bc:	73fb      	strb	r3, [r7, #15]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	7bfa      	ldrb	r2, [r7, #15]
 80096c2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
 80096c6:	2be5      	cmp	r3, #229	; 0xe5
 80096c8:	d007      	beq.n	80096da <dir_find+0x8a>
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <dir_find+0x98>
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	2b0f      	cmp	r3, #15
 80096d8:	d006      	beq.n	80096e8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096da:	23ff      	movs	r3, #255	; 0xff
 80096dc:	757b      	strb	r3, [r7, #21]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096e4:	631a      	str	r2, [r3, #48]	; 0x30
 80096e6:	e05e      	b.n	80097a6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b0f      	cmp	r3, #15
 80096ec:	d136      	bne.n	800975c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d154      	bne.n	80097a6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80096fc:	7dbb      	ldrb	r3, [r7, #22]
 80096fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00d      	beq.n	8009722 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	7b5b      	ldrb	r3, [r3, #13]
 800970c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800970e:	7dbb      	ldrb	r3, [r7, #22]
 8009710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009714:	75bb      	strb	r3, [r7, #22]
 8009716:	7dbb      	ldrb	r3, [r7, #22]
 8009718:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695a      	ldr	r2, [r3, #20]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009722:	7dba      	ldrb	r2, [r7, #22]
 8009724:	7d7b      	ldrb	r3, [r7, #21]
 8009726:	429a      	cmp	r2, r3
 8009728:	d115      	bne.n	8009756 <dir_find+0x106>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	330d      	adds	r3, #13
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	7d3a      	ldrb	r2, [r7, #20]
 8009734:	429a      	cmp	r2, r3
 8009736:	d10e      	bne.n	8009756 <dir_find+0x106>
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7ff fcf2 	bl	800912c <cmp_lfn>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <dir_find+0x106>
 800974e:	7d7b      	ldrb	r3, [r7, #21]
 8009750:	3b01      	subs	r3, #1
 8009752:	b2db      	uxtb	r3, r3
 8009754:	e000      	b.n	8009758 <dir_find+0x108>
 8009756:	23ff      	movs	r3, #255	; 0xff
 8009758:	757b      	strb	r3, [r7, #21]
 800975a:	e024      	b.n	80097a6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800975c:	7d7b      	ldrb	r3, [r7, #21]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <dir_find+0x126>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff feaa 	bl	80094c0 <sum_sfn>
 800976c:	4603      	mov	r3, r0
 800976e:	461a      	mov	r2, r3
 8009770:	7d3b      	ldrb	r3, [r7, #20]
 8009772:	4293      	cmp	r3, r2
 8009774:	d024      	beq.n	80097c0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <dir_find+0x14a>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a18      	ldr	r0, [r3, #32]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3324      	adds	r3, #36	; 0x24
 800978c:	220b      	movs	r2, #11
 800978e:	4619      	mov	r1, r3
 8009790:	f7fe fd14 	bl	80081bc <mem_cmp>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d014      	beq.n	80097c4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800979a:	23ff      	movs	r3, #255	; 0xff
 800979c:	757b      	strb	r3, [r7, #21]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80097a6:	2100      	movs	r1, #0
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7ff fb62 	bl	8008e72 <dir_next>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f43f af65 	beq.w	8009684 <dir_find+0x34>
 80097ba:	e004      	b.n	80097c6 <dir_find+0x176>
		if (res != FR_OK) break;
 80097bc:	bf00      	nop
 80097be:	e002      	b.n	80097c6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80097c0:	bf00      	nop
 80097c2:	e000      	b.n	80097c6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80097c4:	bf00      	nop

	return res;
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08c      	sub	sp, #48	; 0x30
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80097e4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <dir_register+0x20>
 80097ec:	2306      	movs	r3, #6
 80097ee:	e0e0      	b.n	80099b2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80097f0:	2300      	movs	r3, #0
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
 80097f4:	e002      	b.n	80097fc <dir_register+0x2c>
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	3301      	adds	r3, #1
 80097fa:	627b      	str	r3, [r7, #36]	; 0x24
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	691a      	ldr	r2, [r3, #16]
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4413      	add	r3, r2
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1f4      	bne.n	80097f6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009812:	f107 030c 	add.w	r3, r7, #12
 8009816:	220c      	movs	r2, #12
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fc93 	bl	8008144 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d032      	beq.n	800988e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2240      	movs	r2, #64	; 0x40
 800982c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009830:	2301      	movs	r3, #1
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
 8009834:	e016      	b.n	8009864 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	f107 010c 	add.w	r1, r7, #12
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	f7ff fdad 	bl	80093a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff ff00 	bl	8009650 <dir_find>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009856:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	3301      	adds	r3, #1
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	2b63      	cmp	r3, #99	; 0x63
 8009868:	d9e5      	bls.n	8009836 <dir_register+0x66>
 800986a:	e000      	b.n	800986e <dir_register+0x9e>
			if (res != FR_OK) break;
 800986c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	2b64      	cmp	r3, #100	; 0x64
 8009872:	d101      	bne.n	8009878 <dir_register+0xa8>
 8009874:	2307      	movs	r3, #7
 8009876:	e09c      	b.n	80099b2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800987c:	2b04      	cmp	r3, #4
 800987e:	d002      	beq.n	8009886 <dir_register+0xb6>
 8009880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009884:	e095      	b.n	80099b2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009886:	7dfa      	ldrb	r2, [r7, #23]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800988e:	7dfb      	ldrb	r3, [r7, #23]
 8009890:	f003 0302 	and.w	r3, r3, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <dir_register+0xd8>
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	330c      	adds	r3, #12
 800989c:	4a47      	ldr	r2, [pc, #284]	; (80099bc <dir_register+0x1ec>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	089b      	lsrs	r3, r3, #2
 80098a4:	3301      	adds	r3, #1
 80098a6:	e000      	b.n	80098aa <dir_register+0xda>
 80098a8:	2301      	movs	r3, #1
 80098aa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80098ac:	6a39      	ldr	r1, [r7, #32]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7ff fbb5 	bl	800901e <dir_alloc>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80098ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d148      	bne.n	8009954 <dir_register+0x184>
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	623b      	str	r3, [r7, #32]
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d042      	beq.n	8009954 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695a      	ldr	r2, [r3, #20]
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	015b      	lsls	r3, r3, #5
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7ff fa40 	bl	8008d60 <dir_sdi>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80098e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d132      	bne.n	8009954 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3324      	adds	r3, #36	; 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff fde4 	bl	80094c0 <sum_sfn>
 80098f8:	4603      	mov	r3, r0
 80098fa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	4619      	mov	r1, r3
 8009902:	69f8      	ldr	r0, [r7, #28]
 8009904:	f7fe fe4c 	bl	80085a0 <move_window>
 8009908:	4603      	mov	r3, r0
 800990a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800990e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009912:	2b00      	cmp	r3, #0
 8009914:	d11d      	bne.n	8009952 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	6918      	ldr	r0, [r3, #16]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a19      	ldr	r1, [r3, #32]
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	b2da      	uxtb	r2, r3
 8009922:	7efb      	ldrb	r3, [r7, #27]
 8009924:	f7ff fcd6 	bl	80092d4 <put_lfn>
				fs->wflag = 1;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	2201      	movs	r2, #1
 800992c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800992e:	2100      	movs	r1, #0
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff fa9e 	bl	8008e72 <dir_next>
 8009936:	4603      	mov	r3, r0
 8009938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800993c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009940:	2b00      	cmp	r3, #0
 8009942:	d107      	bne.n	8009954 <dir_register+0x184>
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	3b01      	subs	r3, #1
 8009948:	623b      	str	r3, [r7, #32]
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1d5      	bne.n	80098fc <dir_register+0x12c>
 8009950:	e000      	b.n	8009954 <dir_register+0x184>
				if (res != FR_OK) break;
 8009952:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009958:	2b00      	cmp	r3, #0
 800995a:	d128      	bne.n	80099ae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	4619      	mov	r1, r3
 8009962:	69f8      	ldr	r0, [r7, #28]
 8009964:	f7fe fe1c 	bl	80085a0 <move_window>
 8009968:	4603      	mov	r3, r0
 800996a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800996e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009972:	2b00      	cmp	r3, #0
 8009974:	d11b      	bne.n	80099ae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	2220      	movs	r2, #32
 800997c:	2100      	movs	r1, #0
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fc01 	bl	8008186 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a18      	ldr	r0, [r3, #32]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	220b      	movs	r2, #11
 800998e:	4619      	mov	r1, r3
 8009990:	f7fe fbd8 	bl	8008144 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	330c      	adds	r3, #12
 80099a0:	f002 0218 	and.w	r2, r2, #24
 80099a4:	b2d2      	uxtb	r2, r2
 80099a6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2201      	movs	r2, #1
 80099ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80099ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3730      	adds	r7, #48	; 0x30
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	4ec4ec4f 	.word	0x4ec4ec4f

080099c0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099dc:	d007      	beq.n	80099ee <dir_remove+0x2e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff f9bb 	bl	8008d60 <dir_sdi>
 80099ea:	4603      	mov	r3, r0
 80099ec:	e000      	b.n	80099f0 <dir_remove+0x30>
 80099ee:	2300      	movs	r3, #0
 80099f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d128      	bne.n	8009a4a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6938      	ldr	r0, [r7, #16]
 8009a00:	f7fe fdce 	bl	80085a0 <move_window>
 8009a04:	4603      	mov	r3, r0
 8009a06:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d115      	bne.n	8009a3a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	22e5      	movs	r2, #229	; 0xe5
 8009a14:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d90b      	bls.n	8009a3e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fa22 	bl	8008e72 <dir_next>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0df      	beq.n	80099f8 <dir_remove+0x38>
 8009a38:	e002      	b.n	8009a40 <dir_remove+0x80>
			if (res != FR_OK) break;
 8009a3a:	bf00      	nop
 8009a3c:	e000      	b.n	8009a40 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009a3e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d101      	bne.n	8009a4a <dir_remove+0x8a>
 8009a46:	2302      	movs	r3, #2
 8009a48:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	2200      	movs	r2, #0
 8009a68:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	f000 80c9 	beq.w	8009c06 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a7c:	d032      	beq.n	8009ae4 <get_fileinfo+0x90>
			i = j = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	61bb      	str	r3, [r7, #24]
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009a86:	e01b      	b.n	8009ac0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009a88:	89fb      	ldrh	r3, [r7, #14]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f002 f941 	bl	800bd14 <ff_convert>
 8009a92:	4603      	mov	r3, r0
 8009a94:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009a96:	89fb      	ldrh	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <get_fileinfo+0x4e>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61fb      	str	r3, [r7, #28]
 8009aa0:	e01a      	b.n	8009ad8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2bfe      	cmp	r3, #254	; 0xfe
 8009aa6:	d902      	bls.n	8009aae <get_fileinfo+0x5a>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	61fb      	str	r3, [r7, #28]
 8009aac:	e014      	b.n	8009ad8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	61fa      	str	r2, [r7, #28]
 8009ab4:	89fa      	ldrh	r2, [r7, #14]
 8009ab6:	b2d1      	uxtb	r1, r2
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	4413      	add	r3, r2
 8009abc:	460a      	mov	r2, r1
 8009abe:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	1c59      	adds	r1, r3, #1
 8009ac8:	61b9      	str	r1, [r7, #24]
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	81fb      	strh	r3, [r7, #14]
 8009ad2:	89fb      	ldrh	r3, [r7, #14]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1d7      	bne.n	8009a88 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	4413      	add	r3, r2
 8009ade:	3316      	adds	r3, #22
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61bb      	str	r3, [r7, #24]
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	3316      	adds	r3, #22
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009af8:	e04c      	b.n	8009b94 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1a      	ldr	r2, [r3, #32]
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	1c59      	adds	r1, r3, #1
 8009b02:	61f9      	str	r1, [r7, #28]
 8009b04:	4413      	add	r3, r2
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d100      	bne.n	8009b12 <get_fileinfo+0xbe>
 8009b10:	e040      	b.n	8009b94 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	2b05      	cmp	r3, #5
 8009b16:	d101      	bne.n	8009b1c <get_fileinfo+0xc8>
 8009b18:	23e5      	movs	r3, #229	; 0xe5
 8009b1a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2b09      	cmp	r3, #9
 8009b20:	d10f      	bne.n	8009b42 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009b22:	89bb      	ldrh	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <get_fileinfo+0xe0>
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3316      	adds	r3, #22
 8009b30:	222e      	movs	r2, #46	; 0x2e
 8009b32:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	61ba      	str	r2, [r7, #24]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	222e      	movs	r2, #46	; 0x2e
 8009b40:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	4413      	add	r3, r2
 8009b48:	3309      	adds	r3, #9
 8009b4a:	7dfa      	ldrb	r2, [r7, #23]
 8009b4c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009b4e:	89bb      	ldrh	r3, [r7, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d11c      	bne.n	8009b8e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b40      	cmp	r3, #64	; 0x40
 8009b58:	d913      	bls.n	8009b82 <get_fileinfo+0x12e>
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
 8009b5c:	2b5a      	cmp	r3, #90	; 0x5a
 8009b5e:	d810      	bhi.n	8009b82 <get_fileinfo+0x12e>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	330c      	adds	r3, #12
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d901      	bls.n	8009b74 <get_fileinfo+0x120>
 8009b70:	2310      	movs	r3, #16
 8009b72:	e000      	b.n	8009b76 <get_fileinfo+0x122>
 8009b74:	2308      	movs	r3, #8
 8009b76:	4013      	ands	r3, r2
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	3320      	adds	r3, #32
 8009b80:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	4413      	add	r3, r2
 8009b88:	3316      	adds	r3, #22
 8009b8a:	7dfa      	ldrb	r2, [r7, #23]
 8009b8c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	3301      	adds	r3, #1
 8009b92:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b0a      	cmp	r3, #10
 8009b98:	d9af      	bls.n	8009afa <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8009b9a:	89bb      	ldrh	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10d      	bne.n	8009bbc <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3316      	adds	r3, #22
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <get_fileinfo+0x168>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3309      	adds	r3, #9
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	7ada      	ldrb	r2, [r3, #11]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	331c      	adds	r3, #28
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe fa49 	bl	8008070 <ld_dword>
 8009bde:	4602      	mov	r2, r0
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	3316      	adds	r3, #22
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fa40 	bl	8008070 <ld_dword>
 8009bf0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	80da      	strh	r2, [r3, #6]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	809a      	strh	r2, [r3, #4]
 8009c04:	e000      	b.n	8009c08 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009c06:	bf00      	nop
}
 8009c08:	3720      	adds	r7, #32
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	61ba      	str	r2, [r7, #24]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4413      	add	r3, r2
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c40:	2b1f      	cmp	r3, #31
 8009c42:	d940      	bls.n	8009cc6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009c44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c46:	2b2f      	cmp	r3, #47	; 0x2f
 8009c48:	d006      	beq.n	8009c58 <create_name+0x48>
 8009c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c4c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c4e:	d110      	bne.n	8009c72 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009c50:	e002      	b.n	8009c58 <create_name+0x48>
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	3301      	adds	r3, #1
 8009c56:	61bb      	str	r3, [r7, #24]
 8009c58:	693a      	ldr	r2, [r7, #16]
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b2f      	cmp	r3, #47	; 0x2f
 8009c62:	d0f6      	beq.n	8009c52 <create_name+0x42>
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	4413      	add	r3, r2
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8009c6e:	d0f0      	beq.n	8009c52 <create_name+0x42>
			break;
 8009c70:	e02a      	b.n	8009cc8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2bfe      	cmp	r3, #254	; 0xfe
 8009c76:	d901      	bls.n	8009c7c <create_name+0x6c>
 8009c78:	2306      	movs	r3, #6
 8009c7a:	e17d      	b.n	8009f78 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f002 f844 	bl	800bd14 <ff_convert>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <create_name+0x8a>
 8009c96:	2306      	movs	r3, #6
 8009c98:	e16e      	b.n	8009f78 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8009c9e:	d809      	bhi.n	8009cb4 <create_name+0xa4>
 8009ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	488d      	ldr	r0, [pc, #564]	; (8009edc <create_name+0x2cc>)
 8009ca6:	f7fe fab0 	bl	800820a <chk_chr>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <create_name+0xa4>
 8009cb0:	2306      	movs	r3, #6
 8009cb2:	e161      	b.n	8009f78 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	617a      	str	r2, [r7, #20]
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009cc2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009cc4:	e7b4      	b.n	8009c30 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009cc6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	441a      	add	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009cd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cd4:	2b1f      	cmp	r3, #31
 8009cd6:	d801      	bhi.n	8009cdc <create_name+0xcc>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	e000      	b.n	8009cde <create_name+0xce>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009ce2:	e011      	b.n	8009d08 <create_name+0xf8>
		w = lfn[di - 1];
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cea:	3b01      	subs	r3, #1
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cf8:	2b20      	cmp	r3, #32
 8009cfa:	d002      	beq.n	8009d02 <create_name+0xf2>
 8009cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8009d00:	d106      	bne.n	8009d10 <create_name+0x100>
		di--;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1ea      	bne.n	8009ce4 <create_name+0xd4>
 8009d0e:	e000      	b.n	8009d12 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009d10:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <create_name+0x118>
 8009d24:	2306      	movs	r3, #6
 8009d26:	e127      	b.n	8009f78 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3324      	adds	r3, #36	; 0x24
 8009d2c:	220b      	movs	r2, #11
 8009d2e:	2120      	movs	r1, #32
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fe fa28 	bl	8008186 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009d36:	2300      	movs	r3, #0
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	e002      	b.n	8009d42 <create_name+0x132>
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	005b      	lsls	r3, r3, #1
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	2b20      	cmp	r3, #32
 8009d4e:	d0f5      	beq.n	8009d3c <create_name+0x12c>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d5c:	d0ee      	beq.n	8009d3c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d009      	beq.n	8009d78 <create_name+0x168>
 8009d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d68:	f043 0303 	orr.w	r3, r3, #3
 8009d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009d70:	e002      	b.n	8009d78 <create_name+0x168>
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	3b01      	subs	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <create_name+0x182>
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d84:	3b01      	subs	r3, #1
 8009d86:	005b      	lsls	r3, r3, #1
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	881b      	ldrh	r3, [r3, #0]
 8009d8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d90:	d1ef      	bne.n	8009d72 <create_name+0x162>

	i = b = 0; ni = 8;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d98:	2300      	movs	r3, #0
 8009d9a:	623b      	str	r3, [r7, #32]
 8009d9c:	2308      	movs	r3, #8
 8009d9e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	61ba      	str	r2, [r7, #24]
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	4413      	add	r3, r2
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8090 	beq.w	8009ed8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009db8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d006      	beq.n	8009dcc <create_name+0x1bc>
 8009dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009dc2:	d10a      	bne.n	8009dda <create_name+0x1ca>
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d006      	beq.n	8009dda <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dd0:	f043 0303 	orr.w	r3, r3, #3
 8009dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dd8:	e07d      	b.n	8009ed6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009dda:	6a3a      	ldr	r2, [r7, #32]
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d203      	bcs.n	8009dea <create_name+0x1da>
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d123      	bne.n	8009e32 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	2b0b      	cmp	r3, #11
 8009dee:	d106      	bne.n	8009dfe <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009df4:	f043 0303 	orr.w	r3, r3, #3
 8009df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dfc:	e075      	b.n	8009eea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009dfe:	69ba      	ldr	r2, [r7, #24]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d005      	beq.n	8009e12 <create_name+0x202>
 8009e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e0a:	f043 0303 	orr.w	r3, r3, #3
 8009e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d866      	bhi.n	8009ee8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	61bb      	str	r3, [r7, #24]
 8009e1e:	2308      	movs	r3, #8
 8009e20:	623b      	str	r3, [r7, #32]
 8009e22:	230b      	movs	r3, #11
 8009e24:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e30:	e051      	b.n	8009ed6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e34:	2b7f      	cmp	r3, #127	; 0x7f
 8009e36:	d914      	bls.n	8009e62 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 ff69 	bl	800bd14 <ff_convert>
 8009e42:	4603      	mov	r3, r0
 8009e44:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <create_name+0x246>
 8009e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e4e:	3b80      	subs	r3, #128	; 0x80
 8009e50:	4a23      	ldr	r2, [pc, #140]	; (8009ee0 <create_name+0x2d0>)
 8009e52:	5cd3      	ldrb	r3, [r2, r3]
 8009e54:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e5a:	f043 0302 	orr.w	r3, r3, #2
 8009e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <create_name+0x268>
 8009e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	481d      	ldr	r0, [pc, #116]	; (8009ee4 <create_name+0x2d4>)
 8009e6e:	f7fe f9cc 	bl	800820a <chk_chr>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d008      	beq.n	8009e8a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009e78:	235f      	movs	r3, #95	; 0x5f
 8009e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e80:	f043 0303 	orr.w	r3, r3, #3
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e88:	e01b      	b.n	8009ec2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d909      	bls.n	8009ea4 <create_name+0x294>
 8009e90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e92:	2b5a      	cmp	r3, #90	; 0x5a
 8009e94:	d806      	bhi.n	8009ea4 <create_name+0x294>
					b |= 2;
 8009e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e9a:	f043 0302 	orr.w	r3, r3, #2
 8009e9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ea2:	e00e      	b.n	8009ec2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ea6:	2b60      	cmp	r3, #96	; 0x60
 8009ea8:	d90b      	bls.n	8009ec2 <create_name+0x2b2>
 8009eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009eac:	2b7a      	cmp	r3, #122	; 0x7a
 8009eae:	d808      	bhi.n	8009ec2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ebe:	3b20      	subs	r3, #32
 8009ec0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	623a      	str	r2, [r7, #32]
 8009ec8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009eca:	b2d1      	uxtb	r1, r2
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	4413      	add	r3, r2
 8009ed0:	460a      	mov	r2, r1
 8009ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009ed6:	e763      	b.n	8009da0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009ed8:	bf00      	nop
 8009eda:	e006      	b.n	8009eea <create_name+0x2da>
 8009edc:	08012024 	.word	0x08012024
 8009ee0:	080120c0 	.word	0x080120c0
 8009ee4:	08012030 	.word	0x08012030
			if (si > di) break;			/* No extension */
 8009ee8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ef0:	2be5      	cmp	r3, #229	; 0xe5
 8009ef2:	d103      	bne.n	8009efc <create_name+0x2ec>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2205      	movs	r2, #5
 8009ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d104      	bne.n	8009f0c <create_name+0x2fc>
 8009f02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f10:	f003 030c 	and.w	r3, r3, #12
 8009f14:	2b0c      	cmp	r3, #12
 8009f16:	d005      	beq.n	8009f24 <create_name+0x314>
 8009f18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d105      	bne.n	8009f30 <create_name+0x320>
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f28:	f043 0302 	orr.w	r3, r3, #2
 8009f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d117      	bne.n	8009f6c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d105      	bne.n	8009f54 <create_name+0x344>
 8009f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f4c:	f043 0310 	orr.w	r3, r3, #16
 8009f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009f58:	f003 030c 	and.w	r3, r3, #12
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d105      	bne.n	8009f6c <create_name+0x35c>
 8009f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f64:	f043 0308 	orr.w	r3, r3, #8
 8009f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009f76:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3728      	adds	r7, #40	; 0x28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f94:	e002      	b.n	8009f9c <follow_path+0x1c>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8009fa2:	d0f8      	beq.n	8009f96 <follow_path+0x16>
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b5c      	cmp	r3, #92	; 0x5c
 8009faa:	d0f4      	beq.n	8009f96 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b1f      	cmp	r3, #31
 8009fb8:	d80a      	bhi.n	8009fd0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2280      	movs	r2, #128	; 0x80
 8009fbe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7fe fecb 	bl	8008d60 <dir_sdi>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
 8009fce:	e048      	b.n	800a062 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fe1b 	bl	8009c10 <create_name>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d139      	bne.n	800a058 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff fb33 	bl	8009650 <dir_find>
 8009fea:	4603      	mov	r3, r0
 8009fec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ff4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00a      	beq.n	800a012 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ffc:	7dfb      	ldrb	r3, [r7, #23]
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d12c      	bne.n	800a05c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d127      	bne.n	800a05c <follow_path+0xdc>
 800a00c:	2305      	movs	r3, #5
 800a00e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a010:	e024      	b.n	800a05c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d121      	bne.n	800a060 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	799b      	ldrb	r3, [r3, #6]
 800a020:	f003 0310 	and.w	r3, r3, #16
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a028:	2305      	movs	r3, #5
 800a02a:	75fb      	strb	r3, [r7, #23]
 800a02c:	e019      	b.n	800a062 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	8992      	ldrh	r2, [r2, #12]
 800a03c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a040:	fb00 f202 	mul.w	r2, r0, r2
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	440b      	add	r3, r1
 800a048:	4619      	mov	r1, r3
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff f82e 	bl	80090ac <ld_clust>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a056:	e7bb      	b.n	8009fd0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a058:	bf00      	nop
 800a05a:	e002      	b.n	800a062 <follow_path+0xe2>
				break;
 800a05c:	bf00      	nop
 800a05e:	e000      	b.n	800a062 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a060:	bf00      	nop
			}
		}
	}

	return res;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a078:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d031      	beq.n	800a0e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	617b      	str	r3, [r7, #20]
 800a088:	e002      	b.n	800a090 <get_ldnumber+0x24>
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	3301      	adds	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b1f      	cmp	r3, #31
 800a096:	d903      	bls.n	800a0a0 <get_ldnumber+0x34>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	2b3a      	cmp	r3, #58	; 0x3a
 800a09e:	d1f4      	bne.n	800a08a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	2b3a      	cmp	r3, #58	; 0x3a
 800a0a6:	d11c      	bne.n	800a0e2 <get_ldnumber+0x76>
			tp = *path;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	60fa      	str	r2, [r7, #12]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	3b30      	subs	r3, #48	; 0x30
 800a0b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2b09      	cmp	r3, #9
 800a0be:	d80e      	bhi.n	800a0de <get_ldnumber+0x72>
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d10a      	bne.n	800a0de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d107      	bne.n	800a0de <get_ldnumber+0x72>
					vol = (int)i;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	e002      	b.n	800a0e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a0e6:	693b      	ldr	r3, [r7, #16]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	371c      	adds	r7, #28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	70da      	strb	r2, [r3, #3]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a10a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7fe fa46 	bl	80085a0 <move_window>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <check_fs+0x2a>
 800a11a:	2304      	movs	r3, #4
 800a11c:	e038      	b.n	800a190 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	3338      	adds	r3, #56	; 0x38
 800a122:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a126:	4618      	mov	r0, r3
 800a128:	f7fd ff8a 	bl	8008040 <ld_word>
 800a12c:	4603      	mov	r3, r0
 800a12e:	461a      	mov	r2, r3
 800a130:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a134:	429a      	cmp	r2, r3
 800a136:	d001      	beq.n	800a13c <check_fs+0x48>
 800a138:	2303      	movs	r3, #3
 800a13a:	e029      	b.n	800a190 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a142:	2be9      	cmp	r3, #233	; 0xe9
 800a144:	d009      	beq.n	800a15a <check_fs+0x66>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a14c:	2beb      	cmp	r3, #235	; 0xeb
 800a14e:	d11e      	bne.n	800a18e <check_fs+0x9a>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a156:	2b90      	cmp	r3, #144	; 0x90
 800a158:	d119      	bne.n	800a18e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	3338      	adds	r3, #56	; 0x38
 800a15e:	3336      	adds	r3, #54	; 0x36
 800a160:	4618      	mov	r0, r3
 800a162:	f7fd ff85 	bl	8008070 <ld_dword>
 800a166:	4603      	mov	r3, r0
 800a168:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a16c:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <check_fs+0xa4>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d101      	bne.n	800a176 <check_fs+0x82>
 800a172:	2300      	movs	r3, #0
 800a174:	e00c      	b.n	800a190 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3338      	adds	r3, #56	; 0x38
 800a17a:	3352      	adds	r3, #82	; 0x52
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd ff77 	bl	8008070 <ld_dword>
 800a182:	4603      	mov	r3, r0
 800a184:	4a05      	ldr	r2, [pc, #20]	; (800a19c <check_fs+0xa8>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d101      	bne.n	800a18e <check_fs+0x9a>
 800a18a:	2300      	movs	r3, #0
 800a18c:	e000      	b.n	800a190 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a18e:	2302      	movs	r3, #2
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	00544146 	.word	0x00544146
 800a19c:	33544146 	.word	0x33544146

0800a1a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b096      	sub	sp, #88	; 0x58
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ff59 	bl	800a06c <get_ldnumber>
 800a1ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a1bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	da01      	bge.n	800a1c6 <find_volume+0x26>
 800a1c2:	230b      	movs	r3, #11
 800a1c4:	e265      	b.n	800a692 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a1c6:	4a9f      	ldr	r2, [pc, #636]	; (800a444 <find_volume+0x2a4>)
 800a1c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <find_volume+0x3a>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	e25b      	b.n	800a692 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	f023 0301 	bic.w	r3, r3, #1
 800a1e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01a      	beq.n	800a226 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	785b      	ldrb	r3, [r3, #1]
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fd fe83 	bl	8007f00 <disk_status>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10c      	bne.n	800a226 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d007      	beq.n	800a222 <find_volume+0x82>
 800a212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a21e:	230a      	movs	r3, #10
 800a220:	e237      	b.n	800a692 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a222:	2300      	movs	r3, #0
 800a224:	e235      	b.n	800a692 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a232:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a236:	785b      	ldrb	r3, [r3, #1]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fd fe7b 	bl	8007f34 <disk_initialize>
 800a23e:	4603      	mov	r3, r0
 800a240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a248:	f003 0301 	and.w	r3, r3, #1
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a250:	2303      	movs	r3, #3
 800a252:	e21e      	b.n	800a692 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d007      	beq.n	800a26a <find_volume+0xca>
 800a25a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a25e:	f003 0304 	and.w	r3, r3, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a266:	230a      	movs	r3, #10
 800a268:	e213      	b.n	800a692 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	7858      	ldrb	r0, [r3, #1]
 800a26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a270:	330c      	adds	r3, #12
 800a272:	461a      	mov	r2, r3
 800a274:	2102      	movs	r1, #2
 800a276:	f7fd fec5 	bl	8008004 <disk_ioctl>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <find_volume+0xe4>
 800a280:	2301      	movs	r3, #1
 800a282:	e206      	b.n	800a692 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	899b      	ldrh	r3, [r3, #12]
 800a288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a28c:	d80d      	bhi.n	800a2aa <find_volume+0x10a>
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	899b      	ldrh	r3, [r3, #12]
 800a292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a296:	d308      	bcc.n	800a2aa <find_volume+0x10a>
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	899b      	ldrh	r3, [r3, #12]
 800a29c:	461a      	mov	r2, r3
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	899b      	ldrh	r3, [r3, #12]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <find_volume+0x10e>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e1f1      	b.n	800a692 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a2b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2b6:	f7ff ff1d 	bl	800a0f4 <check_fs>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d149      	bne.n	800a35c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a2cc:	e01e      	b.n	800a30c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a2d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a2dc:	4413      	add	r3, r2
 800a2de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <find_volume+0x158>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	3308      	adds	r3, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7fd febe 	bl	8008070 <ld_dword>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	e000      	b.n	800a2fa <find_volume+0x15a>
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	3358      	adds	r3, #88	; 0x58
 800a300:	443b      	add	r3, r7
 800a302:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a308:	3301      	adds	r3, #1
 800a30a:	643b      	str	r3, [r7, #64]	; 0x40
 800a30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d9dd      	bls.n	800a2ce <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a312:	2300      	movs	r3, #0
 800a314:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <find_volume+0x182>
 800a31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31e:	3b01      	subs	r3, #1
 800a320:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	3358      	adds	r3, #88	; 0x58
 800a328:	443b      	add	r3, r7
 800a32a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a32e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <find_volume+0x1a2>
 800a336:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a33a:	f7ff fedb 	bl	800a0f4 <check_fs>
 800a33e:	4603      	mov	r3, r0
 800a340:	e000      	b.n	800a344 <find_volume+0x1a4>
 800a342:	2303      	movs	r3, #3
 800a344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d905      	bls.n	800a35c <find_volume+0x1bc>
 800a350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a352:	3301      	adds	r3, #1
 800a354:	643b      	str	r3, [r7, #64]	; 0x40
 800a356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d9e2      	bls.n	800a322 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a35c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a360:	2b04      	cmp	r3, #4
 800a362:	d101      	bne.n	800a368 <find_volume+0x1c8>
 800a364:	2301      	movs	r3, #1
 800a366:	e194      	b.n	800a692 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d901      	bls.n	800a374 <find_volume+0x1d4>
 800a370:	230d      	movs	r3, #13
 800a372:	e18e      	b.n	800a692 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	3338      	adds	r3, #56	; 0x38
 800a378:	330b      	adds	r3, #11
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fd fe60 	bl	8008040 <ld_word>
 800a380:	4603      	mov	r3, r0
 800a382:	461a      	mov	r2, r3
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	899b      	ldrh	r3, [r3, #12]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d001      	beq.n	800a390 <find_volume+0x1f0>
 800a38c:	230d      	movs	r3, #13
 800a38e:	e180      	b.n	800a692 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	3338      	adds	r3, #56	; 0x38
 800a394:	3316      	adds	r3, #22
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd fe52 	bl	8008040 <ld_word>
 800a39c:	4603      	mov	r3, r0
 800a39e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <find_volume+0x214>
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	3338      	adds	r3, #56	; 0x38
 800a3aa:	3324      	adds	r3, #36	; 0x24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fe5f 	bl	8008070 <ld_dword>
 800a3b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a3b8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	789b      	ldrb	r3, [r3, #2]
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d005      	beq.n	800a3d8 <find_volume+0x238>
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	789b      	ldrb	r3, [r3, #2]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d001      	beq.n	800a3d8 <find_volume+0x238>
 800a3d4:	230d      	movs	r3, #13
 800a3d6:	e15c      	b.n	800a692 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	789b      	ldrb	r3, [r3, #2]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e0:	fb02 f303 	mul.w	r3, r2, r3
 800a3e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	895b      	ldrh	r3, [r3, #10]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d008      	beq.n	800a40c <find_volume+0x26c>
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fc:	895b      	ldrh	r3, [r3, #10]
 800a3fe:	461a      	mov	r2, r3
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	895b      	ldrh	r3, [r3, #10]
 800a404:	3b01      	subs	r3, #1
 800a406:	4013      	ands	r3, r2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <find_volume+0x270>
 800a40c:	230d      	movs	r3, #13
 800a40e:	e140      	b.n	800a692 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	3338      	adds	r3, #56	; 0x38
 800a414:	3311      	adds	r3, #17
 800a416:	4618      	mov	r0, r3
 800a418:	f7fd fe12 	bl	8008040 <ld_word>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	891b      	ldrh	r3, [r3, #8]
 800a428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a42a:	8992      	ldrh	r2, [r2, #12]
 800a42c:	0952      	lsrs	r2, r2, #5
 800a42e:	b292      	uxth	r2, r2
 800a430:	fbb3 f1f2 	udiv	r1, r3, r2
 800a434:	fb01 f202 	mul.w	r2, r1, r2
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <find_volume+0x2a8>
 800a440:	230d      	movs	r3, #13
 800a442:	e126      	b.n	800a692 <find_volume+0x4f2>
 800a444:	20002ad0 	.word	0x20002ad0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	3338      	adds	r3, #56	; 0x38
 800a44c:	3313      	adds	r3, #19
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd fdf6 	bl	8008040 <ld_word>
 800a454:	4603      	mov	r3, r0
 800a456:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <find_volume+0x2cc>
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	3338      	adds	r3, #56	; 0x38
 800a462:	3320      	adds	r3, #32
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd fe03 	bl	8008070 <ld_dword>
 800a46a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	3338      	adds	r3, #56	; 0x38
 800a470:	330e      	adds	r3, #14
 800a472:	4618      	mov	r0, r3
 800a474:	f7fd fde4 	bl	8008040 <ld_word>
 800a478:	4603      	mov	r3, r0
 800a47a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a47c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <find_volume+0x2e6>
 800a482:	230d      	movs	r3, #13
 800a484:	e105      	b.n	800a692 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a486:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a48a:	4413      	add	r3, r2
 800a48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a48e:	8911      	ldrh	r1, [r2, #8]
 800a490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a492:	8992      	ldrh	r2, [r2, #12]
 800a494:	0952      	lsrs	r2, r2, #5
 800a496:	b292      	uxth	r2, r2
 800a498:	fbb1 f2f2 	udiv	r2, r1, r2
 800a49c:	b292      	uxth	r2, r2
 800a49e:	4413      	add	r3, r2
 800a4a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a4a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d201      	bcs.n	800a4ae <find_volume+0x30e>
 800a4aa:	230d      	movs	r3, #13
 800a4ac:	e0f1      	b.n	800a692 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a4ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b6:	8952      	ldrh	r2, [r2, #10]
 800a4b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <find_volume+0x328>
 800a4c4:	230d      	movs	r3, #13
 800a4c6:	e0e4      	b.n	800a692 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d802      	bhi.n	800a4de <find_volume+0x33e>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d802      	bhi.n	800a4ee <find_volume+0x34e>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	1c9a      	adds	r2, r3, #2
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4fa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a4fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a500:	441a      	add	r2, r3
 800a502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a504:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a506:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50a:	441a      	add	r2, r3
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a514:	2b03      	cmp	r3, #3
 800a516:	d11e      	bne.n	800a556 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51a:	3338      	adds	r3, #56	; 0x38
 800a51c:	332a      	adds	r3, #42	; 0x2a
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fd fd8e 	bl	8008040 <ld_word>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <find_volume+0x38e>
 800a52a:	230d      	movs	r3, #13
 800a52c:	e0b1      	b.n	800a692 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a530:	891b      	ldrh	r3, [r3, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <find_volume+0x39a>
 800a536:	230d      	movs	r3, #13
 800a538:	e0ab      	b.n	800a692 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	3338      	adds	r3, #56	; 0x38
 800a53e:	332c      	adds	r3, #44	; 0x2c
 800a540:	4618      	mov	r0, r3
 800a542:	f7fd fd95 	bl	8008070 <ld_dword>
 800a546:	4602      	mov	r2, r0
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	647b      	str	r3, [r7, #68]	; 0x44
 800a554:	e01f      	b.n	800a596 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	891b      	ldrh	r3, [r3, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d101      	bne.n	800a562 <find_volume+0x3c2>
 800a55e:	230d      	movs	r3, #13
 800a560:	e097      	b.n	800a692 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a568:	441a      	add	r2, r3
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a56e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a572:	2b02      	cmp	r3, #2
 800a574:	d103      	bne.n	800a57e <find_volume+0x3de>
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	e00a      	b.n	800a594 <find_volume+0x3f4>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	4613      	mov	r3, r2
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
 800a588:	085a      	lsrs	r2, r3, #1
 800a58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f003 0301 	and.w	r3, r3, #1
 800a592:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a594:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	6a1a      	ldr	r2, [r3, #32]
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	899b      	ldrh	r3, [r3, #12]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a2:	440b      	add	r3, r1
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5a8:	8989      	ldrh	r1, [r1, #12]
 800a5aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d201      	bcs.n	800a5b6 <find_volume+0x416>
 800a5b2:	230d      	movs	r3, #13
 800a5b4:	e06d      	b.n	800a692 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5bc:	619a      	str	r2, [r3, #24]
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	2280      	movs	r2, #128	; 0x80
 800a5ca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a5cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d149      	bne.n	800a668 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	3338      	adds	r3, #56	; 0x38
 800a5d8:	3330      	adds	r3, #48	; 0x30
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fd fd30 	bl	8008040 <ld_word>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d140      	bne.n	800a668 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ee:	f7fd ffd7 	bl	80085a0 <move_window>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d137      	bne.n	800a668 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	3338      	adds	r3, #56	; 0x38
 800a602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a606:	4618      	mov	r0, r3
 800a608:	f7fd fd1a 	bl	8008040 <ld_word>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a614:	429a      	cmp	r2, r3
 800a616:	d127      	bne.n	800a668 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	3338      	adds	r3, #56	; 0x38
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fd fd27 	bl	8008070 <ld_dword>
 800a622:	4603      	mov	r3, r0
 800a624:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <find_volume+0x4fc>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d11e      	bne.n	800a668 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	3338      	adds	r3, #56	; 0x38
 800a62e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a632:	4618      	mov	r0, r3
 800a634:	f7fd fd1c 	bl	8008070 <ld_dword>
 800a638:	4603      	mov	r3, r0
 800a63a:	4a19      	ldr	r2, [pc, #100]	; (800a6a0 <find_volume+0x500>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d113      	bne.n	800a668 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	3338      	adds	r3, #56	; 0x38
 800a644:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fd fd11 	bl	8008070 <ld_dword>
 800a64e:	4602      	mov	r2, r0
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	3338      	adds	r3, #56	; 0x38
 800a658:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fd fd07 	bl	8008070 <ld_dword>
 800a662:	4602      	mov	r2, r0
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a66e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a670:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <find_volume+0x504>)
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	3301      	adds	r3, #1
 800a676:	b29a      	uxth	r2, r3
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <find_volume+0x504>)
 800a67a:	801a      	strh	r2, [r3, #0]
 800a67c:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <find_volume+0x504>)
 800a67e:	881a      	ldrh	r2, [r3, #0]
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a686:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <find_volume+0x508>)
 800a688:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a68a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a68c:	f7fd ff20 	bl	80084d0 <clear_lock>
#endif
	return FR_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3758      	adds	r7, #88	; 0x58
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	41615252 	.word	0x41615252
 800a6a0:	61417272 	.word	0x61417272
 800a6a4:	20002ad4 	.word	0x20002ad4
 800a6a8:	20002af8 	.word	0x20002af8

0800a6ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a6b6:	2309      	movs	r3, #9
 800a6b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01c      	beq.n	800a6fa <validate+0x4e>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d018      	beq.n	800a6fa <validate+0x4e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d013      	beq.n	800a6fa <validate+0x4e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	889a      	ldrh	r2, [r3, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	88db      	ldrh	r3, [r3, #6]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d10c      	bne.n	800a6fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	785b      	ldrb	r3, [r3, #1]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd fc0a 	bl	8007f00 <disk_status>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <validate+0x4e>
			res = FR_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d102      	bne.n	800a706 <validate+0x5a>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	e000      	b.n	800a708 <validate+0x5c>
 800a706:	2300      	movs	r3, #0
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	6013      	str	r3, [r2, #0]
	return res;
 800a70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
	...

0800a718 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a72a:	f107 0310 	add.w	r3, r7, #16
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff fc9c 	bl	800a06c <get_ldnumber>
 800a734:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da01      	bge.n	800a740 <f_mount+0x28>
 800a73c:	230b      	movs	r3, #11
 800a73e:	e02b      	b.n	800a798 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a740:	4a17      	ldr	r2, [pc, #92]	; (800a7a0 <f_mount+0x88>)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a748:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a750:	69b8      	ldr	r0, [r7, #24]
 800a752:	f7fd febd 	bl	80084d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2200      	movs	r2, #0
 800a75a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d002      	beq.n	800a768 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	490d      	ldr	r1, [pc, #52]	; (800a7a0 <f_mount+0x88>)
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <f_mount+0x66>
 800a778:	79fb      	ldrb	r3, [r7, #7]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d001      	beq.n	800a782 <f_mount+0x6a>
 800a77e:	2300      	movs	r3, #0
 800a780:	e00a      	b.n	800a798 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a782:	f107 010c 	add.w	r1, r7, #12
 800a786:	f107 0308 	add.w	r3, r7, #8
 800a78a:	2200      	movs	r2, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fd07 	bl	800a1a0 <find_volume>
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a796:	7dfb      	ldrb	r3, [r7, #23]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3720      	adds	r7, #32
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20002ad0 	.word	0x20002ad0

0800a7a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b09a      	sub	sp, #104	; 0x68
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <f_open+0x18>
 800a7b8:	2309      	movs	r3, #9
 800a7ba:	e1bb      	b.n	800ab34 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a7c4:	79fa      	ldrb	r2, [r7, #7]
 800a7c6:	f107 0114 	add.w	r1, r7, #20
 800a7ca:	f107 0308 	add.w	r3, r7, #8
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fce6 	bl	800a1a0 <find_volume>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a7da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f040 819f 	bne.w	800ab22 <f_open+0x37e>
		dj.obj.fs = fs;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	f107 0318 	add.w	r3, r7, #24
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fbc5 	bl	8009f80 <follow_path>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a7fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a800:	2b00      	cmp	r3, #0
 800a802:	d11a      	bne.n	800a83a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a804:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	da03      	bge.n	800a816 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a80e:	2306      	movs	r3, #6
 800a810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a814:	e011      	b.n	800a83a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	f023 0301 	bic.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bf14      	ite	ne
 800a820:	2301      	movne	r3, #1
 800a822:	2300      	moveq	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	f107 0318 	add.w	r3, r7, #24
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fd fd06 	bl	8008240 <chk_lock>
 800a834:	4603      	mov	r3, r0
 800a836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	f003 031c 	and.w	r3, r3, #28
 800a840:	2b00      	cmp	r3, #0
 800a842:	d07f      	beq.n	800a944 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d017      	beq.n	800a87c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a84c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a850:	2b04      	cmp	r3, #4
 800a852:	d10e      	bne.n	800a872 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a854:	f7fd fd50 	bl	80082f8 <enq_lock>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d006      	beq.n	800a86c <f_open+0xc8>
 800a85e:	f107 0318 	add.w	r3, r7, #24
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe ffb4 	bl	80097d0 <dir_register>
 800a868:	4603      	mov	r3, r0
 800a86a:	e000      	b.n	800a86e <f_open+0xca>
 800a86c:	2312      	movs	r3, #18
 800a86e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	f043 0308 	orr.w	r3, r3, #8
 800a878:	71fb      	strb	r3, [r7, #7]
 800a87a:	e010      	b.n	800a89e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a87c:	7fbb      	ldrb	r3, [r7, #30]
 800a87e:	f003 0311 	and.w	r3, r3, #17
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <f_open+0xea>
					res = FR_DENIED;
 800a886:	2307      	movs	r3, #7
 800a888:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a88c:	e007      	b.n	800a89e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a88e:	79fb      	ldrb	r3, [r7, #7]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <f_open+0xfa>
 800a898:	2308      	movs	r3, #8
 800a89a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a89e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d168      	bne.n	800a978 <f_open+0x1d4>
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f003 0308 	and.w	r3, r3, #8
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d063      	beq.n	800a978 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a8b0:	f7fd fac8 	bl	8007e44 <get_fattime>
 800a8b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	330e      	adds	r3, #14
 800a8ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fc15 	bl	80080ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c4:	3316      	adds	r3, #22
 800a8c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fd fc0f 	bl	80080ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	330b      	adds	r3, #11
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8da:	4611      	mov	r1, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fe fbe5 	bl	80090ac <ld_clust>
 800a8e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fe fbfd 	bl	80090ea <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	331c      	adds	r3, #28
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fd fbf8 	bl	80080ec <st_dword>
					fs->wflag = 1;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2201      	movs	r2, #1
 800a900:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a904:	2b00      	cmp	r3, #0
 800a906:	d037      	beq.n	800a978 <f_open+0x1d4>
						dw = fs->winsect;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a90e:	f107 0318 	add.w	r3, r7, #24
 800a912:	2200      	movs	r2, #0
 800a914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe f8ed 	bl	8008af6 <remove_chain>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a922:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a926:	2b00      	cmp	r3, #0
 800a928:	d126      	bne.n	800a978 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fd fe36 	bl	80085a0 <move_window>
 800a934:	4603      	mov	r3, r0
 800a936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a93e:	3a01      	subs	r2, #1
 800a940:	615a      	str	r2, [r3, #20]
 800a942:	e019      	b.n	800a978 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a944:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d115      	bne.n	800a978 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a94c:	7fbb      	ldrb	r3, [r7, #30]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a956:	2304      	movs	r3, #4
 800a958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a95c:	e00c      	b.n	800a978 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <f_open+0x1d4>
 800a968:	7fbb      	ldrb	r3, [r7, #30]
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <f_open+0x1d4>
						res = FR_DENIED;
 800a972:	2307      	movs	r3, #7
 800a974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a978:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d128      	bne.n	800a9d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	f003 0308 	and.w	r3, r3, #8
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a99a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	f023 0301 	bic.w	r3, r3, #1
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	bf14      	ite	ne
 800a9aa:	2301      	movne	r3, #1
 800a9ac:	2300      	moveq	r3, #0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	f107 0318 	add.w	r3, r7, #24
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fd fcbf 	bl	800833c <inc_lock>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d102      	bne.n	800a9d2 <f_open+0x22e>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a9d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 80a3 	bne.w	800ab22 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fb62 	bl	80090ac <ld_clust>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	331c      	adds	r3, #28
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd fb3c 	bl	8008070 <ld_dword>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	88da      	ldrh	r2, [r3, #6]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	79fa      	ldrb	r2, [r7, #7]
 800aa16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3330      	adds	r3, #48	; 0x30
 800aa2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aa32:	2100      	movs	r1, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fd fba6 	bl	8008186 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa3a:	79fb      	ldrb	r3, [r7, #7]
 800aa3c:	f003 0320 	and.w	r3, r3, #32
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d06e      	beq.n	800ab22 <f_open+0x37e>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d06a      	beq.n	800ab22 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68da      	ldr	r2, [r3, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	895b      	ldrh	r3, [r3, #10]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	899b      	ldrh	r3, [r3, #12]
 800aa5e:	fb02 f303 	mul.w	r3, r2, r3
 800aa62:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa70:	e016      	b.n	800aaa0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fd fe4f 	bl	800871a <get_fat>
 800aa7c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aa7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d802      	bhi.n	800aa8a <f_open+0x2e6>
 800aa84:	2302      	movs	r3, #2
 800aa86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa90:	d102      	bne.n	800aa98 <f_open+0x2f4>
 800aa92:	2301      	movs	r3, #1
 800aa94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <f_open+0x30c>
 800aaa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aaaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d8e0      	bhi.n	800aa72 <f_open+0x2ce>
				}
				fp->clust = clst;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aab4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d131      	bne.n	800ab22 <f_open+0x37e>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	899b      	ldrh	r3, [r3, #12]
 800aac2:	461a      	mov	r2, r3
 800aac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aac6:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaca:	fb01 f202 	mul.w	r2, r1, r2
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d026      	beq.n	800ab22 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fd fdff 	bl	80086dc <clust2sect>
 800aade:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d103      	bne.n	800aaee <f_open+0x34a>
						res = FR_INT_ERR;
 800aae6:	2302      	movs	r3, #2
 800aae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aaec:	e019      	b.n	800ab22 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aaf6:	fbb3 f2f2 	udiv	r2, r3, r2
 800aafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafc:	441a      	add	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	7858      	ldrb	r0, [r3, #1]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a1a      	ldr	r2, [r3, #32]
 800ab10:	2301      	movs	r3, #1
 800ab12:	f7fd fa37 	bl	8007f84 <disk_read>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <f_open+0x37e>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <f_open+0x38c>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3768      	adds	r7, #104	; 0x68
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08e      	sub	sp, #56	; 0x38
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f107 0214 	add.w	r2, r7, #20
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fda5 	bl	800a6ac <validate>
 800ab62:	4603      	mov	r3, r0
 800ab64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d107      	bne.n	800ab80 <f_read+0x44>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	7d5b      	ldrb	r3, [r3, #21]
 800ab74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ab78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <f_read+0x4a>
 800ab80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab84:	e135      	b.n	800adf2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	7d1b      	ldrb	r3, [r3, #20]
 800ab8a:	f003 0301 	and.w	r3, r3, #1
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <f_read+0x5a>
 800ab92:	2307      	movs	r3, #7
 800ab94:	e12d      	b.n	800adf2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	1ad3      	subs	r3, r2, r3
 800aba0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	f240 811e 	bls.w	800ade8 <f_read+0x2ac>
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800abb0:	e11a      	b.n	800ade8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	699b      	ldr	r3, [r3, #24]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	8992      	ldrh	r2, [r2, #12]
 800abba:	fbb3 f1f2 	udiv	r1, r3, r2
 800abbe:	fb01 f202 	mul.w	r2, r1, r2
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f040 80d5 	bne.w	800ad74 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	699b      	ldr	r3, [r3, #24]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	8992      	ldrh	r2, [r2, #12]
 800abd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	8952      	ldrh	r2, [r2, #10]
 800abda:	3a01      	subs	r2, #1
 800abdc:	4013      	ands	r3, r2
 800abde:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d12f      	bne.n	800ac46 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d103      	bne.n	800abf6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	633b      	str	r3, [r7, #48]	; 0x30
 800abf4:	e013      	b.n	800ac1e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d007      	beq.n	800ac0e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7fe f873 	bl	8008cf0 <clmt_clust>
 800ac0a:	6338      	str	r0, [r7, #48]	; 0x30
 800ac0c:	e007      	b.n	800ac1e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	4619      	mov	r1, r3
 800ac16:	4610      	mov	r0, r2
 800ac18:	f7fd fd7f 	bl	800871a <get_fat>
 800ac1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d804      	bhi.n	800ac2e <f_read+0xf2>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2202      	movs	r2, #2
 800ac28:	755a      	strb	r2, [r3, #21]
 800ac2a:	2302      	movs	r3, #2
 800ac2c:	e0e1      	b.n	800adf2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac34:	d104      	bne.n	800ac40 <f_read+0x104>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	755a      	strb	r2, [r3, #21]
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e0d8      	b.n	800adf2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	69db      	ldr	r3, [r3, #28]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fd fd44 	bl	80086dc <clust2sect>
 800ac54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <f_read+0x12a>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	755a      	strb	r2, [r3, #21]
 800ac62:	2302      	movs	r3, #2
 800ac64:	e0c5      	b.n	800adf2 <f_read+0x2b6>
			sect += csect;
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	899b      	ldrh	r3, [r3, #12]
 800ac72:	461a      	mov	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d041      	beq.n	800ad06 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	4413      	add	r3, r2
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	8952      	ldrh	r2, [r2, #10]
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d905      	bls.n	800ac9c <f_read+0x160>
					cc = fs->csize - csect;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	895b      	ldrh	r3, [r3, #10]
 800ac94:	461a      	mov	r2, r3
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	7858      	ldrb	r0, [r3, #1]
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aca6:	f7fd f96d 	bl	8007f84 <disk_read>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <f_read+0x17e>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2201      	movs	r2, #1
 800acb4:	755a      	strb	r2, [r3, #21]
 800acb6:	2301      	movs	r3, #1
 800acb8:	e09b      	b.n	800adf2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	b25b      	sxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	da18      	bge.n	800acf6 <f_read+0x1ba>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6a1a      	ldr	r2, [r3, #32]
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acce:	429a      	cmp	r2, r3
 800acd0:	d911      	bls.n	800acf6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a1a      	ldr	r2, [r3, #32]
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	8992      	ldrh	r2, [r2, #12]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	18d0      	adds	r0, r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	899b      	ldrh	r3, [r3, #12]
 800acf0:	461a      	mov	r2, r3
 800acf2:	f7fd fa27 	bl	8008144 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	899b      	ldrh	r3, [r3, #12]
 800acfa:	461a      	mov	r2, r3
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	fb02 f303 	mul.w	r3, r2, r3
 800ad02:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ad04:	e05c      	b.n	800adc0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d02e      	beq.n	800ad6e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	7d1b      	ldrb	r3, [r3, #20]
 800ad14:	b25b      	sxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da18      	bge.n	800ad4c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	7858      	ldrb	r0, [r3, #1]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a1a      	ldr	r2, [r3, #32]
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f7fd f94b 	bl	8007fc4 <disk_write>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <f_read+0x202>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	755a      	strb	r2, [r3, #21]
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e059      	b.n	800adf2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	7d1b      	ldrb	r3, [r3, #20]
 800ad42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	7858      	ldrb	r0, [r3, #1]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad56:	2301      	movs	r3, #1
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	f7fd f913 	bl	8007f84 <disk_read>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <f_read+0x232>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2201      	movs	r2, #1
 800ad68:	755a      	strb	r2, [r3, #21]
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e041      	b.n	800adf2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	8992      	ldrh	r2, [r2, #12]
 800ad82:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad86:	fb01 f202 	mul.w	r2, r1, r2
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	1ac3      	subs	r3, r0, r3
 800ad8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ad90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d901      	bls.n	800ad9c <f_read+0x260>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	8992      	ldrh	r2, [r2, #12]
 800adaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800adae:	fb00 f202 	mul.w	r2, r0, r2
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	440b      	add	r3, r1
 800adb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adb8:	4619      	mov	r1, r3
 800adba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adbc:	f7fd f9c2 	bl	8008144 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800adc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	4413      	add	r3, r2
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	699a      	ldr	r2, [r3, #24]
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	441a      	add	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	619a      	str	r2, [r3, #24]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	441a      	add	r2, r3
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f47f aee1 	bne.w	800abb2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3738      	adds	r7, #56	; 0x38
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b08c      	sub	sp, #48	; 0x30
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
 800ae06:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f107 0210 	add.w	r2, r7, #16
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff fc46 	bl	800a6ac <validate>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ae26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d107      	bne.n	800ae3e <f_write+0x44>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	7d5b      	ldrb	r3, [r3, #21]
 800ae32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ae36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <f_write+0x4a>
 800ae3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae42:	e16a      	b.n	800b11a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	7d1b      	ldrb	r3, [r3, #20]
 800ae48:	f003 0302 	and.w	r3, r3, #2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <f_write+0x5a>
 800ae50:	2307      	movs	r3, #7
 800ae52:	e162      	b.n	800b11a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	441a      	add	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	f080 814c 	bcs.w	800b0fe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	43db      	mvns	r3, r3
 800ae6c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ae6e:	e146      	b.n	800b0fe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	8992      	ldrh	r2, [r2, #12]
 800ae78:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae7c:	fb01 f202 	mul.w	r2, r1, r2
 800ae80:	1a9b      	subs	r3, r3, r2
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f040 80f1 	bne.w	800b06a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	8992      	ldrh	r2, [r2, #12]
 800ae90:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	8952      	ldrh	r2, [r2, #10]
 800ae98:	3a01      	subs	r2, #1
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d143      	bne.n	800af2c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	699b      	ldr	r3, [r3, #24]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10c      	bne.n	800aec6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d11a      	bne.n	800aeee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2100      	movs	r1, #0
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fd fe7f 	bl	8008bc0 <create_chain>
 800aec2:	62b8      	str	r0, [r7, #40]	; 0x28
 800aec4:	e013      	b.n	800aeee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d007      	beq.n	800aede <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	4619      	mov	r1, r3
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7fd ff0b 	bl	8008cf0 <clmt_clust>
 800aeda:	62b8      	str	r0, [r7, #40]	; 0x28
 800aedc:	e007      	b.n	800aeee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fd fe6a 	bl	8008bc0 <create_chain>
 800aeec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8109 	beq.w	800b108 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d104      	bne.n	800af06 <f_write+0x10c>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2202      	movs	r2, #2
 800af00:	755a      	strb	r2, [r3, #21]
 800af02:	2302      	movs	r3, #2
 800af04:	e109      	b.n	800b11a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800af06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af0c:	d104      	bne.n	800af18 <f_write+0x11e>
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2201      	movs	r2, #1
 800af12:	755a      	strb	r2, [r3, #21]
 800af14:	2301      	movs	r3, #1
 800af16:	e100      	b.n	800b11a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af1c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d102      	bne.n	800af2c <f_write+0x132>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	7d1b      	ldrb	r3, [r3, #20]
 800af30:	b25b      	sxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	da18      	bge.n	800af68 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1a      	ldr	r2, [r3, #32]
 800af44:	2301      	movs	r3, #1
 800af46:	f7fd f83d 	bl	8007fc4 <disk_write>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d004      	beq.n	800af5a <f_write+0x160>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	755a      	strb	r2, [r3, #21]
 800af56:	2301      	movs	r3, #1
 800af58:	e0df      	b.n	800b11a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	7d1b      	ldrb	r3, [r3, #20]
 800af5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af62:	b2da      	uxtb	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f7fd fbb3 	bl	80086dc <clust2sect>
 800af76:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d104      	bne.n	800af88 <f_write+0x18e>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2202      	movs	r2, #2
 800af82:	755a      	strb	r2, [r3, #21]
 800af84:	2302      	movs	r3, #2
 800af86:	e0c8      	b.n	800b11a <f_write+0x320>
			sect += csect;
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	4413      	add	r3, r2
 800af8e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	899b      	ldrh	r3, [r3, #12]
 800af94:	461a      	mov	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	fbb3 f3f2 	udiv	r3, r3, r2
 800af9c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800af9e:	6a3b      	ldr	r3, [r7, #32]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d043      	beq.n	800b02c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	4413      	add	r3, r2
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	8952      	ldrh	r2, [r2, #10]
 800afae:	4293      	cmp	r3, r2
 800afb0:	d905      	bls.n	800afbe <f_write+0x1c4>
					cc = fs->csize - csect;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	895b      	ldrh	r3, [r3, #10]
 800afb6:	461a      	mov	r2, r3
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	7858      	ldrb	r0, [r3, #1]
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	69f9      	ldr	r1, [r7, #28]
 800afc8:	f7fc fffc 	bl	8007fc4 <disk_write>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <f_write+0x1e2>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2201      	movs	r2, #1
 800afd6:	755a      	strb	r2, [r3, #21]
 800afd8:	2301      	movs	r3, #1
 800afda:	e09e      	b.n	800b11a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a1a      	ldr	r2, [r3, #32]
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	6a3a      	ldr	r2, [r7, #32]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d918      	bls.n	800b01c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a1a      	ldr	r2, [r3, #32]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	8992      	ldrh	r2, [r2, #12]
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	69fa      	ldr	r2, [r7, #28]
 800b002:	18d1      	adds	r1, r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	899b      	ldrh	r3, [r3, #12]
 800b008:	461a      	mov	r2, r3
 800b00a:	f7fd f89b 	bl	8008144 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	7d1b      	ldrb	r3, [r3, #20]
 800b012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b016:	b2da      	uxtb	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	899b      	ldrh	r3, [r3, #12]
 800b020:	461a      	mov	r2, r3
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	fb02 f303 	mul.w	r3, r2, r3
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b02a:	e04b      	b.n	800b0c4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	429a      	cmp	r2, r3
 800b034:	d016      	beq.n	800b064 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b03e:	429a      	cmp	r2, r3
 800b040:	d210      	bcs.n	800b064 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	7858      	ldrb	r0, [r3, #1]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b04c:	2301      	movs	r3, #1
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	f7fc ff98 	bl	8007f84 <disk_read>
 800b054:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	755a      	strb	r2, [r3, #21]
 800b060:	2301      	movs	r3, #1
 800b062:	e05a      	b.n	800b11a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	899b      	ldrh	r3, [r3, #12]
 800b06e:	4618      	mov	r0, r3
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	8992      	ldrh	r2, [r2, #12]
 800b078:	fbb3 f1f2 	udiv	r1, r3, r2
 800b07c:	fb01 f202 	mul.w	r2, r1, r2
 800b080:	1a9b      	subs	r3, r3, r2
 800b082:	1ac3      	subs	r3, r0, r3
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d901      	bls.n	800b092 <f_write+0x298>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	8992      	ldrh	r2, [r2, #12]
 800b0a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0a4:	fb00 f202 	mul.w	r2, r0, r2
 800b0a8:	1a9b      	subs	r3, r3, r2
 800b0aa:	440b      	add	r3, r1
 800b0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ae:	69f9      	ldr	r1, [r7, #28]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fd f847 	bl	8008144 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	7d1b      	ldrb	r3, [r3, #20]
 800b0ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c8:	4413      	add	r3, r2
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	699a      	ldr	r2, [r3, #24]
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	441a      	add	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	619a      	str	r2, [r3, #24]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	bf38      	it	cc
 800b0e4:	461a      	movcc	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	441a      	add	r2, r3
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	f47f aeb5 	bne.w	800ae70 <f_write+0x76>
 800b106:	e000      	b.n	800b10a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b108:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	7d1b      	ldrb	r3, [r3, #20]
 800b10e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b112:	b2da      	uxtb	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3730      	adds	r7, #48	; 0x30
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b086      	sub	sp, #24
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f107 0208 	add.w	r2, r7, #8
 800b130:	4611      	mov	r1, r2
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff faba 	bl	800a6ac <validate>
 800b138:	4603      	mov	r3, r0
 800b13a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b13c:	7dfb      	ldrb	r3, [r7, #23]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d168      	bne.n	800b214 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7d1b      	ldrb	r3, [r3, #20]
 800b146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d062      	beq.n	800b214 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7d1b      	ldrb	r3, [r3, #20]
 800b152:	b25b      	sxtb	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	da15      	bge.n	800b184 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	7858      	ldrb	r0, [r3, #1]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1a      	ldr	r2, [r3, #32]
 800b166:	2301      	movs	r3, #1
 800b168:	f7fc ff2c 	bl	8007fc4 <disk_write>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <f_sync+0x54>
 800b172:	2301      	movs	r3, #1
 800b174:	e04f      	b.n	800b216 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b184:	f7fc fe5e 	bl	8007e44 <get_fattime>
 800b188:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fd fa04 	bl	80085a0 <move_window>
 800b198:	4603      	mov	r3, r0
 800b19a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d138      	bne.n	800b214 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	330b      	adds	r3, #11
 800b1ac:	781a      	ldrb	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	330b      	adds	r3, #11
 800b1b2:	f042 0220 	orr.w	r2, r2, #32
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	68f9      	ldr	r1, [r7, #12]
 800b1c6:	f7fd ff90 	bl	80090ea <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f103 021c 	add.w	r2, r3, #28
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	f7fc ff88 	bl	80080ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3316      	adds	r3, #22
 800b1e0:	6939      	ldr	r1, [r7, #16]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fc ff82 	bl	80080ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	3312      	adds	r3, #18
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fc ff61 	bl	80080b6 <st_word>
					fs->wflag = 1;
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7fd f9fd 	bl	80085fc <sync_fs>
 800b202:	4603      	mov	r3, r0
 800b204:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	7d1b      	ldrb	r3, [r3, #20]
 800b20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b214:	7dfb      	ldrb	r3, [r7, #23]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7ff ff7b 	bl	800b122 <f_sync>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d118      	bne.n	800b268 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f107 0208 	add.w	r2, r7, #8
 800b23c:	4611      	mov	r1, r2
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fa34 	bl	800a6ac <validate>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10c      	bne.n	800b268 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	4618      	mov	r0, r3
 800b254:	f7fd f900 	bl	8008458 <dec_lock>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d102      	bne.n	800b268 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b090      	sub	sp, #64	; 0x40
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f107 0208 	add.w	r2, r7, #8
 800b282:	4611      	mov	r1, r2
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff fa11 	bl	800a6ac <validate>
 800b28a:	4603      	mov	r3, r0
 800b28c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b290:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b294:	2b00      	cmp	r3, #0
 800b296:	d103      	bne.n	800b2a0 <f_lseek+0x2e>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	7d5b      	ldrb	r3, [r3, #21]
 800b29c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b2a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <f_lseek+0x3c>
 800b2a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b2ac:	e201      	b.n	800b6b2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f000 80d9 	beq.w	800b46a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2be:	d15a      	bne.n	800b376 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	627a      	str	r2, [r7, #36]	; 0x24
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d03a      	beq.n	800b356 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ea:	3302      	adds	r3, #2
 800b2ec:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fd fa0c 	bl	800871a <get_fat>
 800b302:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	2b01      	cmp	r3, #1
 800b308:	d804      	bhi.n	800b314 <f_lseek+0xa2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	755a      	strb	r2, [r3, #21]
 800b310:	2302      	movs	r3, #2
 800b312:	e1ce      	b.n	800b6b2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b31a:	d104      	bne.n	800b326 <f_lseek+0xb4>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	755a      	strb	r2, [r3, #21]
 800b322:	2301      	movs	r3, #1
 800b324:	e1c5      	b.n	800b6b2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3301      	adds	r3, #1
 800b32a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d0de      	beq.n	800b2ee <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	429a      	cmp	r2, r3
 800b336:	d809      	bhi.n	800b34c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	1d1a      	adds	r2, r3, #4
 800b33c:	627a      	str	r2, [r7, #36]	; 0x24
 800b33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	1d1a      	adds	r2, r3, #4
 800b346:	627a      	str	r2, [r7, #36]	; 0x24
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	69db      	ldr	r3, [r3, #28]
 800b350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b352:	429a      	cmp	r2, r3
 800b354:	d3c4      	bcc.n	800b2e0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b35c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	429a      	cmp	r2, r3
 800b364:	d803      	bhi.n	800b36e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	2200      	movs	r2, #0
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	e19f      	b.n	800b6ae <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b36e:	2311      	movs	r3, #17
 800b370:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b374:	e19b      	b.n	800b6ae <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d902      	bls.n	800b386 <f_lseek+0x114>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 818d 	beq.w	800b6ae <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	3b01      	subs	r3, #1
 800b398:	4619      	mov	r1, r3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7fd fca8 	bl	8008cf0 <clmt_clust>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7fd f994 	bl	80086dc <clust2sect>
 800b3b4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d104      	bne.n	800b3c6 <f_lseek+0x154>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	755a      	strb	r2, [r3, #21]
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	e175      	b.n	800b6b2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	8992      	ldrh	r2, [r2, #12]
 800b3ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	8952      	ldrh	r2, [r2, #10]
 800b3d6:	3a01      	subs	r2, #1
 800b3d8:	4013      	ands	r3, r2
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	4413      	add	r3, r2
 800b3de:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	8992      	ldrh	r2, [r2, #12]
 800b3e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3ec:	fb01 f202 	mul.w	r2, r1, r2
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 815b 	beq.w	800b6ae <f_lseek+0x43c>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	f000 8155 	beq.w	800b6ae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	7d1b      	ldrb	r3, [r3, #20]
 800b408:	b25b      	sxtb	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	da18      	bge.n	800b440 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	7858      	ldrb	r0, [r3, #1]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1a      	ldr	r2, [r3, #32]
 800b41c:	2301      	movs	r3, #1
 800b41e:	f7fc fdd1 	bl	8007fc4 <disk_write>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d004      	beq.n	800b432 <f_lseek+0x1c0>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	755a      	strb	r2, [r3, #21]
 800b42e:	2301      	movs	r3, #1
 800b430:	e13f      	b.n	800b6b2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7d1b      	ldrb	r3, [r3, #20]
 800b436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b43a:	b2da      	uxtb	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	7858      	ldrb	r0, [r3, #1]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b44a:	2301      	movs	r3, #1
 800b44c:	69ba      	ldr	r2, [r7, #24]
 800b44e:	f7fc fd99 	bl	8007f84 <disk_read>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <f_lseek+0x1f0>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	755a      	strb	r2, [r3, #21]
 800b45e:	2301      	movs	r3, #1
 800b460:	e127      	b.n	800b6b2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	621a      	str	r2, [r3, #32]
 800b468:	e121      	b.n	800b6ae <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68db      	ldr	r3, [r3, #12]
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d908      	bls.n	800b486 <f_lseek+0x214>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7d1b      	ldrb	r3, [r3, #20]
 800b478:	f003 0302 	and.w	r3, r3, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d102      	bne.n	800b486 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	699b      	ldr	r3, [r3, #24]
 800b48a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	637b      	str	r3, [r7, #52]	; 0x34
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b494:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 80b5 	beq.w	800b608 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	895b      	ldrh	r3, [r3, #10]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	899b      	ldrh	r3, [r3, #12]
 800b4a8:	fb02 f303 	mul.w	r3, r2, r3
 800b4ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d01b      	beq.n	800b4ec <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	1e5a      	subs	r2, r3, #1
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	1e59      	subs	r1, r3, #1
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d30f      	bcc.n	800b4ec <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	1e5a      	subs	r2, r3, #1
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	425b      	negs	r3, r3
 800b4d4:	401a      	ands	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	683a      	ldr	r2, [r7, #0]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	69db      	ldr	r3, [r3, #28]
 800b4e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ea:	e022      	b.n	800b532 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d119      	bne.n	800b52c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fd fb5f 	bl	8008bc0 <create_chain>
 800b502:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	2b01      	cmp	r3, #1
 800b508:	d104      	bne.n	800b514 <f_lseek+0x2a2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2202      	movs	r2, #2
 800b50e:	755a      	strb	r2, [r3, #21]
 800b510:	2302      	movs	r3, #2
 800b512:	e0ce      	b.n	800b6b2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b51a:	d104      	bne.n	800b526 <f_lseek+0x2b4>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	755a      	strb	r2, [r3, #21]
 800b522:	2301      	movs	r3, #1
 800b524:	e0c5      	b.n	800b6b2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b52a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b530:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b534:	2b00      	cmp	r3, #0
 800b536:	d067      	beq.n	800b608 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b538:	e03a      	b.n	800b5b0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	699a      	ldr	r2, [r3, #24]
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	441a      	add	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	7d1b      	ldrb	r3, [r3, #20]
 800b552:	f003 0302 	and.w	r3, r3, #2
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00b      	beq.n	800b572 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd fb2e 	bl	8008bc0 <create_chain>
 800b564:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d108      	bne.n	800b57e <f_lseek+0x30c>
							ofs = 0; break;
 800b56c:	2300      	movs	r3, #0
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	e022      	b.n	800b5b8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b576:	4618      	mov	r0, r3
 800b578:	f7fd f8cf 	bl	800871a <get_fat>
 800b57c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b584:	d104      	bne.n	800b590 <f_lseek+0x31e>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2201      	movs	r2, #1
 800b58a:	755a      	strb	r2, [r3, #21]
 800b58c:	2301      	movs	r3, #1
 800b58e:	e090      	b.n	800b6b2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	2b01      	cmp	r3, #1
 800b594:	d904      	bls.n	800b5a0 <f_lseek+0x32e>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d304      	bcc.n	800b5aa <f_lseek+0x338>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	755a      	strb	r2, [r3, #21]
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e083      	b.n	800b6b2 <f_lseek+0x440>
					fp->clust = clst;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d8c0      	bhi.n	800b53a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699a      	ldr	r2, [r3, #24]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	441a      	add	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	899b      	ldrh	r3, [r3, #12]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5d0:	fb01 f202 	mul.w	r2, r1, r2
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d016      	beq.n	800b608 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fd f87c 	bl	80086dc <clust2sect>
 800b5e4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d104      	bne.n	800b5f6 <f_lseek+0x384>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	755a      	strb	r2, [r3, #21]
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	e05d      	b.n	800b6b2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	899b      	ldrh	r3, [r3, #12]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b604:	4413      	add	r3, r2
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	699a      	ldr	r2, [r3, #24]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	429a      	cmp	r2, r3
 800b612:	d90a      	bls.n	800b62a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	699a      	ldr	r2, [r3, #24]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	7d1b      	ldrb	r3, [r3, #20]
 800b620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b624:	b2da      	uxtb	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	8992      	ldrh	r2, [r2, #12]
 800b632:	fbb3 f1f2 	udiv	r1, r3, r2
 800b636:	fb01 f202 	mul.w	r2, r1, r2
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d036      	beq.n	800b6ae <f_lseek+0x43c>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b646:	429a      	cmp	r2, r3
 800b648:	d031      	beq.n	800b6ae <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7d1b      	ldrb	r3, [r3, #20]
 800b64e:	b25b      	sxtb	r3, r3
 800b650:	2b00      	cmp	r3, #0
 800b652:	da18      	bge.n	800b686 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	7858      	ldrb	r0, [r3, #1]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1a      	ldr	r2, [r3, #32]
 800b662:	2301      	movs	r3, #1
 800b664:	f7fc fcae 	bl	8007fc4 <disk_write>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d004      	beq.n	800b678 <f_lseek+0x406>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	755a      	strb	r2, [r3, #21]
 800b674:	2301      	movs	r3, #1
 800b676:	e01c      	b.n	800b6b2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b680:	b2da      	uxtb	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	7858      	ldrb	r0, [r3, #1]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b690:	2301      	movs	r3, #1
 800b692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b694:	f7fc fc76 	bl	8007f84 <disk_read>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d004      	beq.n	800b6a8 <f_lseek+0x436>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	755a      	strb	r2, [r3, #21]
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e004      	b.n	800b6b2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ac:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b6ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3740      	adds	r7, #64	; 0x40
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b086      	sub	sp, #24
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d101      	bne.n	800b6ce <f_opendir+0x14>
 800b6ca:	2309      	movs	r3, #9
 800b6cc:	e064      	b.n	800b798 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b6d2:	f107 010c 	add.w	r1, r7, #12
 800b6d6:	463b      	mov	r3, r7
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fd60 	bl	800a1a0 <find_volume>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d14f      	bne.n	800b78a <f_opendir+0xd0>
		obj->fs = fs;
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7fe fc43 	bl	8009f80 <follow_path>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d13d      	bne.n	800b780 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b70a:	b25b      	sxtb	r3, r3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	db12      	blt.n	800b736 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	799b      	ldrb	r3, [r3, #6]
 800b714:	f003 0310 	and.w	r3, r3, #16
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7fd fcc1 	bl	80090ac <ld_clust>
 800b72a:	4602      	mov	r2, r0
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	609a      	str	r2, [r3, #8]
 800b730:	e001      	b.n	800b736 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b732:	2305      	movs	r3, #5
 800b734:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d121      	bne.n	800b780 <f_opendir+0xc6>
				obj->id = fs->id;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	88da      	ldrh	r2, [r3, #6]
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b744:	2100      	movs	r1, #0
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fd fb0a 	bl	8008d60 <dir_sdi>
 800b74c:	4603      	mov	r3, r0
 800b74e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b750:	7dfb      	ldrb	r3, [r7, #23]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d114      	bne.n	800b780 <f_opendir+0xc6>
					if (obj->sclust) {
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00d      	beq.n	800b77a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b75e:	2100      	movs	r1, #0
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fc fdeb 	bl	800833c <inc_lock>
 800b766:	4602      	mov	r2, r0
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d105      	bne.n	800b780 <f_opendir+0xc6>
 800b774:	2312      	movs	r3, #18
 800b776:	75fb      	strb	r3, [r7, #23]
 800b778:	e002      	b.n	800b780 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	2200      	movs	r2, #0
 800b77e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b780:	7dfb      	ldrb	r3, [r7, #23]
 800b782:	2b04      	cmp	r3, #4
 800b784:	d101      	bne.n	800b78a <f_opendir+0xd0>
 800b786:	2305      	movs	r3, #5
 800b788:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <f_opendir+0xdc>
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b796:	7dfb      	ldrb	r3, [r7, #23]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f107 0208 	add.w	r2, r7, #8
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe ff7b 	bl	800a6ac <validate>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d110      	bne.n	800b7e2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d006      	beq.n	800b7d6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fc fe43 	bl	8008458 <dec_lock>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f107 0208 	add.w	r2, r7, #8
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe ff54 	bl	800a6ac <validate>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d126      	bne.n	800b85c <f_readdir+0x70>
		if (!fno) {
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d106      	bne.n	800b822 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b814:	2100      	movs	r1, #0
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7fd faa2 	bl	8008d60 <dir_sdi>
 800b81c:	4603      	mov	r3, r0
 800b81e:	73fb      	strb	r3, [r7, #15]
 800b820:	e01c      	b.n	800b85c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b822:	2100      	movs	r1, #0
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fd fe6c 	bl	8009502 <dir_read>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
 800b830:	2b04      	cmp	r3, #4
 800b832:	d101      	bne.n	800b838 <f_readdir+0x4c>
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b838:	7bfb      	ldrb	r3, [r7, #15]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10e      	bne.n	800b85c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7fe f907 	bl	8009a54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fd fb12 	bl	8008e72 <dir_next>
 800b84e:	4603      	mov	r3, r0
 800b850:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b852:	7bfb      	ldrb	r3, [r7, #15]
 800b854:	2b04      	cmp	r3, #4
 800b856:	d101      	bne.n	800b85c <f_readdir+0x70>
 800b858:	2300      	movs	r3, #0
 800b85a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b092      	sub	sp, #72	; 0x48
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b872:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b876:	f107 030c 	add.w	r3, r7, #12
 800b87a:	2200      	movs	r2, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fc8f 	bl	800a1a0 <find_volume>
 800b882:	4603      	mov	r3, r0
 800b884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8099 	bne.w	800b9c4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	69db      	ldr	r3, [r3, #28]
 800b8a0:	3b02      	subs	r3, #2
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d804      	bhi.n	800b8b0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	699a      	ldr	r2, [r3, #24]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	601a      	str	r2, [r3, #0]
 800b8ae:	e089      	b.n	800b9c4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d128      	bne.n	800b90e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b8bc:	2302      	movs	r3, #2
 800b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b8c4:	f107 0314 	add.w	r3, r7, #20
 800b8c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fc ff25 	bl	800871a <get_fat>
 800b8d0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8d8:	d103      	bne.n	800b8e2 <f_getfree+0x7c>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b8e0:	e063      	b.n	800b9aa <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d103      	bne.n	800b8f0 <f_getfree+0x8a>
 800b8e8:	2302      	movs	r3, #2
 800b8ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b8ee:	e05c      	b.n	800b9aa <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d102      	bne.n	800b8fc <f_getfree+0x96>
 800b8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8fe:	3301      	adds	r3, #1
 800b900:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	69db      	ldr	r3, [r3, #28]
 800b906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b908:	429a      	cmp	r2, r3
 800b90a:	d3db      	bcc.n	800b8c4 <f_getfree+0x5e>
 800b90c:	e04d      	b.n	800b9aa <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	637b      	str	r3, [r7, #52]	; 0x34
 800b91e:	2300      	movs	r3, #0
 800b920:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b924:	2b00      	cmp	r3, #0
 800b926:	d113      	bne.n	800b950 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92c:	1c5a      	adds	r2, r3, #1
 800b92e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b930:	4619      	mov	r1, r3
 800b932:	f7fc fe35 	bl	80085a0 <move_window>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b93c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b940:	2b00      	cmp	r3, #0
 800b942:	d131      	bne.n	800b9a8 <f_getfree+0x142>
							p = fs->win;
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	3338      	adds	r3, #56	; 0x38
 800b948:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	899b      	ldrh	r3, [r3, #12]
 800b94e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d10f      	bne.n	800b978 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b95a:	f7fc fb71 	bl	8008040 <ld_word>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <f_getfree+0x104>
 800b964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b966:	3301      	adds	r3, #1
 800b968:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	3302      	adds	r3, #2
 800b96e:	633b      	str	r3, [r7, #48]	; 0x30
 800b970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b972:	3b02      	subs	r3, #2
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
 800b976:	e010      	b.n	800b99a <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b97a:	f7fc fb79 	bl	8008070 <ld_dword>
 800b97e:	4603      	mov	r3, r0
 800b980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d102      	bne.n	800b98e <f_getfree+0x128>
 800b988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b98a:	3301      	adds	r3, #1
 800b98c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b990:	3304      	adds	r3, #4
 800b992:	633b      	str	r3, [r7, #48]	; 0x30
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	3b04      	subs	r3, #4
 800b998:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99c:	3b01      	subs	r3, #1
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1bd      	bne.n	800b922 <f_getfree+0xbc>
 800b9a6:	e000      	b.n	800b9aa <f_getfree+0x144>
							if (res != FR_OK) break;
 800b9a8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9ae:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	791a      	ldrb	r2, [r3, #4]
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	f042 0201 	orr.w	r2, r2, #1
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b9c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3748      	adds	r7, #72	; 0x48
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b0a0      	sub	sp, #128	; 0x80
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b9dc:	f107 010c 	add.w	r1, r7, #12
 800b9e0:	1d3b      	adds	r3, r7, #4
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe fbdb 	bl	800a1a0 <find_volume>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800b9f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f040 808e 	bne.w	800bb1a <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe faba 	bl	8009f80 <follow_path>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ba12:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d108      	bne.n	800ba2c <f_unlink+0x5c>
 800ba1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ba1e:	2102      	movs	r1, #2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fc fc0d 	bl	8008240 <chk_lock>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ba2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d172      	bne.n	800bb1a <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ba34:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	da03      	bge.n	800ba46 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ba3e:	2306      	movs	r3, #6
 800ba40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ba44:	e008      	b.n	800ba58 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ba46:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ba52:	2307      	movs	r3, #7
 800ba54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800ba58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d134      	bne.n	800baca <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7fd fb20 	bl	80090ac <ld_clust>
 800ba6c:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ba6e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800ba72:	f003 0310 	and.w	r3, r3, #16
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d027      	beq.n	800baca <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ba7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba80:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ba82:	f107 0310 	add.w	r3, r7, #16
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fd f969 	bl	8008d60 <dir_sdi>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800ba94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d116      	bne.n	800baca <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ba9c:	f107 0310 	add.w	r3, r7, #16
 800baa0:	2100      	movs	r1, #0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd fd2d 	bl	8009502 <dir_read>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800baae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d102      	bne.n	800babc <f_unlink+0xec>
 800bab6:	2307      	movs	r3, #7
 800bab8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800babc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d102      	bne.n	800baca <f_unlink+0xfa>
 800bac4:	2300      	movs	r3, #0
 800bac6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800baca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d123      	bne.n	800bb1a <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800bad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fd ff72 	bl	80099c0 <dir_remove>
 800badc:	4603      	mov	r3, r0
 800bade:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800bae2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10c      	bne.n	800bb04 <f_unlink+0x134>
 800baea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baec:	2b00      	cmp	r3, #0
 800baee:	d009      	beq.n	800bb04 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800baf0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800baf4:	2200      	movs	r2, #0
 800baf6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fc fffc 	bl	8008af6 <remove_chain>
 800bafe:	4603      	mov	r3, r0
 800bb00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800bb04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d106      	bne.n	800bb1a <f_unlink+0x14a>
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fc fd74 	bl	80085fc <sync_fs>
 800bb14:	4603      	mov	r3, r0
 800bb16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800bb1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3780      	adds	r7, #128	; 0x80
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	2b0a      	cmp	r3, #10
 800bb36:	d103      	bne.n	800bb40 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800bb38:	210d      	movs	r1, #13
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7ff fff3 	bl	800bb26 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	db25      	blt.n	800bb98 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	60fa      	str	r2, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	4413      	add	r3, r2
 800bb56:	78fa      	ldrb	r2, [r7, #3]
 800bb58:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b3c      	cmp	r3, #60	; 0x3c
 800bb5e:	dd12      	ble.n	800bb86 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6818      	ldr	r0, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f103 010c 	add.w	r1, r3, #12
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	f107 0308 	add.w	r3, r7, #8
 800bb70:	f7ff f943 	bl	800adfa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d101      	bne.n	800bb80 <putc_bfd+0x5a>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e001      	b.n	800bb84 <putc_bfd+0x5e>
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb84:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	609a      	str	r2, [r3, #8]
 800bb96:	e000      	b.n	800bb9a <putc_bfd+0x74>
	if (i < 0) return;
 800bb98:	bf00      	nop
}
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	db16      	blt.n	800bbde <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6818      	ldr	r0, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f103 010c 	add.w	r1, r3, #12
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	685b      	ldr	r3, [r3, #4]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	f107 030c 	add.w	r3, r7, #12
 800bbc4:	f7ff f919 	bl	800adfa <f_write>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d107      	bne.n	800bbde <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d102      	bne.n	800bbde <putc_flush+0x3e>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	e001      	b.n	800bbe2 <putc_flush+0x42>
	return EOF;
 800bbde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	605a      	str	r2, [r3, #4]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	609a      	str	r2, [r3, #8]
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b096      	sub	sp, #88	; 0x58
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800bc1e:	f107 030c 	add.w	r3, r7, #12
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff ffe0 	bl	800bbea <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800bc2a:	e009      	b.n	800bc40 <f_puts+0x2c>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	781a      	ldrb	r2, [r3, #0]
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	4611      	mov	r1, r2
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff ff73 	bl	800bb26 <putc_bfd>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1f1      	bne.n	800bc2c <f_puts+0x18>
	return putc_flush(&pb);
 800bc48:	f107 030c 	add.w	r3, r7, #12
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff ffa7 	bl	800bba0 <putc_flush>
 800bc52:	4603      	mov	r3, r0
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3758      	adds	r7, #88	; 0x58
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bc72:	4b1f      	ldr	r3, [pc, #124]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc74:	7a5b      	ldrb	r3, [r3, #9]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d131      	bne.n	800bce0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bc7c:	4b1c      	ldr	r3, [pc, #112]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc7e:	7a5b      	ldrb	r3, [r3, #9]
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b1a      	ldr	r3, [pc, #104]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc86:	2100      	movs	r1, #0
 800bc88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bc8a:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc8c:	7a5b      	ldrb	r3, [r3, #9]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	4a17      	ldr	r2, [pc, #92]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bc9c:	7a5b      	ldrb	r3, [r3, #9]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bca4:	4413      	add	r3, r2
 800bca6:	79fa      	ldrb	r2, [r7, #7]
 800bca8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcaa:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bcac:	7a5b      	ldrb	r3, [r3, #9]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	b2d1      	uxtb	r1, r2
 800bcb4:	4a0e      	ldr	r2, [pc, #56]	; (800bcf0 <FATFS_LinkDriverEx+0x94>)
 800bcb6:	7251      	strb	r1, [r2, #9]
 800bcb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcba:	7dbb      	ldrb	r3, [r7, #22]
 800bcbc:	3330      	adds	r3, #48	; 0x30
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	223a      	movs	r2, #58	; 0x3a
 800bcca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	3302      	adds	r3, #2
 800bcd0:	222f      	movs	r2, #47	; 0x2f
 800bcd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	3303      	adds	r3, #3
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	20002cf8 	.word	0x20002cf8

0800bcf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bcfe:	2200      	movs	r2, #0
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff ffaa 	bl	800bc5c <FATFS_LinkDriverEx>
 800bd08:	4603      	mov	r3, r0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	6039      	str	r1, [r7, #0]
 800bd1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bd20:	88fb      	ldrh	r3, [r7, #6]
 800bd22:	2b7f      	cmp	r3, #127	; 0x7f
 800bd24:	d802      	bhi.n	800bd2c <ff_convert+0x18>
		c = chr;
 800bd26:	88fb      	ldrh	r3, [r7, #6]
 800bd28:	81fb      	strh	r3, [r7, #14]
 800bd2a:	e025      	b.n	800bd78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bd32:	88fb      	ldrh	r3, [r7, #6]
 800bd34:	2bff      	cmp	r3, #255	; 0xff
 800bd36:	d805      	bhi.n	800bd44 <ff_convert+0x30>
 800bd38:	88fb      	ldrh	r3, [r7, #6]
 800bd3a:	3b80      	subs	r3, #128	; 0x80
 800bd3c:	4a12      	ldr	r2, [pc, #72]	; (800bd88 <ff_convert+0x74>)
 800bd3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd42:	e000      	b.n	800bd46 <ff_convert+0x32>
 800bd44:	2300      	movs	r3, #0
 800bd46:	81fb      	strh	r3, [r7, #14]
 800bd48:	e016      	b.n	800bd78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	81fb      	strh	r3, [r7, #14]
 800bd4e:	e009      	b.n	800bd64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bd50:	89fb      	ldrh	r3, [r7, #14]
 800bd52:	4a0d      	ldr	r2, [pc, #52]	; (800bd88 <ff_convert+0x74>)
 800bd54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d006      	beq.n	800bd6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bd5e:	89fb      	ldrh	r3, [r7, #14]
 800bd60:	3301      	adds	r3, #1
 800bd62:	81fb      	strh	r3, [r7, #14]
 800bd64:	89fb      	ldrh	r3, [r7, #14]
 800bd66:	2b7f      	cmp	r3, #127	; 0x7f
 800bd68:	d9f2      	bls.n	800bd50 <ff_convert+0x3c>
 800bd6a:	e000      	b.n	800bd6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bd6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bd6e:	89fb      	ldrh	r3, [r7, #14]
 800bd70:	3380      	adds	r3, #128	; 0x80
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bd78:	89fb      	ldrh	r3, [r7, #14]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	08012150 	.word	0x08012150

0800bd8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b087      	sub	sp, #28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd9c:	d201      	bcs.n	800bda2 <ff_wtoupper+0x16>
 800bd9e:	4b3e      	ldr	r3, [pc, #248]	; (800be98 <ff_wtoupper+0x10c>)
 800bda0:	e000      	b.n	800bda4 <ff_wtoupper+0x18>
 800bda2:	4b3e      	ldr	r3, [pc, #248]	; (800be9c <ff_wtoupper+0x110>)
 800bda4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	1c9a      	adds	r2, r3, #2
 800bdaa:	617a      	str	r2, [r7, #20]
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bdb0:	8a7b      	ldrh	r3, [r7, #18]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d068      	beq.n	800be88 <ff_wtoupper+0xfc>
 800bdb6:	88fa      	ldrh	r2, [r7, #6]
 800bdb8:	8a7b      	ldrh	r3, [r7, #18]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d364      	bcc.n	800be88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	1c9a      	adds	r2, r3, #2
 800bdc2:	617a      	str	r2, [r7, #20]
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	823b      	strh	r3, [r7, #16]
 800bdc8:	8a3b      	ldrh	r3, [r7, #16]
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	81fb      	strh	r3, [r7, #14]
 800bdce:	8a3b      	ldrh	r3, [r7, #16]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bdd4:	88fa      	ldrh	r2, [r7, #6]
 800bdd6:	8a79      	ldrh	r1, [r7, #18]
 800bdd8:	8a3b      	ldrh	r3, [r7, #16]
 800bdda:	440b      	add	r3, r1
 800bddc:	429a      	cmp	r2, r3
 800bdde:	da49      	bge.n	800be74 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bde0:	89fb      	ldrh	r3, [r7, #14]
 800bde2:	2b08      	cmp	r3, #8
 800bde4:	d84f      	bhi.n	800be86 <ff_wtoupper+0xfa>
 800bde6:	a201      	add	r2, pc, #4	; (adr r2, 800bdec <ff_wtoupper+0x60>)
 800bde8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdec:	0800be11 	.word	0x0800be11
 800bdf0:	0800be23 	.word	0x0800be23
 800bdf4:	0800be39 	.word	0x0800be39
 800bdf8:	0800be41 	.word	0x0800be41
 800bdfc:	0800be49 	.word	0x0800be49
 800be00:	0800be51 	.word	0x0800be51
 800be04:	0800be59 	.word	0x0800be59
 800be08:	0800be61 	.word	0x0800be61
 800be0c:	0800be69 	.word	0x0800be69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800be10:	88fa      	ldrh	r2, [r7, #6]
 800be12:	8a7b      	ldrh	r3, [r7, #18]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	005b      	lsls	r3, r3, #1
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4413      	add	r3, r2
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	80fb      	strh	r3, [r7, #6]
 800be20:	e027      	b.n	800be72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800be22:	88fa      	ldrh	r2, [r7, #6]
 800be24:	8a7b      	ldrh	r3, [r7, #18]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	b29b      	uxth	r3, r3
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	b29b      	uxth	r3, r3
 800be30:	88fa      	ldrh	r2, [r7, #6]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	80fb      	strh	r3, [r7, #6]
 800be36:	e01c      	b.n	800be72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800be38:	88fb      	ldrh	r3, [r7, #6]
 800be3a:	3b10      	subs	r3, #16
 800be3c:	80fb      	strh	r3, [r7, #6]
 800be3e:	e018      	b.n	800be72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800be40:	88fb      	ldrh	r3, [r7, #6]
 800be42:	3b20      	subs	r3, #32
 800be44:	80fb      	strh	r3, [r7, #6]
 800be46:	e014      	b.n	800be72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800be48:	88fb      	ldrh	r3, [r7, #6]
 800be4a:	3b30      	subs	r3, #48	; 0x30
 800be4c:	80fb      	strh	r3, [r7, #6]
 800be4e:	e010      	b.n	800be72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800be50:	88fb      	ldrh	r3, [r7, #6]
 800be52:	3b1a      	subs	r3, #26
 800be54:	80fb      	strh	r3, [r7, #6]
 800be56:	e00c      	b.n	800be72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	3308      	adds	r3, #8
 800be5c:	80fb      	strh	r3, [r7, #6]
 800be5e:	e008      	b.n	800be72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800be60:	88fb      	ldrh	r3, [r7, #6]
 800be62:	3b50      	subs	r3, #80	; 0x50
 800be64:	80fb      	strh	r3, [r7, #6]
 800be66:	e004      	b.n	800be72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800be68:	88fb      	ldrh	r3, [r7, #6]
 800be6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800be6e:	80fb      	strh	r3, [r7, #6]
 800be70:	bf00      	nop
			}
			break;
 800be72:	e008      	b.n	800be86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800be74:	89fb      	ldrh	r3, [r7, #14]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d195      	bne.n	800bda6 <ff_wtoupper+0x1a>
 800be7a:	8a3b      	ldrh	r3, [r7, #16]
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4413      	add	r3, r2
 800be82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800be84:	e78f      	b.n	800bda6 <ff_wtoupper+0x1a>
			break;
 800be86:	bf00      	nop
	}

	return chr;
 800be88:	88fb      	ldrh	r3, [r7, #6]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	371c      	adds	r7, #28
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	08012250 	.word	0x08012250
 800be9c:	08012444 	.word	0x08012444

0800bea0 <RFM95_Reset>:
 * Setting DIO Mapping LoRa Mode
 */
uint8_t rfm95_lora_dio_mapping(RFM95_t* rfm95, uint8_t dioNB, uint8_t dioStatus);

void RFM95_Reset(RFM95_t* rfm95)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
    rfm95->NRST(0);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	2000      	movs	r0, #0
 800beae:	4798      	blx	r3
    // delay 1 ms
    rfm95->DelayUs(1000);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800beb8:	4798      	blx	r3
    rfm95->NRST(1);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	2001      	movs	r0, #1
 800bec0:	4798      	blx	r3
    // delay 10 ms
    rfm95->DelayUs(10000);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	f242 7010 	movw	r0, #10000	; 0x2710
 800beca:	4798      	blx	r3
}
 800becc:	bf00      	nop
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <RFM95_LoRa_setOpMode>:

uint8_t RFM95_LoRa_setOpMode(RFM95_t* rfm95, uint8_t mode)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_OP_MODE, &readVal)) 
 800bee0:	f107 030f 	add.w	r3, r7, #15
 800bee4:	461a      	mov	r2, r3
 800bee6:	2101      	movs	r1, #1
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 ff81 	bl	800cdf0 <rfm95_readReg>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <RFM95_LoRa_setOpMode+0x24>
        return RFM95_ERR_READ_REG;
 800bef4:	230a      	movs	r3, #10
 800bef6:	e034      	b.n	800bf62 <RFM95_LoRa_setOpMode+0x8e>
    switch(mode)
 800bef8:	78fb      	ldrb	r3, [r7, #3]
 800befa:	2b07      	cmp	r3, #7
 800befc:	d812      	bhi.n	800bf24 <RFM95_LoRa_setOpMode+0x50>
 800befe:	a201      	add	r2, pc, #4	; (adr r2, 800bf04 <RFM95_LoRa_setOpMode+0x30>)
 800bf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf04:	0800bf29 	.word	0x0800bf29
 800bf08:	0800bf29 	.word	0x0800bf29
 800bf0c:	0800bf29 	.word	0x0800bf29
 800bf10:	0800bf29 	.word	0x0800bf29
 800bf14:	0800bf29 	.word	0x0800bf29
 800bf18:	0800bf29 	.word	0x0800bf29
 800bf1c:	0800bf29 	.word	0x0800bf29
 800bf20:	0800bf29 	.word	0x0800bf29
        case RX_SINGLE:
            break;
        case CAD:
            break;
        default:
            return RFM95_ERR_INVALID_INPUT;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e01c      	b.n	800bf62 <RFM95_LoRa_setOpMode+0x8e>
            break;
 800bf28:	bf00      	nop
    }
    readVal = (readVal & 0xF8) | mode;
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	b25b      	sxtb	r3, r3
 800bf2e:	f023 0307 	bic.w	r3, r3, #7
 800bf32:	b25a      	sxtb	r2, r3
 800bf34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	b25b      	sxtb	r3, r3
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	73fb      	strb	r3, [r7, #15]
    if(rfm95_writeReg(rfm95, REG_OP_MODE, &readVal))
 800bf40:	f107 030f 	add.w	r3, r7, #15
 800bf44:	461a      	mov	r2, r3
 800bf46:	2101      	movs	r1, #1
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 ff7f 	bl	800ce4c <rfm95_writeReg>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <RFM95_LoRa_setOpMode+0x84>
        return RFM95_ERR_WRITE_REG;
 800bf54:	230b      	movs	r3, #11
 800bf56:	e004      	b.n	800bf62 <RFM95_LoRa_setOpMode+0x8e>
    rfm95->Settings.LoraState = mode;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return RFM95_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop

0800bf6c <RFM95_setModem>:

uint8_t RFM95_setModem(RFM95_t* rfm95, radio_modem modem)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_OP_MODE, &readVal))
 800bf78:	f107 030f 	add.w	r3, r7, #15
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	2101      	movs	r1, #1
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 ff35 	bl	800cdf0 <rfm95_readReg>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <RFM95_setModem+0x24>
        return RFM95_ERR_READ_REG;
 800bf8c:	230a      	movs	r3, #10
 800bf8e:	e023      	b.n	800bfd8 <RFM95_setModem+0x6c>
    switch (modem)
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d007      	beq.n	800bfa6 <RFM95_setModem+0x3a>
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d10b      	bne.n	800bfb2 <RFM95_setModem+0x46>
    {
    case MODEM_LORA:
        readVal = (readVal & 0x7F) | (MODEM_LORA << 7);
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	73fb      	strb	r3, [r7, #15]
        break;
 800bfa4:	e007      	b.n	800bfb6 <RFM95_setModem+0x4a>
    case MODEM_FSK:
        readVal = (readVal & 0x7F) | (MODEM_FSK << 7);
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	73fb      	strb	r3, [r7, #15]
        break;
 800bfb0:	e001      	b.n	800bfb6 <RFM95_setModem+0x4a>
    default:
        return RFM95_ERR_INVALID_INPUT;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e010      	b.n	800bfd8 <RFM95_setModem+0x6c>
    }
    if(rfm95_writeReg(rfm95, REG_OP_MODE, &readVal) )
 800bfb6:	f107 030f 	add.w	r3, r7, #15
 800bfba:	461a      	mov	r2, r3
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 ff44 	bl	800ce4c <rfm95_writeReg>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <RFM95_setModem+0x62>
        return RFM95_ERR_WRITE_REG;
 800bfca:	230b      	movs	r3, #11
 800bfcc:	e004      	b.n	800bfd8 <RFM95_setModem+0x6c>
    rfm95->Settings.Modem = modem;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	78fa      	ldrb	r2, [r7, #3]
 800bfd2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    return RFM95_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3710      	adds	r7, #16
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <RFM95_setFrequency>:

uint8_t RFM95_setFrequency(RFM95_t* rfm95, uint32_t freq)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
    uint8_t writeVal[3];
    uint32_t fr = (uint32_t)(freq * 0.016384f);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	ee07 3a90 	vmov	s15, r3
 800bff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800c044 <RFM95_setFrequency+0x64>
 800bff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c000:	ee17 3a90 	vmov	r3, s15
 800c004:	60fb      	str	r3, [r7, #12]
    writeVal[0] = (uint8_t)((fr >> 16) & 0xFF);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	0c1b      	lsrs	r3, r3, #16
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	723b      	strb	r3, [r7, #8]
    writeVal[1] = (uint8_t)((fr >> 8) & 0xFF);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	0a1b      	lsrs	r3, r3, #8
 800c012:	b2db      	uxtb	r3, r3
 800c014:	727b      	strb	r3, [r7, #9]
    writeVal[2] = (uint8_t)(fr & 0xFF);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	72bb      	strb	r3, [r7, #10]
    if(rfm95_burst_writeReg(rfm95, REG_FREQ_MSB, &writeVal[0], 3))
 800c01c:	f107 0208 	add.w	r2, r7, #8
 800c020:	2303      	movs	r3, #3
 800c022:	2106      	movs	r1, #6
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 ff82 	bl	800cf2e <rfm95_burst_writeReg>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <RFM95_setFrequency+0x54>
        return RFM95_ERR_WRITE_REG;
 800c030:	230b      	movs	r3, #11
 800c032:	e003      	b.n	800c03c <RFM95_setFrequency+0x5c>
    rfm95->Settings.LoRa.frequency = freq;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	683a      	ldr	r2, [r7, #0]
 800c038:	645a      	str	r2, [r3, #68]	; 0x44
    return RFM95_OK;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3710      	adds	r7, #16
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	3c8637bd 	.word	0x3c8637bd

0800c048 <RFM95_getFrequency>:

uint32_t RFM95_getFrequency(RFM95_t* rfm95)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	uint32_t readFreq;
	uint8_t readVal[3];
	rfm95_burst_readReg(rfm95, REG_FREQ_MSB, &readVal[0], 3);
 800c050:	f107 0208 	add.w	r2, r7, #8
 800c054:	2303      	movs	r3, #3
 800c056:	2106      	movs	r1, #6
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 ff27 	bl	800ceac <rfm95_burst_readReg>
	readFreq = (uint32_t)((readVal[0] << 16) | (readVal[1] << 8) | (readVal[0]));
 800c05e:	7a3b      	ldrb	r3, [r7, #8]
 800c060:	041a      	lsls	r2, r3, #16
 800c062:	7a7b      	ldrb	r3, [r7, #9]
 800c064:	021b      	lsls	r3, r3, #8
 800c066:	4313      	orrs	r3, r2
 800c068:	7a3a      	ldrb	r2, [r7, #8]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60fb      	str	r3, [r7, #12]
	readFreq = (uint32_t)(readFreq/0.016384f);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c078:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c0bc <RFM95_getFrequency+0x74>
 800c07c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c084:	ee17 3a90 	vmov	r3, s15
 800c088:	60fb      	str	r3, [r7, #12]
	if((rfm95->Settings.LoRa.frequency - 100000) < readFreq &&
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08e:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800c092:	3ba0      	subs	r3, #160	; 0xa0
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	429a      	cmp	r2, r3
 800c098:	d90a      	bls.n	800c0b0 <RFM95_getFrequency+0x68>
			(rfm95->Settings.LoRa.frequency + 100000) > readFreq)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09e:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800c0a2:	33a0      	adds	r3, #160	; 0xa0
	if((rfm95->Settings.LoRa.frequency - 100000) < readFreq &&
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d202      	bcs.n	800c0b0 <RFM95_getFrequency+0x68>
	{
		return rfm95->Settings.LoRa.frequency;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ae:	e000      	b.n	800c0b2 <RFM95_getFrequency+0x6a>
	}
	else
	{
		return RFM95_ERR_FREQUENCY;
 800c0b0:	2332      	movs	r3, #50	; 0x32
	}
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	3c8637bd 	.word	0x3c8637bd

0800c0c0 <RFM95_setTXPower>:

uint8_t RFM95_setTXPower(RFM95_t* rfm95, uint8_t power)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	70fb      	strb	r3, [r7, #3]
    uint8_t writeVal[2];
    uint8_t readVal[2];
    if(power < 2 || power > 20) return RFM95_ERR_INVALID_INPUT;
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d902      	bls.n	800c0d8 <RFM95_setTXPower+0x18>
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	2b14      	cmp	r3, #20
 800c0d6:	d901      	bls.n	800c0dc <RFM95_setTXPower+0x1c>
 800c0d8:	2301      	movs	r3, #1
 800c0da:	e0b6      	b.n	800c24a <RFM95_setTXPower+0x18a>
    else if(power <= 20)
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	2b14      	cmp	r3, #20
 800c0e0:	d82c      	bhi.n	800c13c <RFM95_setTXPower+0x7c>
    {
        writeVal[0] = (uint8_t)(0xFF);
 800c0e2:	23ff      	movs	r3, #255	; 0xff
 800c0e4:	733b      	strb	r3, [r7, #12]
        if(rfm95_readReg(rfm95, REG_PA_DAC, &readVal[0]))
 800c0e6:	f107 0308 	add.w	r3, r7, #8
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	214d      	movs	r1, #77	; 0x4d
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f000 fe7e 	bl	800cdf0 <rfm95_readReg>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <RFM95_setTXPower+0x3e>
            return RFM95_ERR_READ_REG;
 800c0fa:	230a      	movs	r3, #10
 800c0fc:	e0a5      	b.n	800c24a <RFM95_setTXPower+0x18a>
        // 0xF8: RegPaDac PaDac mask
        writeVal[1] = (uint8_t)((readVal[0] & 0xF8) | PA_20DBM_ON);
 800c0fe:	7a3b      	ldrb	r3, [r7, #8]
 800c100:	b25b      	sxtb	r3, r3
 800c102:	f043 0307 	orr.w	r3, r3, #7
 800c106:	b25b      	sxtb	r3, r3
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	737b      	strb	r3, [r7, #13]
        // Raise the output power to maximum
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c10c:	f107 030c 	add.w	r3, r7, #12
 800c110:	461a      	mov	r2, r3
 800c112:	2109      	movs	r1, #9
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fe99 	bl	800ce4c <rfm95_writeReg>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10b      	bne.n	800c138 <RFM95_setTXPower+0x78>
        rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800c120:	f107 030c 	add.w	r3, r7, #12
 800c124:	3301      	adds	r3, #1
 800c126:	461a      	mov	r2, r3
 800c128:	214d      	movs	r1, #77	; 0x4d
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fe8e 	bl	800ce4c <rfm95_writeReg>
 800c130:	4603      	mov	r3, r0
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 8084 	beq.w	800c240 <RFM95_setTXPower+0x180>
            return RFM95_ERR_WRITE_REG;
 800c138:	230b      	movs	r3, #11
 800c13a:	e086      	b.n	800c24a <RFM95_setTXPower+0x18a>
    }
    else if(power <= 17)
 800c13c:	78fb      	ldrb	r3, [r7, #3]
 800c13e:	2b11      	cmp	r3, #17
 800c140:	d844      	bhi.n	800c1cc <RFM95_setTXPower+0x10c>
    {
        // Control output power
        if(rfm95_readReg(rfm95, REG_PA_CONFIG, &readVal[0]) ||
 800c142:	f107 0308 	add.w	r3, r7, #8
 800c146:	461a      	mov	r2, r3
 800c148:	2109      	movs	r1, #9
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fe50 	bl	800cdf0 <rfm95_readReg>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10a      	bne.n	800c16c <RFM95_setTXPower+0xac>
        rfm95_readReg(rfm95, REG_PA_DAC, &readVal[1]))
 800c156:	f107 0308 	add.w	r3, r7, #8
 800c15a:	3301      	adds	r3, #1
 800c15c:	461a      	mov	r2, r3
 800c15e:	214d      	movs	r1, #77	; 0x4d
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fe45 	bl	800cdf0 <rfm95_readReg>
 800c166:	4603      	mov	r3, r0
        if(rfm95_readReg(rfm95, REG_PA_CONFIG, &readVal[0]) ||
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <RFM95_setTXPower+0xb0>
            return RFM95_ERR_READ_REG;
 800c16c:	230a      	movs	r3, #10
 800c16e:	e06c      	b.n	800c24a <RFM95_setTXPower+0x18a>
        // Calculate PA_CONFIG and PA_DAC register value
        writeVal[0] = (uint8_t)((readVal[0] & 0x70) | (1 << 7) | (power - 2));
 800c170:	7a3b      	ldrb	r3, [r7, #8]
 800c172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c176:	b2da      	uxtb	r2, r3
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	3b02      	subs	r3, #2
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	4313      	orrs	r3, r2
 800c180:	b2db      	uxtb	r3, r3
 800c182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c186:	b2db      	uxtb	r3, r3
 800c188:	733b      	strb	r3, [r7, #12]
        writeVal[1] = (uint8_t)((readVal[1] & 0xF8) | PA_20DBM_OFF);
 800c18a:	7a7b      	ldrb	r3, [r7, #9]
 800c18c:	b25b      	sxtb	r3, r3
 800c18e:	f023 0307 	bic.w	r3, r3, #7
 800c192:	b25b      	sxtb	r3, r3
 800c194:	f043 0304 	orr.w	r3, r3, #4
 800c198:	b25b      	sxtb	r3, r3
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	737b      	strb	r3, [r7, #13]
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	2109      	movs	r1, #9
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fe50 	bl	800ce4c <rfm95_writeReg>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <RFM95_setTXPower+0x108>
        rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800c1b2:	f107 030c 	add.w	r3, r7, #12
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	214d      	movs	r1, #77	; 0x4d
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fe45 	bl	800ce4c <rfm95_writeReg>
 800c1c2:	4603      	mov	r3, r0
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d03b      	beq.n	800c240 <RFM95_setTXPower+0x180>
            return RFM95_ERR_WRITE_REG;
 800c1c8:	230b      	movs	r3, #11
 800c1ca:	e03e      	b.n	800c24a <RFM95_setTXPower+0x18a>
    }
    else if(power <= 14)
 800c1cc:	78fb      	ldrb	r3, [r7, #3]
 800c1ce:	2b0e      	cmp	r3, #14
 800c1d0:	d836      	bhi.n	800c240 <RFM95_setTXPower+0x180>
    {
    	// Control output power
		if(rfm95_readReg(rfm95, REG_PA_DAC, &readVal[1]))
 800c1d2:	f107 0308 	add.w	r3, r7, #8
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	461a      	mov	r2, r3
 800c1da:	214d      	movs	r1, #77	; 0x4d
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fe07 	bl	800cdf0 <rfm95_readReg>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <RFM95_setTXPower+0x12c>
			return RFM95_ERR_READ_REG;
 800c1e8:	230a      	movs	r3, #10
 800c1ea:	e02e      	b.n	800c24a <RFM95_setTXPower+0x18a>
		// Calculate value for high efficiency PA
		writeVal[0] = (uint8_t)(0x70 | (0 << 7) | (power - 1));
 800c1ec:	78fb      	ldrb	r3, [r7, #3]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	b25b      	sxtb	r3, r3
 800c1f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800c1f8:	b25b      	sxtb	r3, r3
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	733b      	strb	r3, [r7, #12]
		writeVal[1] = (uint8_t)((readVal[1] & 0xF8) | PA_20DBM_OFF);
 800c1fe:	7a7b      	ldrb	r3, [r7, #9]
 800c200:	b25b      	sxtb	r3, r3
 800c202:	f023 0307 	bic.w	r3, r3, #7
 800c206:	b25b      	sxtb	r3, r3
 800c208:	f043 0304 	orr.w	r3, r3, #4
 800c20c:	b25b      	sxtb	r3, r3
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	737b      	strb	r3, [r7, #13]
		if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c212:	f107 030c 	add.w	r3, r7, #12
 800c216:	461a      	mov	r2, r3
 800c218:	2109      	movs	r1, #9
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f000 fe16 	bl	800ce4c <rfm95_writeReg>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d10a      	bne.n	800c23c <RFM95_setTXPower+0x17c>
		rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	3301      	adds	r3, #1
 800c22c:	461a      	mov	r2, r3
 800c22e:	214d      	movs	r1, #77	; 0x4d
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 fe0b 	bl	800ce4c <rfm95_writeReg>
 800c236:	4603      	mov	r3, r0
		if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <RFM95_setTXPower+0x180>
			return RFM95_ERR_WRITE_REG;
 800c23c:	230b      	movs	r3, #11
 800c23e:	e004      	b.n	800c24a <RFM95_setTXPower+0x18a>
    }

    rfm95->Settings.LoRa.txPower = power;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	78fa      	ldrb	r2, [r7, #3]
 800c244:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    return RFM95_OK;
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
	...

0800c254 <RFM95_setOCP>:

uint8_t RFM95_setOCP(RFM95_t* rfm95, uint8_t current)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
    uint8_t writeVal;
    // Trimming of OCP current: mA
    if(current < 45 || current > 240) return RFM95_ERR_INVALID_INPUT;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	2b2c      	cmp	r3, #44	; 0x2c
 800c264:	d902      	bls.n	800c26c <RFM95_setOCP+0x18>
 800c266:	78fb      	ldrb	r3, [r7, #3]
 800c268:	2bf0      	cmp	r3, #240	; 0xf0
 800c26a:	d901      	bls.n	800c270 <RFM95_setOCP+0x1c>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e033      	b.n	800c2d8 <RFM95_setOCP+0x84>
    else if(current <= 120)
 800c270:	78fb      	ldrb	r3, [r7, #3]
 800c272:	2b78      	cmp	r3, #120	; 0x78
 800c274:	d80e      	bhi.n	800c294 <RFM95_setOCP+0x40>
    {
        writeVal = (uint8_t)(((current - 45) / 5) | (1 << 5));
 800c276:	78fb      	ldrb	r3, [r7, #3]
 800c278:	3b2d      	subs	r3, #45	; 0x2d
 800c27a:	4a19      	ldr	r2, [pc, #100]	; (800c2e0 <RFM95_setOCP+0x8c>)
 800c27c:	fb82 1203 	smull	r1, r2, r2, r3
 800c280:	1052      	asrs	r2, r2, #1
 800c282:	17db      	asrs	r3, r3, #31
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	b25b      	sxtb	r3, r3
 800c288:	f043 0320 	orr.w	r3, r3, #32
 800c28c:	b25b      	sxtb	r3, r3
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	73fb      	strb	r3, [r7, #15]
 800c292:	e010      	b.n	800c2b6 <RFM95_setOCP+0x62>
    }
    else if(current <= 240)
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	2bf0      	cmp	r3, #240	; 0xf0
 800c298:	d80d      	bhi.n	800c2b6 <RFM95_setOCP+0x62>
    {
        writeVal = (uint8_t)(((current - 30) / 10) | (1 << 5));
 800c29a:	78fb      	ldrb	r3, [r7, #3]
 800c29c:	3b1e      	subs	r3, #30
 800c29e:	4a10      	ldr	r2, [pc, #64]	; (800c2e0 <RFM95_setOCP+0x8c>)
 800c2a0:	fb82 1203 	smull	r1, r2, r2, r3
 800c2a4:	1092      	asrs	r2, r2, #2
 800c2a6:	17db      	asrs	r3, r3, #31
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	b25b      	sxtb	r3, r3
 800c2ac:	f043 0320 	orr.w	r3, r3, #32
 800c2b0:	b25b      	sxtb	r3, r3
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	73fb      	strb	r3, [r7, #15]
    }
    if(rfm95_writeReg(rfm95, REG_OCP, &writeVal))
 800c2b6:	f107 030f 	add.w	r3, r7, #15
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	210b      	movs	r1, #11
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fdc4 	bl	800ce4c <rfm95_writeReg>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <RFM95_setOCP+0x7a>
        return RFM95_ERR_WRITE_REG;
 800c2ca:	230b      	movs	r3, #11
 800c2cc:	e004      	b.n	800c2d8 <RFM95_setOCP+0x84>
    rfm95->Settings.LoRa.overCurrentProtection = current;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	78fa      	ldrb	r2, [r7, #3]
 800c2d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return RFM95_OK;
 800c2d6:	2300      	movs	r3, #0
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	66666667 	.word	0x66666667

0800c2e4 <RFM95_setLNAGain>:

uint8_t RFM95_setLNAGain(RFM95_t* rfm95, lna_gain_setting gain)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	70fb      	strb	r3, [r7, #3]
    switch(gain)
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	2bc0      	cmp	r3, #192	; 0xc0
 800c2f4:	d013      	beq.n	800c31e <RFM95_setLNAGain+0x3a>
 800c2f6:	2bc0      	cmp	r3, #192	; 0xc0
 800c2f8:	dc0f      	bgt.n	800c31a <RFM95_setLNAGain+0x36>
 800c2fa:	2ba0      	cmp	r3, #160	; 0xa0
 800c2fc:	d011      	beq.n	800c322 <RFM95_setLNAGain+0x3e>
 800c2fe:	2ba0      	cmp	r3, #160	; 0xa0
 800c300:	dc0b      	bgt.n	800c31a <RFM95_setLNAGain+0x36>
 800c302:	2b80      	cmp	r3, #128	; 0x80
 800c304:	d00f      	beq.n	800c326 <RFM95_setLNAGain+0x42>
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	dc07      	bgt.n	800c31a <RFM95_setLNAGain+0x36>
 800c30a:	2b60      	cmp	r3, #96	; 0x60
 800c30c:	d00d      	beq.n	800c32a <RFM95_setLNAGain+0x46>
 800c30e:	2b60      	cmp	r3, #96	; 0x60
 800c310:	dc03      	bgt.n	800c31a <RFM95_setLNAGain+0x36>
 800c312:	2b20      	cmp	r3, #32
 800c314:	d00b      	beq.n	800c32e <RFM95_setLNAGain+0x4a>
 800c316:	2b40      	cmp	r3, #64	; 0x40
 800c318:	d00b      	beq.n	800c332 <RFM95_setLNAGain+0x4e>
        case LNA_G5:
            break;
        case LNA_G6:
            break;
        default:
            return RFM95_ERR_INVALID_INPUT;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e035      	b.n	800c38a <RFM95_setLNAGain+0xa6>
            break;
 800c31e:	bf00      	nop
 800c320:	e008      	b.n	800c334 <RFM95_setLNAGain+0x50>
            break;
 800c322:	bf00      	nop
 800c324:	e006      	b.n	800c334 <RFM95_setLNAGain+0x50>
            break;
 800c326:	bf00      	nop
 800c328:	e004      	b.n	800c334 <RFM95_setLNAGain+0x50>
            break;
 800c32a:	bf00      	nop
 800c32c:	e002      	b.n	800c334 <RFM95_setLNAGain+0x50>
        	break;
 800c32e:	bf00      	nop
 800c330:	e000      	b.n	800c334 <RFM95_setLNAGain+0x50>
            break;
 800c332:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_LNA, &readVal))
 800c334:	f107 030f 	add.w	r3, r7, #15
 800c338:	461a      	mov	r2, r3
 800c33a:	210c      	movs	r1, #12
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fd57 	bl	800cdf0 <rfm95_readReg>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <RFM95_setLNAGain+0x68>
        return RFM95_ERR_READ_REG;
 800c348:	230a      	movs	r3, #10
 800c34a:	e01e      	b.n	800c38a <RFM95_setLNAGain+0xa6>
    // LnaGain + LnaBoostHf boostOn (0x3). Their Mask: 0x1C
    writeVal = (uint8_t)((readVal & 0x1C) | gain | 0x3);
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	b25b      	sxtb	r3, r3
 800c350:	f003 031c 	and.w	r3, r3, #28
 800c354:	b25a      	sxtb	r2, r3
 800c356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	b25b      	sxtb	r3, r3
 800c35e:	f043 0303 	orr.w	r3, r3, #3
 800c362:	b25b      	sxtb	r3, r3
 800c364:	b2db      	uxtb	r3, r3
 800c366:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_LNA, &writeVal))
 800c368:	f107 030e 	add.w	r3, r7, #14
 800c36c:	461a      	mov	r2, r3
 800c36e:	210c      	movs	r1, #12
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fd6b 	bl	800ce4c <rfm95_writeReg>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <RFM95_setLNAGain+0x9c>
        return RFM95_ERR_WRITE_REG;
 800c37c:	230b      	movs	r3, #11
 800c37e:	e004      	b.n	800c38a <RFM95_setLNAGain+0xa6>

    rfm95->Settings.LNA = gain;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	78fa      	ldrb	r2, [r7, #3]
 800c384:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    return RFM95_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <RFM95_LoRa_setSpreadingFactor>:

uint8_t RFM95_LoRa_setSpreadingFactor(RFM95_t* rfm95, uint8_t sf)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
    if(sf > 12 || sf < 6) return RFM95_ERR_INVALID_INPUT;
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	2b0c      	cmp	r3, #12
 800c3a2:	d802      	bhi.n	800c3aa <RFM95_LoRa_setSpreadingFactor+0x18>
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	2b05      	cmp	r3, #5
 800c3a8:	d801      	bhi.n	800c3ae <RFM95_LoRa_setSpreadingFactor+0x1c>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e029      	b.n	800c402 <RFM95_LoRa_setSpreadingFactor+0x70>

    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c3ae:	f107 030f 	add.w	r3, r7, #15
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	211e      	movs	r1, #30
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fd1a 	bl	800cdf0 <rfm95_readReg>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <RFM95_LoRa_setSpreadingFactor+0x34>
        return RFM95_ERR_READ_REG;
 800c3c2:	230a      	movs	r3, #10
 800c3c4:	e01d      	b.n	800c402 <RFM95_LoRa_setSpreadingFactor+0x70>
    // Spreadinf Factor Mask: 0xF0
    writeVal = (uint8_t)((readVal & 0x0F) | (uint8_t)(sf << 4));
 800c3c6:	7bfb      	ldrb	r3, [r7, #15]
 800c3c8:	b25b      	sxtb	r3, r3
 800c3ca:	f003 030f 	and.w	r3, r3, #15
 800c3ce:	b25a      	sxtb	r2, r3
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	011b      	lsls	r3, r3, #4
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	b25b      	sxtb	r3, r3
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	b25b      	sxtb	r3, r3
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal))
 800c3e0:	f107 030e 	add.w	r3, r7, #14
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	211e      	movs	r1, #30
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fd2f 	bl	800ce4c <rfm95_writeReg>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <RFM95_LoRa_setSpreadingFactor+0x66>
        return RFM95_ERR_WRITE_REG;
 800c3f4:	230b      	movs	r3, #11
 800c3f6:	e004      	b.n	800c402 <RFM95_LoRa_setSpreadingFactor+0x70>

    rfm95->Settings.LoRa.spreadingFactor = sf;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	78fa      	ldrb	r2, [r7, #3]
 800c3fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return RFM95_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <RFM95_LoRa_setRxPayloadCrcOn>:

uint8_t RFM95_LoRa_setRxPayloadCrcOn(RFM95_t* rfm95, bool val)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	460b      	mov	r3, r1
 800c414:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c416:	f107 030f 	add.w	r3, r7, #15
 800c41a:	461a      	mov	r2, r3
 800c41c:	211e      	movs	r1, #30
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fce6 	bl	800cdf0 <rfm95_readReg>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <RFM95_LoRa_setRxPayloadCrcOn+0x24>
        return RFM95_ERR_READ_REG;
 800c42a:	230a      	movs	r3, #10
 800c42c:	e01d      	b.n	800c46a <RFM95_LoRa_setRxPayloadCrcOn+0x60>
    // Rx Payload CrcOn Mask: 0xFB
    writeVal = (uint8_t)((readVal & 0xFB) | (uint8_t)(val << 2));
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	b25b      	sxtb	r3, r3
 800c432:	f023 0304 	bic.w	r3, r3, #4
 800c436:	b25a      	sxtb	r2, r3
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	b25b      	sxtb	r3, r3
 800c440:	4313      	orrs	r3, r2
 800c442:	b25b      	sxtb	r3, r3
 800c444:	b2db      	uxtb	r3, r3
 800c446:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal))
 800c448:	f107 030e 	add.w	r3, r7, #14
 800c44c:	461a      	mov	r2, r3
 800c44e:	211e      	movs	r1, #30
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fcfb 	bl	800ce4c <rfm95_writeReg>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d001      	beq.n	800c460 <RFM95_LoRa_setRxPayloadCrcOn+0x56>
        return RFM95_ERR_WRITE_REG;
 800c45c:	230b      	movs	r3, #11
 800c45e:	e004      	b.n	800c46a <RFM95_LoRa_setRxPayloadCrcOn+0x60>
    
    rfm95->Settings.LoRaPcktHandler.rxCrcOn = val;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	78fa      	ldrb	r2, [r7, #3]
 800c464:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    return RFM95_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <rfm95_lora_symb_timout>:

uint8_t rfm95_lora_symb_timout(RFM95_t* rfm95, uint16_t value)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	460b      	mov	r3, r1
 800c47c:	807b      	strh	r3, [r7, #2]
    if(value > 0x03FF) value = 0x03FF;
 800c47e:	887b      	ldrh	r3, [r7, #2]
 800c480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c484:	d302      	bcc.n	800c48c <rfm95_lora_symb_timout+0x1a>
 800c486:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c48a:	807b      	strh	r3, [r7, #2]
    uint8_t readVal;
    uint8_t writeVal[2];
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c48c:	f107 030f 	add.w	r3, r7, #15
 800c490:	461a      	mov	r2, r3
 800c492:	211e      	movs	r1, #30
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fcab 	bl	800cdf0 <rfm95_readReg>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d001      	beq.n	800c4a4 <rfm95_lora_symb_timout+0x32>
        return RFM95_ERR_READ_REG;
 800c4a0:	230a      	movs	r3, #10
 800c4a2:	e02b      	b.n	800c4fc <rfm95_lora_symb_timout+0x8a>

    // SymbTimeout MSB
    writeVal[0] = (uint8_t)((readVal & 0xFC) | (uint8_t)(value >> 8));
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
 800c4a6:	b25b      	sxtb	r3, r3
 800c4a8:	f023 0303 	bic.w	r3, r3, #3
 800c4ac:	b25a      	sxtb	r2, r3
 800c4ae:	887b      	ldrh	r3, [r7, #2]
 800c4b0:	0a1b      	lsrs	r3, r3, #8
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	b25b      	sxtb	r3, r3
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	b25b      	sxtb	r3, r3
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	733b      	strb	r3, [r7, #12]
    // SymbTimeout LSB
    writeVal[1] = (uint8_t)(value & 0x00FF);
 800c4be:	887b      	ldrh	r3, [r7, #2]
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	737b      	strb	r3, [r7, #13]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal[0]) ||
 800c4c4:	f107 030c 	add.w	r3, r7, #12
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	211e      	movs	r1, #30
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fcbd 	bl	800ce4c <rfm95_writeReg>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <rfm95_lora_symb_timout+0x7c>
    rfm95_writeReg(rfm95, REG_SYMB_TIMEOUT_LSB, &writeVal[1]))
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	3301      	adds	r3, #1
 800c4de:	461a      	mov	r2, r3
 800c4e0:	211f      	movs	r1, #31
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 fcb2 	bl	800ce4c <rfm95_writeReg>
 800c4e8:	4603      	mov	r3, r0
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal[0]) ||
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <rfm95_lora_symb_timout+0x80>
        return RFM95_ERR_WRITE_REG;
 800c4ee:	230b      	movs	r3, #11
 800c4f0:	e004      	b.n	800c4fc <rfm95_lora_symb_timout+0x8a>
    
    rfm95->Settings.LoRaPcktHandler.rxSymbTimeout = value;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	887a      	ldrh	r2, [r7, #2]
 800c4f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    return RFM95_OK;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <RFM95_LoRa_setBandwidth>:

uint8_t RFM95_LoRa_setBandwidth(RFM95_t* rfm95, lora_bw bw)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	70fb      	strb	r3, [r7, #3]
    switch(bw)
 800c510:	78fb      	ldrb	r3, [r7, #3]
 800c512:	2b90      	cmp	r3, #144	; 0x90
 800c514:	d023      	beq.n	800c55e <RFM95_LoRa_setBandwidth+0x5a>
 800c516:	2b90      	cmp	r3, #144	; 0x90
 800c518:	dc1f      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c51a:	2b80      	cmp	r3, #128	; 0x80
 800c51c:	d021      	beq.n	800c562 <RFM95_LoRa_setBandwidth+0x5e>
 800c51e:	2b80      	cmp	r3, #128	; 0x80
 800c520:	dc1b      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c522:	2b70      	cmp	r3, #112	; 0x70
 800c524:	d01f      	beq.n	800c566 <RFM95_LoRa_setBandwidth+0x62>
 800c526:	2b70      	cmp	r3, #112	; 0x70
 800c528:	dc17      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c52a:	2b60      	cmp	r3, #96	; 0x60
 800c52c:	d01d      	beq.n	800c56a <RFM95_LoRa_setBandwidth+0x66>
 800c52e:	2b60      	cmp	r3, #96	; 0x60
 800c530:	dc13      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c532:	2b50      	cmp	r3, #80	; 0x50
 800c534:	d01b      	beq.n	800c56e <RFM95_LoRa_setBandwidth+0x6a>
 800c536:	2b50      	cmp	r3, #80	; 0x50
 800c538:	dc0f      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c53a:	2b40      	cmp	r3, #64	; 0x40
 800c53c:	d019      	beq.n	800c572 <RFM95_LoRa_setBandwidth+0x6e>
 800c53e:	2b40      	cmp	r3, #64	; 0x40
 800c540:	dc0b      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c542:	2b30      	cmp	r3, #48	; 0x30
 800c544:	d017      	beq.n	800c576 <RFM95_LoRa_setBandwidth+0x72>
 800c546:	2b30      	cmp	r3, #48	; 0x30
 800c548:	dc07      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c54a:	2b20      	cmp	r3, #32
 800c54c:	d015      	beq.n	800c57a <RFM95_LoRa_setBandwidth+0x76>
 800c54e:	2b20      	cmp	r3, #32
 800c550:	dc03      	bgt.n	800c55a <RFM95_LoRa_setBandwidth+0x56>
 800c552:	2b00      	cmp	r3, #0
 800c554:	d013      	beq.n	800c57e <RFM95_LoRa_setBandwidth+0x7a>
 800c556:	2b10      	cmp	r3, #16
 800c558:	d013      	beq.n	800c582 <RFM95_LoRa_setBandwidth+0x7e>
    case BW_250_kHz:
        break;
    case BW_500_kHz:
        break;
    default:
        return RFM95_ERR_INVALID_INPUT;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e03a      	b.n	800c5d4 <RFM95_LoRa_setBandwidth+0xd0>
        break;
 800c55e:	bf00      	nop
 800c560:	e010      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c562:	bf00      	nop
 800c564:	e00e      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c566:	bf00      	nop
 800c568:	e00c      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c56a:	bf00      	nop
 800c56c:	e00a      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c56e:	bf00      	nop
 800c570:	e008      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c572:	bf00      	nop
 800c574:	e006      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c576:	bf00      	nop
 800c578:	e004      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c57a:	bf00      	nop
 800c57c:	e002      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c57e:	bf00      	nop
 800c580:	e000      	b.n	800c584 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c582:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c584:	f107 030f 	add.w	r3, r7, #15
 800c588:	461a      	mov	r2, r3
 800c58a:	211d      	movs	r1, #29
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 fc2f 	bl	800cdf0 <rfm95_readReg>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <RFM95_LoRa_setBandwidth+0x98>
        return RFM95_ERR_READ_REG;
 800c598:	230a      	movs	r3, #10
 800c59a:	e01b      	b.n	800c5d4 <RFM95_LoRa_setBandwidth+0xd0>
    // Bandwidth register value location
    writeVal = (uint8_t)((readVal & 0x0F) | bw);
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	b25b      	sxtb	r3, r3
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	b25a      	sxtb	r2, r3
 800c5a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	b25b      	sxtb	r3, r3
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c5b2:	f107 030e 	add.w	r3, r7, #14
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	211d      	movs	r1, #29
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fc46 	bl	800ce4c <rfm95_writeReg>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d001      	beq.n	800c5ca <RFM95_LoRa_setBandwidth+0xc6>
        return RFM95_ERR_WRITE_REG;
 800c5c6:	230b      	movs	r3, #11
 800c5c8:	e004      	b.n	800c5d4 <RFM95_LoRa_setBandwidth+0xd0>
    
    rfm95->Settings.LoRa.bandWidth = bw;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	78fa      	ldrb	r2, [r7, #3]
 800c5ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    return RFM95_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <RFM95_LoRa_setCodingRate>:

uint8_t RFM95_LoRa_setCodingRate(RFM95_t* rfm95, lora_coding_rate cr)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
    switch (cr)
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	3b02      	subs	r3, #2
 800c5ec:	2b06      	cmp	r3, #6
 800c5ee:	d811      	bhi.n	800c614 <RFM95_LoRa_setCodingRate+0x38>
 800c5f0:	a201      	add	r2, pc, #4	; (adr r2, 800c5f8 <RFM95_LoRa_setCodingRate+0x1c>)
 800c5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f6:	bf00      	nop
 800c5f8:	0800c619 	.word	0x0800c619
 800c5fc:	0800c615 	.word	0x0800c615
 800c600:	0800c619 	.word	0x0800c619
 800c604:	0800c615 	.word	0x0800c615
 800c608:	0800c619 	.word	0x0800c619
 800c60c:	0800c615 	.word	0x0800c615
 800c610:	0800c619 	.word	0x0800c619
    case CR_4_7:
        break;
    case CR_4_8:
        break;            
    default:
        return RFM95_ERR_INVALID_INPUT;
 800c614:	2301      	movs	r3, #1
 800c616:	e028      	b.n	800c66a <RFM95_LoRa_setCodingRate+0x8e>
        break;
 800c618:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c61a:	f107 030f 	add.w	r3, r7, #15
 800c61e:	461a      	mov	r2, r3
 800c620:	211d      	movs	r1, #29
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fbe4 	bl	800cdf0 <rfm95_readReg>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <RFM95_LoRa_setCodingRate+0x56>
        return RFM95_ERR_READ_REG;
 800c62e:	230a      	movs	r3, #10
 800c630:	e01b      	b.n	800c66a <RFM95_LoRa_setCodingRate+0x8e>
    // Coding Rate register location
    writeVal = (uint8_t)((readVal & 0xF1) | cr);
 800c632:	7bfb      	ldrb	r3, [r7, #15]
 800c634:	b25b      	sxtb	r3, r3
 800c636:	f023 030e 	bic.w	r3, r3, #14
 800c63a:	b25a      	sxtb	r2, r3
 800c63c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c640:	4313      	orrs	r3, r2
 800c642:	b25b      	sxtb	r3, r3
 800c644:	b2db      	uxtb	r3, r3
 800c646:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c648:	f107 030e 	add.w	r3, r7, #14
 800c64c:	461a      	mov	r2, r3
 800c64e:	211d      	movs	r1, #29
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fbfb 	bl	800ce4c <rfm95_writeReg>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d001      	beq.n	800c660 <RFM95_LoRa_setCodingRate+0x84>
        return RFM95_ERR_WRITE_REG;
 800c65c:	230b      	movs	r3, #11
 800c65e:	e004      	b.n	800c66a <RFM95_LoRa_setCodingRate+0x8e>

    rfm95->Settings.LoRa.codingRate = cr;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    return RFM95_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop

0800c674 <RFM95_LoRa_setHeaderMode>:

uint8_t RFM95_LoRa_setHeaderMode(RFM95_t* rfm95, bool val)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c680:	f107 030f 	add.w	r3, r7, #15
 800c684:	461a      	mov	r2, r3
 800c686:	211d      	movs	r1, #29
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fbb1 	bl	800cdf0 <rfm95_readReg>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <RFM95_LoRa_setHeaderMode+0x24>
        return RFM95_ERR_READ_REG;
 800c694:	230a      	movs	r3, #10
 800c696:	e01b      	b.n	800c6d0 <RFM95_LoRa_setHeaderMode+0x5c>
    // Header Mode Mask: 0xFE
    writeVal = (uint8_t)((readVal & 0xFE) | val);
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	b25b      	sxtb	r3, r3
 800c69c:	f023 0301 	bic.w	r3, r3, #1
 800c6a0:	b25a      	sxtb	r2, r3
 800c6a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	b25b      	sxtb	r3, r3
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c6ae:	f107 030e 	add.w	r3, r7, #14
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	211d      	movs	r1, #29
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 fbc8 	bl	800ce4c <rfm95_writeReg>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <RFM95_LoRa_setHeaderMode+0x52>
        return RFM95_ERR_WRITE_REG;
 800c6c2:	230b      	movs	r3, #11
 800c6c4:	e004      	b.n	800c6d0 <RFM95_LoRa_setHeaderMode+0x5c>

    rfm95->Settings.LoRaPcktHandler.implicitHeaderModeOn = val;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	78fa      	ldrb	r2, [r7, #3]
 800c6ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return RFM95_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <RFM95_LoRa_setPreamble>:

uint8_t RFM95_LoRa_setPreamble(RFM95_t* rfm95, uint16_t preamblelen)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	807b      	strh	r3, [r7, #2]
    uint8_t writeVal[2];
    writeVal[0] = (uint8_t)(preamblelen >> 8);
 800c6e4:	887b      	ldrh	r3, [r7, #2]
 800c6e6:	0a1b      	lsrs	r3, r3, #8
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	733b      	strb	r3, [r7, #12]
    writeVal[1] = (uint8_t)(preamblelen & 0x00FF);
 800c6ee:	887b      	ldrh	r3, [r7, #2]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	737b      	strb	r3, [r7, #13]
    if(rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_MSB, &writeVal[0]) ||
 800c6f4:	f107 030c 	add.w	r3, r7, #12
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	2120      	movs	r1, #32
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fba5 	bl	800ce4c <rfm95_writeReg>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10a      	bne.n	800c71e <RFM95_LoRa_setPreamble+0x46>
    rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_LSB, &writeVal[1]))
 800c708:	f107 030c 	add.w	r3, r7, #12
 800c70c:	3301      	adds	r3, #1
 800c70e:	461a      	mov	r2, r3
 800c710:	2121      	movs	r1, #33	; 0x21
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fb9a 	bl	800ce4c <rfm95_writeReg>
 800c718:	4603      	mov	r3, r0
    if(rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_MSB, &writeVal[0]) ||
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <RFM95_LoRa_setPreamble+0x4a>
        return RFM95_ERR_WRITE_REG;
 800c71e:	230b      	movs	r3, #11
 800c720:	e004      	b.n	800c72c <RFM95_LoRa_setPreamble+0x54>

    rfm95->Settings.LoRaPcktHandler.preamble = preamblelen;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	887a      	ldrh	r2, [r7, #2]
 800c726:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    return RFM95_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <RFM95_LoRa_setLowDataRateOpt>:

uint8_t RFM95_LoRa_setLowDataRateOpt(RFM95_t* rfm95, bool val)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
	uint8_t readVal, writeVal;
	if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_3, &readVal))
 800c740:	f107 030f 	add.w	r3, r7, #15
 800c744:	461a      	mov	r2, r3
 800c746:	2126      	movs	r1, #38	; 0x26
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 fb51 	bl	800cdf0 <rfm95_readReg>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <RFM95_LoRa_setLowDataRateOpt+0x24>
		return RFM95_ERR_READ_REG;
 800c754:	230a      	movs	r3, #10
 800c756:	e01c      	b.n	800c792 <RFM95_LoRa_setLowDataRateOpt+0x5e>
	// Low data rate optimize register location
	writeVal = (uint8_t)((readVal & 0xF7) | (val << 3));
 800c758:	7bfb      	ldrb	r3, [r7, #15]
 800c75a:	b25b      	sxtb	r3, r3
 800c75c:	f023 0308 	bic.w	r3, r3, #8
 800c760:	b25a      	sxtb	r2, r3
 800c762:	78fb      	ldrb	r3, [r7, #3]
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	b25b      	sxtb	r3, r3
 800c768:	4313      	orrs	r3, r2
 800c76a:	b25b      	sxtb	r3, r3
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	73bb      	strb	r3, [r7, #14]
	if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_3, &writeVal))
 800c770:	f107 030e 	add.w	r3, r7, #14
 800c774:	461a      	mov	r2, r3
 800c776:	2126      	movs	r1, #38	; 0x26
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fb67 	bl	800ce4c <rfm95_writeReg>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <RFM95_LoRa_setLowDataRateOpt+0x54>
		return RFM95_ERR_WRITE_REG;
 800c784:	230b      	movs	r3, #11
 800c786:	e004      	b.n	800c792 <RFM95_LoRa_setLowDataRateOpt+0x5e>
	rfm95->Settings.LoRa.lowDatarateOptimize = val;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	78fa      	ldrb	r2, [r7, #3]
 800c78c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		return RFM95_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <rfm95_lora_dio_mapping>:

uint8_t rfm95_lora_dio_mapping(RFM95_t* rfm95, uint8_t dioNB, uint8_t dioStatus)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	70fb      	strb	r3, [r7, #3]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	70bb      	strb	r3, [r7, #2]
    uint8_t reg, dio_mapping_mask, dio_mapping_status;
    if(dioStatus > 3) return RFM95_ERR_INVALID_INPUT;
 800c7aa:	78bb      	ldrb	r3, [r7, #2]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d901      	bls.n	800c7b4 <rfm95_lora_dio_mapping+0x1a>
 800c7b0:	2301      	movs	r3, #1
 800c7b2:	e05c      	b.n	800c86e <rfm95_lora_dio_mapping+0xd4>
    switch(dioNB)
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	2b03      	cmp	r3, #3
 800c7b8:	dc02      	bgt.n	800c7c0 <rfm95_lora_dio_mapping+0x26>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	da04      	bge.n	800c7c8 <rfm95_lora_dio_mapping+0x2e>
 800c7be:	e02d      	b.n	800c81c <rfm95_lora_dio_mapping+0x82>
 800c7c0:	3b04      	subs	r3, #4
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d82a      	bhi.n	800c81c <rfm95_lora_dio_mapping+0x82>
 800c7c6:	e014      	b.n	800c7f2 <rfm95_lora_dio_mapping+0x58>
    {
        case 0:
        case 1:
        case 2:
        case 3:
            reg = REG_DIO_MAPPING_1;
 800c7c8:	2340      	movs	r3, #64	; 0x40
 800c7ca:	73fb      	strb	r3, [r7, #15]
            dio_mapping_mask = (uint8_t)(~(0x3 << (6 - 2 * dioNB)));
 800c7cc:	78fb      	ldrb	r3, [r7, #3]
 800c7ce:	f1c3 0303 	rsb	r3, r3, #3
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	2203      	movs	r2, #3
 800c7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	43db      	mvns	r3, r3
 800c7de:	73bb      	strb	r3, [r7, #14]
            dio_mapping_status = dioStatus << (6 - 2 * dioNB);
 800c7e0:	78ba      	ldrb	r2, [r7, #2]
 800c7e2:	78fb      	ldrb	r3, [r7, #3]
 800c7e4:	f1c3 0303 	rsb	r3, r3, #3
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ee:	737b      	strb	r3, [r7, #13]
            break;
 800c7f0:	e016      	b.n	800c820 <rfm95_lora_dio_mapping+0x86>
        case 4:
        case 5:
            reg = REG_DIO_MAPPING_2;
 800c7f2:	2341      	movs	r3, #65	; 0x41
 800c7f4:	73fb      	strb	r3, [r7, #15]
            dio_mapping_mask = (uint8_t)(~(0x3 << (6 - 2 * (dioNB - 4))));
 800c7f6:	78fb      	ldrb	r3, [r7, #3]
 800c7f8:	f1c3 0307 	rsb	r3, r3, #7
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	2203      	movs	r2, #3
 800c800:	fa02 f303 	lsl.w	r3, r2, r3
 800c804:	b2db      	uxtb	r3, r3
 800c806:	43db      	mvns	r3, r3
 800c808:	73bb      	strb	r3, [r7, #14]
            dio_mapping_status = dioStatus << (6 - 2 * (dioNB - 4));
 800c80a:	78ba      	ldrb	r2, [r7, #2]
 800c80c:	78fb      	ldrb	r3, [r7, #3]
 800c80e:	f1c3 0307 	rsb	r3, r3, #7
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	fa02 f303 	lsl.w	r3, r2, r3
 800c818:	737b      	strb	r3, [r7, #13]
            break;
 800c81a:	e001      	b.n	800c820 <rfm95_lora_dio_mapping+0x86>
        default:
            return RFM95_ERR_INVALID_INPUT;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e026      	b.n	800c86e <rfm95_lora_dio_mapping+0xd4>
    }

    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, reg, &readVal))
 800c820:	f107 020c 	add.w	r2, r7, #12
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fae1 	bl	800cdf0 <rfm95_readReg>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d001      	beq.n	800c838 <rfm95_lora_dio_mapping+0x9e>
        return RFM95_ERR_READ_REG;
 800c834:	230a      	movs	r3, #10
 800c836:	e01a      	b.n	800c86e <rfm95_lora_dio_mapping+0xd4>
    // ex. LoRa DIO0 set RxDone(0x00), other pins are set to default
    writeVal = (uint8_t)((readVal & dio_mapping_mask) | dio_mapping_status);
 800c838:	7b3a      	ldrb	r2, [r7, #12]
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	4013      	ands	r3, r2
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	7b7b      	ldrb	r3, [r7, #13]
 800c842:	4313      	orrs	r3, r2
 800c844:	b2db      	uxtb	r3, r3
 800c846:	72fb      	strb	r3, [r7, #11]
    if(rfm95_writeReg(rfm95, reg, &writeVal))
 800c848:	f107 020b 	add.w	r2, r7, #11
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4619      	mov	r1, r3
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fafb 	bl	800ce4c <rfm95_writeReg>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <rfm95_lora_dio_mapping+0xc6>
        return RFM95_ERR_WRITE_REG;
 800c85c:	230b      	movs	r3, #11
 800c85e:	e006      	b.n	800c86e <rfm95_lora_dio_mapping+0xd4>

    rfm95->DIO.DioStatus[dioNB] = dioStatus;
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
 800c866:	78ba      	ldrb	r2, [r7, #2]
 800c868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return RFM95_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <RFM95_checkVersion>:

uint8_t RFM95_checkVersion(RFM95_t* rfm95)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b084      	sub	sp, #16
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_VERSION, &readVal))
 800c87e:	f107 030f 	add.w	r3, r7, #15
 800c882:	461a      	mov	r2, r3
 800c884:	2142      	movs	r1, #66	; 0x42
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fab2 	bl	800cdf0 <rfm95_readReg>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <RFM95_checkVersion+0x20>
        return RFM95_ERR_READ_REG;
 800c892:	230a      	movs	r3, #10
 800c894:	e005      	b.n	800c8a2 <RFM95_checkVersion+0x2c>
    if(readVal != 0x12) 
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	2b12      	cmp	r3, #18
 800c89a:	d001      	beq.n	800c8a0 <RFM95_checkVersion+0x2a>
        return RFM95_ERR_CHIP_VERSION;
 800c89c:	23ff      	movs	r3, #255	; 0xff
 800c89e:	e000      	b.n	800c8a2 <RFM95_checkVersion+0x2c>
    
    return RFM95_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <RFM95_LoRa_prepareReceive>:
    RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
    return RFM95_ERR_TX_TIMEOUT;
}

uint8_t RFM95_LoRa_prepareReceive(RFM95_t* rfm95, bool isRxContinous)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	70fb      	strb	r3, [r7, #3]
    uint8_t ret;
    if(isRxContinous)
 800c8b6:	78fb      	ldrb	r3, [r7, #3]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d063      	beq.n	800c984 <RFM95_LoRa_prepareReceive+0xda>
    {
    	uint8_t irq = Irq_RxDone & Irq_PayloadCrcError & Irq_ValidHeader;
 800c8bc:	238f      	movs	r3, #143	; 0x8f
 800c8be:	73bb      	strb	r3, [r7, #14]
    	uint8_t irq_rxFlags = (uint8_t)(~Irq_RxDone | ~Irq_PayloadCrcError | ~Irq_ValidHeader);
 800c8c0:	2370      	movs	r3, #112	; 0x70
 800c8c2:	737b      	strb	r3, [r7, #13]
    	uint8_t fifoptr = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	733b      	strb	r3, [r7, #12]
        // set RegIrqFlagsMask: RxDoneMask, PayloadCrcErrorMask and ValidHeaderMask are activated.
        ret = rfm95_writeReg(rfm95, REG_IRQ_FLAGS_MASK, &irq);
 800c8c8:	f107 030e 	add.w	r3, r7, #14
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	2111      	movs	r1, #17
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fabb 	bl	800ce4c <rfm95_writeReg>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d001      	beq.n	800c8e4 <RFM95_LoRa_prepareReceive+0x3a>
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
 800c8e2:	e050      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        // set DIO0 Rx_Done IRQ: 0b00
        ret = rfm95_lora_dio_mapping(rfm95, 0, DIOx_MAPPING_00);
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7ff ff56 	bl	800c79a <rfm95_lora_dio_mapping>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <RFM95_LoRa_prepareReceive+0x52>
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
 800c8fa:	e044      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        // set standby mode
        ret = RFM95_LoRa_setOpMode(rfm95, STDBY_MODE);
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fae8 	bl	800bed4 <RFM95_LoRa_setOpMode>
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <RFM95_LoRa_prepareReceive+0x68>
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	e039      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        // set FifoAddrPtr to FifoRxBaseAddr
        ret = rfm95_writeReg(rfm95, REG_FIFO_ADDR_PTR, &fifoptr);
 800c912:	f107 030c 	add.w	r3, r7, #12
 800c916:	461a      	mov	r2, r3
 800c918:	210d      	movs	r1, #13
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa96 	bl	800ce4c <rfm95_writeReg>
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <RFM95_LoRa_prepareReceive+0x84>
 800c92a:	7bfb      	ldrb	r3, [r7, #15]
 800c92c:	e02b      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        ret = rfm95_writeReg(rfm95, REG_FIFO_RX_BASE_ADDR, &fifoptr);
 800c92e:	f107 030c 	add.w	r3, r7, #12
 800c932:	461a      	mov	r2, r3
 800c934:	210f      	movs	r1, #15
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fa88 	bl	800ce4c <rfm95_writeReg>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <RFM95_LoRa_prepareReceive+0xa0>
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	e01d      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        // clear the RxFlags interrupt
		ret = rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800c94a:	f107 030d 	add.w	r3, r7, #13
 800c94e:	461a      	mov	r2, r3
 800c950:	2112      	movs	r1, #18
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fa7a 	bl	800ce4c <rfm95_writeReg>
 800c958:	4603      	mov	r3, r0
 800c95a:	73fb      	strb	r3, [r7, #15]
		if(ret) return ret;
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d001      	beq.n	800c966 <RFM95_LoRa_prepareReceive+0xbc>
 800c962:	7bfb      	ldrb	r3, [r7, #15]
 800c964:	e00f      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>

        // set Rx Mode
		ret = RFM95_LoRa_setOpMode(rfm95, RX_CONTINUOUS);
 800c966:	2105      	movs	r1, #5
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f7ff fab3 	bl	800bed4 <RFM95_LoRa_setOpMode>
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]
		if(ret) return ret;
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <RFM95_LoRa_prepareReceive+0xd2>
 800c978:	7bfb      	ldrb	r3, [r7, #15]
 800c97a:	e004      	b.n	800c986 <RFM95_LoRa_prepareReceive+0xdc>
        rfm95->Settings.LoRa.isRxContinous = true;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    else
    {
        // TODO
    }

    return RFM95_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
	...

0800c990 <RFM95_LoRa_receive>:

uint8_t RFM95_LoRa_receive(RFM95_t* rfm95, uint8_t* buffer, uint8_t bufferlen)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	4613      	mov	r3, r2
 800c99c:	71fb      	strb	r3, [r7, #7]
    uint8_t ret, readIrqFlag, rxNbBytes, rxCurrentAddr, minLen, irq_rxFlags;
    // check current IRQ flags.
    ret = rfm95_readReg(rfm95, REG_IRQ_FLAGS, &readIrqFlag);
 800c99e:	f107 0315 	add.w	r3, r7, #21
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2112      	movs	r1, #18
 800c9a6:	68f8      	ldr	r0, [r7, #12]
 800c9a8:	f000 fa22 	bl	800cdf0 <rfm95_readReg>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	75fb      	strb	r3, [r7, #23]
    if(ret) return ret;
 800c9b0:	7dfb      	ldrb	r3, [r7, #23]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <RFM95_LoRa_receive+0x2a>
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	e05a      	b.n	800ca70 <RFM95_LoRa_receive+0xe0>
    // RxDone
    if((readIrqFlag & (uint8_t)(~Irq_RxDone | ~Irq_ValidHeader)) != 0x00)
 800c9ba:	7d7b      	ldrb	r3, [r7, #21]
 800c9bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d047      	beq.n	800ca54 <RFM95_LoRa_receive+0xc4>
    {
        // Set RegFifoAddrPtr to RegFifoRxCurrentAddr
        rfm95_readReg(rfm95, REG_RX_NB_BYTES, &rxNbBytes);
 800c9c4:	f107 0314 	add.w	r3, r7, #20
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	2113      	movs	r1, #19
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 fa0f 	bl	800cdf0 <rfm95_readReg>
        rfm95_readReg(rfm95, REG_FIFO_RX_CURRENT_ADDR, &rxCurrentAddr);
 800c9d2:	f107 0313 	add.w	r3, r7, #19
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	2110      	movs	r1, #16
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f000 fa08 	bl	800cdf0 <rfm95_readReg>
        rfm95_writeReg(rfm95, REG_FIFO_ADDR_PTR, &rxCurrentAddr);
 800c9e0:	f107 0313 	add.w	r3, r7, #19
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	210d      	movs	r1, #13
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 fa2f 	bl	800ce4c <rfm95_writeReg>
        minLen = (bufferlen >= rxNbBytes) ? rxNbBytes : bufferlen;
 800c9ee:	7d3b      	ldrb	r3, [r7, #20]
 800c9f0:	79fa      	ldrb	r2, [r7, #7]
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	bf28      	it	cs
 800c9f6:	4613      	movcs	r3, r2
 800c9f8:	75bb      	strb	r3, [r7, #22]
        printf("rxNbByte: %d \r\n", rxNbBytes);
 800c9fa:	7d3b      	ldrb	r3, [r7, #20]
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	481e      	ldr	r0, [pc, #120]	; (800ca78 <RFM95_LoRa_receive+0xe8>)
 800ca00:	f001 fb7c 	bl	800e0fc <iprintf>
        
        ret = rfm95_fifo_readReg(rfm95, buffer, minLen);
 800ca04:	7dbb      	ldrb	r3, [r7, #22]
 800ca06:	461a      	mov	r2, r3
 800ca08:	68b9      	ldr	r1, [r7, #8]
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f000 fade 	bl	800cfcc <rfm95_fifo_readReg>
 800ca10:	4603      	mov	r3, r0
 800ca12:	75fb      	strb	r3, [r7, #23]
        if(ret) return ret;
 800ca14:	7dfb      	ldrb	r3, [r7, #23]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <RFM95_LoRa_receive+0x8e>
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	e028      	b.n	800ca70 <RFM95_LoRa_receive+0xe0>
        // CRC Error
        if((readIrqFlag & (uint8_t)(~Irq_PayloadCrcError)) != 0x00)
 800ca1e:	7d7b      	ldrb	r3, [r7, #21]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <RFM95_LoRa_receive+0xae>
        {
        	// clear the RxFlags interrupt
        	irq_rxFlags = (uint8_t)(~Irq_RxDone | ~Irq_PayloadCrcError | ~Irq_ValidHeader);
 800ca28:	2370      	movs	r3, #112	; 0x70
 800ca2a:	74bb      	strb	r3, [r7, #18]
			rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800ca2c:	f107 0312 	add.w	r3, r7, #18
 800ca30:	461a      	mov	r2, r3
 800ca32:	2112      	movs	r1, #18
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 fa09 	bl	800ce4c <rfm95_writeReg>
            return RFM95_ERR_RX_PAYLOAD_CRC;
 800ca3a:	2329      	movs	r3, #41	; 0x29
 800ca3c:	e018      	b.n	800ca70 <RFM95_LoRa_receive+0xe0>
        }
        else
        {
        	// clear the RxFlags interrupt
			irq_rxFlags = (uint8_t)(~Irq_RxDone | ~Irq_ValidHeader);
 800ca3e:	2350      	movs	r3, #80	; 0x50
 800ca40:	74bb      	strb	r3, [r7, #18]
			rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800ca42:	f107 0312 	add.w	r3, r7, #18
 800ca46:	461a      	mov	r2, r3
 800ca48:	2112      	movs	r1, #18
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 f9fe 	bl	800ce4c <rfm95_writeReg>
	        return RFM95_OK;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e00d      	b.n	800ca70 <RFM95_LoRa_receive+0xe0>
    }
    // fail to receive signal
    else
    {
    	// clear the RxFlags interrupt
		irq_rxFlags = (uint8_t)(~Irq_RxDone | ~Irq_ValidHeader);
 800ca54:	2350      	movs	r3, #80	; 0x50
 800ca56:	74bb      	strb	r3, [r7, #18]
		rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800ca58:	f107 0312 	add.w	r3, r7, #18
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	2112      	movs	r1, #18
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f000 f9f3 	bl	800ce4c <rfm95_writeReg>
		// enter in sleep mode
        RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
 800ca66:	2100      	movs	r1, #0
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7ff fa33 	bl	800bed4 <RFM95_LoRa_setOpMode>
        return RFM95_ERR_RX_FAIL;
 800ca6e:	232b      	movs	r3, #43	; 0x2b
    }
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	0801206c 	.word	0x0801206c

0800ca7c <RFM95_LoRa_setSyncWord>:

uint8_t RFM95_LoRa_setSyncWord(RFM95_t* rfm95 ,uint8_t syncword)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
	if(rfm95_writeReg(rfm95, REG_SYNCWORD, &syncword))
 800ca88:	1cfb      	adds	r3, r7, #3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	2139      	movs	r1, #57	; 0x39
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 f9dc 	bl	800ce4c <rfm95_writeReg>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <RFM95_LoRa_setSyncWord+0x22>
		return RFM95_ERR_WRITE_REG;
 800ca9a:	230b      	movs	r3, #11
 800ca9c:	e000      	b.n	800caa0 <RFM95_LoRa_setSyncWord+0x24>
	else
		return RFM95_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <RFM95_getPcktSNR>:

float RFM95_getPcktSNR(RFM95_t* rfm95)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	uint8_t readVal;
	rfm95_readReg(rfm95, REG_PCKT_SNR_VAL, &readVal);
 800cab0:	f107 030f 	add.w	r3, r7, #15
 800cab4:	461a      	mov	r2, r3
 800cab6:	2119      	movs	r1, #25
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f999 	bl	800cdf0 <rfm95_readReg>
	rfm95->Settings.LoRaPcktHandler.SNR = (float)((int8_t)readVal * 0.25);
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	b25b      	sxtb	r3, r3
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7f3 fd36 	bl	8000534 <__aeabi_i2d>
 800cac8:	f04f 0200 	mov.w	r2, #0
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <RFM95_getPcktSNR+0x50>)
 800cace:	f7f3 fd9b 	bl	8000608 <__aeabi_dmul>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4610      	mov	r0, r2
 800cad8:	4619      	mov	r1, r3
 800cada:	f7f4 f88d 	bl	8000bf8 <__aeabi_d2f>
 800cade:	4602      	mov	r2, r0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	659a      	str	r2, [r3, #88]	; 0x58
	return rfm95->Settings.LoRaPcktHandler.SNR;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cae8:	ee07 3a90 	vmov	s15, r3
}
 800caec:	eeb0 0a67 	vmov.f32	s0, s15
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	3fd00000 	.word	0x3fd00000

0800cafc <RFM95_getPcktRSSI>:

int16_t RFM95_getPcktRSSI(RFM95_t* rfm95)
{
 800cafc:	b5b0      	push	{r4, r5, r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]

	uint8_t pcktRSSI;
	if(rfm95_readReg(rfm95, REG_PCKT_RSSI_VAL, &pcktRSSI))
 800cb04:	f107 030b 	add.w	r3, r7, #11
 800cb08:	461a      	mov	r2, r3
 800cb0a:	211a      	movs	r1, #26
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 f96f 	bl	800cdf0 <rfm95_readReg>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <RFM95_getPcktRSSI+0x20>
				return RFM95_ERR_READ_REG;
 800cb18:	230a      	movs	r3, #10
 800cb1a:	e081      	b.n	800cc20 <RFM95_getPcktRSSI+0x124>
	float pcktSNR = RFM95_getPcktSNR(rfm95);;
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff ffc3 	bl	800caa8 <RFM95_getPcktSNR>
 800cb22:	ed87 0a03 	vstr	s0, [r7, #12]
	// high frequency
	if(rfm95->Settings.LoRa.frequency <= 1020000000 &&
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb2a:	4a3f      	ldr	r2, [pc, #252]	; (800cc28 <RFM95_getPcktRSSI+0x12c>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d838      	bhi.n	800cba2 <RFM95_getPcktRSSI+0xa6>
			rfm95->Settings.LoRa.frequency >= 862000000)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	if(rfm95->Settings.LoRa.frequency <= 1020000000 &&
 800cb34:	4a3d      	ldr	r2, [pc, #244]	; (800cc2c <RFM95_getPcktRSSI+0x130>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d333      	bcc.n	800cba2 <RFM95_getPcktRSSI+0xa6>
	{
		if((pcktSNR >= 0.0f))
 800cb3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	db08      	blt.n	800cb5a <RFM95_getPcktRSSI+0x5e>
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-157 + pcktRSSI);
 800cb48:	7afb      	ldrb	r3, [r7, #11]
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	3b9d      	subs	r3, #157	; 0x9d
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	b21a      	sxth	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cb58:	e01f      	b.n	800cb9a <RFM95_getPcktRSSI+0x9e>
		else
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-157 + pcktRSSI + pcktSNR * 0.25);
 800cb5a:	7afb      	ldrb	r3, [r7, #11]
 800cb5c:	3b9d      	subs	r3, #157	; 0x9d
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f3 fce8 	bl	8000534 <__aeabi_i2d>
 800cb64:	4604      	mov	r4, r0
 800cb66:	460d      	mov	r5, r1
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f7f3 fcf5 	bl	8000558 <__aeabi_f2d>
 800cb6e:	f04f 0200 	mov.w	r2, #0
 800cb72:	4b2f      	ldr	r3, [pc, #188]	; (800cc30 <RFM95_getPcktRSSI+0x134>)
 800cb74:	f7f3 fd48 	bl	8000608 <__aeabi_dmul>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fb8c 	bl	800029c <__adddf3>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	f7f3 ffec 	bl	8000b68 <__aeabi_d2iz>
 800cb90:	4603      	mov	r3, r0
 800cb92:	b21a      	sxth	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		return rfm95->Settings.LoRaPcktHandler.pcktRSSI;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800cba0:	e03e      	b.n	800cc20 <RFM95_getPcktRSSI+0x124>
	}
	// low frequency
	else if(rfm95->Settings.LoRa.frequency <= 525000000 &&
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cba6:	4a23      	ldr	r2, [pc, #140]	; (800cc34 <RFM95_getPcktRSSI+0x138>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d838      	bhi.n	800cc1e <RFM95_getPcktRSSI+0x122>
			rfm95->Settings.LoRa.frequency >= 137000000)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	else if(rfm95->Settings.LoRa.frequency <= 525000000 &&
 800cbb0:	4a21      	ldr	r2, [pc, #132]	; (800cc38 <RFM95_getPcktRSSI+0x13c>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d933      	bls.n	800cc1e <RFM95_getPcktRSSI+0x122>
	{
		if(pcktSNR >= 0.0f)
 800cbb6:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc2:	db08      	blt.n	800cbd6 <RFM95_getPcktRSSI+0xda>
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-164 + pcktRSSI);
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3ba4      	subs	r3, #164	; 0xa4
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	b21a      	sxth	r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cbd4:	e01f      	b.n	800cc16 <RFM95_getPcktRSSI+0x11a>
		else
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-164 + pcktRSSI + pcktSNR * 0.25);
 800cbd6:	7afb      	ldrb	r3, [r7, #11]
 800cbd8:	3ba4      	subs	r3, #164	; 0xa4
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f3 fcaa 	bl	8000534 <__aeabi_i2d>
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	460d      	mov	r5, r1
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f7f3 fcb7 	bl	8000558 <__aeabi_f2d>
 800cbea:	f04f 0200 	mov.w	r2, #0
 800cbee:	4b10      	ldr	r3, [pc, #64]	; (800cc30 <RFM95_getPcktRSSI+0x134>)
 800cbf0:	f7f3 fd0a 	bl	8000608 <__aeabi_dmul>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	460b      	mov	r3, r1
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	4629      	mov	r1, r5
 800cbfc:	f7f3 fb4e 	bl	800029c <__adddf3>
 800cc00:	4602      	mov	r2, r0
 800cc02:	460b      	mov	r3, r1
 800cc04:	4610      	mov	r0, r2
 800cc06:	4619      	mov	r1, r3
 800cc08:	f7f3 ffae 	bl	8000b68 <__aeabi_d2iz>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	b21a      	sxth	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		return rfm95->Settings.LoRaPcktHandler.pcktRSSI;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800cc1c:	e000      	b.n	800cc20 <RFM95_getPcktRSSI+0x124>
	}
	else
	{
		return RFM95_ERR_FREQUENCY;
 800cc1e:	2332      	movs	r3, #50	; 0x32
	}
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bdb0      	pop	{r4, r5, r7, pc}
 800cc28:	3ccbf700 	.word	0x3ccbf700
 800cc2c:	33611380 	.word	0x33611380
 800cc30:	3fd00000 	.word	0x3fd00000
 800cc34:	1f4add40 	.word	0x1f4add40
 800cc38:	082a743f 	.word	0x082a743f

0800cc3c <RFM95_LoRa_Init>:
	rfm95_writeReg(rfm95, REG_IRQ_FLAGS_MASK, &currentIRQ);
	return randomNB;
}

uint8_t RFM95_LoRa_Init(RFM95_t* rfm95)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
    uint8_t ret;
    // reset
    RFM95_Reset(rfm95);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff f92b 	bl	800bea0 <RFM95_Reset>
    // enter sleep mode, regs should be written only in Sleep and Standby modes.
	ret = RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff f941 	bl	800bed4 <RFM95_LoRa_setOpMode>
 800cc52:	4603      	mov	r3, r0
 800cc54:	73fb      	strb	r3, [r7, #15]
	if(ret) return ret;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <RFM95_LoRa_Init+0x24>
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	e0bc      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//	printf("RFM95_LoRa_setOpMode ..ok\r\n");
    // set lora mode
    ret = RFM95_setModem(rfm95, MODEM_LORA);
 800cc60:	2101      	movs	r1, #1
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff f982 	bl	800bf6c <RFM95_setModem>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <RFM95_LoRa_Init+0x3a>
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	e0b1      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_setModem ..ok\r\n");
    // set frequency
    ret = RFM95_setFrequency(rfm95, 923400000);
 800cc76:	495b      	ldr	r1, [pc, #364]	; (800cde4 <RFM95_LoRa_Init+0x1a8>)
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff f9b1 	bl	800bfe0 <RFM95_setFrequency>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <RFM95_LoRa_Init+0x50>
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	e0a6      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
    printf("Freq: %lu \r\n", RFM95_getFrequency(rfm95));
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff f9db 	bl	800c048 <RFM95_getFrequency>
 800cc92:	4603      	mov	r3, r0
 800cc94:	4619      	mov	r1, r3
 800cc96:	4854      	ldr	r0, [pc, #336]	; (800cde8 <RFM95_LoRa_Init+0x1ac>)
 800cc98:	f001 fa30 	bl	800e0fc <iprintf>
    // set output power gain
    ret = RFM95_setTXPower(rfm95, 20);
 800cc9c:	2114      	movs	r1, #20
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f7ff fa0e 	bl	800c0c0 <RFM95_setTXPower>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <RFM95_LoRa_Init+0x76>
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	e093      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_setTXPower ..ok\r\n");
    // set over current protection
    ret = RFM95_setOCP(rfm95, 200);
 800ccb2:	21c8      	movs	r1, #200	; 0xc8
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff facd 	bl	800c254 <RFM95_setOCP>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <RFM95_LoRa_Init+0x8c>
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	e088      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_setOCP ..ok\r\n");
    // set LNA gain
    ret = RFM95_setLNAGain(rfm95, LNA_G1);
 800ccc8:	2120      	movs	r1, #32
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7ff fb0a 	bl	800c2e4 <RFM95_setLNAGain>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <RFM95_LoRa_Init+0xa2>
 800ccda:	7bfb      	ldrb	r3, [r7, #15]
 800ccdc:	e07d      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_setLNAGain ..ok\r\n");
    // set spreading factor
    ret = RFM95_LoRa_setSpreadingFactor(rfm95, 11);
 800ccde:	210b      	movs	r1, #11
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fb56 	bl	800c392 <RFM95_LoRa_setSpreadingFactor>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <RFM95_LoRa_Init+0xb8>
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	e072      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setSpreadingFactor ..ok\r\n");
    // set rx crc on
    ret = RFM95_LoRa_setRxPayloadCrcOn(rfm95, true);
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff fb87 	bl	800c40a <RFM95_LoRa_setRxPayloadCrcOn>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <RFM95_LoRa_Init+0xce>
 800cd06:	7bfb      	ldrb	r3, [r7, #15]
 800cd08:	e067      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setRxPayloadCrcOn ..ok\r\n");
    // set timeout
    ret = rfm95_lora_symb_timout(rfm95, 0x3FF);
 800cd0a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7ff fbaf 	bl	800c472 <rfm95_lora_symb_timout>
 800cd14:	4603      	mov	r3, r0
 800cd16:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd18:	7bfb      	ldrb	r3, [r7, #15]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <RFM95_LoRa_Init+0xe6>
 800cd1e:	7bfb      	ldrb	r3, [r7, #15]
 800cd20:	e05b      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("rfm95_lora_symb_timout ..ok\r\n");
    // set bandwidth
    ret = RFM95_LoRa_setBandwidth(rfm95, BW_125_kHz);
 800cd22:	2170      	movs	r1, #112	; 0x70
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff fbed 	bl	800c504 <RFM95_LoRa_setBandwidth>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <RFM95_LoRa_Init+0xfc>
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	e050      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setBandwidth ..ok\r\n");
    // set coding rate
    ret = RFM95_LoRa_setCodingRate(rfm95, CR_4_5);
 800cd38:	2102      	movs	r1, #2
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fc4e 	bl	800c5dc <RFM95_LoRa_setCodingRate>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <RFM95_LoRa_Init+0x112>
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	e045      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setCodingRate ..ok\r\n");
    // set explicit mode
    ret = RFM95_LoRa_setHeaderMode(rfm95, EXPLICIT_HEADER_MODE);
 800cd4e:	2100      	movs	r1, #0
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f7ff fc8f 	bl	800c674 <RFM95_LoRa_setHeaderMode>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <RFM95_LoRa_Init+0x128>
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	e03a      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setHeaderMode ..ok\r\n");
    // By default the packet is configured with a 12 symbol long sequence
    // If it exceeds over 19, SLGv1 won't be able to receive packet successfully.
    ret = RFM95_LoRa_setPreamble(rfm95, 8);
 800cd64:	2108      	movs	r1, #8
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fcb6 	bl	800c6d8 <RFM95_LoRa_setPreamble>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <RFM95_LoRa_Init+0x13e>
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	e02f      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setPreamble ..ok\r\n");
    // set DIO0 Rx_Done IRQ: 0b00
    ret = RFM95_LoRa_setLowDataRateOpt(rfm95, true);
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fcd9 	bl	800c734 <RFM95_LoRa_setLowDataRateOpt>
 800cd82:	4603      	mov	r3, r0
 800cd84:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <RFM95_LoRa_Init+0x154>
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	e024      	b.n	800cdda <RFM95_LoRa_Init+0x19e>

    ret = rfm95_lora_dio_mapping(rfm95, 0, DIOx_MAPPING_00);
 800cd90:	2200      	movs	r2, #0
 800cd92:	2100      	movs	r1, #0
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7ff fd00 	bl	800c79a <rfm95_lora_dio_mapping>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <RFM95_LoRa_Init+0x16c>
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	e018      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("PLL HOP: %02x\r\n", pllHop);
//    pllHop = (pllHop & 0x7F) | 0x80;
//    rfm95_writeReg(rfm95, REG_PILL_HOP, &pllHop);
//    rfm95_writeReg(rfm95, REG_HOP_PERIOD, &hop);
    // enter standby mode
    ret = RFM95_LoRa_setOpMode(rfm95, STDBY_MODE);
 800cda8:	2101      	movs	r1, #1
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff f892 	bl	800bed4 <RFM95_LoRa_setOpMode>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d001      	beq.n	800cdbe <RFM95_LoRa_Init+0x182>
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
 800cdbc:	e00d      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
//    printf("RFM95_LoRa_setOpMode ..ok\r\n");
    // check version
    ret = RFM95_checkVersion(rfm95);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fd59 	bl	800c876 <RFM95_checkVersion>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <RFM95_LoRa_Init+0x196>
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	e003      	b.n	800cdda <RFM95_LoRa_Init+0x19e>
    printf("RFM95_checkVersion ..ok\r\n");
 800cdd2:	4806      	ldr	r0, [pc, #24]	; (800cdec <RFM95_LoRa_Init+0x1b0>)
 800cdd4:	f001 fa00 	bl	800e1d8 <puts>

    return RFM95_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	3709f740 	.word	0x3709f740
 800cde8:	0801207c 	.word	0x0801207c
 800cdec:	0801208c 	.word	0x0801208c

0800cdf0 <rfm95_readReg>:

uint8_t rfm95_readReg(RFM95_t* rfm95, uint8_t reg, uint8_t* readVal)
{
 800cdf0:	b590      	push	{r4, r7, lr}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	72fb      	strb	r3, [r7, #11]
    uint8_t ret;
    uint8_t writeVal = reg & 0x7f;
 800cdfe:	7afb      	ldrb	r3, [r7, #11]
 800ce00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	75bb      	strb	r3, [r7, #22]
    rfm95->NSEL(0);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	4798      	blx	r3
    rfm95->SPI_WriteRead(&writeVal, readVal, 2, SPI_TIMEOUT);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	689c      	ldr	r4, [r3, #8]
 800ce14:	f107 0016 	add.w	r0, r7, #22
 800ce18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	47a0      	blx	r4
    rfm95->NSEL(1);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	2001      	movs	r0, #1
 800ce28:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	4798      	blx	r3
 800ce30:	4603      	mov	r3, r0
 800ce32:	75fb      	strb	r3, [r7, #23]
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	7c1b      	ldrb	r3, [r3, #16]
 800ce38:	7dfa      	ldrb	r2, [r7, #23]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d101      	bne.n	800ce42 <rfm95_readReg+0x52>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e000      	b.n	800ce44 <rfm95_readReg+0x54>
    else return RFM95_ERR_READ_REG;
 800ce42:	230a      	movs	r3, #10
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd90      	pop	{r4, r7, pc}

0800ce4c <rfm95_writeReg>:

uint8_t rfm95_writeReg(RFM95_t* rfm95, uint8_t reg, uint8_t* writeVal)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	460b      	mov	r3, r1
 800ce56:	607a      	str	r2, [r7, #4]
 800ce58:	72fb      	strb	r3, [r7, #11]
    uint8_t ret;
    uint8_t buff[] = {(reg | 0x80), *writeVal};
 800ce5a:	7afb      	ldrb	r3, [r7, #11]
 800ce5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	753b      	strb	r3, [r7, #20]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	757b      	strb	r3, [r7, #21]
    rfm95->NSEL(0);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	699b      	ldr	r3, [r3, #24]
 800ce6e:	2000      	movs	r0, #0
 800ce70:	4798      	blx	r3
    rfm95->SPI_Write(buff, 2, SPI_TIMEOUT);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f107 0014 	add.w	r0, r7, #20
 800ce7a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ce7e:	2102      	movs	r1, #2
 800ce80:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	4798      	blx	r3
 800ce88:	4603      	mov	r3, r0
 800ce8a:	75fb      	strb	r3, [r7, #23]
    rfm95->NSEL(1);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	2001      	movs	r0, #1
 800ce92:	4798      	blx	r3
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	7c1b      	ldrb	r3, [r3, #16]
 800ce98:	7dfa      	ldrb	r2, [r7, #23]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d101      	bne.n	800cea2 <rfm95_writeReg+0x56>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e000      	b.n	800cea4 <rfm95_writeReg+0x58>
    else return RFM95_ERR_WRITE_REG;
 800cea2:	230b      	movs	r3, #11
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <rfm95_burst_readReg>:

uint8_t rfm95_burst_readReg(RFM95_t* rfm95, uint8_t reg, uint8_t* readVal, uint8_t length)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	460b      	mov	r3, r1
 800ceba:	72fb      	strb	r3, [r7, #11]
 800cebc:	4613      	mov	r3, r2
 800cebe:	72bb      	strb	r3, [r7, #10]
    uint8_t ret[2];
    uint8_t buff = reg & 0x7f;
 800cec0:	7afb      	ldrb	r3, [r7, #11]
 800cec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	74fb      	strb	r3, [r7, #19]
    rfm95->NSEL(0);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	2000      	movs	r0, #0
 800ced0:	4798      	blx	r3
    rfm95->SPI_Write(&buff, 1, SPI_TIMEOUT);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f107 0013 	add.w	r0, r7, #19
 800ceda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cede:	2101      	movs	r1, #1
 800cee0:	4798      	blx	r3
    ret[0] = rfm95->SPI_CheckState();
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	4798      	blx	r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	753b      	strb	r3, [r7, #20]
    rfm95->SPI_Read(readVal, length, SPI_TIMEOUT);
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	7ab9      	ldrb	r1, [r7, #10]
 800cef2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	4798      	blx	r3
    ret[1] = rfm95->SPI_CheckState();
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	4798      	blx	r3
 800cf00:	4603      	mov	r3, r0
 800cf02:	757b      	strb	r3, [r7, #21]
    rfm95->NSEL(1);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	699b      	ldr	r3, [r3, #24]
 800cf08:	2001      	movs	r0, #1
 800cf0a:	4798      	blx	r3
    if((ret[0] == rfm95->spi_ok) && (ret[1] == rfm95->spi_ok)) return RFM95_OK;
 800cf0c:	7d3a      	ldrb	r2, [r7, #20]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	7c1b      	ldrb	r3, [r3, #16]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d106      	bne.n	800cf24 <rfm95_burst_readReg+0x78>
 800cf16:	7d7a      	ldrb	r2, [r7, #21]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	7c1b      	ldrb	r3, [r3, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d101      	bne.n	800cf24 <rfm95_burst_readReg+0x78>
 800cf20:	2300      	movs	r3, #0
 800cf22:	e000      	b.n	800cf26 <rfm95_burst_readReg+0x7a>
    else return RFM95_ERR_BURST_READ_REG;
 800cf24:	2314      	movs	r3, #20
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3718      	adds	r7, #24
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <rfm95_burst_writeReg>:

uint8_t rfm95_burst_writeReg(RFM95_t* rfm95, uint8_t reg, uint8_t* writeVal, uint8_t length)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b088      	sub	sp, #32
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	72fb      	strb	r3, [r7, #11]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	72bb      	strb	r3, [r7, #10]
    uint8_t ret;
    uint8_t *buff = (uint8_t*)malloc((length + 1) * sizeof(uint8_t));
 800cf42:	7abb      	ldrb	r3, [r7, #10]
 800cf44:	3301      	adds	r3, #1
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f856 	bl	800cff8 <malloc>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	61bb      	str	r3, [r7, #24]
    buff[0] = reg | 0x80;
 800cf50:	7afb      	ldrb	r3, [r7, #11]
 800cf52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < (length + 1); i++)
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	61fb      	str	r3, [r7, #28]
 800cf60:	e00b      	b.n	800cf7a <rfm95_burst_writeReg+0x4c>
        buff[i] = writeVal[i-1];
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	441a      	add	r2, r3
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	69b9      	ldr	r1, [r7, #24]
 800cf6e:	440b      	add	r3, r1
 800cf70:	7812      	ldrb	r2, [r2, #0]
 800cf72:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < (length + 1); i++)
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	3301      	adds	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	7abb      	ldrb	r3, [r7, #10]
 800cf7c:	69fa      	ldr	r2, [r7, #28]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	ddef      	ble.n	800cf62 <rfm95_burst_writeReg+0x34>
    rfm95->NSEL(0);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	699b      	ldr	r3, [r3, #24]
 800cf86:	2000      	movs	r0, #0
 800cf88:	4798      	blx	r3
    rfm95->SPI_Write(buff, length + 1, SPI_TIMEOUT);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	7aba      	ldrb	r2, [r7, #10]
 800cf90:	3201      	adds	r2, #1
 800cf92:	b2d1      	uxtb	r1, r2
 800cf94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cf98:	69b8      	ldr	r0, [r7, #24]
 800cf9a:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	4798      	blx	r3
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	75fb      	strb	r3, [r7, #23]
    rfm95->NSEL(1);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	2001      	movs	r0, #1
 800cfac:	4798      	blx	r3
    free(buff);
 800cfae:	69b8      	ldr	r0, [r7, #24]
 800cfb0:	f000 f82a 	bl	800d008 <free>
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	7c1b      	ldrb	r3, [r3, #16]
 800cfb8:	7dfa      	ldrb	r2, [r7, #23]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d101      	bne.n	800cfc2 <rfm95_burst_writeReg+0x94>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e000      	b.n	800cfc4 <rfm95_burst_writeReg+0x96>
    else return RFM95_ERR_BURST_WRITE_REG;
 800cfc2:	2315      	movs	r3, #21
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3720      	adds	r7, #32
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <rfm95_fifo_readReg>:

uint8_t rfm95_fifo_readReg(RFM95_t* rfm95, uint8_t* readVal, uint8_t length)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	71fb      	strb	r3, [r7, #7]
    return rfm95_burst_readReg(rfm95, REG_FIFO, readVal, length);
 800cfda:	79fb      	ldrb	r3, [r7, #7]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	2100      	movs	r1, #0
 800cfe0:	68f8      	ldr	r0, [r7, #12]
 800cfe2:	f7ff ff63 	bl	800ceac <rfm95_burst_readReg>
 800cfe6:	4603      	mov	r3, r0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <atoi>:
 800cff0:	220a      	movs	r2, #10
 800cff2:	2100      	movs	r1, #0
 800cff4:	f000 b940 	b.w	800d278 <strtol>

0800cff8 <malloc>:
 800cff8:	4b02      	ldr	r3, [pc, #8]	; (800d004 <malloc+0xc>)
 800cffa:	4601      	mov	r1, r0
 800cffc:	6818      	ldr	r0, [r3, #0]
 800cffe:	f000 b82b 	b.w	800d058 <_malloc_r>
 800d002:	bf00      	nop
 800d004:	200000dc 	.word	0x200000dc

0800d008 <free>:
 800d008:	4b02      	ldr	r3, [pc, #8]	; (800d014 <free+0xc>)
 800d00a:	4601      	mov	r1, r0
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	f002 b915 	b.w	800f23c <_free_r>
 800d012:	bf00      	nop
 800d014:	200000dc 	.word	0x200000dc

0800d018 <sbrk_aligned>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	4e0e      	ldr	r6, [pc, #56]	; (800d054 <sbrk_aligned+0x3c>)
 800d01c:	460c      	mov	r4, r1
 800d01e:	6831      	ldr	r1, [r6, #0]
 800d020:	4605      	mov	r5, r0
 800d022:	b911      	cbnz	r1, 800d02a <sbrk_aligned+0x12>
 800d024:	f001 fa2a 	bl	800e47c <_sbrk_r>
 800d028:	6030      	str	r0, [r6, #0]
 800d02a:	4621      	mov	r1, r4
 800d02c:	4628      	mov	r0, r5
 800d02e:	f001 fa25 	bl	800e47c <_sbrk_r>
 800d032:	1c43      	adds	r3, r0, #1
 800d034:	d00a      	beq.n	800d04c <sbrk_aligned+0x34>
 800d036:	1cc4      	adds	r4, r0, #3
 800d038:	f024 0403 	bic.w	r4, r4, #3
 800d03c:	42a0      	cmp	r0, r4
 800d03e:	d007      	beq.n	800d050 <sbrk_aligned+0x38>
 800d040:	1a21      	subs	r1, r4, r0
 800d042:	4628      	mov	r0, r5
 800d044:	f001 fa1a 	bl	800e47c <_sbrk_r>
 800d048:	3001      	adds	r0, #1
 800d04a:	d101      	bne.n	800d050 <sbrk_aligned+0x38>
 800d04c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d050:	4620      	mov	r0, r4
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	20002d08 	.word	0x20002d08

0800d058 <_malloc_r>:
 800d058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05c:	1ccd      	adds	r5, r1, #3
 800d05e:	f025 0503 	bic.w	r5, r5, #3
 800d062:	3508      	adds	r5, #8
 800d064:	2d0c      	cmp	r5, #12
 800d066:	bf38      	it	cc
 800d068:	250c      	movcc	r5, #12
 800d06a:	2d00      	cmp	r5, #0
 800d06c:	4607      	mov	r7, r0
 800d06e:	db01      	blt.n	800d074 <_malloc_r+0x1c>
 800d070:	42a9      	cmp	r1, r5
 800d072:	d905      	bls.n	800d080 <_malloc_r+0x28>
 800d074:	230c      	movs	r3, #12
 800d076:	603b      	str	r3, [r7, #0]
 800d078:	2600      	movs	r6, #0
 800d07a:	4630      	mov	r0, r6
 800d07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d080:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d154 <_malloc_r+0xfc>
 800d084:	f000 f868 	bl	800d158 <__malloc_lock>
 800d088:	f8d8 3000 	ldr.w	r3, [r8]
 800d08c:	461c      	mov	r4, r3
 800d08e:	bb5c      	cbnz	r4, 800d0e8 <_malloc_r+0x90>
 800d090:	4629      	mov	r1, r5
 800d092:	4638      	mov	r0, r7
 800d094:	f7ff ffc0 	bl	800d018 <sbrk_aligned>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	4604      	mov	r4, r0
 800d09c:	d155      	bne.n	800d14a <_malloc_r+0xf2>
 800d09e:	f8d8 4000 	ldr.w	r4, [r8]
 800d0a2:	4626      	mov	r6, r4
 800d0a4:	2e00      	cmp	r6, #0
 800d0a6:	d145      	bne.n	800d134 <_malloc_r+0xdc>
 800d0a8:	2c00      	cmp	r4, #0
 800d0aa:	d048      	beq.n	800d13e <_malloc_r+0xe6>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	eb04 0903 	add.w	r9, r4, r3
 800d0b6:	f001 f9e1 	bl	800e47c <_sbrk_r>
 800d0ba:	4581      	cmp	r9, r0
 800d0bc:	d13f      	bne.n	800d13e <_malloc_r+0xe6>
 800d0be:	6821      	ldr	r1, [r4, #0]
 800d0c0:	1a6d      	subs	r5, r5, r1
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	f7ff ffa7 	bl	800d018 <sbrk_aligned>
 800d0ca:	3001      	adds	r0, #1
 800d0cc:	d037      	beq.n	800d13e <_malloc_r+0xe6>
 800d0ce:	6823      	ldr	r3, [r4, #0]
 800d0d0:	442b      	add	r3, r5
 800d0d2:	6023      	str	r3, [r4, #0]
 800d0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d038      	beq.n	800d14e <_malloc_r+0xf6>
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	42a2      	cmp	r2, r4
 800d0e0:	d12b      	bne.n	800d13a <_malloc_r+0xe2>
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	605a      	str	r2, [r3, #4]
 800d0e6:	e00f      	b.n	800d108 <_malloc_r+0xb0>
 800d0e8:	6822      	ldr	r2, [r4, #0]
 800d0ea:	1b52      	subs	r2, r2, r5
 800d0ec:	d41f      	bmi.n	800d12e <_malloc_r+0xd6>
 800d0ee:	2a0b      	cmp	r2, #11
 800d0f0:	d917      	bls.n	800d122 <_malloc_r+0xca>
 800d0f2:	1961      	adds	r1, r4, r5
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	6025      	str	r5, [r4, #0]
 800d0f8:	bf18      	it	ne
 800d0fa:	6059      	strne	r1, [r3, #4]
 800d0fc:	6863      	ldr	r3, [r4, #4]
 800d0fe:	bf08      	it	eq
 800d100:	f8c8 1000 	streq.w	r1, [r8]
 800d104:	5162      	str	r2, [r4, r5]
 800d106:	604b      	str	r3, [r1, #4]
 800d108:	4638      	mov	r0, r7
 800d10a:	f104 060b 	add.w	r6, r4, #11
 800d10e:	f000 f829 	bl	800d164 <__malloc_unlock>
 800d112:	f026 0607 	bic.w	r6, r6, #7
 800d116:	1d23      	adds	r3, r4, #4
 800d118:	1af2      	subs	r2, r6, r3
 800d11a:	d0ae      	beq.n	800d07a <_malloc_r+0x22>
 800d11c:	1b9b      	subs	r3, r3, r6
 800d11e:	50a3      	str	r3, [r4, r2]
 800d120:	e7ab      	b.n	800d07a <_malloc_r+0x22>
 800d122:	42a3      	cmp	r3, r4
 800d124:	6862      	ldr	r2, [r4, #4]
 800d126:	d1dd      	bne.n	800d0e4 <_malloc_r+0x8c>
 800d128:	f8c8 2000 	str.w	r2, [r8]
 800d12c:	e7ec      	b.n	800d108 <_malloc_r+0xb0>
 800d12e:	4623      	mov	r3, r4
 800d130:	6864      	ldr	r4, [r4, #4]
 800d132:	e7ac      	b.n	800d08e <_malloc_r+0x36>
 800d134:	4634      	mov	r4, r6
 800d136:	6876      	ldr	r6, [r6, #4]
 800d138:	e7b4      	b.n	800d0a4 <_malloc_r+0x4c>
 800d13a:	4613      	mov	r3, r2
 800d13c:	e7cc      	b.n	800d0d8 <_malloc_r+0x80>
 800d13e:	230c      	movs	r3, #12
 800d140:	603b      	str	r3, [r7, #0]
 800d142:	4638      	mov	r0, r7
 800d144:	f000 f80e 	bl	800d164 <__malloc_unlock>
 800d148:	e797      	b.n	800d07a <_malloc_r+0x22>
 800d14a:	6025      	str	r5, [r4, #0]
 800d14c:	e7dc      	b.n	800d108 <_malloc_r+0xb0>
 800d14e:	605b      	str	r3, [r3, #4]
 800d150:	deff      	udf	#255	; 0xff
 800d152:	bf00      	nop
 800d154:	20002d04 	.word	0x20002d04

0800d158 <__malloc_lock>:
 800d158:	4801      	ldr	r0, [pc, #4]	; (800d160 <__malloc_lock+0x8>)
 800d15a:	f001 b9dc 	b.w	800e516 <__retarget_lock_acquire_recursive>
 800d15e:	bf00      	nop
 800d160:	20002e4c 	.word	0x20002e4c

0800d164 <__malloc_unlock>:
 800d164:	4801      	ldr	r0, [pc, #4]	; (800d16c <__malloc_unlock+0x8>)
 800d166:	f001 b9d7 	b.w	800e518 <__retarget_lock_release_recursive>
 800d16a:	bf00      	nop
 800d16c:	20002e4c 	.word	0x20002e4c

0800d170 <_strtol_l.constprop.0>:
 800d170:	2b01      	cmp	r3, #1
 800d172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d176:	d001      	beq.n	800d17c <_strtol_l.constprop.0+0xc>
 800d178:	2b24      	cmp	r3, #36	; 0x24
 800d17a:	d906      	bls.n	800d18a <_strtol_l.constprop.0+0x1a>
 800d17c:	f001 f9a0 	bl	800e4c0 <__errno>
 800d180:	2316      	movs	r3, #22
 800d182:	6003      	str	r3, [r0, #0]
 800d184:	2000      	movs	r0, #0
 800d186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d270 <_strtol_l.constprop.0+0x100>
 800d18e:	460d      	mov	r5, r1
 800d190:	462e      	mov	r6, r5
 800d192:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d196:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d19a:	f017 0708 	ands.w	r7, r7, #8
 800d19e:	d1f7      	bne.n	800d190 <_strtol_l.constprop.0+0x20>
 800d1a0:	2c2d      	cmp	r4, #45	; 0x2d
 800d1a2:	d132      	bne.n	800d20a <_strtol_l.constprop.0+0x9a>
 800d1a4:	782c      	ldrb	r4, [r5, #0]
 800d1a6:	2701      	movs	r7, #1
 800d1a8:	1cb5      	adds	r5, r6, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d05b      	beq.n	800d266 <_strtol_l.constprop.0+0xf6>
 800d1ae:	2b10      	cmp	r3, #16
 800d1b0:	d109      	bne.n	800d1c6 <_strtol_l.constprop.0+0x56>
 800d1b2:	2c30      	cmp	r4, #48	; 0x30
 800d1b4:	d107      	bne.n	800d1c6 <_strtol_l.constprop.0+0x56>
 800d1b6:	782c      	ldrb	r4, [r5, #0]
 800d1b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d1bc:	2c58      	cmp	r4, #88	; 0x58
 800d1be:	d14d      	bne.n	800d25c <_strtol_l.constprop.0+0xec>
 800d1c0:	786c      	ldrb	r4, [r5, #1]
 800d1c2:	2310      	movs	r3, #16
 800d1c4:	3502      	adds	r5, #2
 800d1c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d1ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d1ce:	f04f 0e00 	mov.w	lr, #0
 800d1d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800d1d6:	4676      	mov	r6, lr
 800d1d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800d1dc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d1e0:	f1bc 0f09 	cmp.w	ip, #9
 800d1e4:	d816      	bhi.n	800d214 <_strtol_l.constprop.0+0xa4>
 800d1e6:	4664      	mov	r4, ip
 800d1e8:	42a3      	cmp	r3, r4
 800d1ea:	dd24      	ble.n	800d236 <_strtol_l.constprop.0+0xc6>
 800d1ec:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d1f0:	d008      	beq.n	800d204 <_strtol_l.constprop.0+0x94>
 800d1f2:	45b1      	cmp	r9, r6
 800d1f4:	d31c      	bcc.n	800d230 <_strtol_l.constprop.0+0xc0>
 800d1f6:	d101      	bne.n	800d1fc <_strtol_l.constprop.0+0x8c>
 800d1f8:	45a2      	cmp	sl, r4
 800d1fa:	db19      	blt.n	800d230 <_strtol_l.constprop.0+0xc0>
 800d1fc:	fb06 4603 	mla	r6, r6, r3, r4
 800d200:	f04f 0e01 	mov.w	lr, #1
 800d204:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d208:	e7e8      	b.n	800d1dc <_strtol_l.constprop.0+0x6c>
 800d20a:	2c2b      	cmp	r4, #43	; 0x2b
 800d20c:	bf04      	itt	eq
 800d20e:	782c      	ldrbeq	r4, [r5, #0]
 800d210:	1cb5      	addeq	r5, r6, #2
 800d212:	e7ca      	b.n	800d1aa <_strtol_l.constprop.0+0x3a>
 800d214:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d218:	f1bc 0f19 	cmp.w	ip, #25
 800d21c:	d801      	bhi.n	800d222 <_strtol_l.constprop.0+0xb2>
 800d21e:	3c37      	subs	r4, #55	; 0x37
 800d220:	e7e2      	b.n	800d1e8 <_strtol_l.constprop.0+0x78>
 800d222:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d226:	f1bc 0f19 	cmp.w	ip, #25
 800d22a:	d804      	bhi.n	800d236 <_strtol_l.constprop.0+0xc6>
 800d22c:	3c57      	subs	r4, #87	; 0x57
 800d22e:	e7db      	b.n	800d1e8 <_strtol_l.constprop.0+0x78>
 800d230:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800d234:	e7e6      	b.n	800d204 <_strtol_l.constprop.0+0x94>
 800d236:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800d23a:	d105      	bne.n	800d248 <_strtol_l.constprop.0+0xd8>
 800d23c:	2322      	movs	r3, #34	; 0x22
 800d23e:	6003      	str	r3, [r0, #0]
 800d240:	4646      	mov	r6, r8
 800d242:	b942      	cbnz	r2, 800d256 <_strtol_l.constprop.0+0xe6>
 800d244:	4630      	mov	r0, r6
 800d246:	e79e      	b.n	800d186 <_strtol_l.constprop.0+0x16>
 800d248:	b107      	cbz	r7, 800d24c <_strtol_l.constprop.0+0xdc>
 800d24a:	4276      	negs	r6, r6
 800d24c:	2a00      	cmp	r2, #0
 800d24e:	d0f9      	beq.n	800d244 <_strtol_l.constprop.0+0xd4>
 800d250:	f1be 0f00 	cmp.w	lr, #0
 800d254:	d000      	beq.n	800d258 <_strtol_l.constprop.0+0xe8>
 800d256:	1e69      	subs	r1, r5, #1
 800d258:	6011      	str	r1, [r2, #0]
 800d25a:	e7f3      	b.n	800d244 <_strtol_l.constprop.0+0xd4>
 800d25c:	2430      	movs	r4, #48	; 0x30
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1b1      	bne.n	800d1c6 <_strtol_l.constprop.0+0x56>
 800d262:	2308      	movs	r3, #8
 800d264:	e7af      	b.n	800d1c6 <_strtol_l.constprop.0+0x56>
 800d266:	2c30      	cmp	r4, #48	; 0x30
 800d268:	d0a5      	beq.n	800d1b6 <_strtol_l.constprop.0+0x46>
 800d26a:	230a      	movs	r3, #10
 800d26c:	e7ab      	b.n	800d1c6 <_strtol_l.constprop.0+0x56>
 800d26e:	bf00      	nop
 800d270:	08012501 	.word	0x08012501

0800d274 <_strtol_r>:
 800d274:	f7ff bf7c 	b.w	800d170 <_strtol_l.constprop.0>

0800d278 <strtol>:
 800d278:	4613      	mov	r3, r2
 800d27a:	460a      	mov	r2, r1
 800d27c:	4601      	mov	r1, r0
 800d27e:	4802      	ldr	r0, [pc, #8]	; (800d288 <strtol+0x10>)
 800d280:	6800      	ldr	r0, [r0, #0]
 800d282:	f7ff bf75 	b.w	800d170 <_strtol_l.constprop.0>
 800d286:	bf00      	nop
 800d288:	200000dc 	.word	0x200000dc

0800d28c <__cvt>:
 800d28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d290:	ec55 4b10 	vmov	r4, r5, d0
 800d294:	2d00      	cmp	r5, #0
 800d296:	460e      	mov	r6, r1
 800d298:	4619      	mov	r1, r3
 800d29a:	462b      	mov	r3, r5
 800d29c:	bfbb      	ittet	lt
 800d29e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d2a2:	461d      	movlt	r5, r3
 800d2a4:	2300      	movge	r3, #0
 800d2a6:	232d      	movlt	r3, #45	; 0x2d
 800d2a8:	700b      	strb	r3, [r1, #0]
 800d2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d2b0:	4691      	mov	r9, r2
 800d2b2:	f023 0820 	bic.w	r8, r3, #32
 800d2b6:	bfbc      	itt	lt
 800d2b8:	4622      	movlt	r2, r4
 800d2ba:	4614      	movlt	r4, r2
 800d2bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2c0:	d005      	beq.n	800d2ce <__cvt+0x42>
 800d2c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d2c6:	d100      	bne.n	800d2ca <__cvt+0x3e>
 800d2c8:	3601      	adds	r6, #1
 800d2ca:	2102      	movs	r1, #2
 800d2cc:	e000      	b.n	800d2d0 <__cvt+0x44>
 800d2ce:	2103      	movs	r1, #3
 800d2d0:	ab03      	add	r3, sp, #12
 800d2d2:	9301      	str	r3, [sp, #4]
 800d2d4:	ab02      	add	r3, sp, #8
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	ec45 4b10 	vmov	d0, r4, r5
 800d2dc:	4653      	mov	r3, sl
 800d2de:	4632      	mov	r2, r6
 800d2e0:	f001 f9ba 	bl	800e658 <_dtoa_r>
 800d2e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	d102      	bne.n	800d2f2 <__cvt+0x66>
 800d2ec:	f019 0f01 	tst.w	r9, #1
 800d2f0:	d022      	beq.n	800d338 <__cvt+0xac>
 800d2f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d2f6:	eb07 0906 	add.w	r9, r7, r6
 800d2fa:	d110      	bne.n	800d31e <__cvt+0x92>
 800d2fc:	783b      	ldrb	r3, [r7, #0]
 800d2fe:	2b30      	cmp	r3, #48	; 0x30
 800d300:	d10a      	bne.n	800d318 <__cvt+0x8c>
 800d302:	2200      	movs	r2, #0
 800d304:	2300      	movs	r3, #0
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	f7f3 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800d30e:	b918      	cbnz	r0, 800d318 <__cvt+0x8c>
 800d310:	f1c6 0601 	rsb	r6, r6, #1
 800d314:	f8ca 6000 	str.w	r6, [sl]
 800d318:	f8da 3000 	ldr.w	r3, [sl]
 800d31c:	4499      	add	r9, r3
 800d31e:	2200      	movs	r2, #0
 800d320:	2300      	movs	r3, #0
 800d322:	4620      	mov	r0, r4
 800d324:	4629      	mov	r1, r5
 800d326:	f7f3 fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800d32a:	b108      	cbz	r0, 800d330 <__cvt+0xa4>
 800d32c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d330:	2230      	movs	r2, #48	; 0x30
 800d332:	9b03      	ldr	r3, [sp, #12]
 800d334:	454b      	cmp	r3, r9
 800d336:	d307      	bcc.n	800d348 <__cvt+0xbc>
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d33c:	1bdb      	subs	r3, r3, r7
 800d33e:	4638      	mov	r0, r7
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	b004      	add	sp, #16
 800d344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d348:	1c59      	adds	r1, r3, #1
 800d34a:	9103      	str	r1, [sp, #12]
 800d34c:	701a      	strb	r2, [r3, #0]
 800d34e:	e7f0      	b.n	800d332 <__cvt+0xa6>

0800d350 <__exponent>:
 800d350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d352:	4603      	mov	r3, r0
 800d354:	2900      	cmp	r1, #0
 800d356:	bfb8      	it	lt
 800d358:	4249      	neglt	r1, r1
 800d35a:	f803 2b02 	strb.w	r2, [r3], #2
 800d35e:	bfb4      	ite	lt
 800d360:	222d      	movlt	r2, #45	; 0x2d
 800d362:	222b      	movge	r2, #43	; 0x2b
 800d364:	2909      	cmp	r1, #9
 800d366:	7042      	strb	r2, [r0, #1]
 800d368:	dd2a      	ble.n	800d3c0 <__exponent+0x70>
 800d36a:	f10d 0207 	add.w	r2, sp, #7
 800d36e:	4617      	mov	r7, r2
 800d370:	260a      	movs	r6, #10
 800d372:	4694      	mov	ip, r2
 800d374:	fb91 f5f6 	sdiv	r5, r1, r6
 800d378:	fb06 1415 	mls	r4, r6, r5, r1
 800d37c:	3430      	adds	r4, #48	; 0x30
 800d37e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d382:	460c      	mov	r4, r1
 800d384:	2c63      	cmp	r4, #99	; 0x63
 800d386:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d38a:	4629      	mov	r1, r5
 800d38c:	dcf1      	bgt.n	800d372 <__exponent+0x22>
 800d38e:	3130      	adds	r1, #48	; 0x30
 800d390:	f1ac 0402 	sub.w	r4, ip, #2
 800d394:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d398:	1c41      	adds	r1, r0, #1
 800d39a:	4622      	mov	r2, r4
 800d39c:	42ba      	cmp	r2, r7
 800d39e:	d30a      	bcc.n	800d3b6 <__exponent+0x66>
 800d3a0:	f10d 0209 	add.w	r2, sp, #9
 800d3a4:	eba2 020c 	sub.w	r2, r2, ip
 800d3a8:	42bc      	cmp	r4, r7
 800d3aa:	bf88      	it	hi
 800d3ac:	2200      	movhi	r2, #0
 800d3ae:	4413      	add	r3, r2
 800d3b0:	1a18      	subs	r0, r3, r0
 800d3b2:	b003      	add	sp, #12
 800d3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d3ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d3be:	e7ed      	b.n	800d39c <__exponent+0x4c>
 800d3c0:	2330      	movs	r3, #48	; 0x30
 800d3c2:	3130      	adds	r1, #48	; 0x30
 800d3c4:	7083      	strb	r3, [r0, #2]
 800d3c6:	70c1      	strb	r1, [r0, #3]
 800d3c8:	1d03      	adds	r3, r0, #4
 800d3ca:	e7f1      	b.n	800d3b0 <__exponent+0x60>

0800d3cc <_printf_float>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	ed2d 8b02 	vpush	{d8}
 800d3d4:	b08d      	sub	sp, #52	; 0x34
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d3dc:	4616      	mov	r6, r2
 800d3de:	461f      	mov	r7, r3
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	f001 f813 	bl	800e40c <_localeconv_r>
 800d3e6:	f8d0 a000 	ldr.w	sl, [r0]
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	f7f2 ff48 	bl	8000280 <strlen>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	9305      	str	r3, [sp, #20]
 800d3f8:	f8d8 3000 	ldr.w	r3, [r8]
 800d3fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d400:	3307      	adds	r3, #7
 800d402:	f023 0307 	bic.w	r3, r3, #7
 800d406:	f103 0208 	add.w	r2, r3, #8
 800d40a:	f8c8 2000 	str.w	r2, [r8]
 800d40e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d416:	9307      	str	r3, [sp, #28]
 800d418:	f8cd 8018 	str.w	r8, [sp, #24]
 800d41c:	ee08 0a10 	vmov	s16, r0
 800d420:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d428:	4b9e      	ldr	r3, [pc, #632]	; (800d6a4 <_printf_float+0x2d8>)
 800d42a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d42e:	f7f3 fb85 	bl	8000b3c <__aeabi_dcmpun>
 800d432:	bb88      	cbnz	r0, 800d498 <_printf_float+0xcc>
 800d434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d438:	4b9a      	ldr	r3, [pc, #616]	; (800d6a4 <_printf_float+0x2d8>)
 800d43a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d43e:	f7f3 fb5f 	bl	8000b00 <__aeabi_dcmple>
 800d442:	bb48      	cbnz	r0, 800d498 <_printf_float+0xcc>
 800d444:	2200      	movs	r2, #0
 800d446:	2300      	movs	r3, #0
 800d448:	4640      	mov	r0, r8
 800d44a:	4649      	mov	r1, r9
 800d44c:	f7f3 fb4e 	bl	8000aec <__aeabi_dcmplt>
 800d450:	b110      	cbz	r0, 800d458 <_printf_float+0x8c>
 800d452:	232d      	movs	r3, #45	; 0x2d
 800d454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d458:	4a93      	ldr	r2, [pc, #588]	; (800d6a8 <_printf_float+0x2dc>)
 800d45a:	4b94      	ldr	r3, [pc, #592]	; (800d6ac <_printf_float+0x2e0>)
 800d45c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d460:	bf94      	ite	ls
 800d462:	4690      	movls	r8, r2
 800d464:	4698      	movhi	r8, r3
 800d466:	2303      	movs	r3, #3
 800d468:	6123      	str	r3, [r4, #16]
 800d46a:	9b05      	ldr	r3, [sp, #20]
 800d46c:	f023 0304 	bic.w	r3, r3, #4
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	f04f 0900 	mov.w	r9, #0
 800d476:	9700      	str	r7, [sp, #0]
 800d478:	4633      	mov	r3, r6
 800d47a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f000 f9da 	bl	800d838 <_printf_common>
 800d484:	3001      	adds	r0, #1
 800d486:	f040 8090 	bne.w	800d5aa <_printf_float+0x1de>
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d48e:	b00d      	add	sp, #52	; 0x34
 800d490:	ecbd 8b02 	vpop	{d8}
 800d494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d498:	4642      	mov	r2, r8
 800d49a:	464b      	mov	r3, r9
 800d49c:	4640      	mov	r0, r8
 800d49e:	4649      	mov	r1, r9
 800d4a0:	f7f3 fb4c 	bl	8000b3c <__aeabi_dcmpun>
 800d4a4:	b140      	cbz	r0, 800d4b8 <_printf_float+0xec>
 800d4a6:	464b      	mov	r3, r9
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	bfbc      	itt	lt
 800d4ac:	232d      	movlt	r3, #45	; 0x2d
 800d4ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4b2:	4a7f      	ldr	r2, [pc, #508]	; (800d6b0 <_printf_float+0x2e4>)
 800d4b4:	4b7f      	ldr	r3, [pc, #508]	; (800d6b4 <_printf_float+0x2e8>)
 800d4b6:	e7d1      	b.n	800d45c <_printf_float+0x90>
 800d4b8:	6863      	ldr	r3, [r4, #4]
 800d4ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d4be:	9206      	str	r2, [sp, #24]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	d13f      	bne.n	800d544 <_printf_float+0x178>
 800d4c4:	2306      	movs	r3, #6
 800d4c6:	6063      	str	r3, [r4, #4]
 800d4c8:	9b05      	ldr	r3, [sp, #20]
 800d4ca:	6861      	ldr	r1, [r4, #4]
 800d4cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	9303      	str	r3, [sp, #12]
 800d4d4:	ab0a      	add	r3, sp, #40	; 0x28
 800d4d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d4da:	ab09      	add	r3, sp, #36	; 0x24
 800d4dc:	ec49 8b10 	vmov	d0, r8, r9
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	6022      	str	r2, [r4, #0]
 800d4e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f7ff fecf 	bl	800d28c <__cvt>
 800d4ee:	9b06      	ldr	r3, [sp, #24]
 800d4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4f2:	2b47      	cmp	r3, #71	; 0x47
 800d4f4:	4680      	mov	r8, r0
 800d4f6:	d108      	bne.n	800d50a <_printf_float+0x13e>
 800d4f8:	1cc8      	adds	r0, r1, #3
 800d4fa:	db02      	blt.n	800d502 <_printf_float+0x136>
 800d4fc:	6863      	ldr	r3, [r4, #4]
 800d4fe:	4299      	cmp	r1, r3
 800d500:	dd41      	ble.n	800d586 <_printf_float+0x1ba>
 800d502:	f1ab 0302 	sub.w	r3, fp, #2
 800d506:	fa5f fb83 	uxtb.w	fp, r3
 800d50a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d50e:	d820      	bhi.n	800d552 <_printf_float+0x186>
 800d510:	3901      	subs	r1, #1
 800d512:	465a      	mov	r2, fp
 800d514:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d518:	9109      	str	r1, [sp, #36]	; 0x24
 800d51a:	f7ff ff19 	bl	800d350 <__exponent>
 800d51e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d520:	1813      	adds	r3, r2, r0
 800d522:	2a01      	cmp	r2, #1
 800d524:	4681      	mov	r9, r0
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	dc02      	bgt.n	800d530 <_printf_float+0x164>
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	07d2      	lsls	r2, r2, #31
 800d52e:	d501      	bpl.n	800d534 <_printf_float+0x168>
 800d530:	3301      	adds	r3, #1
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d09c      	beq.n	800d476 <_printf_float+0xaa>
 800d53c:	232d      	movs	r3, #45	; 0x2d
 800d53e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d542:	e798      	b.n	800d476 <_printf_float+0xaa>
 800d544:	9a06      	ldr	r2, [sp, #24]
 800d546:	2a47      	cmp	r2, #71	; 0x47
 800d548:	d1be      	bne.n	800d4c8 <_printf_float+0xfc>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1bc      	bne.n	800d4c8 <_printf_float+0xfc>
 800d54e:	2301      	movs	r3, #1
 800d550:	e7b9      	b.n	800d4c6 <_printf_float+0xfa>
 800d552:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d556:	d118      	bne.n	800d58a <_printf_float+0x1be>
 800d558:	2900      	cmp	r1, #0
 800d55a:	6863      	ldr	r3, [r4, #4]
 800d55c:	dd0b      	ble.n	800d576 <_printf_float+0x1aa>
 800d55e:	6121      	str	r1, [r4, #16]
 800d560:	b913      	cbnz	r3, 800d568 <_printf_float+0x19c>
 800d562:	6822      	ldr	r2, [r4, #0]
 800d564:	07d0      	lsls	r0, r2, #31
 800d566:	d502      	bpl.n	800d56e <_printf_float+0x1a2>
 800d568:	3301      	adds	r3, #1
 800d56a:	440b      	add	r3, r1
 800d56c:	6123      	str	r3, [r4, #16]
 800d56e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d570:	f04f 0900 	mov.w	r9, #0
 800d574:	e7de      	b.n	800d534 <_printf_float+0x168>
 800d576:	b913      	cbnz	r3, 800d57e <_printf_float+0x1b2>
 800d578:	6822      	ldr	r2, [r4, #0]
 800d57a:	07d2      	lsls	r2, r2, #31
 800d57c:	d501      	bpl.n	800d582 <_printf_float+0x1b6>
 800d57e:	3302      	adds	r3, #2
 800d580:	e7f4      	b.n	800d56c <_printf_float+0x1a0>
 800d582:	2301      	movs	r3, #1
 800d584:	e7f2      	b.n	800d56c <_printf_float+0x1a0>
 800d586:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d58c:	4299      	cmp	r1, r3
 800d58e:	db05      	blt.n	800d59c <_printf_float+0x1d0>
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	6121      	str	r1, [r4, #16]
 800d594:	07d8      	lsls	r0, r3, #31
 800d596:	d5ea      	bpl.n	800d56e <_printf_float+0x1a2>
 800d598:	1c4b      	adds	r3, r1, #1
 800d59a:	e7e7      	b.n	800d56c <_printf_float+0x1a0>
 800d59c:	2900      	cmp	r1, #0
 800d59e:	bfd4      	ite	le
 800d5a0:	f1c1 0202 	rsble	r2, r1, #2
 800d5a4:	2201      	movgt	r2, #1
 800d5a6:	4413      	add	r3, r2
 800d5a8:	e7e0      	b.n	800d56c <_printf_float+0x1a0>
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	055a      	lsls	r2, r3, #21
 800d5ae:	d407      	bmi.n	800d5c0 <_printf_float+0x1f4>
 800d5b0:	6923      	ldr	r3, [r4, #16]
 800d5b2:	4642      	mov	r2, r8
 800d5b4:	4631      	mov	r1, r6
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	47b8      	blx	r7
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	d12c      	bne.n	800d618 <_printf_float+0x24c>
 800d5be:	e764      	b.n	800d48a <_printf_float+0xbe>
 800d5c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d5c4:	f240 80e0 	bls.w	800d788 <_printf_float+0x3bc>
 800d5c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f7f3 fa82 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	d034      	beq.n	800d642 <_printf_float+0x276>
 800d5d8:	4a37      	ldr	r2, [pc, #220]	; (800d6b8 <_printf_float+0x2ec>)
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	f43f af51 	beq.w	800d48a <_printf_float+0xbe>
 800d5e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	db02      	blt.n	800d5f6 <_printf_float+0x22a>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	07d8      	lsls	r0, r3, #31
 800d5f4:	d510      	bpl.n	800d618 <_printf_float+0x24c>
 800d5f6:	ee18 3a10 	vmov	r3, s16
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b8      	blx	r7
 800d602:	3001      	adds	r0, #1
 800d604:	f43f af41 	beq.w	800d48a <_printf_float+0xbe>
 800d608:	f04f 0800 	mov.w	r8, #0
 800d60c:	f104 091a 	add.w	r9, r4, #26
 800d610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d612:	3b01      	subs	r3, #1
 800d614:	4543      	cmp	r3, r8
 800d616:	dc09      	bgt.n	800d62c <_printf_float+0x260>
 800d618:	6823      	ldr	r3, [r4, #0]
 800d61a:	079b      	lsls	r3, r3, #30
 800d61c:	f100 8107 	bmi.w	800d82e <_printf_float+0x462>
 800d620:	68e0      	ldr	r0, [r4, #12]
 800d622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d624:	4298      	cmp	r0, r3
 800d626:	bfb8      	it	lt
 800d628:	4618      	movlt	r0, r3
 800d62a:	e730      	b.n	800d48e <_printf_float+0xc2>
 800d62c:	2301      	movs	r3, #1
 800d62e:	464a      	mov	r2, r9
 800d630:	4631      	mov	r1, r6
 800d632:	4628      	mov	r0, r5
 800d634:	47b8      	blx	r7
 800d636:	3001      	adds	r0, #1
 800d638:	f43f af27 	beq.w	800d48a <_printf_float+0xbe>
 800d63c:	f108 0801 	add.w	r8, r8, #1
 800d640:	e7e6      	b.n	800d610 <_printf_float+0x244>
 800d642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d644:	2b00      	cmp	r3, #0
 800d646:	dc39      	bgt.n	800d6bc <_printf_float+0x2f0>
 800d648:	4a1b      	ldr	r2, [pc, #108]	; (800d6b8 <_printf_float+0x2ec>)
 800d64a:	2301      	movs	r3, #1
 800d64c:	4631      	mov	r1, r6
 800d64e:	4628      	mov	r0, r5
 800d650:	47b8      	blx	r7
 800d652:	3001      	adds	r0, #1
 800d654:	f43f af19 	beq.w	800d48a <_printf_float+0xbe>
 800d658:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d65c:	4313      	orrs	r3, r2
 800d65e:	d102      	bne.n	800d666 <_printf_float+0x29a>
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	07d9      	lsls	r1, r3, #31
 800d664:	d5d8      	bpl.n	800d618 <_printf_float+0x24c>
 800d666:	ee18 3a10 	vmov	r3, s16
 800d66a:	4652      	mov	r2, sl
 800d66c:	4631      	mov	r1, r6
 800d66e:	4628      	mov	r0, r5
 800d670:	47b8      	blx	r7
 800d672:	3001      	adds	r0, #1
 800d674:	f43f af09 	beq.w	800d48a <_printf_float+0xbe>
 800d678:	f04f 0900 	mov.w	r9, #0
 800d67c:	f104 0a1a 	add.w	sl, r4, #26
 800d680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d682:	425b      	negs	r3, r3
 800d684:	454b      	cmp	r3, r9
 800d686:	dc01      	bgt.n	800d68c <_printf_float+0x2c0>
 800d688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d68a:	e792      	b.n	800d5b2 <_printf_float+0x1e6>
 800d68c:	2301      	movs	r3, #1
 800d68e:	4652      	mov	r2, sl
 800d690:	4631      	mov	r1, r6
 800d692:	4628      	mov	r0, r5
 800d694:	47b8      	blx	r7
 800d696:	3001      	adds	r0, #1
 800d698:	f43f aef7 	beq.w	800d48a <_printf_float+0xbe>
 800d69c:	f109 0901 	add.w	r9, r9, #1
 800d6a0:	e7ee      	b.n	800d680 <_printf_float+0x2b4>
 800d6a2:	bf00      	nop
 800d6a4:	7fefffff 	.word	0x7fefffff
 800d6a8:	08012601 	.word	0x08012601
 800d6ac:	08012605 	.word	0x08012605
 800d6b0:	08012609 	.word	0x08012609
 800d6b4:	0801260d 	.word	0x0801260d
 800d6b8:	08012611 	.word	0x08012611
 800d6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	bfa8      	it	ge
 800d6c4:	461a      	movge	r2, r3
 800d6c6:	2a00      	cmp	r2, #0
 800d6c8:	4691      	mov	r9, r2
 800d6ca:	dc37      	bgt.n	800d73c <_printf_float+0x370>
 800d6cc:	f04f 0b00 	mov.w	fp, #0
 800d6d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6d4:	f104 021a 	add.w	r2, r4, #26
 800d6d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6da:	9305      	str	r3, [sp, #20]
 800d6dc:	eba3 0309 	sub.w	r3, r3, r9
 800d6e0:	455b      	cmp	r3, fp
 800d6e2:	dc33      	bgt.n	800d74c <_printf_float+0x380>
 800d6e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	db3b      	blt.n	800d764 <_printf_float+0x398>
 800d6ec:	6823      	ldr	r3, [r4, #0]
 800d6ee:	07da      	lsls	r2, r3, #31
 800d6f0:	d438      	bmi.n	800d764 <_printf_float+0x398>
 800d6f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d6f6:	eba2 0903 	sub.w	r9, r2, r3
 800d6fa:	9b05      	ldr	r3, [sp, #20]
 800d6fc:	1ad2      	subs	r2, r2, r3
 800d6fe:	4591      	cmp	r9, r2
 800d700:	bfa8      	it	ge
 800d702:	4691      	movge	r9, r2
 800d704:	f1b9 0f00 	cmp.w	r9, #0
 800d708:	dc35      	bgt.n	800d776 <_printf_float+0x3aa>
 800d70a:	f04f 0800 	mov.w	r8, #0
 800d70e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d712:	f104 0a1a 	add.w	sl, r4, #26
 800d716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d71a:	1a9b      	subs	r3, r3, r2
 800d71c:	eba3 0309 	sub.w	r3, r3, r9
 800d720:	4543      	cmp	r3, r8
 800d722:	f77f af79 	ble.w	800d618 <_printf_float+0x24c>
 800d726:	2301      	movs	r3, #1
 800d728:	4652      	mov	r2, sl
 800d72a:	4631      	mov	r1, r6
 800d72c:	4628      	mov	r0, r5
 800d72e:	47b8      	blx	r7
 800d730:	3001      	adds	r0, #1
 800d732:	f43f aeaa 	beq.w	800d48a <_printf_float+0xbe>
 800d736:	f108 0801 	add.w	r8, r8, #1
 800d73a:	e7ec      	b.n	800d716 <_printf_float+0x34a>
 800d73c:	4613      	mov	r3, r2
 800d73e:	4631      	mov	r1, r6
 800d740:	4642      	mov	r2, r8
 800d742:	4628      	mov	r0, r5
 800d744:	47b8      	blx	r7
 800d746:	3001      	adds	r0, #1
 800d748:	d1c0      	bne.n	800d6cc <_printf_float+0x300>
 800d74a:	e69e      	b.n	800d48a <_printf_float+0xbe>
 800d74c:	2301      	movs	r3, #1
 800d74e:	4631      	mov	r1, r6
 800d750:	4628      	mov	r0, r5
 800d752:	9205      	str	r2, [sp, #20]
 800d754:	47b8      	blx	r7
 800d756:	3001      	adds	r0, #1
 800d758:	f43f ae97 	beq.w	800d48a <_printf_float+0xbe>
 800d75c:	9a05      	ldr	r2, [sp, #20]
 800d75e:	f10b 0b01 	add.w	fp, fp, #1
 800d762:	e7b9      	b.n	800d6d8 <_printf_float+0x30c>
 800d764:	ee18 3a10 	vmov	r3, s16
 800d768:	4652      	mov	r2, sl
 800d76a:	4631      	mov	r1, r6
 800d76c:	4628      	mov	r0, r5
 800d76e:	47b8      	blx	r7
 800d770:	3001      	adds	r0, #1
 800d772:	d1be      	bne.n	800d6f2 <_printf_float+0x326>
 800d774:	e689      	b.n	800d48a <_printf_float+0xbe>
 800d776:	9a05      	ldr	r2, [sp, #20]
 800d778:	464b      	mov	r3, r9
 800d77a:	4442      	add	r2, r8
 800d77c:	4631      	mov	r1, r6
 800d77e:	4628      	mov	r0, r5
 800d780:	47b8      	blx	r7
 800d782:	3001      	adds	r0, #1
 800d784:	d1c1      	bne.n	800d70a <_printf_float+0x33e>
 800d786:	e680      	b.n	800d48a <_printf_float+0xbe>
 800d788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d78a:	2a01      	cmp	r2, #1
 800d78c:	dc01      	bgt.n	800d792 <_printf_float+0x3c6>
 800d78e:	07db      	lsls	r3, r3, #31
 800d790:	d53a      	bpl.n	800d808 <_printf_float+0x43c>
 800d792:	2301      	movs	r3, #1
 800d794:	4642      	mov	r2, r8
 800d796:	4631      	mov	r1, r6
 800d798:	4628      	mov	r0, r5
 800d79a:	47b8      	blx	r7
 800d79c:	3001      	adds	r0, #1
 800d79e:	f43f ae74 	beq.w	800d48a <_printf_float+0xbe>
 800d7a2:	ee18 3a10 	vmov	r3, s16
 800d7a6:	4652      	mov	r2, sl
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	f43f ae6b 	beq.w	800d48a <_printf_float+0xbe>
 800d7b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d7c0:	f7f3 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d7c4:	b9d8      	cbnz	r0, 800d7fe <_printf_float+0x432>
 800d7c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d7ca:	f108 0201 	add.w	r2, r8, #1
 800d7ce:	4631      	mov	r1, r6
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	47b8      	blx	r7
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d10e      	bne.n	800d7f6 <_printf_float+0x42a>
 800d7d8:	e657      	b.n	800d48a <_printf_float+0xbe>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	4652      	mov	r2, sl
 800d7de:	4631      	mov	r1, r6
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	47b8      	blx	r7
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	f43f ae50 	beq.w	800d48a <_printf_float+0xbe>
 800d7ea:	f108 0801 	add.w	r8, r8, #1
 800d7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	4543      	cmp	r3, r8
 800d7f4:	dcf1      	bgt.n	800d7da <_printf_float+0x40e>
 800d7f6:	464b      	mov	r3, r9
 800d7f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d7fc:	e6da      	b.n	800d5b4 <_printf_float+0x1e8>
 800d7fe:	f04f 0800 	mov.w	r8, #0
 800d802:	f104 0a1a 	add.w	sl, r4, #26
 800d806:	e7f2      	b.n	800d7ee <_printf_float+0x422>
 800d808:	2301      	movs	r3, #1
 800d80a:	4642      	mov	r2, r8
 800d80c:	e7df      	b.n	800d7ce <_printf_float+0x402>
 800d80e:	2301      	movs	r3, #1
 800d810:	464a      	mov	r2, r9
 800d812:	4631      	mov	r1, r6
 800d814:	4628      	mov	r0, r5
 800d816:	47b8      	blx	r7
 800d818:	3001      	adds	r0, #1
 800d81a:	f43f ae36 	beq.w	800d48a <_printf_float+0xbe>
 800d81e:	f108 0801 	add.w	r8, r8, #1
 800d822:	68e3      	ldr	r3, [r4, #12]
 800d824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d826:	1a5b      	subs	r3, r3, r1
 800d828:	4543      	cmp	r3, r8
 800d82a:	dcf0      	bgt.n	800d80e <_printf_float+0x442>
 800d82c:	e6f8      	b.n	800d620 <_printf_float+0x254>
 800d82e:	f04f 0800 	mov.w	r8, #0
 800d832:	f104 0919 	add.w	r9, r4, #25
 800d836:	e7f4      	b.n	800d822 <_printf_float+0x456>

0800d838 <_printf_common>:
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	4616      	mov	r6, r2
 800d83e:	4699      	mov	r9, r3
 800d840:	688a      	ldr	r2, [r1, #8]
 800d842:	690b      	ldr	r3, [r1, #16]
 800d844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d848:	4293      	cmp	r3, r2
 800d84a:	bfb8      	it	lt
 800d84c:	4613      	movlt	r3, r2
 800d84e:	6033      	str	r3, [r6, #0]
 800d850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d854:	4607      	mov	r7, r0
 800d856:	460c      	mov	r4, r1
 800d858:	b10a      	cbz	r2, 800d85e <_printf_common+0x26>
 800d85a:	3301      	adds	r3, #1
 800d85c:	6033      	str	r3, [r6, #0]
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	0699      	lsls	r1, r3, #26
 800d862:	bf42      	ittt	mi
 800d864:	6833      	ldrmi	r3, [r6, #0]
 800d866:	3302      	addmi	r3, #2
 800d868:	6033      	strmi	r3, [r6, #0]
 800d86a:	6825      	ldr	r5, [r4, #0]
 800d86c:	f015 0506 	ands.w	r5, r5, #6
 800d870:	d106      	bne.n	800d880 <_printf_common+0x48>
 800d872:	f104 0a19 	add.w	sl, r4, #25
 800d876:	68e3      	ldr	r3, [r4, #12]
 800d878:	6832      	ldr	r2, [r6, #0]
 800d87a:	1a9b      	subs	r3, r3, r2
 800d87c:	42ab      	cmp	r3, r5
 800d87e:	dc26      	bgt.n	800d8ce <_printf_common+0x96>
 800d880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d884:	1e13      	subs	r3, r2, #0
 800d886:	6822      	ldr	r2, [r4, #0]
 800d888:	bf18      	it	ne
 800d88a:	2301      	movne	r3, #1
 800d88c:	0692      	lsls	r2, r2, #26
 800d88e:	d42b      	bmi.n	800d8e8 <_printf_common+0xb0>
 800d890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d894:	4649      	mov	r1, r9
 800d896:	4638      	mov	r0, r7
 800d898:	47c0      	blx	r8
 800d89a:	3001      	adds	r0, #1
 800d89c:	d01e      	beq.n	800d8dc <_printf_common+0xa4>
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	6922      	ldr	r2, [r4, #16]
 800d8a2:	f003 0306 	and.w	r3, r3, #6
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	bf02      	ittt	eq
 800d8aa:	68e5      	ldreq	r5, [r4, #12]
 800d8ac:	6833      	ldreq	r3, [r6, #0]
 800d8ae:	1aed      	subeq	r5, r5, r3
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	bf0c      	ite	eq
 800d8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8b8:	2500      	movne	r5, #0
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	bfc4      	itt	gt
 800d8be:	1a9b      	subgt	r3, r3, r2
 800d8c0:	18ed      	addgt	r5, r5, r3
 800d8c2:	2600      	movs	r6, #0
 800d8c4:	341a      	adds	r4, #26
 800d8c6:	42b5      	cmp	r5, r6
 800d8c8:	d11a      	bne.n	800d900 <_printf_common+0xc8>
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	e008      	b.n	800d8e0 <_printf_common+0xa8>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	4649      	mov	r1, r9
 800d8d4:	4638      	mov	r0, r7
 800d8d6:	47c0      	blx	r8
 800d8d8:	3001      	adds	r0, #1
 800d8da:	d103      	bne.n	800d8e4 <_printf_common+0xac>
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e4:	3501      	adds	r5, #1
 800d8e6:	e7c6      	b.n	800d876 <_printf_common+0x3e>
 800d8e8:	18e1      	adds	r1, r4, r3
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	2030      	movs	r0, #48	; 0x30
 800d8ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8f2:	4422      	add	r2, r4
 800d8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8fc:	3302      	adds	r3, #2
 800d8fe:	e7c7      	b.n	800d890 <_printf_common+0x58>
 800d900:	2301      	movs	r3, #1
 800d902:	4622      	mov	r2, r4
 800d904:	4649      	mov	r1, r9
 800d906:	4638      	mov	r0, r7
 800d908:	47c0      	blx	r8
 800d90a:	3001      	adds	r0, #1
 800d90c:	d0e6      	beq.n	800d8dc <_printf_common+0xa4>
 800d90e:	3601      	adds	r6, #1
 800d910:	e7d9      	b.n	800d8c6 <_printf_common+0x8e>
	...

0800d914 <_printf_i>:
 800d914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d918:	7e0f      	ldrb	r7, [r1, #24]
 800d91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d91c:	2f78      	cmp	r7, #120	; 0x78
 800d91e:	4691      	mov	r9, r2
 800d920:	4680      	mov	r8, r0
 800d922:	460c      	mov	r4, r1
 800d924:	469a      	mov	sl, r3
 800d926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d92a:	d807      	bhi.n	800d93c <_printf_i+0x28>
 800d92c:	2f62      	cmp	r7, #98	; 0x62
 800d92e:	d80a      	bhi.n	800d946 <_printf_i+0x32>
 800d930:	2f00      	cmp	r7, #0
 800d932:	f000 80d4 	beq.w	800dade <_printf_i+0x1ca>
 800d936:	2f58      	cmp	r7, #88	; 0x58
 800d938:	f000 80c0 	beq.w	800dabc <_printf_i+0x1a8>
 800d93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d944:	e03a      	b.n	800d9bc <_printf_i+0xa8>
 800d946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d94a:	2b15      	cmp	r3, #21
 800d94c:	d8f6      	bhi.n	800d93c <_printf_i+0x28>
 800d94e:	a101      	add	r1, pc, #4	; (adr r1, 800d954 <_printf_i+0x40>)
 800d950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d954:	0800d9ad 	.word	0x0800d9ad
 800d958:	0800d9c1 	.word	0x0800d9c1
 800d95c:	0800d93d 	.word	0x0800d93d
 800d960:	0800d93d 	.word	0x0800d93d
 800d964:	0800d93d 	.word	0x0800d93d
 800d968:	0800d93d 	.word	0x0800d93d
 800d96c:	0800d9c1 	.word	0x0800d9c1
 800d970:	0800d93d 	.word	0x0800d93d
 800d974:	0800d93d 	.word	0x0800d93d
 800d978:	0800d93d 	.word	0x0800d93d
 800d97c:	0800d93d 	.word	0x0800d93d
 800d980:	0800dac5 	.word	0x0800dac5
 800d984:	0800d9ed 	.word	0x0800d9ed
 800d988:	0800da7f 	.word	0x0800da7f
 800d98c:	0800d93d 	.word	0x0800d93d
 800d990:	0800d93d 	.word	0x0800d93d
 800d994:	0800dae7 	.word	0x0800dae7
 800d998:	0800d93d 	.word	0x0800d93d
 800d99c:	0800d9ed 	.word	0x0800d9ed
 800d9a0:	0800d93d 	.word	0x0800d93d
 800d9a4:	0800d93d 	.word	0x0800d93d
 800d9a8:	0800da87 	.word	0x0800da87
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	1d1a      	adds	r2, r3, #4
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	602a      	str	r2, [r5, #0]
 800d9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e09f      	b.n	800db00 <_printf_i+0x1ec>
 800d9c0:	6820      	ldr	r0, [r4, #0]
 800d9c2:	682b      	ldr	r3, [r5, #0]
 800d9c4:	0607      	lsls	r7, r0, #24
 800d9c6:	f103 0104 	add.w	r1, r3, #4
 800d9ca:	6029      	str	r1, [r5, #0]
 800d9cc:	d501      	bpl.n	800d9d2 <_printf_i+0xbe>
 800d9ce:	681e      	ldr	r6, [r3, #0]
 800d9d0:	e003      	b.n	800d9da <_printf_i+0xc6>
 800d9d2:	0646      	lsls	r6, r0, #25
 800d9d4:	d5fb      	bpl.n	800d9ce <_printf_i+0xba>
 800d9d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d9da:	2e00      	cmp	r6, #0
 800d9dc:	da03      	bge.n	800d9e6 <_printf_i+0xd2>
 800d9de:	232d      	movs	r3, #45	; 0x2d
 800d9e0:	4276      	negs	r6, r6
 800d9e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9e6:	485a      	ldr	r0, [pc, #360]	; (800db50 <_printf_i+0x23c>)
 800d9e8:	230a      	movs	r3, #10
 800d9ea:	e012      	b.n	800da12 <_printf_i+0xfe>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	6820      	ldr	r0, [r4, #0]
 800d9f0:	1d19      	adds	r1, r3, #4
 800d9f2:	6029      	str	r1, [r5, #0]
 800d9f4:	0605      	lsls	r5, r0, #24
 800d9f6:	d501      	bpl.n	800d9fc <_printf_i+0xe8>
 800d9f8:	681e      	ldr	r6, [r3, #0]
 800d9fa:	e002      	b.n	800da02 <_printf_i+0xee>
 800d9fc:	0641      	lsls	r1, r0, #25
 800d9fe:	d5fb      	bpl.n	800d9f8 <_printf_i+0xe4>
 800da00:	881e      	ldrh	r6, [r3, #0]
 800da02:	4853      	ldr	r0, [pc, #332]	; (800db50 <_printf_i+0x23c>)
 800da04:	2f6f      	cmp	r7, #111	; 0x6f
 800da06:	bf0c      	ite	eq
 800da08:	2308      	moveq	r3, #8
 800da0a:	230a      	movne	r3, #10
 800da0c:	2100      	movs	r1, #0
 800da0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da12:	6865      	ldr	r5, [r4, #4]
 800da14:	60a5      	str	r5, [r4, #8]
 800da16:	2d00      	cmp	r5, #0
 800da18:	bfa2      	ittt	ge
 800da1a:	6821      	ldrge	r1, [r4, #0]
 800da1c:	f021 0104 	bicge.w	r1, r1, #4
 800da20:	6021      	strge	r1, [r4, #0]
 800da22:	b90e      	cbnz	r6, 800da28 <_printf_i+0x114>
 800da24:	2d00      	cmp	r5, #0
 800da26:	d04b      	beq.n	800dac0 <_printf_i+0x1ac>
 800da28:	4615      	mov	r5, r2
 800da2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800da2e:	fb03 6711 	mls	r7, r3, r1, r6
 800da32:	5dc7      	ldrb	r7, [r0, r7]
 800da34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da38:	4637      	mov	r7, r6
 800da3a:	42bb      	cmp	r3, r7
 800da3c:	460e      	mov	r6, r1
 800da3e:	d9f4      	bls.n	800da2a <_printf_i+0x116>
 800da40:	2b08      	cmp	r3, #8
 800da42:	d10b      	bne.n	800da5c <_printf_i+0x148>
 800da44:	6823      	ldr	r3, [r4, #0]
 800da46:	07de      	lsls	r6, r3, #31
 800da48:	d508      	bpl.n	800da5c <_printf_i+0x148>
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	6861      	ldr	r1, [r4, #4]
 800da4e:	4299      	cmp	r1, r3
 800da50:	bfde      	ittt	le
 800da52:	2330      	movle	r3, #48	; 0x30
 800da54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800da5c:	1b52      	subs	r2, r2, r5
 800da5e:	6122      	str	r2, [r4, #16]
 800da60:	f8cd a000 	str.w	sl, [sp]
 800da64:	464b      	mov	r3, r9
 800da66:	aa03      	add	r2, sp, #12
 800da68:	4621      	mov	r1, r4
 800da6a:	4640      	mov	r0, r8
 800da6c:	f7ff fee4 	bl	800d838 <_printf_common>
 800da70:	3001      	adds	r0, #1
 800da72:	d14a      	bne.n	800db0a <_printf_i+0x1f6>
 800da74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da78:	b004      	add	sp, #16
 800da7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	f043 0320 	orr.w	r3, r3, #32
 800da84:	6023      	str	r3, [r4, #0]
 800da86:	4833      	ldr	r0, [pc, #204]	; (800db54 <_printf_i+0x240>)
 800da88:	2778      	movs	r7, #120	; 0x78
 800da8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	6829      	ldr	r1, [r5, #0]
 800da92:	061f      	lsls	r7, r3, #24
 800da94:	f851 6b04 	ldr.w	r6, [r1], #4
 800da98:	d402      	bmi.n	800daa0 <_printf_i+0x18c>
 800da9a:	065f      	lsls	r7, r3, #25
 800da9c:	bf48      	it	mi
 800da9e:	b2b6      	uxthmi	r6, r6
 800daa0:	07df      	lsls	r7, r3, #31
 800daa2:	bf48      	it	mi
 800daa4:	f043 0320 	orrmi.w	r3, r3, #32
 800daa8:	6029      	str	r1, [r5, #0]
 800daaa:	bf48      	it	mi
 800daac:	6023      	strmi	r3, [r4, #0]
 800daae:	b91e      	cbnz	r6, 800dab8 <_printf_i+0x1a4>
 800dab0:	6823      	ldr	r3, [r4, #0]
 800dab2:	f023 0320 	bic.w	r3, r3, #32
 800dab6:	6023      	str	r3, [r4, #0]
 800dab8:	2310      	movs	r3, #16
 800daba:	e7a7      	b.n	800da0c <_printf_i+0xf8>
 800dabc:	4824      	ldr	r0, [pc, #144]	; (800db50 <_printf_i+0x23c>)
 800dabe:	e7e4      	b.n	800da8a <_printf_i+0x176>
 800dac0:	4615      	mov	r5, r2
 800dac2:	e7bd      	b.n	800da40 <_printf_i+0x12c>
 800dac4:	682b      	ldr	r3, [r5, #0]
 800dac6:	6826      	ldr	r6, [r4, #0]
 800dac8:	6961      	ldr	r1, [r4, #20]
 800daca:	1d18      	adds	r0, r3, #4
 800dacc:	6028      	str	r0, [r5, #0]
 800dace:	0635      	lsls	r5, r6, #24
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	d501      	bpl.n	800dad8 <_printf_i+0x1c4>
 800dad4:	6019      	str	r1, [r3, #0]
 800dad6:	e002      	b.n	800dade <_printf_i+0x1ca>
 800dad8:	0670      	lsls	r0, r6, #25
 800dada:	d5fb      	bpl.n	800dad4 <_printf_i+0x1c0>
 800dadc:	8019      	strh	r1, [r3, #0]
 800dade:	2300      	movs	r3, #0
 800dae0:	6123      	str	r3, [r4, #16]
 800dae2:	4615      	mov	r5, r2
 800dae4:	e7bc      	b.n	800da60 <_printf_i+0x14c>
 800dae6:	682b      	ldr	r3, [r5, #0]
 800dae8:	1d1a      	adds	r2, r3, #4
 800daea:	602a      	str	r2, [r5, #0]
 800daec:	681d      	ldr	r5, [r3, #0]
 800daee:	6862      	ldr	r2, [r4, #4]
 800daf0:	2100      	movs	r1, #0
 800daf2:	4628      	mov	r0, r5
 800daf4:	f7f2 fb74 	bl	80001e0 <memchr>
 800daf8:	b108      	cbz	r0, 800dafe <_printf_i+0x1ea>
 800dafa:	1b40      	subs	r0, r0, r5
 800dafc:	6060      	str	r0, [r4, #4]
 800dafe:	6863      	ldr	r3, [r4, #4]
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	2300      	movs	r3, #0
 800db04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db08:	e7aa      	b.n	800da60 <_printf_i+0x14c>
 800db0a:	6923      	ldr	r3, [r4, #16]
 800db0c:	462a      	mov	r2, r5
 800db0e:	4649      	mov	r1, r9
 800db10:	4640      	mov	r0, r8
 800db12:	47d0      	blx	sl
 800db14:	3001      	adds	r0, #1
 800db16:	d0ad      	beq.n	800da74 <_printf_i+0x160>
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	079b      	lsls	r3, r3, #30
 800db1c:	d413      	bmi.n	800db46 <_printf_i+0x232>
 800db1e:	68e0      	ldr	r0, [r4, #12]
 800db20:	9b03      	ldr	r3, [sp, #12]
 800db22:	4298      	cmp	r0, r3
 800db24:	bfb8      	it	lt
 800db26:	4618      	movlt	r0, r3
 800db28:	e7a6      	b.n	800da78 <_printf_i+0x164>
 800db2a:	2301      	movs	r3, #1
 800db2c:	4632      	mov	r2, r6
 800db2e:	4649      	mov	r1, r9
 800db30:	4640      	mov	r0, r8
 800db32:	47d0      	blx	sl
 800db34:	3001      	adds	r0, #1
 800db36:	d09d      	beq.n	800da74 <_printf_i+0x160>
 800db38:	3501      	adds	r5, #1
 800db3a:	68e3      	ldr	r3, [r4, #12]
 800db3c:	9903      	ldr	r1, [sp, #12]
 800db3e:	1a5b      	subs	r3, r3, r1
 800db40:	42ab      	cmp	r3, r5
 800db42:	dcf2      	bgt.n	800db2a <_printf_i+0x216>
 800db44:	e7eb      	b.n	800db1e <_printf_i+0x20a>
 800db46:	2500      	movs	r5, #0
 800db48:	f104 0619 	add.w	r6, r4, #25
 800db4c:	e7f5      	b.n	800db3a <_printf_i+0x226>
 800db4e:	bf00      	nop
 800db50:	08012613 	.word	0x08012613
 800db54:	08012624 	.word	0x08012624

0800db58 <_scanf_float>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	b087      	sub	sp, #28
 800db5e:	4617      	mov	r7, r2
 800db60:	9303      	str	r3, [sp, #12]
 800db62:	688b      	ldr	r3, [r1, #8]
 800db64:	1e5a      	subs	r2, r3, #1
 800db66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800db6a:	bf83      	ittte	hi
 800db6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800db70:	195b      	addhi	r3, r3, r5
 800db72:	9302      	strhi	r3, [sp, #8]
 800db74:	2300      	movls	r3, #0
 800db76:	bf86      	itte	hi
 800db78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800db7c:	608b      	strhi	r3, [r1, #8]
 800db7e:	9302      	strls	r3, [sp, #8]
 800db80:	680b      	ldr	r3, [r1, #0]
 800db82:	468b      	mov	fp, r1
 800db84:	2500      	movs	r5, #0
 800db86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800db8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800db8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800db92:	4680      	mov	r8, r0
 800db94:	460c      	mov	r4, r1
 800db96:	465e      	mov	r6, fp
 800db98:	46aa      	mov	sl, r5
 800db9a:	46a9      	mov	r9, r5
 800db9c:	9501      	str	r5, [sp, #4]
 800db9e:	68a2      	ldr	r2, [r4, #8]
 800dba0:	b152      	cbz	r2, 800dbb8 <_scanf_float+0x60>
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	2b4e      	cmp	r3, #78	; 0x4e
 800dba8:	d864      	bhi.n	800dc74 <_scanf_float+0x11c>
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	d83c      	bhi.n	800dc28 <_scanf_float+0xd0>
 800dbae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800dbb2:	b2c8      	uxtb	r0, r1
 800dbb4:	280e      	cmp	r0, #14
 800dbb6:	d93a      	bls.n	800dc2e <_scanf_float+0xd6>
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	d003      	beq.n	800dbc6 <_scanf_float+0x6e>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dbca:	f1ba 0f01 	cmp.w	sl, #1
 800dbce:	f200 8113 	bhi.w	800ddf8 <_scanf_float+0x2a0>
 800dbd2:	455e      	cmp	r6, fp
 800dbd4:	f200 8105 	bhi.w	800dde2 <_scanf_float+0x28a>
 800dbd8:	2501      	movs	r5, #1
 800dbda:	4628      	mov	r0, r5
 800dbdc:	b007      	add	sp, #28
 800dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800dbe6:	2a0d      	cmp	r2, #13
 800dbe8:	d8e6      	bhi.n	800dbb8 <_scanf_float+0x60>
 800dbea:	a101      	add	r1, pc, #4	; (adr r1, 800dbf0 <_scanf_float+0x98>)
 800dbec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dbf0:	0800dd2f 	.word	0x0800dd2f
 800dbf4:	0800dbb9 	.word	0x0800dbb9
 800dbf8:	0800dbb9 	.word	0x0800dbb9
 800dbfc:	0800dbb9 	.word	0x0800dbb9
 800dc00:	0800dd8f 	.word	0x0800dd8f
 800dc04:	0800dd67 	.word	0x0800dd67
 800dc08:	0800dbb9 	.word	0x0800dbb9
 800dc0c:	0800dbb9 	.word	0x0800dbb9
 800dc10:	0800dd3d 	.word	0x0800dd3d
 800dc14:	0800dbb9 	.word	0x0800dbb9
 800dc18:	0800dbb9 	.word	0x0800dbb9
 800dc1c:	0800dbb9 	.word	0x0800dbb9
 800dc20:	0800dbb9 	.word	0x0800dbb9
 800dc24:	0800dcf5 	.word	0x0800dcf5
 800dc28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dc2c:	e7db      	b.n	800dbe6 <_scanf_float+0x8e>
 800dc2e:	290e      	cmp	r1, #14
 800dc30:	d8c2      	bhi.n	800dbb8 <_scanf_float+0x60>
 800dc32:	a001      	add	r0, pc, #4	; (adr r0, 800dc38 <_scanf_float+0xe0>)
 800dc34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dc38:	0800dce7 	.word	0x0800dce7
 800dc3c:	0800dbb9 	.word	0x0800dbb9
 800dc40:	0800dce7 	.word	0x0800dce7
 800dc44:	0800dd7b 	.word	0x0800dd7b
 800dc48:	0800dbb9 	.word	0x0800dbb9
 800dc4c:	0800dc95 	.word	0x0800dc95
 800dc50:	0800dcd1 	.word	0x0800dcd1
 800dc54:	0800dcd1 	.word	0x0800dcd1
 800dc58:	0800dcd1 	.word	0x0800dcd1
 800dc5c:	0800dcd1 	.word	0x0800dcd1
 800dc60:	0800dcd1 	.word	0x0800dcd1
 800dc64:	0800dcd1 	.word	0x0800dcd1
 800dc68:	0800dcd1 	.word	0x0800dcd1
 800dc6c:	0800dcd1 	.word	0x0800dcd1
 800dc70:	0800dcd1 	.word	0x0800dcd1
 800dc74:	2b6e      	cmp	r3, #110	; 0x6e
 800dc76:	d809      	bhi.n	800dc8c <_scanf_float+0x134>
 800dc78:	2b60      	cmp	r3, #96	; 0x60
 800dc7a:	d8b2      	bhi.n	800dbe2 <_scanf_float+0x8a>
 800dc7c:	2b54      	cmp	r3, #84	; 0x54
 800dc7e:	d077      	beq.n	800dd70 <_scanf_float+0x218>
 800dc80:	2b59      	cmp	r3, #89	; 0x59
 800dc82:	d199      	bne.n	800dbb8 <_scanf_float+0x60>
 800dc84:	2d07      	cmp	r5, #7
 800dc86:	d197      	bne.n	800dbb8 <_scanf_float+0x60>
 800dc88:	2508      	movs	r5, #8
 800dc8a:	e029      	b.n	800dce0 <_scanf_float+0x188>
 800dc8c:	2b74      	cmp	r3, #116	; 0x74
 800dc8e:	d06f      	beq.n	800dd70 <_scanf_float+0x218>
 800dc90:	2b79      	cmp	r3, #121	; 0x79
 800dc92:	e7f6      	b.n	800dc82 <_scanf_float+0x12a>
 800dc94:	6821      	ldr	r1, [r4, #0]
 800dc96:	05c8      	lsls	r0, r1, #23
 800dc98:	d51a      	bpl.n	800dcd0 <_scanf_float+0x178>
 800dc9a:	9b02      	ldr	r3, [sp, #8]
 800dc9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800dca0:	6021      	str	r1, [r4, #0]
 800dca2:	f109 0901 	add.w	r9, r9, #1
 800dca6:	b11b      	cbz	r3, 800dcb0 <_scanf_float+0x158>
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	3201      	adds	r2, #1
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	60a2      	str	r2, [r4, #8]
 800dcb0:	68a3      	ldr	r3, [r4, #8]
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	60a3      	str	r3, [r4, #8]
 800dcb6:	6923      	ldr	r3, [r4, #16]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	6123      	str	r3, [r4, #16]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	607b      	str	r3, [r7, #4]
 800dcc4:	f340 8084 	ble.w	800ddd0 <_scanf_float+0x278>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	3301      	adds	r3, #1
 800dccc:	603b      	str	r3, [r7, #0]
 800dcce:	e766      	b.n	800db9e <_scanf_float+0x46>
 800dcd0:	eb1a 0f05 	cmn.w	sl, r5
 800dcd4:	f47f af70 	bne.w	800dbb8 <_scanf_float+0x60>
 800dcd8:	6822      	ldr	r2, [r4, #0]
 800dcda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800dcde:	6022      	str	r2, [r4, #0]
 800dce0:	f806 3b01 	strb.w	r3, [r6], #1
 800dce4:	e7e4      	b.n	800dcb0 <_scanf_float+0x158>
 800dce6:	6822      	ldr	r2, [r4, #0]
 800dce8:	0610      	lsls	r0, r2, #24
 800dcea:	f57f af65 	bpl.w	800dbb8 <_scanf_float+0x60>
 800dcee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dcf2:	e7f4      	b.n	800dcde <_scanf_float+0x186>
 800dcf4:	f1ba 0f00 	cmp.w	sl, #0
 800dcf8:	d10e      	bne.n	800dd18 <_scanf_float+0x1c0>
 800dcfa:	f1b9 0f00 	cmp.w	r9, #0
 800dcfe:	d10e      	bne.n	800dd1e <_scanf_float+0x1c6>
 800dd00:	6822      	ldr	r2, [r4, #0]
 800dd02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dd06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dd0a:	d108      	bne.n	800dd1e <_scanf_float+0x1c6>
 800dd0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd10:	6022      	str	r2, [r4, #0]
 800dd12:	f04f 0a01 	mov.w	sl, #1
 800dd16:	e7e3      	b.n	800dce0 <_scanf_float+0x188>
 800dd18:	f1ba 0f02 	cmp.w	sl, #2
 800dd1c:	d055      	beq.n	800ddca <_scanf_float+0x272>
 800dd1e:	2d01      	cmp	r5, #1
 800dd20:	d002      	beq.n	800dd28 <_scanf_float+0x1d0>
 800dd22:	2d04      	cmp	r5, #4
 800dd24:	f47f af48 	bne.w	800dbb8 <_scanf_float+0x60>
 800dd28:	3501      	adds	r5, #1
 800dd2a:	b2ed      	uxtb	r5, r5
 800dd2c:	e7d8      	b.n	800dce0 <_scanf_float+0x188>
 800dd2e:	f1ba 0f01 	cmp.w	sl, #1
 800dd32:	f47f af41 	bne.w	800dbb8 <_scanf_float+0x60>
 800dd36:	f04f 0a02 	mov.w	sl, #2
 800dd3a:	e7d1      	b.n	800dce0 <_scanf_float+0x188>
 800dd3c:	b97d      	cbnz	r5, 800dd5e <_scanf_float+0x206>
 800dd3e:	f1b9 0f00 	cmp.w	r9, #0
 800dd42:	f47f af3c 	bne.w	800dbbe <_scanf_float+0x66>
 800dd46:	6822      	ldr	r2, [r4, #0]
 800dd48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dd4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dd50:	f47f af39 	bne.w	800dbc6 <_scanf_float+0x6e>
 800dd54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dd58:	6022      	str	r2, [r4, #0]
 800dd5a:	2501      	movs	r5, #1
 800dd5c:	e7c0      	b.n	800dce0 <_scanf_float+0x188>
 800dd5e:	2d03      	cmp	r5, #3
 800dd60:	d0e2      	beq.n	800dd28 <_scanf_float+0x1d0>
 800dd62:	2d05      	cmp	r5, #5
 800dd64:	e7de      	b.n	800dd24 <_scanf_float+0x1cc>
 800dd66:	2d02      	cmp	r5, #2
 800dd68:	f47f af26 	bne.w	800dbb8 <_scanf_float+0x60>
 800dd6c:	2503      	movs	r5, #3
 800dd6e:	e7b7      	b.n	800dce0 <_scanf_float+0x188>
 800dd70:	2d06      	cmp	r5, #6
 800dd72:	f47f af21 	bne.w	800dbb8 <_scanf_float+0x60>
 800dd76:	2507      	movs	r5, #7
 800dd78:	e7b2      	b.n	800dce0 <_scanf_float+0x188>
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	0591      	lsls	r1, r2, #22
 800dd7e:	f57f af1b 	bpl.w	800dbb8 <_scanf_float+0x60>
 800dd82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dd86:	6022      	str	r2, [r4, #0]
 800dd88:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd8c:	e7a8      	b.n	800dce0 <_scanf_float+0x188>
 800dd8e:	6822      	ldr	r2, [r4, #0]
 800dd90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dd94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dd98:	d006      	beq.n	800dda8 <_scanf_float+0x250>
 800dd9a:	0550      	lsls	r0, r2, #21
 800dd9c:	f57f af0c 	bpl.w	800dbb8 <_scanf_float+0x60>
 800dda0:	f1b9 0f00 	cmp.w	r9, #0
 800dda4:	f43f af0f 	beq.w	800dbc6 <_scanf_float+0x6e>
 800dda8:	0591      	lsls	r1, r2, #22
 800ddaa:	bf58      	it	pl
 800ddac:	9901      	ldrpl	r1, [sp, #4]
 800ddae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ddb2:	bf58      	it	pl
 800ddb4:	eba9 0101 	subpl.w	r1, r9, r1
 800ddb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ddbc:	bf58      	it	pl
 800ddbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ddc2:	6022      	str	r2, [r4, #0]
 800ddc4:	f04f 0900 	mov.w	r9, #0
 800ddc8:	e78a      	b.n	800dce0 <_scanf_float+0x188>
 800ddca:	f04f 0a03 	mov.w	sl, #3
 800ddce:	e787      	b.n	800dce0 <_scanf_float+0x188>
 800ddd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ddd4:	4639      	mov	r1, r7
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	4798      	blx	r3
 800ddda:	2800      	cmp	r0, #0
 800dddc:	f43f aedf 	beq.w	800db9e <_scanf_float+0x46>
 800dde0:	e6ea      	b.n	800dbb8 <_scanf_float+0x60>
 800dde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dde6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ddea:	463a      	mov	r2, r7
 800ddec:	4640      	mov	r0, r8
 800ddee:	4798      	blx	r3
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	3b01      	subs	r3, #1
 800ddf4:	6123      	str	r3, [r4, #16]
 800ddf6:	e6ec      	b.n	800dbd2 <_scanf_float+0x7a>
 800ddf8:	1e6b      	subs	r3, r5, #1
 800ddfa:	2b06      	cmp	r3, #6
 800ddfc:	d825      	bhi.n	800de4a <_scanf_float+0x2f2>
 800ddfe:	2d02      	cmp	r5, #2
 800de00:	d836      	bhi.n	800de70 <_scanf_float+0x318>
 800de02:	455e      	cmp	r6, fp
 800de04:	f67f aee8 	bls.w	800dbd8 <_scanf_float+0x80>
 800de08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de10:	463a      	mov	r2, r7
 800de12:	4640      	mov	r0, r8
 800de14:	4798      	blx	r3
 800de16:	6923      	ldr	r3, [r4, #16]
 800de18:	3b01      	subs	r3, #1
 800de1a:	6123      	str	r3, [r4, #16]
 800de1c:	e7f1      	b.n	800de02 <_scanf_float+0x2aa>
 800de1e:	9802      	ldr	r0, [sp, #8]
 800de20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800de28:	9002      	str	r0, [sp, #8]
 800de2a:	463a      	mov	r2, r7
 800de2c:	4640      	mov	r0, r8
 800de2e:	4798      	blx	r3
 800de30:	6923      	ldr	r3, [r4, #16]
 800de32:	3b01      	subs	r3, #1
 800de34:	6123      	str	r3, [r4, #16]
 800de36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800de3a:	fa5f fa8a 	uxtb.w	sl, sl
 800de3e:	f1ba 0f02 	cmp.w	sl, #2
 800de42:	d1ec      	bne.n	800de1e <_scanf_float+0x2c6>
 800de44:	3d03      	subs	r5, #3
 800de46:	b2ed      	uxtb	r5, r5
 800de48:	1b76      	subs	r6, r6, r5
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	05da      	lsls	r2, r3, #23
 800de4e:	d52f      	bpl.n	800deb0 <_scanf_float+0x358>
 800de50:	055b      	lsls	r3, r3, #21
 800de52:	d510      	bpl.n	800de76 <_scanf_float+0x31e>
 800de54:	455e      	cmp	r6, fp
 800de56:	f67f aebf 	bls.w	800dbd8 <_scanf_float+0x80>
 800de5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de62:	463a      	mov	r2, r7
 800de64:	4640      	mov	r0, r8
 800de66:	4798      	blx	r3
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	6123      	str	r3, [r4, #16]
 800de6e:	e7f1      	b.n	800de54 <_scanf_float+0x2fc>
 800de70:	46aa      	mov	sl, r5
 800de72:	9602      	str	r6, [sp, #8]
 800de74:	e7df      	b.n	800de36 <_scanf_float+0x2de>
 800de76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	2965      	cmp	r1, #101	; 0x65
 800de7e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800de82:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800de86:	6123      	str	r3, [r4, #16]
 800de88:	d00c      	beq.n	800dea4 <_scanf_float+0x34c>
 800de8a:	2945      	cmp	r1, #69	; 0x45
 800de8c:	d00a      	beq.n	800dea4 <_scanf_float+0x34c>
 800de8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800de92:	463a      	mov	r2, r7
 800de94:	4640      	mov	r0, r8
 800de96:	4798      	blx	r3
 800de98:	6923      	ldr	r3, [r4, #16]
 800de9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	1eb5      	subs	r5, r6, #2
 800dea2:	6123      	str	r3, [r4, #16]
 800dea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dea8:	463a      	mov	r2, r7
 800deaa:	4640      	mov	r0, r8
 800deac:	4798      	blx	r3
 800deae:	462e      	mov	r6, r5
 800deb0:	6825      	ldr	r5, [r4, #0]
 800deb2:	f015 0510 	ands.w	r5, r5, #16
 800deb6:	d158      	bne.n	800df6a <_scanf_float+0x412>
 800deb8:	7035      	strb	r5, [r6, #0]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dec4:	d11c      	bne.n	800df00 <_scanf_float+0x3a8>
 800dec6:	9b01      	ldr	r3, [sp, #4]
 800dec8:	454b      	cmp	r3, r9
 800deca:	eba3 0209 	sub.w	r2, r3, r9
 800dece:	d124      	bne.n	800df1a <_scanf_float+0x3c2>
 800ded0:	2200      	movs	r2, #0
 800ded2:	4659      	mov	r1, fp
 800ded4:	4640      	mov	r0, r8
 800ded6:	f002 fcb7 	bl	8010848 <_strtod_r>
 800deda:	9b03      	ldr	r3, [sp, #12]
 800dedc:	6821      	ldr	r1, [r4, #0]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f011 0f02 	tst.w	r1, #2
 800dee4:	ec57 6b10 	vmov	r6, r7, d0
 800dee8:	f103 0204 	add.w	r2, r3, #4
 800deec:	d020      	beq.n	800df30 <_scanf_float+0x3d8>
 800deee:	9903      	ldr	r1, [sp, #12]
 800def0:	600a      	str	r2, [r1, #0]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	e9c3 6700 	strd	r6, r7, [r3]
 800def8:	68e3      	ldr	r3, [r4, #12]
 800defa:	3301      	adds	r3, #1
 800defc:	60e3      	str	r3, [r4, #12]
 800defe:	e66c      	b.n	800dbda <_scanf_float+0x82>
 800df00:	9b04      	ldr	r3, [sp, #16]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0e4      	beq.n	800ded0 <_scanf_float+0x378>
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	230a      	movs	r3, #10
 800df0a:	462a      	mov	r2, r5
 800df0c:	3101      	adds	r1, #1
 800df0e:	4640      	mov	r0, r8
 800df10:	f7ff f9b0 	bl	800d274 <_strtol_r>
 800df14:	9b04      	ldr	r3, [sp, #16]
 800df16:	9e05      	ldr	r6, [sp, #20]
 800df18:	1ac2      	subs	r2, r0, r3
 800df1a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800df1e:	429e      	cmp	r6, r3
 800df20:	bf28      	it	cs
 800df22:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800df26:	4912      	ldr	r1, [pc, #72]	; (800df70 <_scanf_float+0x418>)
 800df28:	4630      	mov	r0, r6
 800df2a:	f000 f95d 	bl	800e1e8 <siprintf>
 800df2e:	e7cf      	b.n	800ded0 <_scanf_float+0x378>
 800df30:	f011 0f04 	tst.w	r1, #4
 800df34:	9903      	ldr	r1, [sp, #12]
 800df36:	600a      	str	r2, [r1, #0]
 800df38:	d1db      	bne.n	800def2 <_scanf_float+0x39a>
 800df3a:	f8d3 8000 	ldr.w	r8, [r3]
 800df3e:	ee10 2a10 	vmov	r2, s0
 800df42:	ee10 0a10 	vmov	r0, s0
 800df46:	463b      	mov	r3, r7
 800df48:	4639      	mov	r1, r7
 800df4a:	f7f2 fdf7 	bl	8000b3c <__aeabi_dcmpun>
 800df4e:	b128      	cbz	r0, 800df5c <_scanf_float+0x404>
 800df50:	4808      	ldr	r0, [pc, #32]	; (800df74 <_scanf_float+0x41c>)
 800df52:	f000 faf1 	bl	800e538 <nanf>
 800df56:	ed88 0a00 	vstr	s0, [r8]
 800df5a:	e7cd      	b.n	800def8 <_scanf_float+0x3a0>
 800df5c:	4630      	mov	r0, r6
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 fe4a 	bl	8000bf8 <__aeabi_d2f>
 800df64:	f8c8 0000 	str.w	r0, [r8]
 800df68:	e7c6      	b.n	800def8 <_scanf_float+0x3a0>
 800df6a:	2500      	movs	r5, #0
 800df6c:	e635      	b.n	800dbda <_scanf_float+0x82>
 800df6e:	bf00      	nop
 800df70:	08012635 	.word	0x08012635
 800df74:	080128c4 	.word	0x080128c4

0800df78 <std>:
 800df78:	2300      	movs	r3, #0
 800df7a:	b510      	push	{r4, lr}
 800df7c:	4604      	mov	r4, r0
 800df7e:	e9c0 3300 	strd	r3, r3, [r0]
 800df82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df86:	6083      	str	r3, [r0, #8]
 800df88:	8181      	strh	r1, [r0, #12]
 800df8a:	6643      	str	r3, [r0, #100]	; 0x64
 800df8c:	81c2      	strh	r2, [r0, #14]
 800df8e:	6183      	str	r3, [r0, #24]
 800df90:	4619      	mov	r1, r3
 800df92:	2208      	movs	r2, #8
 800df94:	305c      	adds	r0, #92	; 0x5c
 800df96:	f000 fa1f 	bl	800e3d8 <memset>
 800df9a:	4b0d      	ldr	r3, [pc, #52]	; (800dfd0 <std+0x58>)
 800df9c:	6263      	str	r3, [r4, #36]	; 0x24
 800df9e:	4b0d      	ldr	r3, [pc, #52]	; (800dfd4 <std+0x5c>)
 800dfa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfa2:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <std+0x60>)
 800dfa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfa6:	4b0d      	ldr	r3, [pc, #52]	; (800dfdc <std+0x64>)
 800dfa8:	6323      	str	r3, [r4, #48]	; 0x30
 800dfaa:	4b0d      	ldr	r3, [pc, #52]	; (800dfe0 <std+0x68>)
 800dfac:	6224      	str	r4, [r4, #32]
 800dfae:	429c      	cmp	r4, r3
 800dfb0:	d006      	beq.n	800dfc0 <std+0x48>
 800dfb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dfb6:	4294      	cmp	r4, r2
 800dfb8:	d002      	beq.n	800dfc0 <std+0x48>
 800dfba:	33d0      	adds	r3, #208	; 0xd0
 800dfbc:	429c      	cmp	r4, r3
 800dfbe:	d105      	bne.n	800dfcc <std+0x54>
 800dfc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc8:	f000 baa4 	b.w	800e514 <__retarget_lock_init_recursive>
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	bf00      	nop
 800dfd0:	0800e229 	.word	0x0800e229
 800dfd4:	0800e24b 	.word	0x0800e24b
 800dfd8:	0800e283 	.word	0x0800e283
 800dfdc:	0800e2a7 	.word	0x0800e2a7
 800dfe0:	20002d0c 	.word	0x20002d0c

0800dfe4 <stdio_exit_handler>:
 800dfe4:	4a02      	ldr	r2, [pc, #8]	; (800dff0 <stdio_exit_handler+0xc>)
 800dfe6:	4903      	ldr	r1, [pc, #12]	; (800dff4 <stdio_exit_handler+0x10>)
 800dfe8:	4803      	ldr	r0, [pc, #12]	; (800dff8 <stdio_exit_handler+0x14>)
 800dfea:	f000 b869 	b.w	800e0c0 <_fwalk_sglue>
 800dfee:	bf00      	nop
 800dff0:	20000084 	.word	0x20000084
 800dff4:	08010e99 	.word	0x08010e99
 800dff8:	20000090 	.word	0x20000090

0800dffc <cleanup_stdio>:
 800dffc:	6841      	ldr	r1, [r0, #4]
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <cleanup_stdio+0x34>)
 800e000:	4299      	cmp	r1, r3
 800e002:	b510      	push	{r4, lr}
 800e004:	4604      	mov	r4, r0
 800e006:	d001      	beq.n	800e00c <cleanup_stdio+0x10>
 800e008:	f002 ff46 	bl	8010e98 <_fflush_r>
 800e00c:	68a1      	ldr	r1, [r4, #8]
 800e00e:	4b09      	ldr	r3, [pc, #36]	; (800e034 <cleanup_stdio+0x38>)
 800e010:	4299      	cmp	r1, r3
 800e012:	d002      	beq.n	800e01a <cleanup_stdio+0x1e>
 800e014:	4620      	mov	r0, r4
 800e016:	f002 ff3f 	bl	8010e98 <_fflush_r>
 800e01a:	68e1      	ldr	r1, [r4, #12]
 800e01c:	4b06      	ldr	r3, [pc, #24]	; (800e038 <cleanup_stdio+0x3c>)
 800e01e:	4299      	cmp	r1, r3
 800e020:	d004      	beq.n	800e02c <cleanup_stdio+0x30>
 800e022:	4620      	mov	r0, r4
 800e024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e028:	f002 bf36 	b.w	8010e98 <_fflush_r>
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	bf00      	nop
 800e030:	20002d0c 	.word	0x20002d0c
 800e034:	20002d74 	.word	0x20002d74
 800e038:	20002ddc 	.word	0x20002ddc

0800e03c <global_stdio_init.part.0>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <global_stdio_init.part.0+0x30>)
 800e040:	4c0b      	ldr	r4, [pc, #44]	; (800e070 <global_stdio_init.part.0+0x34>)
 800e042:	4a0c      	ldr	r2, [pc, #48]	; (800e074 <global_stdio_init.part.0+0x38>)
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	4620      	mov	r0, r4
 800e048:	2200      	movs	r2, #0
 800e04a:	2104      	movs	r1, #4
 800e04c:	f7ff ff94 	bl	800df78 <std>
 800e050:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e054:	2201      	movs	r2, #1
 800e056:	2109      	movs	r1, #9
 800e058:	f7ff ff8e 	bl	800df78 <std>
 800e05c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e060:	2202      	movs	r2, #2
 800e062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e066:	2112      	movs	r1, #18
 800e068:	f7ff bf86 	b.w	800df78 <std>
 800e06c:	20002e44 	.word	0x20002e44
 800e070:	20002d0c 	.word	0x20002d0c
 800e074:	0800dfe5 	.word	0x0800dfe5

0800e078 <__sfp_lock_acquire>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__sfp_lock_acquire+0x8>)
 800e07a:	f000 ba4c 	b.w	800e516 <__retarget_lock_acquire_recursive>
 800e07e:	bf00      	nop
 800e080:	20002e4d 	.word	0x20002e4d

0800e084 <__sfp_lock_release>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__sfp_lock_release+0x8>)
 800e086:	f000 ba47 	b.w	800e518 <__retarget_lock_release_recursive>
 800e08a:	bf00      	nop
 800e08c:	20002e4d 	.word	0x20002e4d

0800e090 <__sinit>:
 800e090:	b510      	push	{r4, lr}
 800e092:	4604      	mov	r4, r0
 800e094:	f7ff fff0 	bl	800e078 <__sfp_lock_acquire>
 800e098:	6a23      	ldr	r3, [r4, #32]
 800e09a:	b11b      	cbz	r3, 800e0a4 <__sinit+0x14>
 800e09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0a0:	f7ff bff0 	b.w	800e084 <__sfp_lock_release>
 800e0a4:	4b04      	ldr	r3, [pc, #16]	; (800e0b8 <__sinit+0x28>)
 800e0a6:	6223      	str	r3, [r4, #32]
 800e0a8:	4b04      	ldr	r3, [pc, #16]	; (800e0bc <__sinit+0x2c>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1f5      	bne.n	800e09c <__sinit+0xc>
 800e0b0:	f7ff ffc4 	bl	800e03c <global_stdio_init.part.0>
 800e0b4:	e7f2      	b.n	800e09c <__sinit+0xc>
 800e0b6:	bf00      	nop
 800e0b8:	0800dffd 	.word	0x0800dffd
 800e0bc:	20002e44 	.word	0x20002e44

0800e0c0 <_fwalk_sglue>:
 800e0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c4:	4607      	mov	r7, r0
 800e0c6:	4688      	mov	r8, r1
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0d0:	f1b9 0901 	subs.w	r9, r9, #1
 800e0d4:	d505      	bpl.n	800e0e2 <_fwalk_sglue+0x22>
 800e0d6:	6824      	ldr	r4, [r4, #0]
 800e0d8:	2c00      	cmp	r4, #0
 800e0da:	d1f7      	bne.n	800e0cc <_fwalk_sglue+0xc>
 800e0dc:	4630      	mov	r0, r6
 800e0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e2:	89ab      	ldrh	r3, [r5, #12]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d907      	bls.n	800e0f8 <_fwalk_sglue+0x38>
 800e0e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	d003      	beq.n	800e0f8 <_fwalk_sglue+0x38>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	47c0      	blx	r8
 800e0f6:	4306      	orrs	r6, r0
 800e0f8:	3568      	adds	r5, #104	; 0x68
 800e0fa:	e7e9      	b.n	800e0d0 <_fwalk_sglue+0x10>

0800e0fc <iprintf>:
 800e0fc:	b40f      	push	{r0, r1, r2, r3}
 800e0fe:	b507      	push	{r0, r1, r2, lr}
 800e100:	4906      	ldr	r1, [pc, #24]	; (800e11c <iprintf+0x20>)
 800e102:	ab04      	add	r3, sp, #16
 800e104:	6808      	ldr	r0, [r1, #0]
 800e106:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10a:	6881      	ldr	r1, [r0, #8]
 800e10c:	9301      	str	r3, [sp, #4]
 800e10e:	f002 fd23 	bl	8010b58 <_vfiprintf_r>
 800e112:	b003      	add	sp, #12
 800e114:	f85d eb04 	ldr.w	lr, [sp], #4
 800e118:	b004      	add	sp, #16
 800e11a:	4770      	bx	lr
 800e11c:	200000dc 	.word	0x200000dc

0800e120 <putchar>:
 800e120:	4b02      	ldr	r3, [pc, #8]	; (800e12c <putchar+0xc>)
 800e122:	4601      	mov	r1, r0
 800e124:	6818      	ldr	r0, [r3, #0]
 800e126:	6882      	ldr	r2, [r0, #8]
 800e128:	f002 bf40 	b.w	8010fac <_putc_r>
 800e12c:	200000dc 	.word	0x200000dc

0800e130 <_puts_r>:
 800e130:	6a03      	ldr	r3, [r0, #32]
 800e132:	b570      	push	{r4, r5, r6, lr}
 800e134:	6884      	ldr	r4, [r0, #8]
 800e136:	4605      	mov	r5, r0
 800e138:	460e      	mov	r6, r1
 800e13a:	b90b      	cbnz	r3, 800e140 <_puts_r+0x10>
 800e13c:	f7ff ffa8 	bl	800e090 <__sinit>
 800e140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e142:	07db      	lsls	r3, r3, #31
 800e144:	d405      	bmi.n	800e152 <_puts_r+0x22>
 800e146:	89a3      	ldrh	r3, [r4, #12]
 800e148:	0598      	lsls	r0, r3, #22
 800e14a:	d402      	bmi.n	800e152 <_puts_r+0x22>
 800e14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e14e:	f000 f9e2 	bl	800e516 <__retarget_lock_acquire_recursive>
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	0719      	lsls	r1, r3, #28
 800e156:	d513      	bpl.n	800e180 <_puts_r+0x50>
 800e158:	6923      	ldr	r3, [r4, #16]
 800e15a:	b18b      	cbz	r3, 800e180 <_puts_r+0x50>
 800e15c:	3e01      	subs	r6, #1
 800e15e:	68a3      	ldr	r3, [r4, #8]
 800e160:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e164:	3b01      	subs	r3, #1
 800e166:	60a3      	str	r3, [r4, #8]
 800e168:	b9e9      	cbnz	r1, 800e1a6 <_puts_r+0x76>
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	da2e      	bge.n	800e1cc <_puts_r+0x9c>
 800e16e:	4622      	mov	r2, r4
 800e170:	210a      	movs	r1, #10
 800e172:	4628      	mov	r0, r5
 800e174:	f000 f89b 	bl	800e2ae <__swbuf_r>
 800e178:	3001      	adds	r0, #1
 800e17a:	d007      	beq.n	800e18c <_puts_r+0x5c>
 800e17c:	250a      	movs	r5, #10
 800e17e:	e007      	b.n	800e190 <_puts_r+0x60>
 800e180:	4621      	mov	r1, r4
 800e182:	4628      	mov	r0, r5
 800e184:	f000 f8d0 	bl	800e328 <__swsetup_r>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d0e7      	beq.n	800e15c <_puts_r+0x2c>
 800e18c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e192:	07da      	lsls	r2, r3, #31
 800e194:	d405      	bmi.n	800e1a2 <_puts_r+0x72>
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	059b      	lsls	r3, r3, #22
 800e19a:	d402      	bmi.n	800e1a2 <_puts_r+0x72>
 800e19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e19e:	f000 f9bb 	bl	800e518 <__retarget_lock_release_recursive>
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	bd70      	pop	{r4, r5, r6, pc}
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	da04      	bge.n	800e1b4 <_puts_r+0x84>
 800e1aa:	69a2      	ldr	r2, [r4, #24]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	dc06      	bgt.n	800e1be <_puts_r+0x8e>
 800e1b0:	290a      	cmp	r1, #10
 800e1b2:	d004      	beq.n	800e1be <_puts_r+0x8e>
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	1c5a      	adds	r2, r3, #1
 800e1b8:	6022      	str	r2, [r4, #0]
 800e1ba:	7019      	strb	r1, [r3, #0]
 800e1bc:	e7cf      	b.n	800e15e <_puts_r+0x2e>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	f000 f874 	bl	800e2ae <__swbuf_r>
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d1c9      	bne.n	800e15e <_puts_r+0x2e>
 800e1ca:	e7df      	b.n	800e18c <_puts_r+0x5c>
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	250a      	movs	r5, #10
 800e1d0:	1c5a      	adds	r2, r3, #1
 800e1d2:	6022      	str	r2, [r4, #0]
 800e1d4:	701d      	strb	r5, [r3, #0]
 800e1d6:	e7db      	b.n	800e190 <_puts_r+0x60>

0800e1d8 <puts>:
 800e1d8:	4b02      	ldr	r3, [pc, #8]	; (800e1e4 <puts+0xc>)
 800e1da:	4601      	mov	r1, r0
 800e1dc:	6818      	ldr	r0, [r3, #0]
 800e1de:	f7ff bfa7 	b.w	800e130 <_puts_r>
 800e1e2:	bf00      	nop
 800e1e4:	200000dc 	.word	0x200000dc

0800e1e8 <siprintf>:
 800e1e8:	b40e      	push	{r1, r2, r3}
 800e1ea:	b500      	push	{lr}
 800e1ec:	b09c      	sub	sp, #112	; 0x70
 800e1ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e1f0:	9002      	str	r0, [sp, #8]
 800e1f2:	9006      	str	r0, [sp, #24]
 800e1f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1f8:	4809      	ldr	r0, [pc, #36]	; (800e220 <siprintf+0x38>)
 800e1fa:	9107      	str	r1, [sp, #28]
 800e1fc:	9104      	str	r1, [sp, #16]
 800e1fe:	4909      	ldr	r1, [pc, #36]	; (800e224 <siprintf+0x3c>)
 800e200:	f853 2b04 	ldr.w	r2, [r3], #4
 800e204:	9105      	str	r1, [sp, #20]
 800e206:	6800      	ldr	r0, [r0, #0]
 800e208:	9301      	str	r3, [sp, #4]
 800e20a:	a902      	add	r1, sp, #8
 800e20c:	f002 fb7c 	bl	8010908 <_svfiprintf_r>
 800e210:	9b02      	ldr	r3, [sp, #8]
 800e212:	2200      	movs	r2, #0
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	b01c      	add	sp, #112	; 0x70
 800e218:	f85d eb04 	ldr.w	lr, [sp], #4
 800e21c:	b003      	add	sp, #12
 800e21e:	4770      	bx	lr
 800e220:	200000dc 	.word	0x200000dc
 800e224:	ffff0208 	.word	0xffff0208

0800e228 <__sread>:
 800e228:	b510      	push	{r4, lr}
 800e22a:	460c      	mov	r4, r1
 800e22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e230:	f000 f912 	bl	800e458 <_read_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	bfab      	itete	ge
 800e238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e23a:	89a3      	ldrhlt	r3, [r4, #12]
 800e23c:	181b      	addge	r3, r3, r0
 800e23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e242:	bfac      	ite	ge
 800e244:	6563      	strge	r3, [r4, #84]	; 0x54
 800e246:	81a3      	strhlt	r3, [r4, #12]
 800e248:	bd10      	pop	{r4, pc}

0800e24a <__swrite>:
 800e24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e24e:	461f      	mov	r7, r3
 800e250:	898b      	ldrh	r3, [r1, #12]
 800e252:	05db      	lsls	r3, r3, #23
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	4616      	mov	r6, r2
 800e25a:	d505      	bpl.n	800e268 <__swrite+0x1e>
 800e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e260:	2302      	movs	r3, #2
 800e262:	2200      	movs	r2, #0
 800e264:	f000 f8e6 	bl	800e434 <_lseek_r>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e272:	81a3      	strh	r3, [r4, #12]
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	4628      	mov	r0, r5
 800e27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e27e:	f000 b90d 	b.w	800e49c <_write_r>

0800e282 <__sseek>:
 800e282:	b510      	push	{r4, lr}
 800e284:	460c      	mov	r4, r1
 800e286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e28a:	f000 f8d3 	bl	800e434 <_lseek_r>
 800e28e:	1c43      	adds	r3, r0, #1
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	bf15      	itete	ne
 800e294:	6560      	strne	r0, [r4, #84]	; 0x54
 800e296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e29e:	81a3      	strheq	r3, [r4, #12]
 800e2a0:	bf18      	it	ne
 800e2a2:	81a3      	strhne	r3, [r4, #12]
 800e2a4:	bd10      	pop	{r4, pc}

0800e2a6 <__sclose>:
 800e2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2aa:	f000 b8b3 	b.w	800e414 <_close_r>

0800e2ae <__swbuf_r>:
 800e2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b0:	460e      	mov	r6, r1
 800e2b2:	4614      	mov	r4, r2
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	b118      	cbz	r0, 800e2c0 <__swbuf_r+0x12>
 800e2b8:	6a03      	ldr	r3, [r0, #32]
 800e2ba:	b90b      	cbnz	r3, 800e2c0 <__swbuf_r+0x12>
 800e2bc:	f7ff fee8 	bl	800e090 <__sinit>
 800e2c0:	69a3      	ldr	r3, [r4, #24]
 800e2c2:	60a3      	str	r3, [r4, #8]
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	071a      	lsls	r2, r3, #28
 800e2c8:	d525      	bpl.n	800e316 <__swbuf_r+0x68>
 800e2ca:	6923      	ldr	r3, [r4, #16]
 800e2cc:	b31b      	cbz	r3, 800e316 <__swbuf_r+0x68>
 800e2ce:	6823      	ldr	r3, [r4, #0]
 800e2d0:	6922      	ldr	r2, [r4, #16]
 800e2d2:	1a98      	subs	r0, r3, r2
 800e2d4:	6963      	ldr	r3, [r4, #20]
 800e2d6:	b2f6      	uxtb	r6, r6
 800e2d8:	4283      	cmp	r3, r0
 800e2da:	4637      	mov	r7, r6
 800e2dc:	dc04      	bgt.n	800e2e8 <__swbuf_r+0x3a>
 800e2de:	4621      	mov	r1, r4
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	f002 fdd9 	bl	8010e98 <_fflush_r>
 800e2e6:	b9e0      	cbnz	r0, 800e322 <__swbuf_r+0x74>
 800e2e8:	68a3      	ldr	r3, [r4, #8]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	60a3      	str	r3, [r4, #8]
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	6022      	str	r2, [r4, #0]
 800e2f4:	701e      	strb	r6, [r3, #0]
 800e2f6:	6962      	ldr	r2, [r4, #20]
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d004      	beq.n	800e308 <__swbuf_r+0x5a>
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	07db      	lsls	r3, r3, #31
 800e302:	d506      	bpl.n	800e312 <__swbuf_r+0x64>
 800e304:	2e0a      	cmp	r6, #10
 800e306:	d104      	bne.n	800e312 <__swbuf_r+0x64>
 800e308:	4621      	mov	r1, r4
 800e30a:	4628      	mov	r0, r5
 800e30c:	f002 fdc4 	bl	8010e98 <_fflush_r>
 800e310:	b938      	cbnz	r0, 800e322 <__swbuf_r+0x74>
 800e312:	4638      	mov	r0, r7
 800e314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e316:	4621      	mov	r1, r4
 800e318:	4628      	mov	r0, r5
 800e31a:	f000 f805 	bl	800e328 <__swsetup_r>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0d5      	beq.n	800e2ce <__swbuf_r+0x20>
 800e322:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e326:	e7f4      	b.n	800e312 <__swbuf_r+0x64>

0800e328 <__swsetup_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4b2a      	ldr	r3, [pc, #168]	; (800e3d4 <__swsetup_r+0xac>)
 800e32c:	4605      	mov	r5, r0
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	460c      	mov	r4, r1
 800e332:	b118      	cbz	r0, 800e33c <__swsetup_r+0x14>
 800e334:	6a03      	ldr	r3, [r0, #32]
 800e336:	b90b      	cbnz	r3, 800e33c <__swsetup_r+0x14>
 800e338:	f7ff feaa 	bl	800e090 <__sinit>
 800e33c:	89a3      	ldrh	r3, [r4, #12]
 800e33e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e342:	0718      	lsls	r0, r3, #28
 800e344:	d422      	bmi.n	800e38c <__swsetup_r+0x64>
 800e346:	06d9      	lsls	r1, r3, #27
 800e348:	d407      	bmi.n	800e35a <__swsetup_r+0x32>
 800e34a:	2309      	movs	r3, #9
 800e34c:	602b      	str	r3, [r5, #0]
 800e34e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e352:	81a3      	strh	r3, [r4, #12]
 800e354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e358:	e034      	b.n	800e3c4 <__swsetup_r+0x9c>
 800e35a:	0758      	lsls	r0, r3, #29
 800e35c:	d512      	bpl.n	800e384 <__swsetup_r+0x5c>
 800e35e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e360:	b141      	cbz	r1, 800e374 <__swsetup_r+0x4c>
 800e362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e366:	4299      	cmp	r1, r3
 800e368:	d002      	beq.n	800e370 <__swsetup_r+0x48>
 800e36a:	4628      	mov	r0, r5
 800e36c:	f000 ff66 	bl	800f23c <_free_r>
 800e370:	2300      	movs	r3, #0
 800e372:	6363      	str	r3, [r4, #52]	; 0x34
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e37a:	81a3      	strh	r3, [r4, #12]
 800e37c:	2300      	movs	r3, #0
 800e37e:	6063      	str	r3, [r4, #4]
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	6023      	str	r3, [r4, #0]
 800e384:	89a3      	ldrh	r3, [r4, #12]
 800e386:	f043 0308 	orr.w	r3, r3, #8
 800e38a:	81a3      	strh	r3, [r4, #12]
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	b94b      	cbnz	r3, 800e3a4 <__swsetup_r+0x7c>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e39a:	d003      	beq.n	800e3a4 <__swsetup_r+0x7c>
 800e39c:	4621      	mov	r1, r4
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f002 fdc8 	bl	8010f34 <__smakebuf_r>
 800e3a4:	89a0      	ldrh	r0, [r4, #12]
 800e3a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3aa:	f010 0301 	ands.w	r3, r0, #1
 800e3ae:	d00a      	beq.n	800e3c6 <__swsetup_r+0x9e>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	60a3      	str	r3, [r4, #8]
 800e3b4:	6963      	ldr	r3, [r4, #20]
 800e3b6:	425b      	negs	r3, r3
 800e3b8:	61a3      	str	r3, [r4, #24]
 800e3ba:	6923      	ldr	r3, [r4, #16]
 800e3bc:	b943      	cbnz	r3, 800e3d0 <__swsetup_r+0xa8>
 800e3be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3c2:	d1c4      	bne.n	800e34e <__swsetup_r+0x26>
 800e3c4:	bd38      	pop	{r3, r4, r5, pc}
 800e3c6:	0781      	lsls	r1, r0, #30
 800e3c8:	bf58      	it	pl
 800e3ca:	6963      	ldrpl	r3, [r4, #20]
 800e3cc:	60a3      	str	r3, [r4, #8]
 800e3ce:	e7f4      	b.n	800e3ba <__swsetup_r+0x92>
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	e7f7      	b.n	800e3c4 <__swsetup_r+0x9c>
 800e3d4:	200000dc 	.word	0x200000dc

0800e3d8 <memset>:
 800e3d8:	4402      	add	r2, r0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d100      	bne.n	800e3e2 <memset+0xa>
 800e3e0:	4770      	bx	lr
 800e3e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e3e6:	e7f9      	b.n	800e3dc <memset+0x4>

0800e3e8 <strncmp>:
 800e3e8:	b510      	push	{r4, lr}
 800e3ea:	b16a      	cbz	r2, 800e408 <strncmp+0x20>
 800e3ec:	3901      	subs	r1, #1
 800e3ee:	1884      	adds	r4, r0, r2
 800e3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d103      	bne.n	800e404 <strncmp+0x1c>
 800e3fc:	42a0      	cmp	r0, r4
 800e3fe:	d001      	beq.n	800e404 <strncmp+0x1c>
 800e400:	2a00      	cmp	r2, #0
 800e402:	d1f5      	bne.n	800e3f0 <strncmp+0x8>
 800e404:	1ad0      	subs	r0, r2, r3
 800e406:	bd10      	pop	{r4, pc}
 800e408:	4610      	mov	r0, r2
 800e40a:	e7fc      	b.n	800e406 <strncmp+0x1e>

0800e40c <_localeconv_r>:
 800e40c:	4800      	ldr	r0, [pc, #0]	; (800e410 <_localeconv_r+0x4>)
 800e40e:	4770      	bx	lr
 800e410:	200001d0 	.word	0x200001d0

0800e414 <_close_r>:
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	4d06      	ldr	r5, [pc, #24]	; (800e430 <_close_r+0x1c>)
 800e418:	2300      	movs	r3, #0
 800e41a:	4604      	mov	r4, r0
 800e41c:	4608      	mov	r0, r1
 800e41e:	602b      	str	r3, [r5, #0]
 800e420:	f7f5 fcff 	bl	8003e22 <_close>
 800e424:	1c43      	adds	r3, r0, #1
 800e426:	d102      	bne.n	800e42e <_close_r+0x1a>
 800e428:	682b      	ldr	r3, [r5, #0]
 800e42a:	b103      	cbz	r3, 800e42e <_close_r+0x1a>
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	bd38      	pop	{r3, r4, r5, pc}
 800e430:	20002e48 	.word	0x20002e48

0800e434 <_lseek_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d07      	ldr	r5, [pc, #28]	; (800e454 <_lseek_r+0x20>)
 800e438:	4604      	mov	r4, r0
 800e43a:	4608      	mov	r0, r1
 800e43c:	4611      	mov	r1, r2
 800e43e:	2200      	movs	r2, #0
 800e440:	602a      	str	r2, [r5, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	f7f5 fd14 	bl	8003e70 <_lseek>
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	d102      	bne.n	800e452 <_lseek_r+0x1e>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	b103      	cbz	r3, 800e452 <_lseek_r+0x1e>
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	20002e48 	.word	0x20002e48

0800e458 <_read_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4d07      	ldr	r5, [pc, #28]	; (800e478 <_read_r+0x20>)
 800e45c:	4604      	mov	r4, r0
 800e45e:	4608      	mov	r0, r1
 800e460:	4611      	mov	r1, r2
 800e462:	2200      	movs	r2, #0
 800e464:	602a      	str	r2, [r5, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	f7f5 fca2 	bl	8003db0 <_read>
 800e46c:	1c43      	adds	r3, r0, #1
 800e46e:	d102      	bne.n	800e476 <_read_r+0x1e>
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	b103      	cbz	r3, 800e476 <_read_r+0x1e>
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	20002e48 	.word	0x20002e48

0800e47c <_sbrk_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d06      	ldr	r5, [pc, #24]	; (800e498 <_sbrk_r+0x1c>)
 800e480:	2300      	movs	r3, #0
 800e482:	4604      	mov	r4, r0
 800e484:	4608      	mov	r0, r1
 800e486:	602b      	str	r3, [r5, #0]
 800e488:	f7f5 fd00 	bl	8003e8c <_sbrk>
 800e48c:	1c43      	adds	r3, r0, #1
 800e48e:	d102      	bne.n	800e496 <_sbrk_r+0x1a>
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	b103      	cbz	r3, 800e496 <_sbrk_r+0x1a>
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	20002e48 	.word	0x20002e48

0800e49c <_write_r>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4d07      	ldr	r5, [pc, #28]	; (800e4bc <_write_r+0x20>)
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	602a      	str	r2, [r5, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f7f5 fc9d 	bl	8003dea <_write>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d102      	bne.n	800e4ba <_write_r+0x1e>
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	b103      	cbz	r3, 800e4ba <_write_r+0x1e>
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	20002e48 	.word	0x20002e48

0800e4c0 <__errno>:
 800e4c0:	4b01      	ldr	r3, [pc, #4]	; (800e4c8 <__errno+0x8>)
 800e4c2:	6818      	ldr	r0, [r3, #0]
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	200000dc 	.word	0x200000dc

0800e4cc <__libc_init_array>:
 800e4cc:	b570      	push	{r4, r5, r6, lr}
 800e4ce:	4d0d      	ldr	r5, [pc, #52]	; (800e504 <__libc_init_array+0x38>)
 800e4d0:	4c0d      	ldr	r4, [pc, #52]	; (800e508 <__libc_init_array+0x3c>)
 800e4d2:	1b64      	subs	r4, r4, r5
 800e4d4:	10a4      	asrs	r4, r4, #2
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	42a6      	cmp	r6, r4
 800e4da:	d109      	bne.n	800e4f0 <__libc_init_array+0x24>
 800e4dc:	4d0b      	ldr	r5, [pc, #44]	; (800e50c <__libc_init_array+0x40>)
 800e4de:	4c0c      	ldr	r4, [pc, #48]	; (800e510 <__libc_init_array+0x44>)
 800e4e0:	f003 fa1e 	bl	8011920 <_init>
 800e4e4:	1b64      	subs	r4, r4, r5
 800e4e6:	10a4      	asrs	r4, r4, #2
 800e4e8:	2600      	movs	r6, #0
 800e4ea:	42a6      	cmp	r6, r4
 800e4ec:	d105      	bne.n	800e4fa <__libc_init_array+0x2e>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4f4:	4798      	blx	r3
 800e4f6:	3601      	adds	r6, #1
 800e4f8:	e7ee      	b.n	800e4d8 <__libc_init_array+0xc>
 800e4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4fe:	4798      	blx	r3
 800e500:	3601      	adds	r6, #1
 800e502:	e7f2      	b.n	800e4ea <__libc_init_array+0x1e>
 800e504:	08012930 	.word	0x08012930
 800e508:	08012930 	.word	0x08012930
 800e50c:	08012930 	.word	0x08012930
 800e510:	08012934 	.word	0x08012934

0800e514 <__retarget_lock_init_recursive>:
 800e514:	4770      	bx	lr

0800e516 <__retarget_lock_acquire_recursive>:
 800e516:	4770      	bx	lr

0800e518 <__retarget_lock_release_recursive>:
 800e518:	4770      	bx	lr

0800e51a <memcpy>:
 800e51a:	440a      	add	r2, r1
 800e51c:	4291      	cmp	r1, r2
 800e51e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e522:	d100      	bne.n	800e526 <memcpy+0xc>
 800e524:	4770      	bx	lr
 800e526:	b510      	push	{r4, lr}
 800e528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e52c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e530:	4291      	cmp	r1, r2
 800e532:	d1f9      	bne.n	800e528 <memcpy+0xe>
 800e534:	bd10      	pop	{r4, pc}
	...

0800e538 <nanf>:
 800e538:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e540 <nanf+0x8>
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	7fc00000 	.word	0x7fc00000

0800e544 <quorem>:
 800e544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	6903      	ldr	r3, [r0, #16]
 800e54a:	690c      	ldr	r4, [r1, #16]
 800e54c:	42a3      	cmp	r3, r4
 800e54e:	4607      	mov	r7, r0
 800e550:	db7e      	blt.n	800e650 <quorem+0x10c>
 800e552:	3c01      	subs	r4, #1
 800e554:	f101 0814 	add.w	r8, r1, #20
 800e558:	f100 0514 	add.w	r5, r0, #20
 800e55c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e566:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e56a:	3301      	adds	r3, #1
 800e56c:	429a      	cmp	r2, r3
 800e56e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e572:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e576:	fbb2 f6f3 	udiv	r6, r2, r3
 800e57a:	d331      	bcc.n	800e5e0 <quorem+0x9c>
 800e57c:	f04f 0e00 	mov.w	lr, #0
 800e580:	4640      	mov	r0, r8
 800e582:	46ac      	mov	ip, r5
 800e584:	46f2      	mov	sl, lr
 800e586:	f850 2b04 	ldr.w	r2, [r0], #4
 800e58a:	b293      	uxth	r3, r2
 800e58c:	fb06 e303 	mla	r3, r6, r3, lr
 800e590:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e594:	0c1a      	lsrs	r2, r3, #16
 800e596:	b29b      	uxth	r3, r3
 800e598:	ebaa 0303 	sub.w	r3, sl, r3
 800e59c:	f8dc a000 	ldr.w	sl, [ip]
 800e5a0:	fa13 f38a 	uxtah	r3, r3, sl
 800e5a4:	fb06 220e 	mla	r2, r6, lr, r2
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	9b00      	ldr	r3, [sp, #0]
 800e5ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e5b0:	b292      	uxth	r2, r2
 800e5b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e5b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5be:	4581      	cmp	r9, r0
 800e5c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5c4:	f84c 3b04 	str.w	r3, [ip], #4
 800e5c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5cc:	d2db      	bcs.n	800e586 <quorem+0x42>
 800e5ce:	f855 300b 	ldr.w	r3, [r5, fp]
 800e5d2:	b92b      	cbnz	r3, 800e5e0 <quorem+0x9c>
 800e5d4:	9b01      	ldr	r3, [sp, #4]
 800e5d6:	3b04      	subs	r3, #4
 800e5d8:	429d      	cmp	r5, r3
 800e5da:	461a      	mov	r2, r3
 800e5dc:	d32c      	bcc.n	800e638 <quorem+0xf4>
 800e5de:	613c      	str	r4, [r7, #16]
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	f001 f93d 	bl	800f860 <__mcmp>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	db22      	blt.n	800e630 <quorem+0xec>
 800e5ea:	3601      	adds	r6, #1
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e5f4:	f8d1 c000 	ldr.w	ip, [r1]
 800e5f8:	b293      	uxth	r3, r2
 800e5fa:	1ac3      	subs	r3, r0, r3
 800e5fc:	0c12      	lsrs	r2, r2, #16
 800e5fe:	fa13 f38c 	uxtah	r3, r3, ip
 800e602:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e606:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e610:	45c1      	cmp	r9, r8
 800e612:	f841 3b04 	str.w	r3, [r1], #4
 800e616:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e61a:	d2e9      	bcs.n	800e5f0 <quorem+0xac>
 800e61c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e620:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e624:	b922      	cbnz	r2, 800e630 <quorem+0xec>
 800e626:	3b04      	subs	r3, #4
 800e628:	429d      	cmp	r5, r3
 800e62a:	461a      	mov	r2, r3
 800e62c:	d30a      	bcc.n	800e644 <quorem+0x100>
 800e62e:	613c      	str	r4, [r7, #16]
 800e630:	4630      	mov	r0, r6
 800e632:	b003      	add	sp, #12
 800e634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e638:	6812      	ldr	r2, [r2, #0]
 800e63a:	3b04      	subs	r3, #4
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	d1ce      	bne.n	800e5de <quorem+0x9a>
 800e640:	3c01      	subs	r4, #1
 800e642:	e7c9      	b.n	800e5d8 <quorem+0x94>
 800e644:	6812      	ldr	r2, [r2, #0]
 800e646:	3b04      	subs	r3, #4
 800e648:	2a00      	cmp	r2, #0
 800e64a:	d1f0      	bne.n	800e62e <quorem+0xea>
 800e64c:	3c01      	subs	r4, #1
 800e64e:	e7eb      	b.n	800e628 <quorem+0xe4>
 800e650:	2000      	movs	r0, #0
 800e652:	e7ee      	b.n	800e632 <quorem+0xee>
 800e654:	0000      	movs	r0, r0
	...

0800e658 <_dtoa_r>:
 800e658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e65c:	ed2d 8b04 	vpush	{d8-d9}
 800e660:	69c5      	ldr	r5, [r0, #28]
 800e662:	b093      	sub	sp, #76	; 0x4c
 800e664:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e668:	ec57 6b10 	vmov	r6, r7, d0
 800e66c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e670:	9107      	str	r1, [sp, #28]
 800e672:	4604      	mov	r4, r0
 800e674:	920a      	str	r2, [sp, #40]	; 0x28
 800e676:	930d      	str	r3, [sp, #52]	; 0x34
 800e678:	b975      	cbnz	r5, 800e698 <_dtoa_r+0x40>
 800e67a:	2010      	movs	r0, #16
 800e67c:	f7fe fcbc 	bl	800cff8 <malloc>
 800e680:	4602      	mov	r2, r0
 800e682:	61e0      	str	r0, [r4, #28]
 800e684:	b920      	cbnz	r0, 800e690 <_dtoa_r+0x38>
 800e686:	4bae      	ldr	r3, [pc, #696]	; (800e940 <_dtoa_r+0x2e8>)
 800e688:	21ef      	movs	r1, #239	; 0xef
 800e68a:	48ae      	ldr	r0, [pc, #696]	; (800e944 <_dtoa_r+0x2ec>)
 800e68c:	f002 fd08 	bl	80110a0 <__assert_func>
 800e690:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e694:	6005      	str	r5, [r0, #0]
 800e696:	60c5      	str	r5, [r0, #12]
 800e698:	69e3      	ldr	r3, [r4, #28]
 800e69a:	6819      	ldr	r1, [r3, #0]
 800e69c:	b151      	cbz	r1, 800e6b4 <_dtoa_r+0x5c>
 800e69e:	685a      	ldr	r2, [r3, #4]
 800e6a0:	604a      	str	r2, [r1, #4]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4093      	lsls	r3, r2
 800e6a6:	608b      	str	r3, [r1, #8]
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f000 fe53 	bl	800f354 <_Bfree>
 800e6ae:	69e3      	ldr	r3, [r4, #28]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	1e3b      	subs	r3, r7, #0
 800e6b6:	bfbb      	ittet	lt
 800e6b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6bc:	9303      	strlt	r3, [sp, #12]
 800e6be:	2300      	movge	r3, #0
 800e6c0:	2201      	movlt	r2, #1
 800e6c2:	bfac      	ite	ge
 800e6c4:	f8c8 3000 	strge.w	r3, [r8]
 800e6c8:	f8c8 2000 	strlt.w	r2, [r8]
 800e6cc:	4b9e      	ldr	r3, [pc, #632]	; (800e948 <_dtoa_r+0x2f0>)
 800e6ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e6d2:	ea33 0308 	bics.w	r3, r3, r8
 800e6d6:	d11b      	bne.n	800e710 <_dtoa_r+0xb8>
 800e6d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6da:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6de:	6013      	str	r3, [r2, #0]
 800e6e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e6e4:	4333      	orrs	r3, r6
 800e6e6:	f000 8593 	beq.w	800f210 <_dtoa_r+0xbb8>
 800e6ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6ec:	b963      	cbnz	r3, 800e708 <_dtoa_r+0xb0>
 800e6ee:	4b97      	ldr	r3, [pc, #604]	; (800e94c <_dtoa_r+0x2f4>)
 800e6f0:	e027      	b.n	800e742 <_dtoa_r+0xea>
 800e6f2:	4b97      	ldr	r3, [pc, #604]	; (800e950 <_dtoa_r+0x2f8>)
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	3308      	adds	r3, #8
 800e6f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	9800      	ldr	r0, [sp, #0]
 800e6fe:	b013      	add	sp, #76	; 0x4c
 800e700:	ecbd 8b04 	vpop	{d8-d9}
 800e704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e708:	4b90      	ldr	r3, [pc, #576]	; (800e94c <_dtoa_r+0x2f4>)
 800e70a:	9300      	str	r3, [sp, #0]
 800e70c:	3303      	adds	r3, #3
 800e70e:	e7f3      	b.n	800e6f8 <_dtoa_r+0xa0>
 800e710:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e714:	2200      	movs	r2, #0
 800e716:	ec51 0b17 	vmov	r0, r1, d7
 800e71a:	eeb0 8a47 	vmov.f32	s16, s14
 800e71e:	eef0 8a67 	vmov.f32	s17, s15
 800e722:	2300      	movs	r3, #0
 800e724:	f7f2 f9d8 	bl	8000ad8 <__aeabi_dcmpeq>
 800e728:	4681      	mov	r9, r0
 800e72a:	b160      	cbz	r0, 800e746 <_dtoa_r+0xee>
 800e72c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e72e:	2301      	movs	r3, #1
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 8568 	beq.w	800f20a <_dtoa_r+0xbb2>
 800e73a:	4b86      	ldr	r3, [pc, #536]	; (800e954 <_dtoa_r+0x2fc>)
 800e73c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	3b01      	subs	r3, #1
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	e7da      	b.n	800e6fc <_dtoa_r+0xa4>
 800e746:	aa10      	add	r2, sp, #64	; 0x40
 800e748:	a911      	add	r1, sp, #68	; 0x44
 800e74a:	4620      	mov	r0, r4
 800e74c:	eeb0 0a48 	vmov.f32	s0, s16
 800e750:	eef0 0a68 	vmov.f32	s1, s17
 800e754:	f001 f99a 	bl	800fa8c <__d2b>
 800e758:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e75c:	4682      	mov	sl, r0
 800e75e:	2d00      	cmp	r5, #0
 800e760:	d07f      	beq.n	800e862 <_dtoa_r+0x20a>
 800e762:	ee18 3a90 	vmov	r3, s17
 800e766:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e76a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e76e:	ec51 0b18 	vmov	r0, r1, d8
 800e772:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e776:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e77a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e77e:	4619      	mov	r1, r3
 800e780:	2200      	movs	r2, #0
 800e782:	4b75      	ldr	r3, [pc, #468]	; (800e958 <_dtoa_r+0x300>)
 800e784:	f7f1 fd88 	bl	8000298 <__aeabi_dsub>
 800e788:	a367      	add	r3, pc, #412	; (adr r3, 800e928 <_dtoa_r+0x2d0>)
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f7f1 ff3b 	bl	8000608 <__aeabi_dmul>
 800e792:	a367      	add	r3, pc, #412	; (adr r3, 800e930 <_dtoa_r+0x2d8>)
 800e794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e798:	f7f1 fd80 	bl	800029c <__adddf3>
 800e79c:	4606      	mov	r6, r0
 800e79e:	4628      	mov	r0, r5
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	f7f1 fec7 	bl	8000534 <__aeabi_i2d>
 800e7a6:	a364      	add	r3, pc, #400	; (adr r3, 800e938 <_dtoa_r+0x2e0>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	f7f1 ff2c 	bl	8000608 <__aeabi_dmul>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	f7f1 fd70 	bl	800029c <__adddf3>
 800e7bc:	4606      	mov	r6, r0
 800e7be:	460f      	mov	r7, r1
 800e7c0:	f7f2 f9d2 	bl	8000b68 <__aeabi_d2iz>
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	4683      	mov	fp, r0
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	4639      	mov	r1, r7
 800e7ce:	f7f2 f98d 	bl	8000aec <__aeabi_dcmplt>
 800e7d2:	b148      	cbz	r0, 800e7e8 <_dtoa_r+0x190>
 800e7d4:	4658      	mov	r0, fp
 800e7d6:	f7f1 fead 	bl	8000534 <__aeabi_i2d>
 800e7da:	4632      	mov	r2, r6
 800e7dc:	463b      	mov	r3, r7
 800e7de:	f7f2 f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7e2:	b908      	cbnz	r0, 800e7e8 <_dtoa_r+0x190>
 800e7e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e7e8:	f1bb 0f16 	cmp.w	fp, #22
 800e7ec:	d857      	bhi.n	800e89e <_dtoa_r+0x246>
 800e7ee:	4b5b      	ldr	r3, [pc, #364]	; (800e95c <_dtoa_r+0x304>)
 800e7f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	ec51 0b18 	vmov	r0, r1, d8
 800e7fc:	f7f2 f976 	bl	8000aec <__aeabi_dcmplt>
 800e800:	2800      	cmp	r0, #0
 800e802:	d04e      	beq.n	800e8a2 <_dtoa_r+0x24a>
 800e804:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e808:	2300      	movs	r3, #0
 800e80a:	930c      	str	r3, [sp, #48]	; 0x30
 800e80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e80e:	1b5b      	subs	r3, r3, r5
 800e810:	1e5a      	subs	r2, r3, #1
 800e812:	bf45      	ittet	mi
 800e814:	f1c3 0301 	rsbmi	r3, r3, #1
 800e818:	9305      	strmi	r3, [sp, #20]
 800e81a:	2300      	movpl	r3, #0
 800e81c:	2300      	movmi	r3, #0
 800e81e:	9206      	str	r2, [sp, #24]
 800e820:	bf54      	ite	pl
 800e822:	9305      	strpl	r3, [sp, #20]
 800e824:	9306      	strmi	r3, [sp, #24]
 800e826:	f1bb 0f00 	cmp.w	fp, #0
 800e82a:	db3c      	blt.n	800e8a6 <_dtoa_r+0x24e>
 800e82c:	9b06      	ldr	r3, [sp, #24]
 800e82e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e832:	445b      	add	r3, fp
 800e834:	9306      	str	r3, [sp, #24]
 800e836:	2300      	movs	r3, #0
 800e838:	9308      	str	r3, [sp, #32]
 800e83a:	9b07      	ldr	r3, [sp, #28]
 800e83c:	2b09      	cmp	r3, #9
 800e83e:	d868      	bhi.n	800e912 <_dtoa_r+0x2ba>
 800e840:	2b05      	cmp	r3, #5
 800e842:	bfc4      	itt	gt
 800e844:	3b04      	subgt	r3, #4
 800e846:	9307      	strgt	r3, [sp, #28]
 800e848:	9b07      	ldr	r3, [sp, #28]
 800e84a:	f1a3 0302 	sub.w	r3, r3, #2
 800e84e:	bfcc      	ite	gt
 800e850:	2500      	movgt	r5, #0
 800e852:	2501      	movle	r5, #1
 800e854:	2b03      	cmp	r3, #3
 800e856:	f200 8085 	bhi.w	800e964 <_dtoa_r+0x30c>
 800e85a:	e8df f003 	tbb	[pc, r3]
 800e85e:	3b2e      	.short	0x3b2e
 800e860:	5839      	.short	0x5839
 800e862:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e866:	441d      	add	r5, r3
 800e868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e86c:	2b20      	cmp	r3, #32
 800e86e:	bfc1      	itttt	gt
 800e870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e874:	fa08 f803 	lslgt.w	r8, r8, r3
 800e878:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e87c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e880:	bfd6      	itet	le
 800e882:	f1c3 0320 	rsble	r3, r3, #32
 800e886:	ea48 0003 	orrgt.w	r0, r8, r3
 800e88a:	fa06 f003 	lslle.w	r0, r6, r3
 800e88e:	f7f1 fe41 	bl	8000514 <__aeabi_ui2d>
 800e892:	2201      	movs	r2, #1
 800e894:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e898:	3d01      	subs	r5, #1
 800e89a:	920e      	str	r2, [sp, #56]	; 0x38
 800e89c:	e76f      	b.n	800e77e <_dtoa_r+0x126>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e7b3      	b.n	800e80a <_dtoa_r+0x1b2>
 800e8a2:	900c      	str	r0, [sp, #48]	; 0x30
 800e8a4:	e7b2      	b.n	800e80c <_dtoa_r+0x1b4>
 800e8a6:	9b05      	ldr	r3, [sp, #20]
 800e8a8:	eba3 030b 	sub.w	r3, r3, fp
 800e8ac:	9305      	str	r3, [sp, #20]
 800e8ae:	f1cb 0300 	rsb	r3, fp, #0
 800e8b2:	9308      	str	r3, [sp, #32]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8b8:	e7bf      	b.n	800e83a <_dtoa_r+0x1e2>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dc52      	bgt.n	800e96a <_dtoa_r+0x312>
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	9301      	str	r3, [sp, #4]
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e8ce:	e00b      	b.n	800e8e8 <_dtoa_r+0x290>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	e7f3      	b.n	800e8bc <_dtoa_r+0x264>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8da:	445b      	add	r3, fp
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	9304      	str	r3, [sp, #16]
 800e8e4:	bfb8      	it	lt
 800e8e6:	2301      	movlt	r3, #1
 800e8e8:	69e0      	ldr	r0, [r4, #28]
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2204      	movs	r2, #4
 800e8ee:	f102 0614 	add.w	r6, r2, #20
 800e8f2:	429e      	cmp	r6, r3
 800e8f4:	d93d      	bls.n	800e972 <_dtoa_r+0x31a>
 800e8f6:	6041      	str	r1, [r0, #4]
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f000 fceb 	bl	800f2d4 <_Balloc>
 800e8fe:	9000      	str	r0, [sp, #0]
 800e900:	2800      	cmp	r0, #0
 800e902:	d139      	bne.n	800e978 <_dtoa_r+0x320>
 800e904:	4b16      	ldr	r3, [pc, #88]	; (800e960 <_dtoa_r+0x308>)
 800e906:	4602      	mov	r2, r0
 800e908:	f240 11af 	movw	r1, #431	; 0x1af
 800e90c:	e6bd      	b.n	800e68a <_dtoa_r+0x32>
 800e90e:	2301      	movs	r3, #1
 800e910:	e7e1      	b.n	800e8d6 <_dtoa_r+0x27e>
 800e912:	2501      	movs	r5, #1
 800e914:	2300      	movs	r3, #0
 800e916:	9307      	str	r3, [sp, #28]
 800e918:	9509      	str	r5, [sp, #36]	; 0x24
 800e91a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	9304      	str	r3, [sp, #16]
 800e922:	2200      	movs	r2, #0
 800e924:	2312      	movs	r3, #18
 800e926:	e7d1      	b.n	800e8cc <_dtoa_r+0x274>
 800e928:	636f4361 	.word	0x636f4361
 800e92c:	3fd287a7 	.word	0x3fd287a7
 800e930:	8b60c8b3 	.word	0x8b60c8b3
 800e934:	3fc68a28 	.word	0x3fc68a28
 800e938:	509f79fb 	.word	0x509f79fb
 800e93c:	3fd34413 	.word	0x3fd34413
 800e940:	08012647 	.word	0x08012647
 800e944:	0801265e 	.word	0x0801265e
 800e948:	7ff00000 	.word	0x7ff00000
 800e94c:	08012643 	.word	0x08012643
 800e950:	0801263a 	.word	0x0801263a
 800e954:	08012612 	.word	0x08012612
 800e958:	3ff80000 	.word	0x3ff80000
 800e95c:	08012748 	.word	0x08012748
 800e960:	080126b6 	.word	0x080126b6
 800e964:	2301      	movs	r3, #1
 800e966:	9309      	str	r3, [sp, #36]	; 0x24
 800e968:	e7d7      	b.n	800e91a <_dtoa_r+0x2c2>
 800e96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	9304      	str	r3, [sp, #16]
 800e970:	e7ba      	b.n	800e8e8 <_dtoa_r+0x290>
 800e972:	3101      	adds	r1, #1
 800e974:	0052      	lsls	r2, r2, #1
 800e976:	e7ba      	b.n	800e8ee <_dtoa_r+0x296>
 800e978:	69e3      	ldr	r3, [r4, #28]
 800e97a:	9a00      	ldr	r2, [sp, #0]
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	9b04      	ldr	r3, [sp, #16]
 800e980:	2b0e      	cmp	r3, #14
 800e982:	f200 80a8 	bhi.w	800ead6 <_dtoa_r+0x47e>
 800e986:	2d00      	cmp	r5, #0
 800e988:	f000 80a5 	beq.w	800ead6 <_dtoa_r+0x47e>
 800e98c:	f1bb 0f00 	cmp.w	fp, #0
 800e990:	dd38      	ble.n	800ea04 <_dtoa_r+0x3ac>
 800e992:	4bc0      	ldr	r3, [pc, #768]	; (800ec94 <_dtoa_r+0x63c>)
 800e994:	f00b 020f 	and.w	r2, fp, #15
 800e998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e99c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e9a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e9a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e9a8:	d019      	beq.n	800e9de <_dtoa_r+0x386>
 800e9aa:	4bbb      	ldr	r3, [pc, #748]	; (800ec98 <_dtoa_r+0x640>)
 800e9ac:	ec51 0b18 	vmov	r0, r1, d8
 800e9b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9b4:	f7f1 ff52 	bl	800085c <__aeabi_ddiv>
 800e9b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9bc:	f008 080f 	and.w	r8, r8, #15
 800e9c0:	2503      	movs	r5, #3
 800e9c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ec98 <_dtoa_r+0x640>
 800e9c6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ca:	d10a      	bne.n	800e9e2 <_dtoa_r+0x38a>
 800e9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	f7f1 ff42 	bl	800085c <__aeabi_ddiv>
 800e9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9dc:	e02b      	b.n	800ea36 <_dtoa_r+0x3de>
 800e9de:	2502      	movs	r5, #2
 800e9e0:	e7ef      	b.n	800e9c2 <_dtoa_r+0x36a>
 800e9e2:	f018 0f01 	tst.w	r8, #1
 800e9e6:	d008      	beq.n	800e9fa <_dtoa_r+0x3a2>
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	4639      	mov	r1, r7
 800e9ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e9f0:	f7f1 fe0a 	bl	8000608 <__aeabi_dmul>
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460f      	mov	r7, r1
 800e9fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9fe:	f109 0908 	add.w	r9, r9, #8
 800ea02:	e7e0      	b.n	800e9c6 <_dtoa_r+0x36e>
 800ea04:	f000 809f 	beq.w	800eb46 <_dtoa_r+0x4ee>
 800ea08:	f1cb 0600 	rsb	r6, fp, #0
 800ea0c:	4ba1      	ldr	r3, [pc, #644]	; (800ec94 <_dtoa_r+0x63c>)
 800ea0e:	4fa2      	ldr	r7, [pc, #648]	; (800ec98 <_dtoa_r+0x640>)
 800ea10:	f006 020f 	and.w	r2, r6, #15
 800ea14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	ec51 0b18 	vmov	r0, r1, d8
 800ea20:	f7f1 fdf2 	bl	8000608 <__aeabi_dmul>
 800ea24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea28:	1136      	asrs	r6, r6, #4
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	2502      	movs	r5, #2
 800ea2e:	2e00      	cmp	r6, #0
 800ea30:	d17e      	bne.n	800eb30 <_dtoa_r+0x4d8>
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1d0      	bne.n	800e9d8 <_dtoa_r+0x380>
 800ea36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 8084 	beq.w	800eb4a <_dtoa_r+0x4f2>
 800ea42:	4b96      	ldr	r3, [pc, #600]	; (800ec9c <_dtoa_r+0x644>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	4640      	mov	r0, r8
 800ea48:	4649      	mov	r1, r9
 800ea4a:	f7f2 f84f 	bl	8000aec <__aeabi_dcmplt>
 800ea4e:	2800      	cmp	r0, #0
 800ea50:	d07b      	beq.n	800eb4a <_dtoa_r+0x4f2>
 800ea52:	9b04      	ldr	r3, [sp, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d078      	beq.n	800eb4a <_dtoa_r+0x4f2>
 800ea58:	9b01      	ldr	r3, [sp, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	dd39      	ble.n	800ead2 <_dtoa_r+0x47a>
 800ea5e:	4b90      	ldr	r3, [pc, #576]	; (800eca0 <_dtoa_r+0x648>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	4640      	mov	r0, r8
 800ea64:	4649      	mov	r1, r9
 800ea66:	f7f1 fdcf 	bl	8000608 <__aeabi_dmul>
 800ea6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea6e:	9e01      	ldr	r6, [sp, #4]
 800ea70:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ea74:	3501      	adds	r5, #1
 800ea76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f7f1 fd5a 	bl	8000534 <__aeabi_i2d>
 800ea80:	4642      	mov	r2, r8
 800ea82:	464b      	mov	r3, r9
 800ea84:	f7f1 fdc0 	bl	8000608 <__aeabi_dmul>
 800ea88:	4b86      	ldr	r3, [pc, #536]	; (800eca4 <_dtoa_r+0x64c>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f7f1 fc06 	bl	800029c <__adddf3>
 800ea90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ea94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea98:	9303      	str	r3, [sp, #12]
 800ea9a:	2e00      	cmp	r6, #0
 800ea9c:	d158      	bne.n	800eb50 <_dtoa_r+0x4f8>
 800ea9e:	4b82      	ldr	r3, [pc, #520]	; (800eca8 <_dtoa_r+0x650>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	4640      	mov	r0, r8
 800eaa4:	4649      	mov	r1, r9
 800eaa6:	f7f1 fbf7 	bl	8000298 <__aeabi_dsub>
 800eaaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaae:	4680      	mov	r8, r0
 800eab0:	4689      	mov	r9, r1
 800eab2:	f7f2 f839 	bl	8000b28 <__aeabi_dcmpgt>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f040 8296 	bne.w	800efe8 <_dtoa_r+0x990>
 800eabc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eac0:	4640      	mov	r0, r8
 800eac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eac6:	4649      	mov	r1, r9
 800eac8:	f7f2 f810 	bl	8000aec <__aeabi_dcmplt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	f040 8289 	bne.w	800efe4 <_dtoa_r+0x98c>
 800ead2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ead6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f2c0 814e 	blt.w	800ed7a <_dtoa_r+0x722>
 800eade:	f1bb 0f0e 	cmp.w	fp, #14
 800eae2:	f300 814a 	bgt.w	800ed7a <_dtoa_r+0x722>
 800eae6:	4b6b      	ldr	r3, [pc, #428]	; (800ec94 <_dtoa_r+0x63c>)
 800eae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800eaec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eaf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f280 80dc 	bge.w	800ecb0 <_dtoa_r+0x658>
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f300 80d8 	bgt.w	800ecb0 <_dtoa_r+0x658>
 800eb00:	f040 826f 	bne.w	800efe2 <_dtoa_r+0x98a>
 800eb04:	4b68      	ldr	r3, [pc, #416]	; (800eca8 <_dtoa_r+0x650>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	4640      	mov	r0, r8
 800eb0a:	4649      	mov	r1, r9
 800eb0c:	f7f1 fd7c 	bl	8000608 <__aeabi_dmul>
 800eb10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb14:	f7f1 fffe 	bl	8000b14 <__aeabi_dcmpge>
 800eb18:	9e04      	ldr	r6, [sp, #16]
 800eb1a:	4637      	mov	r7, r6
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	f040 8245 	bne.w	800efac <_dtoa_r+0x954>
 800eb22:	9d00      	ldr	r5, [sp, #0]
 800eb24:	2331      	movs	r3, #49	; 0x31
 800eb26:	f805 3b01 	strb.w	r3, [r5], #1
 800eb2a:	f10b 0b01 	add.w	fp, fp, #1
 800eb2e:	e241      	b.n	800efb4 <_dtoa_r+0x95c>
 800eb30:	07f2      	lsls	r2, r6, #31
 800eb32:	d505      	bpl.n	800eb40 <_dtoa_r+0x4e8>
 800eb34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb38:	f7f1 fd66 	bl	8000608 <__aeabi_dmul>
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	2301      	movs	r3, #1
 800eb40:	1076      	asrs	r6, r6, #1
 800eb42:	3708      	adds	r7, #8
 800eb44:	e773      	b.n	800ea2e <_dtoa_r+0x3d6>
 800eb46:	2502      	movs	r5, #2
 800eb48:	e775      	b.n	800ea36 <_dtoa_r+0x3de>
 800eb4a:	9e04      	ldr	r6, [sp, #16]
 800eb4c:	465f      	mov	r7, fp
 800eb4e:	e792      	b.n	800ea76 <_dtoa_r+0x41e>
 800eb50:	9900      	ldr	r1, [sp, #0]
 800eb52:	4b50      	ldr	r3, [pc, #320]	; (800ec94 <_dtoa_r+0x63c>)
 800eb54:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eb58:	4431      	add	r1, r6
 800eb5a:	9102      	str	r1, [sp, #8]
 800eb5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb5e:	eeb0 9a47 	vmov.f32	s18, s14
 800eb62:	eef0 9a67 	vmov.f32	s19, s15
 800eb66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eb6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb6e:	2900      	cmp	r1, #0
 800eb70:	d044      	beq.n	800ebfc <_dtoa_r+0x5a4>
 800eb72:	494e      	ldr	r1, [pc, #312]	; (800ecac <_dtoa_r+0x654>)
 800eb74:	2000      	movs	r0, #0
 800eb76:	f7f1 fe71 	bl	800085c <__aeabi_ddiv>
 800eb7a:	ec53 2b19 	vmov	r2, r3, d9
 800eb7e:	f7f1 fb8b 	bl	8000298 <__aeabi_dsub>
 800eb82:	9d00      	ldr	r5, [sp, #0]
 800eb84:	ec41 0b19 	vmov	d9, r0, r1
 800eb88:	4649      	mov	r1, r9
 800eb8a:	4640      	mov	r0, r8
 800eb8c:	f7f1 ffec 	bl	8000b68 <__aeabi_d2iz>
 800eb90:	4606      	mov	r6, r0
 800eb92:	f7f1 fccf 	bl	8000534 <__aeabi_i2d>
 800eb96:	4602      	mov	r2, r0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4640      	mov	r0, r8
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	f7f1 fb7b 	bl	8000298 <__aeabi_dsub>
 800eba2:	3630      	adds	r6, #48	; 0x30
 800eba4:	f805 6b01 	strb.w	r6, [r5], #1
 800eba8:	ec53 2b19 	vmov	r2, r3, d9
 800ebac:	4680      	mov	r8, r0
 800ebae:	4689      	mov	r9, r1
 800ebb0:	f7f1 ff9c 	bl	8000aec <__aeabi_dcmplt>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d164      	bne.n	800ec82 <_dtoa_r+0x62a>
 800ebb8:	4642      	mov	r2, r8
 800ebba:	464b      	mov	r3, r9
 800ebbc:	4937      	ldr	r1, [pc, #220]	; (800ec9c <_dtoa_r+0x644>)
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	f7f1 fb6a 	bl	8000298 <__aeabi_dsub>
 800ebc4:	ec53 2b19 	vmov	r2, r3, d9
 800ebc8:	f7f1 ff90 	bl	8000aec <__aeabi_dcmplt>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	f040 80b6 	bne.w	800ed3e <_dtoa_r+0x6e6>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	429d      	cmp	r5, r3
 800ebd6:	f43f af7c 	beq.w	800ead2 <_dtoa_r+0x47a>
 800ebda:	4b31      	ldr	r3, [pc, #196]	; (800eca0 <_dtoa_r+0x648>)
 800ebdc:	ec51 0b19 	vmov	r0, r1, d9
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f7f1 fd11 	bl	8000608 <__aeabi_dmul>
 800ebe6:	4b2e      	ldr	r3, [pc, #184]	; (800eca0 <_dtoa_r+0x648>)
 800ebe8:	ec41 0b19 	vmov	d9, r0, r1
 800ebec:	2200      	movs	r2, #0
 800ebee:	4640      	mov	r0, r8
 800ebf0:	4649      	mov	r1, r9
 800ebf2:	f7f1 fd09 	bl	8000608 <__aeabi_dmul>
 800ebf6:	4680      	mov	r8, r0
 800ebf8:	4689      	mov	r9, r1
 800ebfa:	e7c5      	b.n	800eb88 <_dtoa_r+0x530>
 800ebfc:	ec51 0b17 	vmov	r0, r1, d7
 800ec00:	f7f1 fd02 	bl	8000608 <__aeabi_dmul>
 800ec04:	9b02      	ldr	r3, [sp, #8]
 800ec06:	9d00      	ldr	r5, [sp, #0]
 800ec08:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec0a:	ec41 0b19 	vmov	d9, r0, r1
 800ec0e:	4649      	mov	r1, r9
 800ec10:	4640      	mov	r0, r8
 800ec12:	f7f1 ffa9 	bl	8000b68 <__aeabi_d2iz>
 800ec16:	4606      	mov	r6, r0
 800ec18:	f7f1 fc8c 	bl	8000534 <__aeabi_i2d>
 800ec1c:	3630      	adds	r6, #48	; 0x30
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	4640      	mov	r0, r8
 800ec24:	4649      	mov	r1, r9
 800ec26:	f7f1 fb37 	bl	8000298 <__aeabi_dsub>
 800ec2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ec2e:	9b02      	ldr	r3, [sp, #8]
 800ec30:	429d      	cmp	r5, r3
 800ec32:	4680      	mov	r8, r0
 800ec34:	4689      	mov	r9, r1
 800ec36:	f04f 0200 	mov.w	r2, #0
 800ec3a:	d124      	bne.n	800ec86 <_dtoa_r+0x62e>
 800ec3c:	4b1b      	ldr	r3, [pc, #108]	; (800ecac <_dtoa_r+0x654>)
 800ec3e:	ec51 0b19 	vmov	r0, r1, d9
 800ec42:	f7f1 fb2b 	bl	800029c <__adddf3>
 800ec46:	4602      	mov	r2, r0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	4649      	mov	r1, r9
 800ec4e:	f7f1 ff6b 	bl	8000b28 <__aeabi_dcmpgt>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	d173      	bne.n	800ed3e <_dtoa_r+0x6e6>
 800ec56:	ec53 2b19 	vmov	r2, r3, d9
 800ec5a:	4914      	ldr	r1, [pc, #80]	; (800ecac <_dtoa_r+0x654>)
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	f7f1 fb1b 	bl	8000298 <__aeabi_dsub>
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 ff3f 	bl	8000aec <__aeabi_dcmplt>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	f43f af2f 	beq.w	800ead2 <_dtoa_r+0x47a>
 800ec74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ec76:	1e6b      	subs	r3, r5, #1
 800ec78:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec7e:	2b30      	cmp	r3, #48	; 0x30
 800ec80:	d0f8      	beq.n	800ec74 <_dtoa_r+0x61c>
 800ec82:	46bb      	mov	fp, r7
 800ec84:	e04a      	b.n	800ed1c <_dtoa_r+0x6c4>
 800ec86:	4b06      	ldr	r3, [pc, #24]	; (800eca0 <_dtoa_r+0x648>)
 800ec88:	f7f1 fcbe 	bl	8000608 <__aeabi_dmul>
 800ec8c:	4680      	mov	r8, r0
 800ec8e:	4689      	mov	r9, r1
 800ec90:	e7bd      	b.n	800ec0e <_dtoa_r+0x5b6>
 800ec92:	bf00      	nop
 800ec94:	08012748 	.word	0x08012748
 800ec98:	08012720 	.word	0x08012720
 800ec9c:	3ff00000 	.word	0x3ff00000
 800eca0:	40240000 	.word	0x40240000
 800eca4:	401c0000 	.word	0x401c0000
 800eca8:	40140000 	.word	0x40140000
 800ecac:	3fe00000 	.word	0x3fe00000
 800ecb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ecb4:	9d00      	ldr	r5, [sp, #0]
 800ecb6:	4642      	mov	r2, r8
 800ecb8:	464b      	mov	r3, r9
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 fdcd 	bl	800085c <__aeabi_ddiv>
 800ecc2:	f7f1 ff51 	bl	8000b68 <__aeabi_d2iz>
 800ecc6:	9001      	str	r0, [sp, #4]
 800ecc8:	f7f1 fc34 	bl	8000534 <__aeabi_i2d>
 800eccc:	4642      	mov	r2, r8
 800ecce:	464b      	mov	r3, r9
 800ecd0:	f7f1 fc9a 	bl	8000608 <__aeabi_dmul>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4630      	mov	r0, r6
 800ecda:	4639      	mov	r1, r7
 800ecdc:	f7f1 fadc 	bl	8000298 <__aeabi_dsub>
 800ece0:	9e01      	ldr	r6, [sp, #4]
 800ece2:	9f04      	ldr	r7, [sp, #16]
 800ece4:	3630      	adds	r6, #48	; 0x30
 800ece6:	f805 6b01 	strb.w	r6, [r5], #1
 800ecea:	9e00      	ldr	r6, [sp, #0]
 800ecec:	1bae      	subs	r6, r5, r6
 800ecee:	42b7      	cmp	r7, r6
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	d134      	bne.n	800ed60 <_dtoa_r+0x708>
 800ecf6:	f7f1 fad1 	bl	800029c <__adddf3>
 800ecfa:	4642      	mov	r2, r8
 800ecfc:	464b      	mov	r3, r9
 800ecfe:	4606      	mov	r6, r0
 800ed00:	460f      	mov	r7, r1
 800ed02:	f7f1 ff11 	bl	8000b28 <__aeabi_dcmpgt>
 800ed06:	b9c8      	cbnz	r0, 800ed3c <_dtoa_r+0x6e4>
 800ed08:	4642      	mov	r2, r8
 800ed0a:	464b      	mov	r3, r9
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	f7f1 fee2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed14:	b110      	cbz	r0, 800ed1c <_dtoa_r+0x6c4>
 800ed16:	9b01      	ldr	r3, [sp, #4]
 800ed18:	07db      	lsls	r3, r3, #31
 800ed1a:	d40f      	bmi.n	800ed3c <_dtoa_r+0x6e4>
 800ed1c:	4651      	mov	r1, sl
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 fb18 	bl	800f354 <_Bfree>
 800ed24:	2300      	movs	r3, #0
 800ed26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed28:	702b      	strb	r3, [r5, #0]
 800ed2a:	f10b 0301 	add.w	r3, fp, #1
 800ed2e:	6013      	str	r3, [r2, #0]
 800ed30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f43f ace2 	beq.w	800e6fc <_dtoa_r+0xa4>
 800ed38:	601d      	str	r5, [r3, #0]
 800ed3a:	e4df      	b.n	800e6fc <_dtoa_r+0xa4>
 800ed3c:	465f      	mov	r7, fp
 800ed3e:	462b      	mov	r3, r5
 800ed40:	461d      	mov	r5, r3
 800ed42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed46:	2a39      	cmp	r2, #57	; 0x39
 800ed48:	d106      	bne.n	800ed58 <_dtoa_r+0x700>
 800ed4a:	9a00      	ldr	r2, [sp, #0]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d1f7      	bne.n	800ed40 <_dtoa_r+0x6e8>
 800ed50:	9900      	ldr	r1, [sp, #0]
 800ed52:	2230      	movs	r2, #48	; 0x30
 800ed54:	3701      	adds	r7, #1
 800ed56:	700a      	strb	r2, [r1, #0]
 800ed58:	781a      	ldrb	r2, [r3, #0]
 800ed5a:	3201      	adds	r2, #1
 800ed5c:	701a      	strb	r2, [r3, #0]
 800ed5e:	e790      	b.n	800ec82 <_dtoa_r+0x62a>
 800ed60:	4ba3      	ldr	r3, [pc, #652]	; (800eff0 <_dtoa_r+0x998>)
 800ed62:	2200      	movs	r2, #0
 800ed64:	f7f1 fc50 	bl	8000608 <__aeabi_dmul>
 800ed68:	2200      	movs	r2, #0
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	460f      	mov	r7, r1
 800ed70:	f7f1 feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d09e      	beq.n	800ecb6 <_dtoa_r+0x65e>
 800ed78:	e7d0      	b.n	800ed1c <_dtoa_r+0x6c4>
 800ed7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed7c:	2a00      	cmp	r2, #0
 800ed7e:	f000 80ca 	beq.w	800ef16 <_dtoa_r+0x8be>
 800ed82:	9a07      	ldr	r2, [sp, #28]
 800ed84:	2a01      	cmp	r2, #1
 800ed86:	f300 80ad 	bgt.w	800eee4 <_dtoa_r+0x88c>
 800ed8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed8c:	2a00      	cmp	r2, #0
 800ed8e:	f000 80a5 	beq.w	800eedc <_dtoa_r+0x884>
 800ed92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed96:	9e08      	ldr	r6, [sp, #32]
 800ed98:	9d05      	ldr	r5, [sp, #20]
 800ed9a:	9a05      	ldr	r2, [sp, #20]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	9205      	str	r2, [sp, #20]
 800eda0:	9a06      	ldr	r2, [sp, #24]
 800eda2:	2101      	movs	r1, #1
 800eda4:	441a      	add	r2, r3
 800eda6:	4620      	mov	r0, r4
 800eda8:	9206      	str	r2, [sp, #24]
 800edaa:	f000 fbd3 	bl	800f554 <__i2b>
 800edae:	4607      	mov	r7, r0
 800edb0:	b165      	cbz	r5, 800edcc <_dtoa_r+0x774>
 800edb2:	9b06      	ldr	r3, [sp, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	dd09      	ble.n	800edcc <_dtoa_r+0x774>
 800edb8:	42ab      	cmp	r3, r5
 800edba:	9a05      	ldr	r2, [sp, #20]
 800edbc:	bfa8      	it	ge
 800edbe:	462b      	movge	r3, r5
 800edc0:	1ad2      	subs	r2, r2, r3
 800edc2:	9205      	str	r2, [sp, #20]
 800edc4:	9a06      	ldr	r2, [sp, #24]
 800edc6:	1aed      	subs	r5, r5, r3
 800edc8:	1ad3      	subs	r3, r2, r3
 800edca:	9306      	str	r3, [sp, #24]
 800edcc:	9b08      	ldr	r3, [sp, #32]
 800edce:	b1f3      	cbz	r3, 800ee0e <_dtoa_r+0x7b6>
 800edd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 80a3 	beq.w	800ef1e <_dtoa_r+0x8c6>
 800edd8:	2e00      	cmp	r6, #0
 800edda:	dd10      	ble.n	800edfe <_dtoa_r+0x7a6>
 800eddc:	4639      	mov	r1, r7
 800edde:	4632      	mov	r2, r6
 800ede0:	4620      	mov	r0, r4
 800ede2:	f000 fc77 	bl	800f6d4 <__pow5mult>
 800ede6:	4652      	mov	r2, sl
 800ede8:	4601      	mov	r1, r0
 800edea:	4607      	mov	r7, r0
 800edec:	4620      	mov	r0, r4
 800edee:	f000 fbc7 	bl	800f580 <__multiply>
 800edf2:	4651      	mov	r1, sl
 800edf4:	4680      	mov	r8, r0
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 faac 	bl	800f354 <_Bfree>
 800edfc:	46c2      	mov	sl, r8
 800edfe:	9b08      	ldr	r3, [sp, #32]
 800ee00:	1b9a      	subs	r2, r3, r6
 800ee02:	d004      	beq.n	800ee0e <_dtoa_r+0x7b6>
 800ee04:	4651      	mov	r1, sl
 800ee06:	4620      	mov	r0, r4
 800ee08:	f000 fc64 	bl	800f6d4 <__pow5mult>
 800ee0c:	4682      	mov	sl, r0
 800ee0e:	2101      	movs	r1, #1
 800ee10:	4620      	mov	r0, r4
 800ee12:	f000 fb9f 	bl	800f554 <__i2b>
 800ee16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	f340 8081 	ble.w	800ef22 <_dtoa_r+0x8ca>
 800ee20:	461a      	mov	r2, r3
 800ee22:	4601      	mov	r1, r0
 800ee24:	4620      	mov	r0, r4
 800ee26:	f000 fc55 	bl	800f6d4 <__pow5mult>
 800ee2a:	9b07      	ldr	r3, [sp, #28]
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	4606      	mov	r6, r0
 800ee30:	dd7a      	ble.n	800ef28 <_dtoa_r+0x8d0>
 800ee32:	f04f 0800 	mov.w	r8, #0
 800ee36:	6933      	ldr	r3, [r6, #16]
 800ee38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ee3c:	6918      	ldr	r0, [r3, #16]
 800ee3e:	f000 fb3b 	bl	800f4b8 <__hi0bits>
 800ee42:	f1c0 0020 	rsb	r0, r0, #32
 800ee46:	9b06      	ldr	r3, [sp, #24]
 800ee48:	4418      	add	r0, r3
 800ee4a:	f010 001f 	ands.w	r0, r0, #31
 800ee4e:	f000 8094 	beq.w	800ef7a <_dtoa_r+0x922>
 800ee52:	f1c0 0320 	rsb	r3, r0, #32
 800ee56:	2b04      	cmp	r3, #4
 800ee58:	f340 8085 	ble.w	800ef66 <_dtoa_r+0x90e>
 800ee5c:	9b05      	ldr	r3, [sp, #20]
 800ee5e:	f1c0 001c 	rsb	r0, r0, #28
 800ee62:	4403      	add	r3, r0
 800ee64:	9305      	str	r3, [sp, #20]
 800ee66:	9b06      	ldr	r3, [sp, #24]
 800ee68:	4403      	add	r3, r0
 800ee6a:	4405      	add	r5, r0
 800ee6c:	9306      	str	r3, [sp, #24]
 800ee6e:	9b05      	ldr	r3, [sp, #20]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dd05      	ble.n	800ee80 <_dtoa_r+0x828>
 800ee74:	4651      	mov	r1, sl
 800ee76:	461a      	mov	r2, r3
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 fc85 	bl	800f788 <__lshift>
 800ee7e:	4682      	mov	sl, r0
 800ee80:	9b06      	ldr	r3, [sp, #24]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	dd05      	ble.n	800ee92 <_dtoa_r+0x83a>
 800ee86:	4631      	mov	r1, r6
 800ee88:	461a      	mov	r2, r3
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 fc7c 	bl	800f788 <__lshift>
 800ee90:	4606      	mov	r6, r0
 800ee92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d072      	beq.n	800ef7e <_dtoa_r+0x926>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4650      	mov	r0, sl
 800ee9c:	f000 fce0 	bl	800f860 <__mcmp>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	da6c      	bge.n	800ef7e <_dtoa_r+0x926>
 800eea4:	2300      	movs	r3, #0
 800eea6:	4651      	mov	r1, sl
 800eea8:	220a      	movs	r2, #10
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 fa74 	bl	800f398 <__multadd>
 800eeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eeb6:	4682      	mov	sl, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 81b0 	beq.w	800f21e <_dtoa_r+0xbc6>
 800eebe:	2300      	movs	r3, #0
 800eec0:	4639      	mov	r1, r7
 800eec2:	220a      	movs	r2, #10
 800eec4:	4620      	mov	r0, r4
 800eec6:	f000 fa67 	bl	800f398 <__multadd>
 800eeca:	9b01      	ldr	r3, [sp, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	4607      	mov	r7, r0
 800eed0:	f300 8096 	bgt.w	800f000 <_dtoa_r+0x9a8>
 800eed4:	9b07      	ldr	r3, [sp, #28]
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	dc59      	bgt.n	800ef8e <_dtoa_r+0x936>
 800eeda:	e091      	b.n	800f000 <_dtoa_r+0x9a8>
 800eedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eee2:	e758      	b.n	800ed96 <_dtoa_r+0x73e>
 800eee4:	9b04      	ldr	r3, [sp, #16]
 800eee6:	1e5e      	subs	r6, r3, #1
 800eee8:	9b08      	ldr	r3, [sp, #32]
 800eeea:	42b3      	cmp	r3, r6
 800eeec:	bfbf      	itttt	lt
 800eeee:	9b08      	ldrlt	r3, [sp, #32]
 800eef0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eef2:	9608      	strlt	r6, [sp, #32]
 800eef4:	1af3      	sublt	r3, r6, r3
 800eef6:	bfb4      	ite	lt
 800eef8:	18d2      	addlt	r2, r2, r3
 800eefa:	1b9e      	subge	r6, r3, r6
 800eefc:	9b04      	ldr	r3, [sp, #16]
 800eefe:	bfbc      	itt	lt
 800ef00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ef02:	2600      	movlt	r6, #0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	bfb7      	itett	lt
 800ef08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ef0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ef10:	1a9d      	sublt	r5, r3, r2
 800ef12:	2300      	movlt	r3, #0
 800ef14:	e741      	b.n	800ed9a <_dtoa_r+0x742>
 800ef16:	9e08      	ldr	r6, [sp, #32]
 800ef18:	9d05      	ldr	r5, [sp, #20]
 800ef1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef1c:	e748      	b.n	800edb0 <_dtoa_r+0x758>
 800ef1e:	9a08      	ldr	r2, [sp, #32]
 800ef20:	e770      	b.n	800ee04 <_dtoa_r+0x7ac>
 800ef22:	9b07      	ldr	r3, [sp, #28]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	dc19      	bgt.n	800ef5c <_dtoa_r+0x904>
 800ef28:	9b02      	ldr	r3, [sp, #8]
 800ef2a:	b9bb      	cbnz	r3, 800ef5c <_dtoa_r+0x904>
 800ef2c:	9b03      	ldr	r3, [sp, #12]
 800ef2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef32:	b99b      	cbnz	r3, 800ef5c <_dtoa_r+0x904>
 800ef34:	9b03      	ldr	r3, [sp, #12]
 800ef36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef3a:	0d1b      	lsrs	r3, r3, #20
 800ef3c:	051b      	lsls	r3, r3, #20
 800ef3e:	b183      	cbz	r3, 800ef62 <_dtoa_r+0x90a>
 800ef40:	9b05      	ldr	r3, [sp, #20]
 800ef42:	3301      	adds	r3, #1
 800ef44:	9305      	str	r3, [sp, #20]
 800ef46:	9b06      	ldr	r3, [sp, #24]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	9306      	str	r3, [sp, #24]
 800ef4c:	f04f 0801 	mov.w	r8, #1
 800ef50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f47f af6f 	bne.w	800ee36 <_dtoa_r+0x7de>
 800ef58:	2001      	movs	r0, #1
 800ef5a:	e774      	b.n	800ee46 <_dtoa_r+0x7ee>
 800ef5c:	f04f 0800 	mov.w	r8, #0
 800ef60:	e7f6      	b.n	800ef50 <_dtoa_r+0x8f8>
 800ef62:	4698      	mov	r8, r3
 800ef64:	e7f4      	b.n	800ef50 <_dtoa_r+0x8f8>
 800ef66:	d082      	beq.n	800ee6e <_dtoa_r+0x816>
 800ef68:	9a05      	ldr	r2, [sp, #20]
 800ef6a:	331c      	adds	r3, #28
 800ef6c:	441a      	add	r2, r3
 800ef6e:	9205      	str	r2, [sp, #20]
 800ef70:	9a06      	ldr	r2, [sp, #24]
 800ef72:	441a      	add	r2, r3
 800ef74:	441d      	add	r5, r3
 800ef76:	9206      	str	r2, [sp, #24]
 800ef78:	e779      	b.n	800ee6e <_dtoa_r+0x816>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	e7f4      	b.n	800ef68 <_dtoa_r+0x910>
 800ef7e:	9b04      	ldr	r3, [sp, #16]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	dc37      	bgt.n	800eff4 <_dtoa_r+0x99c>
 800ef84:	9b07      	ldr	r3, [sp, #28]
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	dd34      	ble.n	800eff4 <_dtoa_r+0x99c>
 800ef8a:	9b04      	ldr	r3, [sp, #16]
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	9b01      	ldr	r3, [sp, #4]
 800ef90:	b963      	cbnz	r3, 800efac <_dtoa_r+0x954>
 800ef92:	4631      	mov	r1, r6
 800ef94:	2205      	movs	r2, #5
 800ef96:	4620      	mov	r0, r4
 800ef98:	f000 f9fe 	bl	800f398 <__multadd>
 800ef9c:	4601      	mov	r1, r0
 800ef9e:	4606      	mov	r6, r0
 800efa0:	4650      	mov	r0, sl
 800efa2:	f000 fc5d 	bl	800f860 <__mcmp>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	f73f adbb 	bgt.w	800eb22 <_dtoa_r+0x4ca>
 800efac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efae:	9d00      	ldr	r5, [sp, #0]
 800efb0:	ea6f 0b03 	mvn.w	fp, r3
 800efb4:	f04f 0800 	mov.w	r8, #0
 800efb8:	4631      	mov	r1, r6
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 f9ca 	bl	800f354 <_Bfree>
 800efc0:	2f00      	cmp	r7, #0
 800efc2:	f43f aeab 	beq.w	800ed1c <_dtoa_r+0x6c4>
 800efc6:	f1b8 0f00 	cmp.w	r8, #0
 800efca:	d005      	beq.n	800efd8 <_dtoa_r+0x980>
 800efcc:	45b8      	cmp	r8, r7
 800efce:	d003      	beq.n	800efd8 <_dtoa_r+0x980>
 800efd0:	4641      	mov	r1, r8
 800efd2:	4620      	mov	r0, r4
 800efd4:	f000 f9be 	bl	800f354 <_Bfree>
 800efd8:	4639      	mov	r1, r7
 800efda:	4620      	mov	r0, r4
 800efdc:	f000 f9ba 	bl	800f354 <_Bfree>
 800efe0:	e69c      	b.n	800ed1c <_dtoa_r+0x6c4>
 800efe2:	2600      	movs	r6, #0
 800efe4:	4637      	mov	r7, r6
 800efe6:	e7e1      	b.n	800efac <_dtoa_r+0x954>
 800efe8:	46bb      	mov	fp, r7
 800efea:	4637      	mov	r7, r6
 800efec:	e599      	b.n	800eb22 <_dtoa_r+0x4ca>
 800efee:	bf00      	nop
 800eff0:	40240000 	.word	0x40240000
 800eff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f000 80c8 	beq.w	800f18c <_dtoa_r+0xb34>
 800effc:	9b04      	ldr	r3, [sp, #16]
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	2d00      	cmp	r5, #0
 800f002:	dd05      	ble.n	800f010 <_dtoa_r+0x9b8>
 800f004:	4639      	mov	r1, r7
 800f006:	462a      	mov	r2, r5
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 fbbd 	bl	800f788 <__lshift>
 800f00e:	4607      	mov	r7, r0
 800f010:	f1b8 0f00 	cmp.w	r8, #0
 800f014:	d05b      	beq.n	800f0ce <_dtoa_r+0xa76>
 800f016:	6879      	ldr	r1, [r7, #4]
 800f018:	4620      	mov	r0, r4
 800f01a:	f000 f95b 	bl	800f2d4 <_Balloc>
 800f01e:	4605      	mov	r5, r0
 800f020:	b928      	cbnz	r0, 800f02e <_dtoa_r+0x9d6>
 800f022:	4b83      	ldr	r3, [pc, #524]	; (800f230 <_dtoa_r+0xbd8>)
 800f024:	4602      	mov	r2, r0
 800f026:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f02a:	f7ff bb2e 	b.w	800e68a <_dtoa_r+0x32>
 800f02e:	693a      	ldr	r2, [r7, #16]
 800f030:	3202      	adds	r2, #2
 800f032:	0092      	lsls	r2, r2, #2
 800f034:	f107 010c 	add.w	r1, r7, #12
 800f038:	300c      	adds	r0, #12
 800f03a:	f7ff fa6e 	bl	800e51a <memcpy>
 800f03e:	2201      	movs	r2, #1
 800f040:	4629      	mov	r1, r5
 800f042:	4620      	mov	r0, r4
 800f044:	f000 fba0 	bl	800f788 <__lshift>
 800f048:	9b00      	ldr	r3, [sp, #0]
 800f04a:	3301      	adds	r3, #1
 800f04c:	9304      	str	r3, [sp, #16]
 800f04e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f052:	4413      	add	r3, r2
 800f054:	9308      	str	r3, [sp, #32]
 800f056:	9b02      	ldr	r3, [sp, #8]
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	46b8      	mov	r8, r7
 800f05e:	9306      	str	r3, [sp, #24]
 800f060:	4607      	mov	r7, r0
 800f062:	9b04      	ldr	r3, [sp, #16]
 800f064:	4631      	mov	r1, r6
 800f066:	3b01      	subs	r3, #1
 800f068:	4650      	mov	r0, sl
 800f06a:	9301      	str	r3, [sp, #4]
 800f06c:	f7ff fa6a 	bl	800e544 <quorem>
 800f070:	4641      	mov	r1, r8
 800f072:	9002      	str	r0, [sp, #8]
 800f074:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f078:	4650      	mov	r0, sl
 800f07a:	f000 fbf1 	bl	800f860 <__mcmp>
 800f07e:	463a      	mov	r2, r7
 800f080:	9005      	str	r0, [sp, #20]
 800f082:	4631      	mov	r1, r6
 800f084:	4620      	mov	r0, r4
 800f086:	f000 fc07 	bl	800f898 <__mdiff>
 800f08a:	68c2      	ldr	r2, [r0, #12]
 800f08c:	4605      	mov	r5, r0
 800f08e:	bb02      	cbnz	r2, 800f0d2 <_dtoa_r+0xa7a>
 800f090:	4601      	mov	r1, r0
 800f092:	4650      	mov	r0, sl
 800f094:	f000 fbe4 	bl	800f860 <__mcmp>
 800f098:	4602      	mov	r2, r0
 800f09a:	4629      	mov	r1, r5
 800f09c:	4620      	mov	r0, r4
 800f09e:	9209      	str	r2, [sp, #36]	; 0x24
 800f0a0:	f000 f958 	bl	800f354 <_Bfree>
 800f0a4:	9b07      	ldr	r3, [sp, #28]
 800f0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0a8:	9d04      	ldr	r5, [sp, #16]
 800f0aa:	ea43 0102 	orr.w	r1, r3, r2
 800f0ae:	9b06      	ldr	r3, [sp, #24]
 800f0b0:	4319      	orrs	r1, r3
 800f0b2:	d110      	bne.n	800f0d6 <_dtoa_r+0xa7e>
 800f0b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f0b8:	d029      	beq.n	800f10e <_dtoa_r+0xab6>
 800f0ba:	9b05      	ldr	r3, [sp, #20]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	dd02      	ble.n	800f0c6 <_dtoa_r+0xa6e>
 800f0c0:	9b02      	ldr	r3, [sp, #8]
 800f0c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f0c6:	9b01      	ldr	r3, [sp, #4]
 800f0c8:	f883 9000 	strb.w	r9, [r3]
 800f0cc:	e774      	b.n	800efb8 <_dtoa_r+0x960>
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	e7ba      	b.n	800f048 <_dtoa_r+0x9f0>
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	e7e1      	b.n	800f09a <_dtoa_r+0xa42>
 800f0d6:	9b05      	ldr	r3, [sp, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	db04      	blt.n	800f0e6 <_dtoa_r+0xa8e>
 800f0dc:	9907      	ldr	r1, [sp, #28]
 800f0de:	430b      	orrs	r3, r1
 800f0e0:	9906      	ldr	r1, [sp, #24]
 800f0e2:	430b      	orrs	r3, r1
 800f0e4:	d120      	bne.n	800f128 <_dtoa_r+0xad0>
 800f0e6:	2a00      	cmp	r2, #0
 800f0e8:	dded      	ble.n	800f0c6 <_dtoa_r+0xa6e>
 800f0ea:	4651      	mov	r1, sl
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 fb4a 	bl	800f788 <__lshift>
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	4682      	mov	sl, r0
 800f0f8:	f000 fbb2 	bl	800f860 <__mcmp>
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	dc03      	bgt.n	800f108 <_dtoa_r+0xab0>
 800f100:	d1e1      	bne.n	800f0c6 <_dtoa_r+0xa6e>
 800f102:	f019 0f01 	tst.w	r9, #1
 800f106:	d0de      	beq.n	800f0c6 <_dtoa_r+0xa6e>
 800f108:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f10c:	d1d8      	bne.n	800f0c0 <_dtoa_r+0xa68>
 800f10e:	9a01      	ldr	r2, [sp, #4]
 800f110:	2339      	movs	r3, #57	; 0x39
 800f112:	7013      	strb	r3, [r2, #0]
 800f114:	462b      	mov	r3, r5
 800f116:	461d      	mov	r5, r3
 800f118:	3b01      	subs	r3, #1
 800f11a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f11e:	2a39      	cmp	r2, #57	; 0x39
 800f120:	d06c      	beq.n	800f1fc <_dtoa_r+0xba4>
 800f122:	3201      	adds	r2, #1
 800f124:	701a      	strb	r2, [r3, #0]
 800f126:	e747      	b.n	800efb8 <_dtoa_r+0x960>
 800f128:	2a00      	cmp	r2, #0
 800f12a:	dd07      	ble.n	800f13c <_dtoa_r+0xae4>
 800f12c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f130:	d0ed      	beq.n	800f10e <_dtoa_r+0xab6>
 800f132:	9a01      	ldr	r2, [sp, #4]
 800f134:	f109 0301 	add.w	r3, r9, #1
 800f138:	7013      	strb	r3, [r2, #0]
 800f13a:	e73d      	b.n	800efb8 <_dtoa_r+0x960>
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	9a08      	ldr	r2, [sp, #32]
 800f140:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f144:	4293      	cmp	r3, r2
 800f146:	d043      	beq.n	800f1d0 <_dtoa_r+0xb78>
 800f148:	4651      	mov	r1, sl
 800f14a:	2300      	movs	r3, #0
 800f14c:	220a      	movs	r2, #10
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 f922 	bl	800f398 <__multadd>
 800f154:	45b8      	cmp	r8, r7
 800f156:	4682      	mov	sl, r0
 800f158:	f04f 0300 	mov.w	r3, #0
 800f15c:	f04f 020a 	mov.w	r2, #10
 800f160:	4641      	mov	r1, r8
 800f162:	4620      	mov	r0, r4
 800f164:	d107      	bne.n	800f176 <_dtoa_r+0xb1e>
 800f166:	f000 f917 	bl	800f398 <__multadd>
 800f16a:	4680      	mov	r8, r0
 800f16c:	4607      	mov	r7, r0
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	3301      	adds	r3, #1
 800f172:	9304      	str	r3, [sp, #16]
 800f174:	e775      	b.n	800f062 <_dtoa_r+0xa0a>
 800f176:	f000 f90f 	bl	800f398 <__multadd>
 800f17a:	4639      	mov	r1, r7
 800f17c:	4680      	mov	r8, r0
 800f17e:	2300      	movs	r3, #0
 800f180:	220a      	movs	r2, #10
 800f182:	4620      	mov	r0, r4
 800f184:	f000 f908 	bl	800f398 <__multadd>
 800f188:	4607      	mov	r7, r0
 800f18a:	e7f0      	b.n	800f16e <_dtoa_r+0xb16>
 800f18c:	9b04      	ldr	r3, [sp, #16]
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	9d00      	ldr	r5, [sp, #0]
 800f192:	4631      	mov	r1, r6
 800f194:	4650      	mov	r0, sl
 800f196:	f7ff f9d5 	bl	800e544 <quorem>
 800f19a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f19e:	9b00      	ldr	r3, [sp, #0]
 800f1a0:	f805 9b01 	strb.w	r9, [r5], #1
 800f1a4:	1aea      	subs	r2, r5, r3
 800f1a6:	9b01      	ldr	r3, [sp, #4]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	dd07      	ble.n	800f1bc <_dtoa_r+0xb64>
 800f1ac:	4651      	mov	r1, sl
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	220a      	movs	r2, #10
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f000 f8f0 	bl	800f398 <__multadd>
 800f1b8:	4682      	mov	sl, r0
 800f1ba:	e7ea      	b.n	800f192 <_dtoa_r+0xb3a>
 800f1bc:	9b01      	ldr	r3, [sp, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	bfc8      	it	gt
 800f1c2:	461d      	movgt	r5, r3
 800f1c4:	9b00      	ldr	r3, [sp, #0]
 800f1c6:	bfd8      	it	le
 800f1c8:	2501      	movle	r5, #1
 800f1ca:	441d      	add	r5, r3
 800f1cc:	f04f 0800 	mov.w	r8, #0
 800f1d0:	4651      	mov	r1, sl
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 fad7 	bl	800f788 <__lshift>
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4682      	mov	sl, r0
 800f1de:	f000 fb3f 	bl	800f860 <__mcmp>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	dc96      	bgt.n	800f114 <_dtoa_r+0xabc>
 800f1e6:	d102      	bne.n	800f1ee <_dtoa_r+0xb96>
 800f1e8:	f019 0f01 	tst.w	r9, #1
 800f1ec:	d192      	bne.n	800f114 <_dtoa_r+0xabc>
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	461d      	mov	r5, r3
 800f1f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1f6:	2a30      	cmp	r2, #48	; 0x30
 800f1f8:	d0fa      	beq.n	800f1f0 <_dtoa_r+0xb98>
 800f1fa:	e6dd      	b.n	800efb8 <_dtoa_r+0x960>
 800f1fc:	9a00      	ldr	r2, [sp, #0]
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d189      	bne.n	800f116 <_dtoa_r+0xabe>
 800f202:	f10b 0b01 	add.w	fp, fp, #1
 800f206:	2331      	movs	r3, #49	; 0x31
 800f208:	e796      	b.n	800f138 <_dtoa_r+0xae0>
 800f20a:	4b0a      	ldr	r3, [pc, #40]	; (800f234 <_dtoa_r+0xbdc>)
 800f20c:	f7ff ba99 	b.w	800e742 <_dtoa_r+0xea>
 800f210:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f212:	2b00      	cmp	r3, #0
 800f214:	f47f aa6d 	bne.w	800e6f2 <_dtoa_r+0x9a>
 800f218:	4b07      	ldr	r3, [pc, #28]	; (800f238 <_dtoa_r+0xbe0>)
 800f21a:	f7ff ba92 	b.w	800e742 <_dtoa_r+0xea>
 800f21e:	9b01      	ldr	r3, [sp, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	dcb5      	bgt.n	800f190 <_dtoa_r+0xb38>
 800f224:	9b07      	ldr	r3, [sp, #28]
 800f226:	2b02      	cmp	r3, #2
 800f228:	f73f aeb1 	bgt.w	800ef8e <_dtoa_r+0x936>
 800f22c:	e7b0      	b.n	800f190 <_dtoa_r+0xb38>
 800f22e:	bf00      	nop
 800f230:	080126b6 	.word	0x080126b6
 800f234:	08012611 	.word	0x08012611
 800f238:	0801263a 	.word	0x0801263a

0800f23c <_free_r>:
 800f23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f23e:	2900      	cmp	r1, #0
 800f240:	d044      	beq.n	800f2cc <_free_r+0x90>
 800f242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f246:	9001      	str	r0, [sp, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f1a1 0404 	sub.w	r4, r1, #4
 800f24e:	bfb8      	it	lt
 800f250:	18e4      	addlt	r4, r4, r3
 800f252:	f7fd ff81 	bl	800d158 <__malloc_lock>
 800f256:	4a1e      	ldr	r2, [pc, #120]	; (800f2d0 <_free_r+0x94>)
 800f258:	9801      	ldr	r0, [sp, #4]
 800f25a:	6813      	ldr	r3, [r2, #0]
 800f25c:	b933      	cbnz	r3, 800f26c <_free_r+0x30>
 800f25e:	6063      	str	r3, [r4, #4]
 800f260:	6014      	str	r4, [r2, #0]
 800f262:	b003      	add	sp, #12
 800f264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f268:	f7fd bf7c 	b.w	800d164 <__malloc_unlock>
 800f26c:	42a3      	cmp	r3, r4
 800f26e:	d908      	bls.n	800f282 <_free_r+0x46>
 800f270:	6825      	ldr	r5, [r4, #0]
 800f272:	1961      	adds	r1, r4, r5
 800f274:	428b      	cmp	r3, r1
 800f276:	bf01      	itttt	eq
 800f278:	6819      	ldreq	r1, [r3, #0]
 800f27a:	685b      	ldreq	r3, [r3, #4]
 800f27c:	1949      	addeq	r1, r1, r5
 800f27e:	6021      	streq	r1, [r4, #0]
 800f280:	e7ed      	b.n	800f25e <_free_r+0x22>
 800f282:	461a      	mov	r2, r3
 800f284:	685b      	ldr	r3, [r3, #4]
 800f286:	b10b      	cbz	r3, 800f28c <_free_r+0x50>
 800f288:	42a3      	cmp	r3, r4
 800f28a:	d9fa      	bls.n	800f282 <_free_r+0x46>
 800f28c:	6811      	ldr	r1, [r2, #0]
 800f28e:	1855      	adds	r5, r2, r1
 800f290:	42a5      	cmp	r5, r4
 800f292:	d10b      	bne.n	800f2ac <_free_r+0x70>
 800f294:	6824      	ldr	r4, [r4, #0]
 800f296:	4421      	add	r1, r4
 800f298:	1854      	adds	r4, r2, r1
 800f29a:	42a3      	cmp	r3, r4
 800f29c:	6011      	str	r1, [r2, #0]
 800f29e:	d1e0      	bne.n	800f262 <_free_r+0x26>
 800f2a0:	681c      	ldr	r4, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	6053      	str	r3, [r2, #4]
 800f2a6:	440c      	add	r4, r1
 800f2a8:	6014      	str	r4, [r2, #0]
 800f2aa:	e7da      	b.n	800f262 <_free_r+0x26>
 800f2ac:	d902      	bls.n	800f2b4 <_free_r+0x78>
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	6003      	str	r3, [r0, #0]
 800f2b2:	e7d6      	b.n	800f262 <_free_r+0x26>
 800f2b4:	6825      	ldr	r5, [r4, #0]
 800f2b6:	1961      	adds	r1, r4, r5
 800f2b8:	428b      	cmp	r3, r1
 800f2ba:	bf04      	itt	eq
 800f2bc:	6819      	ldreq	r1, [r3, #0]
 800f2be:	685b      	ldreq	r3, [r3, #4]
 800f2c0:	6063      	str	r3, [r4, #4]
 800f2c2:	bf04      	itt	eq
 800f2c4:	1949      	addeq	r1, r1, r5
 800f2c6:	6021      	streq	r1, [r4, #0]
 800f2c8:	6054      	str	r4, [r2, #4]
 800f2ca:	e7ca      	b.n	800f262 <_free_r+0x26>
 800f2cc:	b003      	add	sp, #12
 800f2ce:	bd30      	pop	{r4, r5, pc}
 800f2d0:	20002d04 	.word	0x20002d04

0800f2d4 <_Balloc>:
 800f2d4:	b570      	push	{r4, r5, r6, lr}
 800f2d6:	69c6      	ldr	r6, [r0, #28]
 800f2d8:	4604      	mov	r4, r0
 800f2da:	460d      	mov	r5, r1
 800f2dc:	b976      	cbnz	r6, 800f2fc <_Balloc+0x28>
 800f2de:	2010      	movs	r0, #16
 800f2e0:	f7fd fe8a 	bl	800cff8 <malloc>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	61e0      	str	r0, [r4, #28]
 800f2e8:	b920      	cbnz	r0, 800f2f4 <_Balloc+0x20>
 800f2ea:	4b18      	ldr	r3, [pc, #96]	; (800f34c <_Balloc+0x78>)
 800f2ec:	4818      	ldr	r0, [pc, #96]	; (800f350 <_Balloc+0x7c>)
 800f2ee:	216b      	movs	r1, #107	; 0x6b
 800f2f0:	f001 fed6 	bl	80110a0 <__assert_func>
 800f2f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2f8:	6006      	str	r6, [r0, #0]
 800f2fa:	60c6      	str	r6, [r0, #12]
 800f2fc:	69e6      	ldr	r6, [r4, #28]
 800f2fe:	68f3      	ldr	r3, [r6, #12]
 800f300:	b183      	cbz	r3, 800f324 <_Balloc+0x50>
 800f302:	69e3      	ldr	r3, [r4, #28]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f30a:	b9b8      	cbnz	r0, 800f33c <_Balloc+0x68>
 800f30c:	2101      	movs	r1, #1
 800f30e:	fa01 f605 	lsl.w	r6, r1, r5
 800f312:	1d72      	adds	r2, r6, #5
 800f314:	0092      	lsls	r2, r2, #2
 800f316:	4620      	mov	r0, r4
 800f318:	f001 fee0 	bl	80110dc <_calloc_r>
 800f31c:	b160      	cbz	r0, 800f338 <_Balloc+0x64>
 800f31e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f322:	e00e      	b.n	800f342 <_Balloc+0x6e>
 800f324:	2221      	movs	r2, #33	; 0x21
 800f326:	2104      	movs	r1, #4
 800f328:	4620      	mov	r0, r4
 800f32a:	f001 fed7 	bl	80110dc <_calloc_r>
 800f32e:	69e3      	ldr	r3, [r4, #28]
 800f330:	60f0      	str	r0, [r6, #12]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1e4      	bne.n	800f302 <_Balloc+0x2e>
 800f338:	2000      	movs	r0, #0
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	6802      	ldr	r2, [r0, #0]
 800f33e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f342:	2300      	movs	r3, #0
 800f344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f348:	e7f7      	b.n	800f33a <_Balloc+0x66>
 800f34a:	bf00      	nop
 800f34c:	08012647 	.word	0x08012647
 800f350:	080126c7 	.word	0x080126c7

0800f354 <_Bfree>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	69c6      	ldr	r6, [r0, #28]
 800f358:	4605      	mov	r5, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	b976      	cbnz	r6, 800f37c <_Bfree+0x28>
 800f35e:	2010      	movs	r0, #16
 800f360:	f7fd fe4a 	bl	800cff8 <malloc>
 800f364:	4602      	mov	r2, r0
 800f366:	61e8      	str	r0, [r5, #28]
 800f368:	b920      	cbnz	r0, 800f374 <_Bfree+0x20>
 800f36a:	4b09      	ldr	r3, [pc, #36]	; (800f390 <_Bfree+0x3c>)
 800f36c:	4809      	ldr	r0, [pc, #36]	; (800f394 <_Bfree+0x40>)
 800f36e:	218f      	movs	r1, #143	; 0x8f
 800f370:	f001 fe96 	bl	80110a0 <__assert_func>
 800f374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f378:	6006      	str	r6, [r0, #0]
 800f37a:	60c6      	str	r6, [r0, #12]
 800f37c:	b13c      	cbz	r4, 800f38e <_Bfree+0x3a>
 800f37e:	69eb      	ldr	r3, [r5, #28]
 800f380:	6862      	ldr	r2, [r4, #4]
 800f382:	68db      	ldr	r3, [r3, #12]
 800f384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f388:	6021      	str	r1, [r4, #0]
 800f38a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
 800f390:	08012647 	.word	0x08012647
 800f394:	080126c7 	.word	0x080126c7

0800f398 <__multadd>:
 800f398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39c:	690d      	ldr	r5, [r1, #16]
 800f39e:	4607      	mov	r7, r0
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	461e      	mov	r6, r3
 800f3a4:	f101 0c14 	add.w	ip, r1, #20
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	f8dc 3000 	ldr.w	r3, [ip]
 800f3ae:	b299      	uxth	r1, r3
 800f3b0:	fb02 6101 	mla	r1, r2, r1, r6
 800f3b4:	0c1e      	lsrs	r6, r3, #16
 800f3b6:	0c0b      	lsrs	r3, r1, #16
 800f3b8:	fb02 3306 	mla	r3, r2, r6, r3
 800f3bc:	b289      	uxth	r1, r1
 800f3be:	3001      	adds	r0, #1
 800f3c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3c4:	4285      	cmp	r5, r0
 800f3c6:	f84c 1b04 	str.w	r1, [ip], #4
 800f3ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3ce:	dcec      	bgt.n	800f3aa <__multadd+0x12>
 800f3d0:	b30e      	cbz	r6, 800f416 <__multadd+0x7e>
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	42ab      	cmp	r3, r5
 800f3d6:	dc19      	bgt.n	800f40c <__multadd+0x74>
 800f3d8:	6861      	ldr	r1, [r4, #4]
 800f3da:	4638      	mov	r0, r7
 800f3dc:	3101      	adds	r1, #1
 800f3de:	f7ff ff79 	bl	800f2d4 <_Balloc>
 800f3e2:	4680      	mov	r8, r0
 800f3e4:	b928      	cbnz	r0, 800f3f2 <__multadd+0x5a>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	4b0c      	ldr	r3, [pc, #48]	; (800f41c <__multadd+0x84>)
 800f3ea:	480d      	ldr	r0, [pc, #52]	; (800f420 <__multadd+0x88>)
 800f3ec:	21ba      	movs	r1, #186	; 0xba
 800f3ee:	f001 fe57 	bl	80110a0 <__assert_func>
 800f3f2:	6922      	ldr	r2, [r4, #16]
 800f3f4:	3202      	adds	r2, #2
 800f3f6:	f104 010c 	add.w	r1, r4, #12
 800f3fa:	0092      	lsls	r2, r2, #2
 800f3fc:	300c      	adds	r0, #12
 800f3fe:	f7ff f88c 	bl	800e51a <memcpy>
 800f402:	4621      	mov	r1, r4
 800f404:	4638      	mov	r0, r7
 800f406:	f7ff ffa5 	bl	800f354 <_Bfree>
 800f40a:	4644      	mov	r4, r8
 800f40c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f410:	3501      	adds	r5, #1
 800f412:	615e      	str	r6, [r3, #20]
 800f414:	6125      	str	r5, [r4, #16]
 800f416:	4620      	mov	r0, r4
 800f418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41c:	080126b6 	.word	0x080126b6
 800f420:	080126c7 	.word	0x080126c7

0800f424 <__s2b>:
 800f424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f428:	460c      	mov	r4, r1
 800f42a:	4615      	mov	r5, r2
 800f42c:	461f      	mov	r7, r3
 800f42e:	2209      	movs	r2, #9
 800f430:	3308      	adds	r3, #8
 800f432:	4606      	mov	r6, r0
 800f434:	fb93 f3f2 	sdiv	r3, r3, r2
 800f438:	2100      	movs	r1, #0
 800f43a:	2201      	movs	r2, #1
 800f43c:	429a      	cmp	r2, r3
 800f43e:	db09      	blt.n	800f454 <__s2b+0x30>
 800f440:	4630      	mov	r0, r6
 800f442:	f7ff ff47 	bl	800f2d4 <_Balloc>
 800f446:	b940      	cbnz	r0, 800f45a <__s2b+0x36>
 800f448:	4602      	mov	r2, r0
 800f44a:	4b19      	ldr	r3, [pc, #100]	; (800f4b0 <__s2b+0x8c>)
 800f44c:	4819      	ldr	r0, [pc, #100]	; (800f4b4 <__s2b+0x90>)
 800f44e:	21d3      	movs	r1, #211	; 0xd3
 800f450:	f001 fe26 	bl	80110a0 <__assert_func>
 800f454:	0052      	lsls	r2, r2, #1
 800f456:	3101      	adds	r1, #1
 800f458:	e7f0      	b.n	800f43c <__s2b+0x18>
 800f45a:	9b08      	ldr	r3, [sp, #32]
 800f45c:	6143      	str	r3, [r0, #20]
 800f45e:	2d09      	cmp	r5, #9
 800f460:	f04f 0301 	mov.w	r3, #1
 800f464:	6103      	str	r3, [r0, #16]
 800f466:	dd16      	ble.n	800f496 <__s2b+0x72>
 800f468:	f104 0909 	add.w	r9, r4, #9
 800f46c:	46c8      	mov	r8, r9
 800f46e:	442c      	add	r4, r5
 800f470:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f474:	4601      	mov	r1, r0
 800f476:	3b30      	subs	r3, #48	; 0x30
 800f478:	220a      	movs	r2, #10
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7ff ff8c 	bl	800f398 <__multadd>
 800f480:	45a0      	cmp	r8, r4
 800f482:	d1f5      	bne.n	800f470 <__s2b+0x4c>
 800f484:	f1a5 0408 	sub.w	r4, r5, #8
 800f488:	444c      	add	r4, r9
 800f48a:	1b2d      	subs	r5, r5, r4
 800f48c:	1963      	adds	r3, r4, r5
 800f48e:	42bb      	cmp	r3, r7
 800f490:	db04      	blt.n	800f49c <__s2b+0x78>
 800f492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f496:	340a      	adds	r4, #10
 800f498:	2509      	movs	r5, #9
 800f49a:	e7f6      	b.n	800f48a <__s2b+0x66>
 800f49c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f4a0:	4601      	mov	r1, r0
 800f4a2:	3b30      	subs	r3, #48	; 0x30
 800f4a4:	220a      	movs	r2, #10
 800f4a6:	4630      	mov	r0, r6
 800f4a8:	f7ff ff76 	bl	800f398 <__multadd>
 800f4ac:	e7ee      	b.n	800f48c <__s2b+0x68>
 800f4ae:	bf00      	nop
 800f4b0:	080126b6 	.word	0x080126b6
 800f4b4:	080126c7 	.word	0x080126c7

0800f4b8 <__hi0bits>:
 800f4b8:	0c03      	lsrs	r3, r0, #16
 800f4ba:	041b      	lsls	r3, r3, #16
 800f4bc:	b9d3      	cbnz	r3, 800f4f4 <__hi0bits+0x3c>
 800f4be:	0400      	lsls	r0, r0, #16
 800f4c0:	2310      	movs	r3, #16
 800f4c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4c6:	bf04      	itt	eq
 800f4c8:	0200      	lsleq	r0, r0, #8
 800f4ca:	3308      	addeq	r3, #8
 800f4cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4d0:	bf04      	itt	eq
 800f4d2:	0100      	lsleq	r0, r0, #4
 800f4d4:	3304      	addeq	r3, #4
 800f4d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4da:	bf04      	itt	eq
 800f4dc:	0080      	lsleq	r0, r0, #2
 800f4de:	3302      	addeq	r3, #2
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	db05      	blt.n	800f4f0 <__hi0bits+0x38>
 800f4e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4e8:	f103 0301 	add.w	r3, r3, #1
 800f4ec:	bf08      	it	eq
 800f4ee:	2320      	moveq	r3, #32
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	4770      	bx	lr
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	e7e4      	b.n	800f4c2 <__hi0bits+0xa>

0800f4f8 <__lo0bits>:
 800f4f8:	6803      	ldr	r3, [r0, #0]
 800f4fa:	f013 0207 	ands.w	r2, r3, #7
 800f4fe:	d00c      	beq.n	800f51a <__lo0bits+0x22>
 800f500:	07d9      	lsls	r1, r3, #31
 800f502:	d422      	bmi.n	800f54a <__lo0bits+0x52>
 800f504:	079a      	lsls	r2, r3, #30
 800f506:	bf49      	itett	mi
 800f508:	085b      	lsrmi	r3, r3, #1
 800f50a:	089b      	lsrpl	r3, r3, #2
 800f50c:	6003      	strmi	r3, [r0, #0]
 800f50e:	2201      	movmi	r2, #1
 800f510:	bf5c      	itt	pl
 800f512:	6003      	strpl	r3, [r0, #0]
 800f514:	2202      	movpl	r2, #2
 800f516:	4610      	mov	r0, r2
 800f518:	4770      	bx	lr
 800f51a:	b299      	uxth	r1, r3
 800f51c:	b909      	cbnz	r1, 800f522 <__lo0bits+0x2a>
 800f51e:	0c1b      	lsrs	r3, r3, #16
 800f520:	2210      	movs	r2, #16
 800f522:	b2d9      	uxtb	r1, r3
 800f524:	b909      	cbnz	r1, 800f52a <__lo0bits+0x32>
 800f526:	3208      	adds	r2, #8
 800f528:	0a1b      	lsrs	r3, r3, #8
 800f52a:	0719      	lsls	r1, r3, #28
 800f52c:	bf04      	itt	eq
 800f52e:	091b      	lsreq	r3, r3, #4
 800f530:	3204      	addeq	r2, #4
 800f532:	0799      	lsls	r1, r3, #30
 800f534:	bf04      	itt	eq
 800f536:	089b      	lsreq	r3, r3, #2
 800f538:	3202      	addeq	r2, #2
 800f53a:	07d9      	lsls	r1, r3, #31
 800f53c:	d403      	bmi.n	800f546 <__lo0bits+0x4e>
 800f53e:	085b      	lsrs	r3, r3, #1
 800f540:	f102 0201 	add.w	r2, r2, #1
 800f544:	d003      	beq.n	800f54e <__lo0bits+0x56>
 800f546:	6003      	str	r3, [r0, #0]
 800f548:	e7e5      	b.n	800f516 <__lo0bits+0x1e>
 800f54a:	2200      	movs	r2, #0
 800f54c:	e7e3      	b.n	800f516 <__lo0bits+0x1e>
 800f54e:	2220      	movs	r2, #32
 800f550:	e7e1      	b.n	800f516 <__lo0bits+0x1e>
	...

0800f554 <__i2b>:
 800f554:	b510      	push	{r4, lr}
 800f556:	460c      	mov	r4, r1
 800f558:	2101      	movs	r1, #1
 800f55a:	f7ff febb 	bl	800f2d4 <_Balloc>
 800f55e:	4602      	mov	r2, r0
 800f560:	b928      	cbnz	r0, 800f56e <__i2b+0x1a>
 800f562:	4b05      	ldr	r3, [pc, #20]	; (800f578 <__i2b+0x24>)
 800f564:	4805      	ldr	r0, [pc, #20]	; (800f57c <__i2b+0x28>)
 800f566:	f240 1145 	movw	r1, #325	; 0x145
 800f56a:	f001 fd99 	bl	80110a0 <__assert_func>
 800f56e:	2301      	movs	r3, #1
 800f570:	6144      	str	r4, [r0, #20]
 800f572:	6103      	str	r3, [r0, #16]
 800f574:	bd10      	pop	{r4, pc}
 800f576:	bf00      	nop
 800f578:	080126b6 	.word	0x080126b6
 800f57c:	080126c7 	.word	0x080126c7

0800f580 <__multiply>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	4691      	mov	r9, r2
 800f586:	690a      	ldr	r2, [r1, #16]
 800f588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	bfb8      	it	lt
 800f590:	460b      	movlt	r3, r1
 800f592:	460c      	mov	r4, r1
 800f594:	bfbc      	itt	lt
 800f596:	464c      	movlt	r4, r9
 800f598:	4699      	movlt	r9, r3
 800f59a:	6927      	ldr	r7, [r4, #16]
 800f59c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5a0:	68a3      	ldr	r3, [r4, #8]
 800f5a2:	6861      	ldr	r1, [r4, #4]
 800f5a4:	eb07 060a 	add.w	r6, r7, sl
 800f5a8:	42b3      	cmp	r3, r6
 800f5aa:	b085      	sub	sp, #20
 800f5ac:	bfb8      	it	lt
 800f5ae:	3101      	addlt	r1, #1
 800f5b0:	f7ff fe90 	bl	800f2d4 <_Balloc>
 800f5b4:	b930      	cbnz	r0, 800f5c4 <__multiply+0x44>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	4b44      	ldr	r3, [pc, #272]	; (800f6cc <__multiply+0x14c>)
 800f5ba:	4845      	ldr	r0, [pc, #276]	; (800f6d0 <__multiply+0x150>)
 800f5bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f5c0:	f001 fd6e 	bl	80110a0 <__assert_func>
 800f5c4:	f100 0514 	add.w	r5, r0, #20
 800f5c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5cc:	462b      	mov	r3, r5
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	4543      	cmp	r3, r8
 800f5d2:	d321      	bcc.n	800f618 <__multiply+0x98>
 800f5d4:	f104 0314 	add.w	r3, r4, #20
 800f5d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5dc:	f109 0314 	add.w	r3, r9, #20
 800f5e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5e4:	9202      	str	r2, [sp, #8]
 800f5e6:	1b3a      	subs	r2, r7, r4
 800f5e8:	3a15      	subs	r2, #21
 800f5ea:	f022 0203 	bic.w	r2, r2, #3
 800f5ee:	3204      	adds	r2, #4
 800f5f0:	f104 0115 	add.w	r1, r4, #21
 800f5f4:	428f      	cmp	r7, r1
 800f5f6:	bf38      	it	cc
 800f5f8:	2204      	movcc	r2, #4
 800f5fa:	9201      	str	r2, [sp, #4]
 800f5fc:	9a02      	ldr	r2, [sp, #8]
 800f5fe:	9303      	str	r3, [sp, #12]
 800f600:	429a      	cmp	r2, r3
 800f602:	d80c      	bhi.n	800f61e <__multiply+0x9e>
 800f604:	2e00      	cmp	r6, #0
 800f606:	dd03      	ble.n	800f610 <__multiply+0x90>
 800f608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d05b      	beq.n	800f6c8 <__multiply+0x148>
 800f610:	6106      	str	r6, [r0, #16]
 800f612:	b005      	add	sp, #20
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f618:	f843 2b04 	str.w	r2, [r3], #4
 800f61c:	e7d8      	b.n	800f5d0 <__multiply+0x50>
 800f61e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f622:	f1ba 0f00 	cmp.w	sl, #0
 800f626:	d024      	beq.n	800f672 <__multiply+0xf2>
 800f628:	f104 0e14 	add.w	lr, r4, #20
 800f62c:	46a9      	mov	r9, r5
 800f62e:	f04f 0c00 	mov.w	ip, #0
 800f632:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f636:	f8d9 1000 	ldr.w	r1, [r9]
 800f63a:	fa1f fb82 	uxth.w	fp, r2
 800f63e:	b289      	uxth	r1, r1
 800f640:	fb0a 110b 	mla	r1, sl, fp, r1
 800f644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f648:	f8d9 2000 	ldr.w	r2, [r9]
 800f64c:	4461      	add	r1, ip
 800f64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f652:	fb0a c20b 	mla	r2, sl, fp, ip
 800f656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f65a:	b289      	uxth	r1, r1
 800f65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f660:	4577      	cmp	r7, lr
 800f662:	f849 1b04 	str.w	r1, [r9], #4
 800f666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f66a:	d8e2      	bhi.n	800f632 <__multiply+0xb2>
 800f66c:	9a01      	ldr	r2, [sp, #4]
 800f66e:	f845 c002 	str.w	ip, [r5, r2]
 800f672:	9a03      	ldr	r2, [sp, #12]
 800f674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f678:	3304      	adds	r3, #4
 800f67a:	f1b9 0f00 	cmp.w	r9, #0
 800f67e:	d021      	beq.n	800f6c4 <__multiply+0x144>
 800f680:	6829      	ldr	r1, [r5, #0]
 800f682:	f104 0c14 	add.w	ip, r4, #20
 800f686:	46ae      	mov	lr, r5
 800f688:	f04f 0a00 	mov.w	sl, #0
 800f68c:	f8bc b000 	ldrh.w	fp, [ip]
 800f690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f694:	fb09 220b 	mla	r2, r9, fp, r2
 800f698:	4452      	add	r2, sl
 800f69a:	b289      	uxth	r1, r1
 800f69c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6a0:	f84e 1b04 	str.w	r1, [lr], #4
 800f6a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f6a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6ac:	f8be 1000 	ldrh.w	r1, [lr]
 800f6b0:	fb09 110a 	mla	r1, r9, sl, r1
 800f6b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f6b8:	4567      	cmp	r7, ip
 800f6ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f6be:	d8e5      	bhi.n	800f68c <__multiply+0x10c>
 800f6c0:	9a01      	ldr	r2, [sp, #4]
 800f6c2:	50a9      	str	r1, [r5, r2]
 800f6c4:	3504      	adds	r5, #4
 800f6c6:	e799      	b.n	800f5fc <__multiply+0x7c>
 800f6c8:	3e01      	subs	r6, #1
 800f6ca:	e79b      	b.n	800f604 <__multiply+0x84>
 800f6cc:	080126b6 	.word	0x080126b6
 800f6d0:	080126c7 	.word	0x080126c7

0800f6d4 <__pow5mult>:
 800f6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6d8:	4615      	mov	r5, r2
 800f6da:	f012 0203 	ands.w	r2, r2, #3
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460f      	mov	r7, r1
 800f6e2:	d007      	beq.n	800f6f4 <__pow5mult+0x20>
 800f6e4:	4c25      	ldr	r4, [pc, #148]	; (800f77c <__pow5mult+0xa8>)
 800f6e6:	3a01      	subs	r2, #1
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ee:	f7ff fe53 	bl	800f398 <__multadd>
 800f6f2:	4607      	mov	r7, r0
 800f6f4:	10ad      	asrs	r5, r5, #2
 800f6f6:	d03d      	beq.n	800f774 <__pow5mult+0xa0>
 800f6f8:	69f4      	ldr	r4, [r6, #28]
 800f6fa:	b97c      	cbnz	r4, 800f71c <__pow5mult+0x48>
 800f6fc:	2010      	movs	r0, #16
 800f6fe:	f7fd fc7b 	bl	800cff8 <malloc>
 800f702:	4602      	mov	r2, r0
 800f704:	61f0      	str	r0, [r6, #28]
 800f706:	b928      	cbnz	r0, 800f714 <__pow5mult+0x40>
 800f708:	4b1d      	ldr	r3, [pc, #116]	; (800f780 <__pow5mult+0xac>)
 800f70a:	481e      	ldr	r0, [pc, #120]	; (800f784 <__pow5mult+0xb0>)
 800f70c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f710:	f001 fcc6 	bl	80110a0 <__assert_func>
 800f714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f718:	6004      	str	r4, [r0, #0]
 800f71a:	60c4      	str	r4, [r0, #12]
 800f71c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f724:	b94c      	cbnz	r4, 800f73a <__pow5mult+0x66>
 800f726:	f240 2171 	movw	r1, #625	; 0x271
 800f72a:	4630      	mov	r0, r6
 800f72c:	f7ff ff12 	bl	800f554 <__i2b>
 800f730:	2300      	movs	r3, #0
 800f732:	f8c8 0008 	str.w	r0, [r8, #8]
 800f736:	4604      	mov	r4, r0
 800f738:	6003      	str	r3, [r0, #0]
 800f73a:	f04f 0900 	mov.w	r9, #0
 800f73e:	07eb      	lsls	r3, r5, #31
 800f740:	d50a      	bpl.n	800f758 <__pow5mult+0x84>
 800f742:	4639      	mov	r1, r7
 800f744:	4622      	mov	r2, r4
 800f746:	4630      	mov	r0, r6
 800f748:	f7ff ff1a 	bl	800f580 <__multiply>
 800f74c:	4639      	mov	r1, r7
 800f74e:	4680      	mov	r8, r0
 800f750:	4630      	mov	r0, r6
 800f752:	f7ff fdff 	bl	800f354 <_Bfree>
 800f756:	4647      	mov	r7, r8
 800f758:	106d      	asrs	r5, r5, #1
 800f75a:	d00b      	beq.n	800f774 <__pow5mult+0xa0>
 800f75c:	6820      	ldr	r0, [r4, #0]
 800f75e:	b938      	cbnz	r0, 800f770 <__pow5mult+0x9c>
 800f760:	4622      	mov	r2, r4
 800f762:	4621      	mov	r1, r4
 800f764:	4630      	mov	r0, r6
 800f766:	f7ff ff0b 	bl	800f580 <__multiply>
 800f76a:	6020      	str	r0, [r4, #0]
 800f76c:	f8c0 9000 	str.w	r9, [r0]
 800f770:	4604      	mov	r4, r0
 800f772:	e7e4      	b.n	800f73e <__pow5mult+0x6a>
 800f774:	4638      	mov	r0, r7
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	bf00      	nop
 800f77c:	08012810 	.word	0x08012810
 800f780:	08012647 	.word	0x08012647
 800f784:	080126c7 	.word	0x080126c7

0800f788 <__lshift>:
 800f788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	460c      	mov	r4, r1
 800f78e:	6849      	ldr	r1, [r1, #4]
 800f790:	6923      	ldr	r3, [r4, #16]
 800f792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f796:	68a3      	ldr	r3, [r4, #8]
 800f798:	4607      	mov	r7, r0
 800f79a:	4691      	mov	r9, r2
 800f79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7a0:	f108 0601 	add.w	r6, r8, #1
 800f7a4:	42b3      	cmp	r3, r6
 800f7a6:	db0b      	blt.n	800f7c0 <__lshift+0x38>
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	f7ff fd93 	bl	800f2d4 <_Balloc>
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	b948      	cbnz	r0, 800f7c6 <__lshift+0x3e>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	4b28      	ldr	r3, [pc, #160]	; (800f858 <__lshift+0xd0>)
 800f7b6:	4829      	ldr	r0, [pc, #164]	; (800f85c <__lshift+0xd4>)
 800f7b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f7bc:	f001 fc70 	bl	80110a0 <__assert_func>
 800f7c0:	3101      	adds	r1, #1
 800f7c2:	005b      	lsls	r3, r3, #1
 800f7c4:	e7ee      	b.n	800f7a4 <__lshift+0x1c>
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f100 0114 	add.w	r1, r0, #20
 800f7cc:	f100 0210 	add.w	r2, r0, #16
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	4553      	cmp	r3, sl
 800f7d4:	db33      	blt.n	800f83e <__lshift+0xb6>
 800f7d6:	6920      	ldr	r0, [r4, #16]
 800f7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7dc:	f104 0314 	add.w	r3, r4, #20
 800f7e0:	f019 091f 	ands.w	r9, r9, #31
 800f7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7ec:	d02b      	beq.n	800f846 <__lshift+0xbe>
 800f7ee:	f1c9 0e20 	rsb	lr, r9, #32
 800f7f2:	468a      	mov	sl, r1
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	6818      	ldr	r0, [r3, #0]
 800f7f8:	fa00 f009 	lsl.w	r0, r0, r9
 800f7fc:	4310      	orrs	r0, r2
 800f7fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f802:	f853 2b04 	ldr.w	r2, [r3], #4
 800f806:	459c      	cmp	ip, r3
 800f808:	fa22 f20e 	lsr.w	r2, r2, lr
 800f80c:	d8f3      	bhi.n	800f7f6 <__lshift+0x6e>
 800f80e:	ebac 0304 	sub.w	r3, ip, r4
 800f812:	3b15      	subs	r3, #21
 800f814:	f023 0303 	bic.w	r3, r3, #3
 800f818:	3304      	adds	r3, #4
 800f81a:	f104 0015 	add.w	r0, r4, #21
 800f81e:	4584      	cmp	ip, r0
 800f820:	bf38      	it	cc
 800f822:	2304      	movcc	r3, #4
 800f824:	50ca      	str	r2, [r1, r3]
 800f826:	b10a      	cbz	r2, 800f82c <__lshift+0xa4>
 800f828:	f108 0602 	add.w	r6, r8, #2
 800f82c:	3e01      	subs	r6, #1
 800f82e:	4638      	mov	r0, r7
 800f830:	612e      	str	r6, [r5, #16]
 800f832:	4621      	mov	r1, r4
 800f834:	f7ff fd8e 	bl	800f354 <_Bfree>
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f83e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f842:	3301      	adds	r3, #1
 800f844:	e7c5      	b.n	800f7d2 <__lshift+0x4a>
 800f846:	3904      	subs	r1, #4
 800f848:	f853 2b04 	ldr.w	r2, [r3], #4
 800f84c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f850:	459c      	cmp	ip, r3
 800f852:	d8f9      	bhi.n	800f848 <__lshift+0xc0>
 800f854:	e7ea      	b.n	800f82c <__lshift+0xa4>
 800f856:	bf00      	nop
 800f858:	080126b6 	.word	0x080126b6
 800f85c:	080126c7 	.word	0x080126c7

0800f860 <__mcmp>:
 800f860:	b530      	push	{r4, r5, lr}
 800f862:	6902      	ldr	r2, [r0, #16]
 800f864:	690c      	ldr	r4, [r1, #16]
 800f866:	1b12      	subs	r2, r2, r4
 800f868:	d10e      	bne.n	800f888 <__mcmp+0x28>
 800f86a:	f100 0314 	add.w	r3, r0, #20
 800f86e:	3114      	adds	r1, #20
 800f870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f87c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f880:	42a5      	cmp	r5, r4
 800f882:	d003      	beq.n	800f88c <__mcmp+0x2c>
 800f884:	d305      	bcc.n	800f892 <__mcmp+0x32>
 800f886:	2201      	movs	r2, #1
 800f888:	4610      	mov	r0, r2
 800f88a:	bd30      	pop	{r4, r5, pc}
 800f88c:	4283      	cmp	r3, r0
 800f88e:	d3f3      	bcc.n	800f878 <__mcmp+0x18>
 800f890:	e7fa      	b.n	800f888 <__mcmp+0x28>
 800f892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f896:	e7f7      	b.n	800f888 <__mcmp+0x28>

0800f898 <__mdiff>:
 800f898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	460c      	mov	r4, r1
 800f89e:	4606      	mov	r6, r0
 800f8a0:	4611      	mov	r1, r2
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	4690      	mov	r8, r2
 800f8a6:	f7ff ffdb 	bl	800f860 <__mcmp>
 800f8aa:	1e05      	subs	r5, r0, #0
 800f8ac:	d110      	bne.n	800f8d0 <__mdiff+0x38>
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7ff fd0f 	bl	800f2d4 <_Balloc>
 800f8b6:	b930      	cbnz	r0, 800f8c6 <__mdiff+0x2e>
 800f8b8:	4b3a      	ldr	r3, [pc, #232]	; (800f9a4 <__mdiff+0x10c>)
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	f240 2137 	movw	r1, #567	; 0x237
 800f8c0:	4839      	ldr	r0, [pc, #228]	; (800f9a8 <__mdiff+0x110>)
 800f8c2:	f001 fbed 	bl	80110a0 <__assert_func>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d0:	bfa4      	itt	ge
 800f8d2:	4643      	movge	r3, r8
 800f8d4:	46a0      	movge	r8, r4
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8dc:	bfa6      	itte	ge
 800f8de:	461c      	movge	r4, r3
 800f8e0:	2500      	movge	r5, #0
 800f8e2:	2501      	movlt	r5, #1
 800f8e4:	f7ff fcf6 	bl	800f2d4 <_Balloc>
 800f8e8:	b920      	cbnz	r0, 800f8f4 <__mdiff+0x5c>
 800f8ea:	4b2e      	ldr	r3, [pc, #184]	; (800f9a4 <__mdiff+0x10c>)
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	f240 2145 	movw	r1, #581	; 0x245
 800f8f2:	e7e5      	b.n	800f8c0 <__mdiff+0x28>
 800f8f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8f8:	6926      	ldr	r6, [r4, #16]
 800f8fa:	60c5      	str	r5, [r0, #12]
 800f8fc:	f104 0914 	add.w	r9, r4, #20
 800f900:	f108 0514 	add.w	r5, r8, #20
 800f904:	f100 0e14 	add.w	lr, r0, #20
 800f908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f90c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f910:	f108 0210 	add.w	r2, r8, #16
 800f914:	46f2      	mov	sl, lr
 800f916:	2100      	movs	r1, #0
 800f918:	f859 3b04 	ldr.w	r3, [r9], #4
 800f91c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f920:	fa11 f88b 	uxtah	r8, r1, fp
 800f924:	b299      	uxth	r1, r3
 800f926:	0c1b      	lsrs	r3, r3, #16
 800f928:	eba8 0801 	sub.w	r8, r8, r1
 800f92c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f930:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f934:	fa1f f888 	uxth.w	r8, r8
 800f938:	1419      	asrs	r1, r3, #16
 800f93a:	454e      	cmp	r6, r9
 800f93c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f940:	f84a 3b04 	str.w	r3, [sl], #4
 800f944:	d8e8      	bhi.n	800f918 <__mdiff+0x80>
 800f946:	1b33      	subs	r3, r6, r4
 800f948:	3b15      	subs	r3, #21
 800f94a:	f023 0303 	bic.w	r3, r3, #3
 800f94e:	3304      	adds	r3, #4
 800f950:	3415      	adds	r4, #21
 800f952:	42a6      	cmp	r6, r4
 800f954:	bf38      	it	cc
 800f956:	2304      	movcc	r3, #4
 800f958:	441d      	add	r5, r3
 800f95a:	4473      	add	r3, lr
 800f95c:	469e      	mov	lr, r3
 800f95e:	462e      	mov	r6, r5
 800f960:	4566      	cmp	r6, ip
 800f962:	d30e      	bcc.n	800f982 <__mdiff+0xea>
 800f964:	f10c 0203 	add.w	r2, ip, #3
 800f968:	1b52      	subs	r2, r2, r5
 800f96a:	f022 0203 	bic.w	r2, r2, #3
 800f96e:	3d03      	subs	r5, #3
 800f970:	45ac      	cmp	ip, r5
 800f972:	bf38      	it	cc
 800f974:	2200      	movcc	r2, #0
 800f976:	4413      	add	r3, r2
 800f978:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f97c:	b17a      	cbz	r2, 800f99e <__mdiff+0x106>
 800f97e:	6107      	str	r7, [r0, #16]
 800f980:	e7a4      	b.n	800f8cc <__mdiff+0x34>
 800f982:	f856 8b04 	ldr.w	r8, [r6], #4
 800f986:	fa11 f288 	uxtah	r2, r1, r8
 800f98a:	1414      	asrs	r4, r2, #16
 800f98c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f990:	b292      	uxth	r2, r2
 800f992:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f996:	f84e 2b04 	str.w	r2, [lr], #4
 800f99a:	1421      	asrs	r1, r4, #16
 800f99c:	e7e0      	b.n	800f960 <__mdiff+0xc8>
 800f99e:	3f01      	subs	r7, #1
 800f9a0:	e7ea      	b.n	800f978 <__mdiff+0xe0>
 800f9a2:	bf00      	nop
 800f9a4:	080126b6 	.word	0x080126b6
 800f9a8:	080126c7 	.word	0x080126c7

0800f9ac <__ulp>:
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	ed8d 0b00 	vstr	d0, [sp]
 800f9b2:	9a01      	ldr	r2, [sp, #4]
 800f9b4:	4b0f      	ldr	r3, [pc, #60]	; (800f9f4 <__ulp+0x48>)
 800f9b6:	4013      	ands	r3, r2
 800f9b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dc08      	bgt.n	800f9d2 <__ulp+0x26>
 800f9c0:	425b      	negs	r3, r3
 800f9c2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f9c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9ca:	da04      	bge.n	800f9d6 <__ulp+0x2a>
 800f9cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f9d0:	4113      	asrs	r3, r2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	e008      	b.n	800f9e8 <__ulp+0x3c>
 800f9d6:	f1a2 0314 	sub.w	r3, r2, #20
 800f9da:	2b1e      	cmp	r3, #30
 800f9dc:	bfda      	itte	le
 800f9de:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f9e2:	40da      	lsrle	r2, r3
 800f9e4:	2201      	movgt	r2, #1
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	ec41 0b10 	vmov	d0, r0, r1
 800f9f0:	b002      	add	sp, #8
 800f9f2:	4770      	bx	lr
 800f9f4:	7ff00000 	.word	0x7ff00000

0800f9f8 <__b2d>:
 800f9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9fc:	6906      	ldr	r6, [r0, #16]
 800f9fe:	f100 0814 	add.w	r8, r0, #20
 800fa02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800fa06:	1f37      	subs	r7, r6, #4
 800fa08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f7ff fd53 	bl	800f4b8 <__hi0bits>
 800fa12:	f1c0 0320 	rsb	r3, r0, #32
 800fa16:	280a      	cmp	r0, #10
 800fa18:	600b      	str	r3, [r1, #0]
 800fa1a:	491b      	ldr	r1, [pc, #108]	; (800fa88 <__b2d+0x90>)
 800fa1c:	dc15      	bgt.n	800fa4a <__b2d+0x52>
 800fa1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa22:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa26:	45b8      	cmp	r8, r7
 800fa28:	ea43 0501 	orr.w	r5, r3, r1
 800fa2c:	bf34      	ite	cc
 800fa2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa32:	2300      	movcs	r3, #0
 800fa34:	3015      	adds	r0, #21
 800fa36:	fa02 f000 	lsl.w	r0, r2, r0
 800fa3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa3e:	4303      	orrs	r3, r0
 800fa40:	461c      	mov	r4, r3
 800fa42:	ec45 4b10 	vmov	d0, r4, r5
 800fa46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4a:	45b8      	cmp	r8, r7
 800fa4c:	bf3a      	itte	cc
 800fa4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa52:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa56:	2300      	movcs	r3, #0
 800fa58:	380b      	subs	r0, #11
 800fa5a:	d012      	beq.n	800fa82 <__b2d+0x8a>
 800fa5c:	f1c0 0120 	rsb	r1, r0, #32
 800fa60:	fa23 f401 	lsr.w	r4, r3, r1
 800fa64:	4082      	lsls	r2, r0
 800fa66:	4322      	orrs	r2, r4
 800fa68:	4547      	cmp	r7, r8
 800fa6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800fa6e:	bf8c      	ite	hi
 800fa70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa74:	2200      	movls	r2, #0
 800fa76:	4083      	lsls	r3, r0
 800fa78:	40ca      	lsrs	r2, r1
 800fa7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	e7de      	b.n	800fa40 <__b2d+0x48>
 800fa82:	ea42 0501 	orr.w	r5, r2, r1
 800fa86:	e7db      	b.n	800fa40 <__b2d+0x48>
 800fa88:	3ff00000 	.word	0x3ff00000

0800fa8c <__d2b>:
 800fa8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	460f      	mov	r7, r1
 800fa92:	2101      	movs	r1, #1
 800fa94:	ec59 8b10 	vmov	r8, r9, d0
 800fa98:	4616      	mov	r6, r2
 800fa9a:	f7ff fc1b 	bl	800f2d4 <_Balloc>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	b930      	cbnz	r0, 800fab0 <__d2b+0x24>
 800faa2:	4602      	mov	r2, r0
 800faa4:	4b24      	ldr	r3, [pc, #144]	; (800fb38 <__d2b+0xac>)
 800faa6:	4825      	ldr	r0, [pc, #148]	; (800fb3c <__d2b+0xb0>)
 800faa8:	f240 310f 	movw	r1, #783	; 0x30f
 800faac:	f001 faf8 	bl	80110a0 <__assert_func>
 800fab0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fab4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fab8:	bb2d      	cbnz	r5, 800fb06 <__d2b+0x7a>
 800faba:	9301      	str	r3, [sp, #4]
 800fabc:	f1b8 0300 	subs.w	r3, r8, #0
 800fac0:	d026      	beq.n	800fb10 <__d2b+0x84>
 800fac2:	4668      	mov	r0, sp
 800fac4:	9300      	str	r3, [sp, #0]
 800fac6:	f7ff fd17 	bl	800f4f8 <__lo0bits>
 800faca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800face:	b1e8      	cbz	r0, 800fb0c <__d2b+0x80>
 800fad0:	f1c0 0320 	rsb	r3, r0, #32
 800fad4:	fa02 f303 	lsl.w	r3, r2, r3
 800fad8:	430b      	orrs	r3, r1
 800fada:	40c2      	lsrs	r2, r0
 800fadc:	6163      	str	r3, [r4, #20]
 800fade:	9201      	str	r2, [sp, #4]
 800fae0:	9b01      	ldr	r3, [sp, #4]
 800fae2:	61a3      	str	r3, [r4, #24]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bf14      	ite	ne
 800fae8:	2202      	movne	r2, #2
 800faea:	2201      	moveq	r2, #1
 800faec:	6122      	str	r2, [r4, #16]
 800faee:	b1bd      	cbz	r5, 800fb20 <__d2b+0x94>
 800faf0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800faf4:	4405      	add	r5, r0
 800faf6:	603d      	str	r5, [r7, #0]
 800faf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fafc:	6030      	str	r0, [r6, #0]
 800fafe:	4620      	mov	r0, r4
 800fb00:	b003      	add	sp, #12
 800fb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb0a:	e7d6      	b.n	800faba <__d2b+0x2e>
 800fb0c:	6161      	str	r1, [r4, #20]
 800fb0e:	e7e7      	b.n	800fae0 <__d2b+0x54>
 800fb10:	a801      	add	r0, sp, #4
 800fb12:	f7ff fcf1 	bl	800f4f8 <__lo0bits>
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	6163      	str	r3, [r4, #20]
 800fb1a:	3020      	adds	r0, #32
 800fb1c:	2201      	movs	r2, #1
 800fb1e:	e7e5      	b.n	800faec <__d2b+0x60>
 800fb20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb28:	6038      	str	r0, [r7, #0]
 800fb2a:	6918      	ldr	r0, [r3, #16]
 800fb2c:	f7ff fcc4 	bl	800f4b8 <__hi0bits>
 800fb30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb34:	e7e2      	b.n	800fafc <__d2b+0x70>
 800fb36:	bf00      	nop
 800fb38:	080126b6 	.word	0x080126b6
 800fb3c:	080126c7 	.word	0x080126c7

0800fb40 <__ratio>:
 800fb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb44:	4688      	mov	r8, r1
 800fb46:	4669      	mov	r1, sp
 800fb48:	4681      	mov	r9, r0
 800fb4a:	f7ff ff55 	bl	800f9f8 <__b2d>
 800fb4e:	a901      	add	r1, sp, #4
 800fb50:	4640      	mov	r0, r8
 800fb52:	ec55 4b10 	vmov	r4, r5, d0
 800fb56:	f7ff ff4f 	bl	800f9f8 <__b2d>
 800fb5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb62:	eba3 0c02 	sub.w	ip, r3, r2
 800fb66:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb6a:	1a9b      	subs	r3, r3, r2
 800fb6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fb70:	ec51 0b10 	vmov	r0, r1, d0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	bfd6      	itet	le
 800fb78:	460a      	movle	r2, r1
 800fb7a:	462a      	movgt	r2, r5
 800fb7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb80:	468b      	mov	fp, r1
 800fb82:	462f      	mov	r7, r5
 800fb84:	bfd4      	ite	le
 800fb86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb8e:	4620      	mov	r0, r4
 800fb90:	ee10 2a10 	vmov	r2, s0
 800fb94:	465b      	mov	r3, fp
 800fb96:	4639      	mov	r1, r7
 800fb98:	f7f0 fe60 	bl	800085c <__aeabi_ddiv>
 800fb9c:	ec41 0b10 	vmov	d0, r0, r1
 800fba0:	b003      	add	sp, #12
 800fba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fba6 <__copybits>:
 800fba6:	3901      	subs	r1, #1
 800fba8:	b570      	push	{r4, r5, r6, lr}
 800fbaa:	1149      	asrs	r1, r1, #5
 800fbac:	6914      	ldr	r4, [r2, #16]
 800fbae:	3101      	adds	r1, #1
 800fbb0:	f102 0314 	add.w	r3, r2, #20
 800fbb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbbc:	1f05      	subs	r5, r0, #4
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	d30c      	bcc.n	800fbdc <__copybits+0x36>
 800fbc2:	1aa3      	subs	r3, r4, r2
 800fbc4:	3b11      	subs	r3, #17
 800fbc6:	f023 0303 	bic.w	r3, r3, #3
 800fbca:	3211      	adds	r2, #17
 800fbcc:	42a2      	cmp	r2, r4
 800fbce:	bf88      	it	hi
 800fbd0:	2300      	movhi	r3, #0
 800fbd2:	4418      	add	r0, r3
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	4288      	cmp	r0, r1
 800fbd8:	d305      	bcc.n	800fbe6 <__copybits+0x40>
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbe0:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbe4:	e7eb      	b.n	800fbbe <__copybits+0x18>
 800fbe6:	f840 3b04 	str.w	r3, [r0], #4
 800fbea:	e7f4      	b.n	800fbd6 <__copybits+0x30>

0800fbec <__any_on>:
 800fbec:	f100 0214 	add.w	r2, r0, #20
 800fbf0:	6900      	ldr	r0, [r0, #16]
 800fbf2:	114b      	asrs	r3, r1, #5
 800fbf4:	4298      	cmp	r0, r3
 800fbf6:	b510      	push	{r4, lr}
 800fbf8:	db11      	blt.n	800fc1e <__any_on+0x32>
 800fbfa:	dd0a      	ble.n	800fc12 <__any_on+0x26>
 800fbfc:	f011 011f 	ands.w	r1, r1, #31
 800fc00:	d007      	beq.n	800fc12 <__any_on+0x26>
 800fc02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fc06:	fa24 f001 	lsr.w	r0, r4, r1
 800fc0a:	fa00 f101 	lsl.w	r1, r0, r1
 800fc0e:	428c      	cmp	r4, r1
 800fc10:	d10b      	bne.n	800fc2a <__any_on+0x3e>
 800fc12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d803      	bhi.n	800fc22 <__any_on+0x36>
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	bd10      	pop	{r4, pc}
 800fc1e:	4603      	mov	r3, r0
 800fc20:	e7f7      	b.n	800fc12 <__any_on+0x26>
 800fc22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc26:	2900      	cmp	r1, #0
 800fc28:	d0f5      	beq.n	800fc16 <__any_on+0x2a>
 800fc2a:	2001      	movs	r0, #1
 800fc2c:	e7f6      	b.n	800fc1c <__any_on+0x30>

0800fc2e <sulp>:
 800fc2e:	b570      	push	{r4, r5, r6, lr}
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	ec45 4b10 	vmov	d0, r4, r5
 800fc38:	4616      	mov	r6, r2
 800fc3a:	f7ff feb7 	bl	800f9ac <__ulp>
 800fc3e:	ec51 0b10 	vmov	r0, r1, d0
 800fc42:	b17e      	cbz	r6, 800fc64 <sulp+0x36>
 800fc44:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	dd09      	ble.n	800fc64 <sulp+0x36>
 800fc50:	051b      	lsls	r3, r3, #20
 800fc52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fc56:	2400      	movs	r4, #0
 800fc58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fc5c:	4622      	mov	r2, r4
 800fc5e:	462b      	mov	r3, r5
 800fc60:	f7f0 fcd2 	bl	8000608 <__aeabi_dmul>
 800fc64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc68 <_strtod_l>:
 800fc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc6c:	ed2d 8b02 	vpush	{d8}
 800fc70:	b09b      	sub	sp, #108	; 0x6c
 800fc72:	4604      	mov	r4, r0
 800fc74:	9213      	str	r2, [sp, #76]	; 0x4c
 800fc76:	2200      	movs	r2, #0
 800fc78:	9216      	str	r2, [sp, #88]	; 0x58
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	f04f 0800 	mov.w	r8, #0
 800fc80:	f04f 0900 	mov.w	r9, #0
 800fc84:	460a      	mov	r2, r1
 800fc86:	9215      	str	r2, [sp, #84]	; 0x54
 800fc88:	7811      	ldrb	r1, [r2, #0]
 800fc8a:	292b      	cmp	r1, #43	; 0x2b
 800fc8c:	d04c      	beq.n	800fd28 <_strtod_l+0xc0>
 800fc8e:	d83a      	bhi.n	800fd06 <_strtod_l+0x9e>
 800fc90:	290d      	cmp	r1, #13
 800fc92:	d834      	bhi.n	800fcfe <_strtod_l+0x96>
 800fc94:	2908      	cmp	r1, #8
 800fc96:	d834      	bhi.n	800fd02 <_strtod_l+0x9a>
 800fc98:	2900      	cmp	r1, #0
 800fc9a:	d03d      	beq.n	800fd18 <_strtod_l+0xb0>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	920a      	str	r2, [sp, #40]	; 0x28
 800fca0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800fca2:	7832      	ldrb	r2, [r6, #0]
 800fca4:	2a30      	cmp	r2, #48	; 0x30
 800fca6:	f040 80b4 	bne.w	800fe12 <_strtod_l+0x1aa>
 800fcaa:	7872      	ldrb	r2, [r6, #1]
 800fcac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800fcb0:	2a58      	cmp	r2, #88	; 0x58
 800fcb2:	d170      	bne.n	800fd96 <_strtod_l+0x12e>
 800fcb4:	9302      	str	r3, [sp, #8]
 800fcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcb8:	9301      	str	r3, [sp, #4]
 800fcba:	ab16      	add	r3, sp, #88	; 0x58
 800fcbc:	9300      	str	r3, [sp, #0]
 800fcbe:	4a8e      	ldr	r2, [pc, #568]	; (800fef8 <_strtod_l+0x290>)
 800fcc0:	ab17      	add	r3, sp, #92	; 0x5c
 800fcc2:	a915      	add	r1, sp, #84	; 0x54
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f001 fa87 	bl	80111d8 <__gethex>
 800fcca:	f010 070f 	ands.w	r7, r0, #15
 800fcce:	4605      	mov	r5, r0
 800fcd0:	d005      	beq.n	800fcde <_strtod_l+0x76>
 800fcd2:	2f06      	cmp	r7, #6
 800fcd4:	d12a      	bne.n	800fd2c <_strtod_l+0xc4>
 800fcd6:	3601      	adds	r6, #1
 800fcd8:	2300      	movs	r3, #0
 800fcda:	9615      	str	r6, [sp, #84]	; 0x54
 800fcdc:	930a      	str	r3, [sp, #40]	; 0x28
 800fcde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f040 857f 	bne.w	80107e4 <_strtod_l+0xb7c>
 800fce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fce8:	b1db      	cbz	r3, 800fd22 <_strtod_l+0xba>
 800fcea:	4642      	mov	r2, r8
 800fcec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fcf0:	ec43 2b10 	vmov	d0, r2, r3
 800fcf4:	b01b      	add	sp, #108	; 0x6c
 800fcf6:	ecbd 8b02 	vpop	{d8}
 800fcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcfe:	2920      	cmp	r1, #32
 800fd00:	d1cc      	bne.n	800fc9c <_strtod_l+0x34>
 800fd02:	3201      	adds	r2, #1
 800fd04:	e7bf      	b.n	800fc86 <_strtod_l+0x1e>
 800fd06:	292d      	cmp	r1, #45	; 0x2d
 800fd08:	d1c8      	bne.n	800fc9c <_strtod_l+0x34>
 800fd0a:	2101      	movs	r1, #1
 800fd0c:	910a      	str	r1, [sp, #40]	; 0x28
 800fd0e:	1c51      	adds	r1, r2, #1
 800fd10:	9115      	str	r1, [sp, #84]	; 0x54
 800fd12:	7852      	ldrb	r2, [r2, #1]
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	d1c3      	bne.n	800fca0 <_strtod_l+0x38>
 800fd18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd1a:	9515      	str	r5, [sp, #84]	; 0x54
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	f040 855f 	bne.w	80107e0 <_strtod_l+0xb78>
 800fd22:	4642      	mov	r2, r8
 800fd24:	464b      	mov	r3, r9
 800fd26:	e7e3      	b.n	800fcf0 <_strtod_l+0x88>
 800fd28:	2100      	movs	r1, #0
 800fd2a:	e7ef      	b.n	800fd0c <_strtod_l+0xa4>
 800fd2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fd2e:	b13a      	cbz	r2, 800fd40 <_strtod_l+0xd8>
 800fd30:	2135      	movs	r1, #53	; 0x35
 800fd32:	a818      	add	r0, sp, #96	; 0x60
 800fd34:	f7ff ff37 	bl	800fba6 <__copybits>
 800fd38:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7ff fb0a 	bl	800f354 <_Bfree>
 800fd40:	3f01      	subs	r7, #1
 800fd42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fd44:	2f04      	cmp	r7, #4
 800fd46:	d806      	bhi.n	800fd56 <_strtod_l+0xee>
 800fd48:	e8df f007 	tbb	[pc, r7]
 800fd4c:	201d0314 	.word	0x201d0314
 800fd50:	14          	.byte	0x14
 800fd51:	00          	.byte	0x00
 800fd52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fd56:	05e9      	lsls	r1, r5, #23
 800fd58:	bf48      	it	mi
 800fd5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fd5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd62:	0d1b      	lsrs	r3, r3, #20
 800fd64:	051b      	lsls	r3, r3, #20
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1b9      	bne.n	800fcde <_strtod_l+0x76>
 800fd6a:	f7fe fba9 	bl	800e4c0 <__errno>
 800fd6e:	2322      	movs	r3, #34	; 0x22
 800fd70:	6003      	str	r3, [r0, #0]
 800fd72:	e7b4      	b.n	800fcde <_strtod_l+0x76>
 800fd74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800fd78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fd7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fd80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800fd84:	e7e7      	b.n	800fd56 <_strtod_l+0xee>
 800fd86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ff00 <_strtod_l+0x298>
 800fd8a:	e7e4      	b.n	800fd56 <_strtod_l+0xee>
 800fd8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fd90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800fd94:	e7df      	b.n	800fd56 <_strtod_l+0xee>
 800fd96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd98:	1c5a      	adds	r2, r3, #1
 800fd9a:	9215      	str	r2, [sp, #84]	; 0x54
 800fd9c:	785b      	ldrb	r3, [r3, #1]
 800fd9e:	2b30      	cmp	r3, #48	; 0x30
 800fda0:	d0f9      	beq.n	800fd96 <_strtod_l+0x12e>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d09b      	beq.n	800fcde <_strtod_l+0x76>
 800fda6:	2301      	movs	r3, #1
 800fda8:	f04f 0a00 	mov.w	sl, #0
 800fdac:	9304      	str	r3, [sp, #16]
 800fdae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fdb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fdb6:	46d3      	mov	fp, sl
 800fdb8:	220a      	movs	r2, #10
 800fdba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fdbc:	7806      	ldrb	r6, [r0, #0]
 800fdbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fdc2:	b2d9      	uxtb	r1, r3
 800fdc4:	2909      	cmp	r1, #9
 800fdc6:	d926      	bls.n	800fe16 <_strtod_l+0x1ae>
 800fdc8:	494c      	ldr	r1, [pc, #304]	; (800fefc <_strtod_l+0x294>)
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f7fe fb0c 	bl	800e3e8 <strncmp>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d030      	beq.n	800fe36 <_strtod_l+0x1ce>
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	4632      	mov	r2, r6
 800fdd8:	9005      	str	r0, [sp, #20]
 800fdda:	465e      	mov	r6, fp
 800fddc:	4603      	mov	r3, r0
 800fdde:	2a65      	cmp	r2, #101	; 0x65
 800fde0:	d001      	beq.n	800fde6 <_strtod_l+0x17e>
 800fde2:	2a45      	cmp	r2, #69	; 0x45
 800fde4:	d113      	bne.n	800fe0e <_strtod_l+0x1a6>
 800fde6:	b91e      	cbnz	r6, 800fdf0 <_strtod_l+0x188>
 800fde8:	9a04      	ldr	r2, [sp, #16]
 800fdea:	4302      	orrs	r2, r0
 800fdec:	d094      	beq.n	800fd18 <_strtod_l+0xb0>
 800fdee:	2600      	movs	r6, #0
 800fdf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fdf2:	1c6a      	adds	r2, r5, #1
 800fdf4:	9215      	str	r2, [sp, #84]	; 0x54
 800fdf6:	786a      	ldrb	r2, [r5, #1]
 800fdf8:	2a2b      	cmp	r2, #43	; 0x2b
 800fdfa:	d074      	beq.n	800fee6 <_strtod_l+0x27e>
 800fdfc:	2a2d      	cmp	r2, #45	; 0x2d
 800fdfe:	d078      	beq.n	800fef2 <_strtod_l+0x28a>
 800fe00:	f04f 0c00 	mov.w	ip, #0
 800fe04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fe08:	2909      	cmp	r1, #9
 800fe0a:	d97f      	bls.n	800ff0c <_strtod_l+0x2a4>
 800fe0c:	9515      	str	r5, [sp, #84]	; 0x54
 800fe0e:	2700      	movs	r7, #0
 800fe10:	e09e      	b.n	800ff50 <_strtod_l+0x2e8>
 800fe12:	2300      	movs	r3, #0
 800fe14:	e7c8      	b.n	800fda8 <_strtod_l+0x140>
 800fe16:	f1bb 0f08 	cmp.w	fp, #8
 800fe1a:	bfd8      	it	le
 800fe1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fe1e:	f100 0001 	add.w	r0, r0, #1
 800fe22:	bfda      	itte	le
 800fe24:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe28:	9309      	strle	r3, [sp, #36]	; 0x24
 800fe2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fe2e:	f10b 0b01 	add.w	fp, fp, #1
 800fe32:	9015      	str	r0, [sp, #84]	; 0x54
 800fe34:	e7c1      	b.n	800fdba <_strtod_l+0x152>
 800fe36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe38:	1c5a      	adds	r2, r3, #1
 800fe3a:	9215      	str	r2, [sp, #84]	; 0x54
 800fe3c:	785a      	ldrb	r2, [r3, #1]
 800fe3e:	f1bb 0f00 	cmp.w	fp, #0
 800fe42:	d037      	beq.n	800feb4 <_strtod_l+0x24c>
 800fe44:	9005      	str	r0, [sp, #20]
 800fe46:	465e      	mov	r6, fp
 800fe48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fe4c:	2b09      	cmp	r3, #9
 800fe4e:	d912      	bls.n	800fe76 <_strtod_l+0x20e>
 800fe50:	2301      	movs	r3, #1
 800fe52:	e7c4      	b.n	800fdde <_strtod_l+0x176>
 800fe54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	9215      	str	r2, [sp, #84]	; 0x54
 800fe5a:	785a      	ldrb	r2, [r3, #1]
 800fe5c:	3001      	adds	r0, #1
 800fe5e:	2a30      	cmp	r2, #48	; 0x30
 800fe60:	d0f8      	beq.n	800fe54 <_strtod_l+0x1ec>
 800fe62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fe66:	2b08      	cmp	r3, #8
 800fe68:	f200 84c1 	bhi.w	80107ee <_strtod_l+0xb86>
 800fe6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe6e:	9005      	str	r0, [sp, #20]
 800fe70:	2000      	movs	r0, #0
 800fe72:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe74:	4606      	mov	r6, r0
 800fe76:	3a30      	subs	r2, #48	; 0x30
 800fe78:	f100 0301 	add.w	r3, r0, #1
 800fe7c:	d014      	beq.n	800fea8 <_strtod_l+0x240>
 800fe7e:	9905      	ldr	r1, [sp, #20]
 800fe80:	4419      	add	r1, r3
 800fe82:	9105      	str	r1, [sp, #20]
 800fe84:	4633      	mov	r3, r6
 800fe86:	eb00 0c06 	add.w	ip, r0, r6
 800fe8a:	210a      	movs	r1, #10
 800fe8c:	4563      	cmp	r3, ip
 800fe8e:	d113      	bne.n	800feb8 <_strtod_l+0x250>
 800fe90:	1833      	adds	r3, r6, r0
 800fe92:	2b08      	cmp	r3, #8
 800fe94:	f106 0601 	add.w	r6, r6, #1
 800fe98:	4406      	add	r6, r0
 800fe9a:	dc1a      	bgt.n	800fed2 <_strtod_l+0x26a>
 800fe9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe9e:	230a      	movs	r3, #10
 800fea0:	fb03 2301 	mla	r3, r3, r1, r2
 800fea4:	9309      	str	r3, [sp, #36]	; 0x24
 800fea6:	2300      	movs	r3, #0
 800fea8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800feaa:	1c51      	adds	r1, r2, #1
 800feac:	9115      	str	r1, [sp, #84]	; 0x54
 800feae:	7852      	ldrb	r2, [r2, #1]
 800feb0:	4618      	mov	r0, r3
 800feb2:	e7c9      	b.n	800fe48 <_strtod_l+0x1e0>
 800feb4:	4658      	mov	r0, fp
 800feb6:	e7d2      	b.n	800fe5e <_strtod_l+0x1f6>
 800feb8:	2b08      	cmp	r3, #8
 800feba:	f103 0301 	add.w	r3, r3, #1
 800febe:	dc03      	bgt.n	800fec8 <_strtod_l+0x260>
 800fec0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fec2:	434f      	muls	r7, r1
 800fec4:	9709      	str	r7, [sp, #36]	; 0x24
 800fec6:	e7e1      	b.n	800fe8c <_strtod_l+0x224>
 800fec8:	2b10      	cmp	r3, #16
 800feca:	bfd8      	it	le
 800fecc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fed0:	e7dc      	b.n	800fe8c <_strtod_l+0x224>
 800fed2:	2e10      	cmp	r6, #16
 800fed4:	bfdc      	itt	le
 800fed6:	230a      	movle	r3, #10
 800fed8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fedc:	e7e3      	b.n	800fea6 <_strtod_l+0x23e>
 800fede:	2300      	movs	r3, #0
 800fee0:	9305      	str	r3, [sp, #20]
 800fee2:	2301      	movs	r3, #1
 800fee4:	e780      	b.n	800fde8 <_strtod_l+0x180>
 800fee6:	f04f 0c00 	mov.w	ip, #0
 800feea:	1caa      	adds	r2, r5, #2
 800feec:	9215      	str	r2, [sp, #84]	; 0x54
 800feee:	78aa      	ldrb	r2, [r5, #2]
 800fef0:	e788      	b.n	800fe04 <_strtod_l+0x19c>
 800fef2:	f04f 0c01 	mov.w	ip, #1
 800fef6:	e7f8      	b.n	800feea <_strtod_l+0x282>
 800fef8:	08012820 	.word	0x08012820
 800fefc:	0801281c 	.word	0x0801281c
 800ff00:	7ff00000 	.word	0x7ff00000
 800ff04:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff06:	1c51      	adds	r1, r2, #1
 800ff08:	9115      	str	r1, [sp, #84]	; 0x54
 800ff0a:	7852      	ldrb	r2, [r2, #1]
 800ff0c:	2a30      	cmp	r2, #48	; 0x30
 800ff0e:	d0f9      	beq.n	800ff04 <_strtod_l+0x29c>
 800ff10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ff14:	2908      	cmp	r1, #8
 800ff16:	f63f af7a 	bhi.w	800fe0e <_strtod_l+0x1a6>
 800ff1a:	3a30      	subs	r2, #48	; 0x30
 800ff1c:	9208      	str	r2, [sp, #32]
 800ff1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff20:	920c      	str	r2, [sp, #48]	; 0x30
 800ff22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ff24:	1c57      	adds	r7, r2, #1
 800ff26:	9715      	str	r7, [sp, #84]	; 0x54
 800ff28:	7852      	ldrb	r2, [r2, #1]
 800ff2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ff2e:	f1be 0f09 	cmp.w	lr, #9
 800ff32:	d938      	bls.n	800ffa6 <_strtod_l+0x33e>
 800ff34:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ff36:	1a7f      	subs	r7, r7, r1
 800ff38:	2f08      	cmp	r7, #8
 800ff3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ff3e:	dc03      	bgt.n	800ff48 <_strtod_l+0x2e0>
 800ff40:	9908      	ldr	r1, [sp, #32]
 800ff42:	428f      	cmp	r7, r1
 800ff44:	bfa8      	it	ge
 800ff46:	460f      	movge	r7, r1
 800ff48:	f1bc 0f00 	cmp.w	ip, #0
 800ff4c:	d000      	beq.n	800ff50 <_strtod_l+0x2e8>
 800ff4e:	427f      	negs	r7, r7
 800ff50:	2e00      	cmp	r6, #0
 800ff52:	d14f      	bne.n	800fff4 <_strtod_l+0x38c>
 800ff54:	9904      	ldr	r1, [sp, #16]
 800ff56:	4301      	orrs	r1, r0
 800ff58:	f47f aec1 	bne.w	800fcde <_strtod_l+0x76>
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f47f aedb 	bne.w	800fd18 <_strtod_l+0xb0>
 800ff62:	2a69      	cmp	r2, #105	; 0x69
 800ff64:	d029      	beq.n	800ffba <_strtod_l+0x352>
 800ff66:	dc26      	bgt.n	800ffb6 <_strtod_l+0x34e>
 800ff68:	2a49      	cmp	r2, #73	; 0x49
 800ff6a:	d026      	beq.n	800ffba <_strtod_l+0x352>
 800ff6c:	2a4e      	cmp	r2, #78	; 0x4e
 800ff6e:	f47f aed3 	bne.w	800fd18 <_strtod_l+0xb0>
 800ff72:	499b      	ldr	r1, [pc, #620]	; (80101e0 <_strtod_l+0x578>)
 800ff74:	a815      	add	r0, sp, #84	; 0x54
 800ff76:	f001 fb6f 	bl	8011658 <__match>
 800ff7a:	2800      	cmp	r0, #0
 800ff7c:	f43f aecc 	beq.w	800fd18 <_strtod_l+0xb0>
 800ff80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	2b28      	cmp	r3, #40	; 0x28
 800ff86:	d12f      	bne.n	800ffe8 <_strtod_l+0x380>
 800ff88:	4996      	ldr	r1, [pc, #600]	; (80101e4 <_strtod_l+0x57c>)
 800ff8a:	aa18      	add	r2, sp, #96	; 0x60
 800ff8c:	a815      	add	r0, sp, #84	; 0x54
 800ff8e:	f001 fb77 	bl	8011680 <__hexnan>
 800ff92:	2805      	cmp	r0, #5
 800ff94:	d128      	bne.n	800ffe8 <_strtod_l+0x380>
 800ff96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ff98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ff9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ffa0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ffa4:	e69b      	b.n	800fcde <_strtod_l+0x76>
 800ffa6:	9f08      	ldr	r7, [sp, #32]
 800ffa8:	210a      	movs	r1, #10
 800ffaa:	fb01 2107 	mla	r1, r1, r7, r2
 800ffae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ffb2:	9208      	str	r2, [sp, #32]
 800ffb4:	e7b5      	b.n	800ff22 <_strtod_l+0x2ba>
 800ffb6:	2a6e      	cmp	r2, #110	; 0x6e
 800ffb8:	e7d9      	b.n	800ff6e <_strtod_l+0x306>
 800ffba:	498b      	ldr	r1, [pc, #556]	; (80101e8 <_strtod_l+0x580>)
 800ffbc:	a815      	add	r0, sp, #84	; 0x54
 800ffbe:	f001 fb4b 	bl	8011658 <__match>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	f43f aea8 	beq.w	800fd18 <_strtod_l+0xb0>
 800ffc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffca:	4988      	ldr	r1, [pc, #544]	; (80101ec <_strtod_l+0x584>)
 800ffcc:	3b01      	subs	r3, #1
 800ffce:	a815      	add	r0, sp, #84	; 0x54
 800ffd0:	9315      	str	r3, [sp, #84]	; 0x54
 800ffd2:	f001 fb41 	bl	8011658 <__match>
 800ffd6:	b910      	cbnz	r0, 800ffde <_strtod_l+0x376>
 800ffd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffda:	3301      	adds	r3, #1
 800ffdc:	9315      	str	r3, [sp, #84]	; 0x54
 800ffde:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80101fc <_strtod_l+0x594>
 800ffe2:	f04f 0800 	mov.w	r8, #0
 800ffe6:	e67a      	b.n	800fcde <_strtod_l+0x76>
 800ffe8:	4881      	ldr	r0, [pc, #516]	; (80101f0 <_strtod_l+0x588>)
 800ffea:	f001 f851 	bl	8011090 <nan>
 800ffee:	ec59 8b10 	vmov	r8, r9, d0
 800fff2:	e674      	b.n	800fcde <_strtod_l+0x76>
 800fff4:	9b05      	ldr	r3, [sp, #20]
 800fff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fff8:	1afb      	subs	r3, r7, r3
 800fffa:	f1bb 0f00 	cmp.w	fp, #0
 800fffe:	bf08      	it	eq
 8010000:	46b3      	moveq	fp, r6
 8010002:	2e10      	cmp	r6, #16
 8010004:	9308      	str	r3, [sp, #32]
 8010006:	4635      	mov	r5, r6
 8010008:	bfa8      	it	ge
 801000a:	2510      	movge	r5, #16
 801000c:	f7f0 fa82 	bl	8000514 <__aeabi_ui2d>
 8010010:	2e09      	cmp	r6, #9
 8010012:	4680      	mov	r8, r0
 8010014:	4689      	mov	r9, r1
 8010016:	dd13      	ble.n	8010040 <_strtod_l+0x3d8>
 8010018:	4b76      	ldr	r3, [pc, #472]	; (80101f4 <_strtod_l+0x58c>)
 801001a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801001e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010022:	f7f0 faf1 	bl	8000608 <__aeabi_dmul>
 8010026:	4680      	mov	r8, r0
 8010028:	4650      	mov	r0, sl
 801002a:	4689      	mov	r9, r1
 801002c:	f7f0 fa72 	bl	8000514 <__aeabi_ui2d>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	4640      	mov	r0, r8
 8010036:	4649      	mov	r1, r9
 8010038:	f7f0 f930 	bl	800029c <__adddf3>
 801003c:	4680      	mov	r8, r0
 801003e:	4689      	mov	r9, r1
 8010040:	2e0f      	cmp	r6, #15
 8010042:	dc38      	bgt.n	80100b6 <_strtod_l+0x44e>
 8010044:	9b08      	ldr	r3, [sp, #32]
 8010046:	2b00      	cmp	r3, #0
 8010048:	f43f ae49 	beq.w	800fcde <_strtod_l+0x76>
 801004c:	dd24      	ble.n	8010098 <_strtod_l+0x430>
 801004e:	2b16      	cmp	r3, #22
 8010050:	dc0b      	bgt.n	801006a <_strtod_l+0x402>
 8010052:	4968      	ldr	r1, [pc, #416]	; (80101f4 <_strtod_l+0x58c>)
 8010054:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010058:	e9d1 0100 	ldrd	r0, r1, [r1]
 801005c:	4642      	mov	r2, r8
 801005e:	464b      	mov	r3, r9
 8010060:	f7f0 fad2 	bl	8000608 <__aeabi_dmul>
 8010064:	4680      	mov	r8, r0
 8010066:	4689      	mov	r9, r1
 8010068:	e639      	b.n	800fcde <_strtod_l+0x76>
 801006a:	9a08      	ldr	r2, [sp, #32]
 801006c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010070:	4293      	cmp	r3, r2
 8010072:	db20      	blt.n	80100b6 <_strtod_l+0x44e>
 8010074:	4c5f      	ldr	r4, [pc, #380]	; (80101f4 <_strtod_l+0x58c>)
 8010076:	f1c6 060f 	rsb	r6, r6, #15
 801007a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801007e:	4642      	mov	r2, r8
 8010080:	464b      	mov	r3, r9
 8010082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010086:	f7f0 fabf 	bl	8000608 <__aeabi_dmul>
 801008a:	9b08      	ldr	r3, [sp, #32]
 801008c:	1b9e      	subs	r6, r3, r6
 801008e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010092:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010096:	e7e3      	b.n	8010060 <_strtod_l+0x3f8>
 8010098:	9b08      	ldr	r3, [sp, #32]
 801009a:	3316      	adds	r3, #22
 801009c:	db0b      	blt.n	80100b6 <_strtod_l+0x44e>
 801009e:	9b05      	ldr	r3, [sp, #20]
 80100a0:	1bdf      	subs	r7, r3, r7
 80100a2:	4b54      	ldr	r3, [pc, #336]	; (80101f4 <_strtod_l+0x58c>)
 80100a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80100a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100ac:	4640      	mov	r0, r8
 80100ae:	4649      	mov	r1, r9
 80100b0:	f7f0 fbd4 	bl	800085c <__aeabi_ddiv>
 80100b4:	e7d6      	b.n	8010064 <_strtod_l+0x3fc>
 80100b6:	9b08      	ldr	r3, [sp, #32]
 80100b8:	1b75      	subs	r5, r6, r5
 80100ba:	441d      	add	r5, r3
 80100bc:	2d00      	cmp	r5, #0
 80100be:	dd70      	ble.n	80101a2 <_strtod_l+0x53a>
 80100c0:	f015 030f 	ands.w	r3, r5, #15
 80100c4:	d00a      	beq.n	80100dc <_strtod_l+0x474>
 80100c6:	494b      	ldr	r1, [pc, #300]	; (80101f4 <_strtod_l+0x58c>)
 80100c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100cc:	4642      	mov	r2, r8
 80100ce:	464b      	mov	r3, r9
 80100d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d4:	f7f0 fa98 	bl	8000608 <__aeabi_dmul>
 80100d8:	4680      	mov	r8, r0
 80100da:	4689      	mov	r9, r1
 80100dc:	f035 050f 	bics.w	r5, r5, #15
 80100e0:	d04d      	beq.n	801017e <_strtod_l+0x516>
 80100e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80100e6:	dd22      	ble.n	801012e <_strtod_l+0x4c6>
 80100e8:	2500      	movs	r5, #0
 80100ea:	46ab      	mov	fp, r5
 80100ec:	9509      	str	r5, [sp, #36]	; 0x24
 80100ee:	9505      	str	r5, [sp, #20]
 80100f0:	2322      	movs	r3, #34	; 0x22
 80100f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80101fc <_strtod_l+0x594>
 80100f6:	6023      	str	r3, [r4, #0]
 80100f8:	f04f 0800 	mov.w	r8, #0
 80100fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f43f aded 	beq.w	800fcde <_strtod_l+0x76>
 8010104:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010106:	4620      	mov	r0, r4
 8010108:	f7ff f924 	bl	800f354 <_Bfree>
 801010c:	9905      	ldr	r1, [sp, #20]
 801010e:	4620      	mov	r0, r4
 8010110:	f7ff f920 	bl	800f354 <_Bfree>
 8010114:	4659      	mov	r1, fp
 8010116:	4620      	mov	r0, r4
 8010118:	f7ff f91c 	bl	800f354 <_Bfree>
 801011c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801011e:	4620      	mov	r0, r4
 8010120:	f7ff f918 	bl	800f354 <_Bfree>
 8010124:	4629      	mov	r1, r5
 8010126:	4620      	mov	r0, r4
 8010128:	f7ff f914 	bl	800f354 <_Bfree>
 801012c:	e5d7      	b.n	800fcde <_strtod_l+0x76>
 801012e:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <_strtod_l+0x590>)
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	2300      	movs	r3, #0
 8010134:	112d      	asrs	r5, r5, #4
 8010136:	4640      	mov	r0, r8
 8010138:	4649      	mov	r1, r9
 801013a:	469a      	mov	sl, r3
 801013c:	2d01      	cmp	r5, #1
 801013e:	dc21      	bgt.n	8010184 <_strtod_l+0x51c>
 8010140:	b10b      	cbz	r3, 8010146 <_strtod_l+0x4de>
 8010142:	4680      	mov	r8, r0
 8010144:	4689      	mov	r9, r1
 8010146:	492c      	ldr	r1, [pc, #176]	; (80101f8 <_strtod_l+0x590>)
 8010148:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801014c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010150:	4642      	mov	r2, r8
 8010152:	464b      	mov	r3, r9
 8010154:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010158:	f7f0 fa56 	bl	8000608 <__aeabi_dmul>
 801015c:	4b27      	ldr	r3, [pc, #156]	; (80101fc <_strtod_l+0x594>)
 801015e:	460a      	mov	r2, r1
 8010160:	400b      	ands	r3, r1
 8010162:	4927      	ldr	r1, [pc, #156]	; (8010200 <_strtod_l+0x598>)
 8010164:	428b      	cmp	r3, r1
 8010166:	4680      	mov	r8, r0
 8010168:	d8be      	bhi.n	80100e8 <_strtod_l+0x480>
 801016a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801016e:	428b      	cmp	r3, r1
 8010170:	bf86      	itte	hi
 8010172:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010204 <_strtod_l+0x59c>
 8010176:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 801017a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801017e:	2300      	movs	r3, #0
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	e07b      	b.n	801027c <_strtod_l+0x614>
 8010184:	07ea      	lsls	r2, r5, #31
 8010186:	d505      	bpl.n	8010194 <_strtod_l+0x52c>
 8010188:	9b04      	ldr	r3, [sp, #16]
 801018a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801018e:	f7f0 fa3b 	bl	8000608 <__aeabi_dmul>
 8010192:	2301      	movs	r3, #1
 8010194:	9a04      	ldr	r2, [sp, #16]
 8010196:	3208      	adds	r2, #8
 8010198:	f10a 0a01 	add.w	sl, sl, #1
 801019c:	106d      	asrs	r5, r5, #1
 801019e:	9204      	str	r2, [sp, #16]
 80101a0:	e7cc      	b.n	801013c <_strtod_l+0x4d4>
 80101a2:	d0ec      	beq.n	801017e <_strtod_l+0x516>
 80101a4:	426d      	negs	r5, r5
 80101a6:	f015 020f 	ands.w	r2, r5, #15
 80101aa:	d00a      	beq.n	80101c2 <_strtod_l+0x55a>
 80101ac:	4b11      	ldr	r3, [pc, #68]	; (80101f4 <_strtod_l+0x58c>)
 80101ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101b2:	4640      	mov	r0, r8
 80101b4:	4649      	mov	r1, r9
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	f7f0 fb4f 	bl	800085c <__aeabi_ddiv>
 80101be:	4680      	mov	r8, r0
 80101c0:	4689      	mov	r9, r1
 80101c2:	112d      	asrs	r5, r5, #4
 80101c4:	d0db      	beq.n	801017e <_strtod_l+0x516>
 80101c6:	2d1f      	cmp	r5, #31
 80101c8:	dd1e      	ble.n	8010208 <_strtod_l+0x5a0>
 80101ca:	2500      	movs	r5, #0
 80101cc:	46ab      	mov	fp, r5
 80101ce:	9509      	str	r5, [sp, #36]	; 0x24
 80101d0:	9505      	str	r5, [sp, #20]
 80101d2:	2322      	movs	r3, #34	; 0x22
 80101d4:	f04f 0800 	mov.w	r8, #0
 80101d8:	f04f 0900 	mov.w	r9, #0
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	e78d      	b.n	80100fc <_strtod_l+0x494>
 80101e0:	0801260e 	.word	0x0801260e
 80101e4:	08012834 	.word	0x08012834
 80101e8:	08012606 	.word	0x08012606
 80101ec:	0801263d 	.word	0x0801263d
 80101f0:	080128c4 	.word	0x080128c4
 80101f4:	08012748 	.word	0x08012748
 80101f8:	08012720 	.word	0x08012720
 80101fc:	7ff00000 	.word	0x7ff00000
 8010200:	7ca00000 	.word	0x7ca00000
 8010204:	7fefffff 	.word	0x7fefffff
 8010208:	f015 0310 	ands.w	r3, r5, #16
 801020c:	bf18      	it	ne
 801020e:	236a      	movne	r3, #106	; 0x6a
 8010210:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80105b4 <_strtod_l+0x94c>
 8010214:	9304      	str	r3, [sp, #16]
 8010216:	4640      	mov	r0, r8
 8010218:	4649      	mov	r1, r9
 801021a:	2300      	movs	r3, #0
 801021c:	07ea      	lsls	r2, r5, #31
 801021e:	d504      	bpl.n	801022a <_strtod_l+0x5c2>
 8010220:	e9da 2300 	ldrd	r2, r3, [sl]
 8010224:	f7f0 f9f0 	bl	8000608 <__aeabi_dmul>
 8010228:	2301      	movs	r3, #1
 801022a:	106d      	asrs	r5, r5, #1
 801022c:	f10a 0a08 	add.w	sl, sl, #8
 8010230:	d1f4      	bne.n	801021c <_strtod_l+0x5b4>
 8010232:	b10b      	cbz	r3, 8010238 <_strtod_l+0x5d0>
 8010234:	4680      	mov	r8, r0
 8010236:	4689      	mov	r9, r1
 8010238:	9b04      	ldr	r3, [sp, #16]
 801023a:	b1bb      	cbz	r3, 801026c <_strtod_l+0x604>
 801023c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010240:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010244:	2b00      	cmp	r3, #0
 8010246:	4649      	mov	r1, r9
 8010248:	dd10      	ble.n	801026c <_strtod_l+0x604>
 801024a:	2b1f      	cmp	r3, #31
 801024c:	f340 811e 	ble.w	801048c <_strtod_l+0x824>
 8010250:	2b34      	cmp	r3, #52	; 0x34
 8010252:	bfde      	ittt	le
 8010254:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801025c:	4093      	lslle	r3, r2
 801025e:	f04f 0800 	mov.w	r8, #0
 8010262:	bfcc      	ite	gt
 8010264:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010268:	ea03 0901 	andle.w	r9, r3, r1
 801026c:	2200      	movs	r2, #0
 801026e:	2300      	movs	r3, #0
 8010270:	4640      	mov	r0, r8
 8010272:	4649      	mov	r1, r9
 8010274:	f7f0 fc30 	bl	8000ad8 <__aeabi_dcmpeq>
 8010278:	2800      	cmp	r0, #0
 801027a:	d1a6      	bne.n	80101ca <_strtod_l+0x562>
 801027c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010282:	4633      	mov	r3, r6
 8010284:	465a      	mov	r2, fp
 8010286:	4620      	mov	r0, r4
 8010288:	f7ff f8cc 	bl	800f424 <__s2b>
 801028c:	9009      	str	r0, [sp, #36]	; 0x24
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f af2a 	beq.w	80100e8 <_strtod_l+0x480>
 8010294:	9a08      	ldr	r2, [sp, #32]
 8010296:	9b05      	ldr	r3, [sp, #20]
 8010298:	2a00      	cmp	r2, #0
 801029a:	eba3 0307 	sub.w	r3, r3, r7
 801029e:	bfa8      	it	ge
 80102a0:	2300      	movge	r3, #0
 80102a2:	930c      	str	r3, [sp, #48]	; 0x30
 80102a4:	2500      	movs	r5, #0
 80102a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102aa:	9312      	str	r3, [sp, #72]	; 0x48
 80102ac:	46ab      	mov	fp, r5
 80102ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b0:	4620      	mov	r0, r4
 80102b2:	6859      	ldr	r1, [r3, #4]
 80102b4:	f7ff f80e 	bl	800f2d4 <_Balloc>
 80102b8:	9005      	str	r0, [sp, #20]
 80102ba:	2800      	cmp	r0, #0
 80102bc:	f43f af18 	beq.w	80100f0 <_strtod_l+0x488>
 80102c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c2:	691a      	ldr	r2, [r3, #16]
 80102c4:	3202      	adds	r2, #2
 80102c6:	f103 010c 	add.w	r1, r3, #12
 80102ca:	0092      	lsls	r2, r2, #2
 80102cc:	300c      	adds	r0, #12
 80102ce:	f7fe f924 	bl	800e51a <memcpy>
 80102d2:	ec49 8b10 	vmov	d0, r8, r9
 80102d6:	aa18      	add	r2, sp, #96	; 0x60
 80102d8:	a917      	add	r1, sp, #92	; 0x5c
 80102da:	4620      	mov	r0, r4
 80102dc:	f7ff fbd6 	bl	800fa8c <__d2b>
 80102e0:	ec49 8b18 	vmov	d8, r8, r9
 80102e4:	9016      	str	r0, [sp, #88]	; 0x58
 80102e6:	2800      	cmp	r0, #0
 80102e8:	f43f af02 	beq.w	80100f0 <_strtod_l+0x488>
 80102ec:	2101      	movs	r1, #1
 80102ee:	4620      	mov	r0, r4
 80102f0:	f7ff f930 	bl	800f554 <__i2b>
 80102f4:	4683      	mov	fp, r0
 80102f6:	2800      	cmp	r0, #0
 80102f8:	f43f aefa 	beq.w	80100f0 <_strtod_l+0x488>
 80102fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80102fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010300:	2e00      	cmp	r6, #0
 8010302:	bfab      	itete	ge
 8010304:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010306:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010308:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801030a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801030e:	bfac      	ite	ge
 8010310:	eb06 0a03 	addge.w	sl, r6, r3
 8010314:	1b9f      	sublt	r7, r3, r6
 8010316:	9b04      	ldr	r3, [sp, #16]
 8010318:	1af6      	subs	r6, r6, r3
 801031a:	4416      	add	r6, r2
 801031c:	4ba0      	ldr	r3, [pc, #640]	; (80105a0 <_strtod_l+0x938>)
 801031e:	3e01      	subs	r6, #1
 8010320:	429e      	cmp	r6, r3
 8010322:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010326:	f280 80c4 	bge.w	80104b2 <_strtod_l+0x84a>
 801032a:	1b9b      	subs	r3, r3, r6
 801032c:	2b1f      	cmp	r3, #31
 801032e:	eba2 0203 	sub.w	r2, r2, r3
 8010332:	f04f 0101 	mov.w	r1, #1
 8010336:	f300 80b0 	bgt.w	801049a <_strtod_l+0x832>
 801033a:	fa01 f303 	lsl.w	r3, r1, r3
 801033e:	930e      	str	r3, [sp, #56]	; 0x38
 8010340:	2300      	movs	r3, #0
 8010342:	930d      	str	r3, [sp, #52]	; 0x34
 8010344:	eb0a 0602 	add.w	r6, sl, r2
 8010348:	9b04      	ldr	r3, [sp, #16]
 801034a:	45b2      	cmp	sl, r6
 801034c:	4417      	add	r7, r2
 801034e:	441f      	add	r7, r3
 8010350:	4653      	mov	r3, sl
 8010352:	bfa8      	it	ge
 8010354:	4633      	movge	r3, r6
 8010356:	42bb      	cmp	r3, r7
 8010358:	bfa8      	it	ge
 801035a:	463b      	movge	r3, r7
 801035c:	2b00      	cmp	r3, #0
 801035e:	bfc2      	ittt	gt
 8010360:	1af6      	subgt	r6, r6, r3
 8010362:	1aff      	subgt	r7, r7, r3
 8010364:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801036a:	2b00      	cmp	r3, #0
 801036c:	dd17      	ble.n	801039e <_strtod_l+0x736>
 801036e:	4659      	mov	r1, fp
 8010370:	461a      	mov	r2, r3
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff f9ae 	bl	800f6d4 <__pow5mult>
 8010378:	4683      	mov	fp, r0
 801037a:	2800      	cmp	r0, #0
 801037c:	f43f aeb8 	beq.w	80100f0 <_strtod_l+0x488>
 8010380:	4601      	mov	r1, r0
 8010382:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010384:	4620      	mov	r0, r4
 8010386:	f7ff f8fb 	bl	800f580 <__multiply>
 801038a:	900b      	str	r0, [sp, #44]	; 0x2c
 801038c:	2800      	cmp	r0, #0
 801038e:	f43f aeaf 	beq.w	80100f0 <_strtod_l+0x488>
 8010392:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010394:	4620      	mov	r0, r4
 8010396:	f7fe ffdd 	bl	800f354 <_Bfree>
 801039a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801039c:	9316      	str	r3, [sp, #88]	; 0x58
 801039e:	2e00      	cmp	r6, #0
 80103a0:	f300 808c 	bgt.w	80104bc <_strtod_l+0x854>
 80103a4:	9b08      	ldr	r3, [sp, #32]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd08      	ble.n	80103bc <_strtod_l+0x754>
 80103aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80103ac:	9905      	ldr	r1, [sp, #20]
 80103ae:	4620      	mov	r0, r4
 80103b0:	f7ff f990 	bl	800f6d4 <__pow5mult>
 80103b4:	9005      	str	r0, [sp, #20]
 80103b6:	2800      	cmp	r0, #0
 80103b8:	f43f ae9a 	beq.w	80100f0 <_strtod_l+0x488>
 80103bc:	2f00      	cmp	r7, #0
 80103be:	dd08      	ble.n	80103d2 <_strtod_l+0x76a>
 80103c0:	9905      	ldr	r1, [sp, #20]
 80103c2:	463a      	mov	r2, r7
 80103c4:	4620      	mov	r0, r4
 80103c6:	f7ff f9df 	bl	800f788 <__lshift>
 80103ca:	9005      	str	r0, [sp, #20]
 80103cc:	2800      	cmp	r0, #0
 80103ce:	f43f ae8f 	beq.w	80100f0 <_strtod_l+0x488>
 80103d2:	f1ba 0f00 	cmp.w	sl, #0
 80103d6:	dd08      	ble.n	80103ea <_strtod_l+0x782>
 80103d8:	4659      	mov	r1, fp
 80103da:	4652      	mov	r2, sl
 80103dc:	4620      	mov	r0, r4
 80103de:	f7ff f9d3 	bl	800f788 <__lshift>
 80103e2:	4683      	mov	fp, r0
 80103e4:	2800      	cmp	r0, #0
 80103e6:	f43f ae83 	beq.w	80100f0 <_strtod_l+0x488>
 80103ea:	9a05      	ldr	r2, [sp, #20]
 80103ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7ff fa52 	bl	800f898 <__mdiff>
 80103f4:	4605      	mov	r5, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	f43f ae7a 	beq.w	80100f0 <_strtod_l+0x488>
 80103fc:	68c3      	ldr	r3, [r0, #12]
 80103fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8010400:	2300      	movs	r3, #0
 8010402:	60c3      	str	r3, [r0, #12]
 8010404:	4659      	mov	r1, fp
 8010406:	f7ff fa2b 	bl	800f860 <__mcmp>
 801040a:	2800      	cmp	r0, #0
 801040c:	da60      	bge.n	80104d0 <_strtod_l+0x868>
 801040e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010410:	ea53 0308 	orrs.w	r3, r3, r8
 8010414:	f040 8084 	bne.w	8010520 <_strtod_l+0x8b8>
 8010418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801041c:	2b00      	cmp	r3, #0
 801041e:	d17f      	bne.n	8010520 <_strtod_l+0x8b8>
 8010420:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010424:	0d1b      	lsrs	r3, r3, #20
 8010426:	051b      	lsls	r3, r3, #20
 8010428:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801042c:	d978      	bls.n	8010520 <_strtod_l+0x8b8>
 801042e:	696b      	ldr	r3, [r5, #20]
 8010430:	b913      	cbnz	r3, 8010438 <_strtod_l+0x7d0>
 8010432:	692b      	ldr	r3, [r5, #16]
 8010434:	2b01      	cmp	r3, #1
 8010436:	dd73      	ble.n	8010520 <_strtod_l+0x8b8>
 8010438:	4629      	mov	r1, r5
 801043a:	2201      	movs	r2, #1
 801043c:	4620      	mov	r0, r4
 801043e:	f7ff f9a3 	bl	800f788 <__lshift>
 8010442:	4659      	mov	r1, fp
 8010444:	4605      	mov	r5, r0
 8010446:	f7ff fa0b 	bl	800f860 <__mcmp>
 801044a:	2800      	cmp	r0, #0
 801044c:	dd68      	ble.n	8010520 <_strtod_l+0x8b8>
 801044e:	9904      	ldr	r1, [sp, #16]
 8010450:	4a54      	ldr	r2, [pc, #336]	; (80105a4 <_strtod_l+0x93c>)
 8010452:	464b      	mov	r3, r9
 8010454:	2900      	cmp	r1, #0
 8010456:	f000 8084 	beq.w	8010562 <_strtod_l+0x8fa>
 801045a:	ea02 0109 	and.w	r1, r2, r9
 801045e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010462:	dc7e      	bgt.n	8010562 <_strtod_l+0x8fa>
 8010464:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010468:	f77f aeb3 	ble.w	80101d2 <_strtod_l+0x56a>
 801046c:	4b4e      	ldr	r3, [pc, #312]	; (80105a8 <_strtod_l+0x940>)
 801046e:	4640      	mov	r0, r8
 8010470:	4649      	mov	r1, r9
 8010472:	2200      	movs	r2, #0
 8010474:	f7f0 f8c8 	bl	8000608 <__aeabi_dmul>
 8010478:	4b4a      	ldr	r3, [pc, #296]	; (80105a4 <_strtod_l+0x93c>)
 801047a:	400b      	ands	r3, r1
 801047c:	4680      	mov	r8, r0
 801047e:	4689      	mov	r9, r1
 8010480:	2b00      	cmp	r3, #0
 8010482:	f47f ae3f 	bne.w	8010104 <_strtod_l+0x49c>
 8010486:	2322      	movs	r3, #34	; 0x22
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	e63b      	b.n	8010104 <_strtod_l+0x49c>
 801048c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010490:	fa02 f303 	lsl.w	r3, r2, r3
 8010494:	ea03 0808 	and.w	r8, r3, r8
 8010498:	e6e8      	b.n	801026c <_strtod_l+0x604>
 801049a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801049e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80104a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80104a6:	36e2      	adds	r6, #226	; 0xe2
 80104a8:	fa01 f306 	lsl.w	r3, r1, r6
 80104ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80104b0:	e748      	b.n	8010344 <_strtod_l+0x6dc>
 80104b2:	2100      	movs	r1, #0
 80104b4:	2301      	movs	r3, #1
 80104b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80104ba:	e743      	b.n	8010344 <_strtod_l+0x6dc>
 80104bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80104be:	4632      	mov	r2, r6
 80104c0:	4620      	mov	r0, r4
 80104c2:	f7ff f961 	bl	800f788 <__lshift>
 80104c6:	9016      	str	r0, [sp, #88]	; 0x58
 80104c8:	2800      	cmp	r0, #0
 80104ca:	f47f af6b 	bne.w	80103a4 <_strtod_l+0x73c>
 80104ce:	e60f      	b.n	80100f0 <_strtod_l+0x488>
 80104d0:	46ca      	mov	sl, r9
 80104d2:	d171      	bne.n	80105b8 <_strtod_l+0x950>
 80104d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80104d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80104da:	b352      	cbz	r2, 8010532 <_strtod_l+0x8ca>
 80104dc:	4a33      	ldr	r2, [pc, #204]	; (80105ac <_strtod_l+0x944>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d12a      	bne.n	8010538 <_strtod_l+0x8d0>
 80104e2:	9b04      	ldr	r3, [sp, #16]
 80104e4:	4641      	mov	r1, r8
 80104e6:	b1fb      	cbz	r3, 8010528 <_strtod_l+0x8c0>
 80104e8:	4b2e      	ldr	r3, [pc, #184]	; (80105a4 <_strtod_l+0x93c>)
 80104ea:	ea09 0303 	and.w	r3, r9, r3
 80104ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104f6:	d81a      	bhi.n	801052e <_strtod_l+0x8c6>
 80104f8:	0d1b      	lsrs	r3, r3, #20
 80104fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80104fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010502:	4299      	cmp	r1, r3
 8010504:	d118      	bne.n	8010538 <_strtod_l+0x8d0>
 8010506:	4b2a      	ldr	r3, [pc, #168]	; (80105b0 <_strtod_l+0x948>)
 8010508:	459a      	cmp	sl, r3
 801050a:	d102      	bne.n	8010512 <_strtod_l+0x8aa>
 801050c:	3101      	adds	r1, #1
 801050e:	f43f adef 	beq.w	80100f0 <_strtod_l+0x488>
 8010512:	4b24      	ldr	r3, [pc, #144]	; (80105a4 <_strtod_l+0x93c>)
 8010514:	ea0a 0303 	and.w	r3, sl, r3
 8010518:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801051c:	f04f 0800 	mov.w	r8, #0
 8010520:	9b04      	ldr	r3, [sp, #16]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d1a2      	bne.n	801046c <_strtod_l+0x804>
 8010526:	e5ed      	b.n	8010104 <_strtod_l+0x49c>
 8010528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801052c:	e7e9      	b.n	8010502 <_strtod_l+0x89a>
 801052e:	4613      	mov	r3, r2
 8010530:	e7e7      	b.n	8010502 <_strtod_l+0x89a>
 8010532:	ea53 0308 	orrs.w	r3, r3, r8
 8010536:	d08a      	beq.n	801044e <_strtod_l+0x7e6>
 8010538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801053a:	b1e3      	cbz	r3, 8010576 <_strtod_l+0x90e>
 801053c:	ea13 0f0a 	tst.w	r3, sl
 8010540:	d0ee      	beq.n	8010520 <_strtod_l+0x8b8>
 8010542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010544:	9a04      	ldr	r2, [sp, #16]
 8010546:	4640      	mov	r0, r8
 8010548:	4649      	mov	r1, r9
 801054a:	b1c3      	cbz	r3, 801057e <_strtod_l+0x916>
 801054c:	f7ff fb6f 	bl	800fc2e <sulp>
 8010550:	4602      	mov	r2, r0
 8010552:	460b      	mov	r3, r1
 8010554:	ec51 0b18 	vmov	r0, r1, d8
 8010558:	f7ef fea0 	bl	800029c <__adddf3>
 801055c:	4680      	mov	r8, r0
 801055e:	4689      	mov	r9, r1
 8010560:	e7de      	b.n	8010520 <_strtod_l+0x8b8>
 8010562:	4013      	ands	r3, r2
 8010564:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010568:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801056c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010570:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010574:	e7d4      	b.n	8010520 <_strtod_l+0x8b8>
 8010576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010578:	ea13 0f08 	tst.w	r3, r8
 801057c:	e7e0      	b.n	8010540 <_strtod_l+0x8d8>
 801057e:	f7ff fb56 	bl	800fc2e <sulp>
 8010582:	4602      	mov	r2, r0
 8010584:	460b      	mov	r3, r1
 8010586:	ec51 0b18 	vmov	r0, r1, d8
 801058a:	f7ef fe85 	bl	8000298 <__aeabi_dsub>
 801058e:	2200      	movs	r2, #0
 8010590:	2300      	movs	r3, #0
 8010592:	4680      	mov	r8, r0
 8010594:	4689      	mov	r9, r1
 8010596:	f7f0 fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 801059a:	2800      	cmp	r0, #0
 801059c:	d0c0      	beq.n	8010520 <_strtod_l+0x8b8>
 801059e:	e618      	b.n	80101d2 <_strtod_l+0x56a>
 80105a0:	fffffc02 	.word	0xfffffc02
 80105a4:	7ff00000 	.word	0x7ff00000
 80105a8:	39500000 	.word	0x39500000
 80105ac:	000fffff 	.word	0x000fffff
 80105b0:	7fefffff 	.word	0x7fefffff
 80105b4:	08012848 	.word	0x08012848
 80105b8:	4659      	mov	r1, fp
 80105ba:	4628      	mov	r0, r5
 80105bc:	f7ff fac0 	bl	800fb40 <__ratio>
 80105c0:	ec57 6b10 	vmov	r6, r7, d0
 80105c4:	ee10 0a10 	vmov	r0, s0
 80105c8:	2200      	movs	r2, #0
 80105ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105ce:	4639      	mov	r1, r7
 80105d0:	f7f0 fa96 	bl	8000b00 <__aeabi_dcmple>
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d071      	beq.n	80106bc <_strtod_l+0xa54>
 80105d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d17c      	bne.n	80106d8 <_strtod_l+0xa70>
 80105de:	f1b8 0f00 	cmp.w	r8, #0
 80105e2:	d15a      	bne.n	801069a <_strtod_l+0xa32>
 80105e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d15d      	bne.n	80106a8 <_strtod_l+0xa40>
 80105ec:	4b90      	ldr	r3, [pc, #576]	; (8010830 <_strtod_l+0xbc8>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	4630      	mov	r0, r6
 80105f2:	4639      	mov	r1, r7
 80105f4:	f7f0 fa7a 	bl	8000aec <__aeabi_dcmplt>
 80105f8:	2800      	cmp	r0, #0
 80105fa:	d15c      	bne.n	80106b6 <_strtod_l+0xa4e>
 80105fc:	4630      	mov	r0, r6
 80105fe:	4639      	mov	r1, r7
 8010600:	4b8c      	ldr	r3, [pc, #560]	; (8010834 <_strtod_l+0xbcc>)
 8010602:	2200      	movs	r2, #0
 8010604:	f7f0 f800 	bl	8000608 <__aeabi_dmul>
 8010608:	4606      	mov	r6, r0
 801060a:	460f      	mov	r7, r1
 801060c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010610:	9606      	str	r6, [sp, #24]
 8010612:	9307      	str	r3, [sp, #28]
 8010614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010618:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801061c:	4b86      	ldr	r3, [pc, #536]	; (8010838 <_strtod_l+0xbd0>)
 801061e:	ea0a 0303 	and.w	r3, sl, r3
 8010622:	930d      	str	r3, [sp, #52]	; 0x34
 8010624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010626:	4b85      	ldr	r3, [pc, #532]	; (801083c <_strtod_l+0xbd4>)
 8010628:	429a      	cmp	r2, r3
 801062a:	f040 8090 	bne.w	801074e <_strtod_l+0xae6>
 801062e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8010632:	ec49 8b10 	vmov	d0, r8, r9
 8010636:	f7ff f9b9 	bl	800f9ac <__ulp>
 801063a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801063e:	ec51 0b10 	vmov	r0, r1, d0
 8010642:	f7ef ffe1 	bl	8000608 <__aeabi_dmul>
 8010646:	4642      	mov	r2, r8
 8010648:	464b      	mov	r3, r9
 801064a:	f7ef fe27 	bl	800029c <__adddf3>
 801064e:	460b      	mov	r3, r1
 8010650:	4979      	ldr	r1, [pc, #484]	; (8010838 <_strtod_l+0xbd0>)
 8010652:	4a7b      	ldr	r2, [pc, #492]	; (8010840 <_strtod_l+0xbd8>)
 8010654:	4019      	ands	r1, r3
 8010656:	4291      	cmp	r1, r2
 8010658:	4680      	mov	r8, r0
 801065a:	d944      	bls.n	80106e6 <_strtod_l+0xa7e>
 801065c:	ee18 2a90 	vmov	r2, s17
 8010660:	4b78      	ldr	r3, [pc, #480]	; (8010844 <_strtod_l+0xbdc>)
 8010662:	429a      	cmp	r2, r3
 8010664:	d104      	bne.n	8010670 <_strtod_l+0xa08>
 8010666:	ee18 3a10 	vmov	r3, s16
 801066a:	3301      	adds	r3, #1
 801066c:	f43f ad40 	beq.w	80100f0 <_strtod_l+0x488>
 8010670:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8010844 <_strtod_l+0xbdc>
 8010674:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010678:	9916      	ldr	r1, [sp, #88]	; 0x58
 801067a:	4620      	mov	r0, r4
 801067c:	f7fe fe6a 	bl	800f354 <_Bfree>
 8010680:	9905      	ldr	r1, [sp, #20]
 8010682:	4620      	mov	r0, r4
 8010684:	f7fe fe66 	bl	800f354 <_Bfree>
 8010688:	4659      	mov	r1, fp
 801068a:	4620      	mov	r0, r4
 801068c:	f7fe fe62 	bl	800f354 <_Bfree>
 8010690:	4629      	mov	r1, r5
 8010692:	4620      	mov	r0, r4
 8010694:	f7fe fe5e 	bl	800f354 <_Bfree>
 8010698:	e609      	b.n	80102ae <_strtod_l+0x646>
 801069a:	f1b8 0f01 	cmp.w	r8, #1
 801069e:	d103      	bne.n	80106a8 <_strtod_l+0xa40>
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	f43f ad95 	beq.w	80101d2 <_strtod_l+0x56a>
 80106a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010800 <_strtod_l+0xb98>
 80106ac:	4f60      	ldr	r7, [pc, #384]	; (8010830 <_strtod_l+0xbc8>)
 80106ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106b2:	2600      	movs	r6, #0
 80106b4:	e7ae      	b.n	8010614 <_strtod_l+0x9ac>
 80106b6:	4f5f      	ldr	r7, [pc, #380]	; (8010834 <_strtod_l+0xbcc>)
 80106b8:	2600      	movs	r6, #0
 80106ba:	e7a7      	b.n	801060c <_strtod_l+0x9a4>
 80106bc:	4b5d      	ldr	r3, [pc, #372]	; (8010834 <_strtod_l+0xbcc>)
 80106be:	4630      	mov	r0, r6
 80106c0:	4639      	mov	r1, r7
 80106c2:	2200      	movs	r2, #0
 80106c4:	f7ef ffa0 	bl	8000608 <__aeabi_dmul>
 80106c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106ca:	4606      	mov	r6, r0
 80106cc:	460f      	mov	r7, r1
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d09c      	beq.n	801060c <_strtod_l+0x9a4>
 80106d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106d6:	e79d      	b.n	8010614 <_strtod_l+0x9ac>
 80106d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010808 <_strtod_l+0xba0>
 80106dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106e0:	ec57 6b17 	vmov	r6, r7, d7
 80106e4:	e796      	b.n	8010614 <_strtod_l+0x9ac>
 80106e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80106ea:	9b04      	ldr	r3, [sp, #16]
 80106ec:	46ca      	mov	sl, r9
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1c2      	bne.n	8010678 <_strtod_l+0xa10>
 80106f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80106f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80106f8:	0d1b      	lsrs	r3, r3, #20
 80106fa:	051b      	lsls	r3, r3, #20
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d1bb      	bne.n	8010678 <_strtod_l+0xa10>
 8010700:	4630      	mov	r0, r6
 8010702:	4639      	mov	r1, r7
 8010704:	f7f0 fae0 	bl	8000cc8 <__aeabi_d2lz>
 8010708:	f7ef ff50 	bl	80005ac <__aeabi_l2d>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	4630      	mov	r0, r6
 8010712:	4639      	mov	r1, r7
 8010714:	f7ef fdc0 	bl	8000298 <__aeabi_dsub>
 8010718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801071a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801071e:	ea43 0308 	orr.w	r3, r3, r8
 8010722:	4313      	orrs	r3, r2
 8010724:	4606      	mov	r6, r0
 8010726:	460f      	mov	r7, r1
 8010728:	d054      	beq.n	80107d4 <_strtod_l+0xb6c>
 801072a:	a339      	add	r3, pc, #228	; (adr r3, 8010810 <_strtod_l+0xba8>)
 801072c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010730:	f7f0 f9dc 	bl	8000aec <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	f47f ace5 	bne.w	8010104 <_strtod_l+0x49c>
 801073a:	a337      	add	r3, pc, #220	; (adr r3, 8010818 <_strtod_l+0xbb0>)
 801073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010740:	4630      	mov	r0, r6
 8010742:	4639      	mov	r1, r7
 8010744:	f7f0 f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8010748:	2800      	cmp	r0, #0
 801074a:	d095      	beq.n	8010678 <_strtod_l+0xa10>
 801074c:	e4da      	b.n	8010104 <_strtod_l+0x49c>
 801074e:	9b04      	ldr	r3, [sp, #16]
 8010750:	b333      	cbz	r3, 80107a0 <_strtod_l+0xb38>
 8010752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010754:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010758:	d822      	bhi.n	80107a0 <_strtod_l+0xb38>
 801075a:	a331      	add	r3, pc, #196	; (adr r3, 8010820 <_strtod_l+0xbb8>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	4630      	mov	r0, r6
 8010762:	4639      	mov	r1, r7
 8010764:	f7f0 f9cc 	bl	8000b00 <__aeabi_dcmple>
 8010768:	b1a0      	cbz	r0, 8010794 <_strtod_l+0xb2c>
 801076a:	4639      	mov	r1, r7
 801076c:	4630      	mov	r0, r6
 801076e:	f7f0 fa23 	bl	8000bb8 <__aeabi_d2uiz>
 8010772:	2801      	cmp	r0, #1
 8010774:	bf38      	it	cc
 8010776:	2001      	movcc	r0, #1
 8010778:	f7ef fecc 	bl	8000514 <__aeabi_ui2d>
 801077c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801077e:	4606      	mov	r6, r0
 8010780:	460f      	mov	r7, r1
 8010782:	bb23      	cbnz	r3, 80107ce <_strtod_l+0xb66>
 8010784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010788:	9010      	str	r0, [sp, #64]	; 0x40
 801078a:	9311      	str	r3, [sp, #68]	; 0x44
 801078c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010790:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010794:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010796:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010798:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801079c:	1a9b      	subs	r3, r3, r2
 801079e:	930f      	str	r3, [sp, #60]	; 0x3c
 80107a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80107a4:	eeb0 0a48 	vmov.f32	s0, s16
 80107a8:	eef0 0a68 	vmov.f32	s1, s17
 80107ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80107b0:	f7ff f8fc 	bl	800f9ac <__ulp>
 80107b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80107b8:	ec53 2b10 	vmov	r2, r3, d0
 80107bc:	f7ef ff24 	bl	8000608 <__aeabi_dmul>
 80107c0:	ec53 2b18 	vmov	r2, r3, d8
 80107c4:	f7ef fd6a 	bl	800029c <__adddf3>
 80107c8:	4680      	mov	r8, r0
 80107ca:	4689      	mov	r9, r1
 80107cc:	e78d      	b.n	80106ea <_strtod_l+0xa82>
 80107ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80107d2:	e7db      	b.n	801078c <_strtod_l+0xb24>
 80107d4:	a314      	add	r3, pc, #80	; (adr r3, 8010828 <_strtod_l+0xbc0>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7f0 f987 	bl	8000aec <__aeabi_dcmplt>
 80107de:	e7b3      	b.n	8010748 <_strtod_l+0xae0>
 80107e0:	2300      	movs	r3, #0
 80107e2:	930a      	str	r3, [sp, #40]	; 0x28
 80107e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80107e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107e8:	6013      	str	r3, [r2, #0]
 80107ea:	f7ff ba7c 	b.w	800fce6 <_strtod_l+0x7e>
 80107ee:	2a65      	cmp	r2, #101	; 0x65
 80107f0:	f43f ab75 	beq.w	800fede <_strtod_l+0x276>
 80107f4:	2a45      	cmp	r2, #69	; 0x45
 80107f6:	f43f ab72 	beq.w	800fede <_strtod_l+0x276>
 80107fa:	2301      	movs	r3, #1
 80107fc:	f7ff bbaa 	b.w	800ff54 <_strtod_l+0x2ec>
 8010800:	00000000 	.word	0x00000000
 8010804:	bff00000 	.word	0xbff00000
 8010808:	00000000 	.word	0x00000000
 801080c:	3ff00000 	.word	0x3ff00000
 8010810:	94a03595 	.word	0x94a03595
 8010814:	3fdfffff 	.word	0x3fdfffff
 8010818:	35afe535 	.word	0x35afe535
 801081c:	3fe00000 	.word	0x3fe00000
 8010820:	ffc00000 	.word	0xffc00000
 8010824:	41dfffff 	.word	0x41dfffff
 8010828:	94a03595 	.word	0x94a03595
 801082c:	3fcfffff 	.word	0x3fcfffff
 8010830:	3ff00000 	.word	0x3ff00000
 8010834:	3fe00000 	.word	0x3fe00000
 8010838:	7ff00000 	.word	0x7ff00000
 801083c:	7fe00000 	.word	0x7fe00000
 8010840:	7c9fffff 	.word	0x7c9fffff
 8010844:	7fefffff 	.word	0x7fefffff

08010848 <_strtod_r>:
 8010848:	4b01      	ldr	r3, [pc, #4]	; (8010850 <_strtod_r+0x8>)
 801084a:	f7ff ba0d 	b.w	800fc68 <_strtod_l>
 801084e:	bf00      	nop
 8010850:	200000e0 	.word	0x200000e0

08010854 <__ssputs_r>:
 8010854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010858:	688e      	ldr	r6, [r1, #8]
 801085a:	461f      	mov	r7, r3
 801085c:	42be      	cmp	r6, r7
 801085e:	680b      	ldr	r3, [r1, #0]
 8010860:	4682      	mov	sl, r0
 8010862:	460c      	mov	r4, r1
 8010864:	4690      	mov	r8, r2
 8010866:	d82c      	bhi.n	80108c2 <__ssputs_r+0x6e>
 8010868:	898a      	ldrh	r2, [r1, #12]
 801086a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801086e:	d026      	beq.n	80108be <__ssputs_r+0x6a>
 8010870:	6965      	ldr	r5, [r4, #20]
 8010872:	6909      	ldr	r1, [r1, #16]
 8010874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010878:	eba3 0901 	sub.w	r9, r3, r1
 801087c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010880:	1c7b      	adds	r3, r7, #1
 8010882:	444b      	add	r3, r9
 8010884:	106d      	asrs	r5, r5, #1
 8010886:	429d      	cmp	r5, r3
 8010888:	bf38      	it	cc
 801088a:	461d      	movcc	r5, r3
 801088c:	0553      	lsls	r3, r2, #21
 801088e:	d527      	bpl.n	80108e0 <__ssputs_r+0x8c>
 8010890:	4629      	mov	r1, r5
 8010892:	f7fc fbe1 	bl	800d058 <_malloc_r>
 8010896:	4606      	mov	r6, r0
 8010898:	b360      	cbz	r0, 80108f4 <__ssputs_r+0xa0>
 801089a:	6921      	ldr	r1, [r4, #16]
 801089c:	464a      	mov	r2, r9
 801089e:	f7fd fe3c 	bl	800e51a <memcpy>
 80108a2:	89a3      	ldrh	r3, [r4, #12]
 80108a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80108a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108ac:	81a3      	strh	r3, [r4, #12]
 80108ae:	6126      	str	r6, [r4, #16]
 80108b0:	6165      	str	r5, [r4, #20]
 80108b2:	444e      	add	r6, r9
 80108b4:	eba5 0509 	sub.w	r5, r5, r9
 80108b8:	6026      	str	r6, [r4, #0]
 80108ba:	60a5      	str	r5, [r4, #8]
 80108bc:	463e      	mov	r6, r7
 80108be:	42be      	cmp	r6, r7
 80108c0:	d900      	bls.n	80108c4 <__ssputs_r+0x70>
 80108c2:	463e      	mov	r6, r7
 80108c4:	6820      	ldr	r0, [r4, #0]
 80108c6:	4632      	mov	r2, r6
 80108c8:	4641      	mov	r1, r8
 80108ca:	f000 fba3 	bl	8011014 <memmove>
 80108ce:	68a3      	ldr	r3, [r4, #8]
 80108d0:	1b9b      	subs	r3, r3, r6
 80108d2:	60a3      	str	r3, [r4, #8]
 80108d4:	6823      	ldr	r3, [r4, #0]
 80108d6:	4433      	add	r3, r6
 80108d8:	6023      	str	r3, [r4, #0]
 80108da:	2000      	movs	r0, #0
 80108dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108e0:	462a      	mov	r2, r5
 80108e2:	f000 ff7a 	bl	80117da <_realloc_r>
 80108e6:	4606      	mov	r6, r0
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d1e0      	bne.n	80108ae <__ssputs_r+0x5a>
 80108ec:	6921      	ldr	r1, [r4, #16]
 80108ee:	4650      	mov	r0, sl
 80108f0:	f7fe fca4 	bl	800f23c <_free_r>
 80108f4:	230c      	movs	r3, #12
 80108f6:	f8ca 3000 	str.w	r3, [sl]
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010906:	e7e9      	b.n	80108dc <__ssputs_r+0x88>

08010908 <_svfiprintf_r>:
 8010908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090c:	4698      	mov	r8, r3
 801090e:	898b      	ldrh	r3, [r1, #12]
 8010910:	061b      	lsls	r3, r3, #24
 8010912:	b09d      	sub	sp, #116	; 0x74
 8010914:	4607      	mov	r7, r0
 8010916:	460d      	mov	r5, r1
 8010918:	4614      	mov	r4, r2
 801091a:	d50e      	bpl.n	801093a <_svfiprintf_r+0x32>
 801091c:	690b      	ldr	r3, [r1, #16]
 801091e:	b963      	cbnz	r3, 801093a <_svfiprintf_r+0x32>
 8010920:	2140      	movs	r1, #64	; 0x40
 8010922:	f7fc fb99 	bl	800d058 <_malloc_r>
 8010926:	6028      	str	r0, [r5, #0]
 8010928:	6128      	str	r0, [r5, #16]
 801092a:	b920      	cbnz	r0, 8010936 <_svfiprintf_r+0x2e>
 801092c:	230c      	movs	r3, #12
 801092e:	603b      	str	r3, [r7, #0]
 8010930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010934:	e0d0      	b.n	8010ad8 <_svfiprintf_r+0x1d0>
 8010936:	2340      	movs	r3, #64	; 0x40
 8010938:	616b      	str	r3, [r5, #20]
 801093a:	2300      	movs	r3, #0
 801093c:	9309      	str	r3, [sp, #36]	; 0x24
 801093e:	2320      	movs	r3, #32
 8010940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010944:	f8cd 800c 	str.w	r8, [sp, #12]
 8010948:	2330      	movs	r3, #48	; 0x30
 801094a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010af0 <_svfiprintf_r+0x1e8>
 801094e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010952:	f04f 0901 	mov.w	r9, #1
 8010956:	4623      	mov	r3, r4
 8010958:	469a      	mov	sl, r3
 801095a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801095e:	b10a      	cbz	r2, 8010964 <_svfiprintf_r+0x5c>
 8010960:	2a25      	cmp	r2, #37	; 0x25
 8010962:	d1f9      	bne.n	8010958 <_svfiprintf_r+0x50>
 8010964:	ebba 0b04 	subs.w	fp, sl, r4
 8010968:	d00b      	beq.n	8010982 <_svfiprintf_r+0x7a>
 801096a:	465b      	mov	r3, fp
 801096c:	4622      	mov	r2, r4
 801096e:	4629      	mov	r1, r5
 8010970:	4638      	mov	r0, r7
 8010972:	f7ff ff6f 	bl	8010854 <__ssputs_r>
 8010976:	3001      	adds	r0, #1
 8010978:	f000 80a9 	beq.w	8010ace <_svfiprintf_r+0x1c6>
 801097c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801097e:	445a      	add	r2, fp
 8010980:	9209      	str	r2, [sp, #36]	; 0x24
 8010982:	f89a 3000 	ldrb.w	r3, [sl]
 8010986:	2b00      	cmp	r3, #0
 8010988:	f000 80a1 	beq.w	8010ace <_svfiprintf_r+0x1c6>
 801098c:	2300      	movs	r3, #0
 801098e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010996:	f10a 0a01 	add.w	sl, sl, #1
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	9307      	str	r3, [sp, #28]
 801099e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109a2:	931a      	str	r3, [sp, #104]	; 0x68
 80109a4:	4654      	mov	r4, sl
 80109a6:	2205      	movs	r2, #5
 80109a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109ac:	4850      	ldr	r0, [pc, #320]	; (8010af0 <_svfiprintf_r+0x1e8>)
 80109ae:	f7ef fc17 	bl	80001e0 <memchr>
 80109b2:	9a04      	ldr	r2, [sp, #16]
 80109b4:	b9d8      	cbnz	r0, 80109ee <_svfiprintf_r+0xe6>
 80109b6:	06d0      	lsls	r0, r2, #27
 80109b8:	bf44      	itt	mi
 80109ba:	2320      	movmi	r3, #32
 80109bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109c0:	0711      	lsls	r1, r2, #28
 80109c2:	bf44      	itt	mi
 80109c4:	232b      	movmi	r3, #43	; 0x2b
 80109c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109ca:	f89a 3000 	ldrb.w	r3, [sl]
 80109ce:	2b2a      	cmp	r3, #42	; 0x2a
 80109d0:	d015      	beq.n	80109fe <_svfiprintf_r+0xf6>
 80109d2:	9a07      	ldr	r2, [sp, #28]
 80109d4:	4654      	mov	r4, sl
 80109d6:	2000      	movs	r0, #0
 80109d8:	f04f 0c0a 	mov.w	ip, #10
 80109dc:	4621      	mov	r1, r4
 80109de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109e2:	3b30      	subs	r3, #48	; 0x30
 80109e4:	2b09      	cmp	r3, #9
 80109e6:	d94d      	bls.n	8010a84 <_svfiprintf_r+0x17c>
 80109e8:	b1b0      	cbz	r0, 8010a18 <_svfiprintf_r+0x110>
 80109ea:	9207      	str	r2, [sp, #28]
 80109ec:	e014      	b.n	8010a18 <_svfiprintf_r+0x110>
 80109ee:	eba0 0308 	sub.w	r3, r0, r8
 80109f2:	fa09 f303 	lsl.w	r3, r9, r3
 80109f6:	4313      	orrs	r3, r2
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	46a2      	mov	sl, r4
 80109fc:	e7d2      	b.n	80109a4 <_svfiprintf_r+0x9c>
 80109fe:	9b03      	ldr	r3, [sp, #12]
 8010a00:	1d19      	adds	r1, r3, #4
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	9103      	str	r1, [sp, #12]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	bfbb      	ittet	lt
 8010a0a:	425b      	neglt	r3, r3
 8010a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8010a10:	9307      	strge	r3, [sp, #28]
 8010a12:	9307      	strlt	r3, [sp, #28]
 8010a14:	bfb8      	it	lt
 8010a16:	9204      	strlt	r2, [sp, #16]
 8010a18:	7823      	ldrb	r3, [r4, #0]
 8010a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a1c:	d10c      	bne.n	8010a38 <_svfiprintf_r+0x130>
 8010a1e:	7863      	ldrb	r3, [r4, #1]
 8010a20:	2b2a      	cmp	r3, #42	; 0x2a
 8010a22:	d134      	bne.n	8010a8e <_svfiprintf_r+0x186>
 8010a24:	9b03      	ldr	r3, [sp, #12]
 8010a26:	1d1a      	adds	r2, r3, #4
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	9203      	str	r2, [sp, #12]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	bfb8      	it	lt
 8010a30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a34:	3402      	adds	r4, #2
 8010a36:	9305      	str	r3, [sp, #20]
 8010a38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010b00 <_svfiprintf_r+0x1f8>
 8010a3c:	7821      	ldrb	r1, [r4, #0]
 8010a3e:	2203      	movs	r2, #3
 8010a40:	4650      	mov	r0, sl
 8010a42:	f7ef fbcd 	bl	80001e0 <memchr>
 8010a46:	b138      	cbz	r0, 8010a58 <_svfiprintf_r+0x150>
 8010a48:	9b04      	ldr	r3, [sp, #16]
 8010a4a:	eba0 000a 	sub.w	r0, r0, sl
 8010a4e:	2240      	movs	r2, #64	; 0x40
 8010a50:	4082      	lsls	r2, r0
 8010a52:	4313      	orrs	r3, r2
 8010a54:	3401      	adds	r4, #1
 8010a56:	9304      	str	r3, [sp, #16]
 8010a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5c:	4825      	ldr	r0, [pc, #148]	; (8010af4 <_svfiprintf_r+0x1ec>)
 8010a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a62:	2206      	movs	r2, #6
 8010a64:	f7ef fbbc 	bl	80001e0 <memchr>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d038      	beq.n	8010ade <_svfiprintf_r+0x1d6>
 8010a6c:	4b22      	ldr	r3, [pc, #136]	; (8010af8 <_svfiprintf_r+0x1f0>)
 8010a6e:	bb1b      	cbnz	r3, 8010ab8 <_svfiprintf_r+0x1b0>
 8010a70:	9b03      	ldr	r3, [sp, #12]
 8010a72:	3307      	adds	r3, #7
 8010a74:	f023 0307 	bic.w	r3, r3, #7
 8010a78:	3308      	adds	r3, #8
 8010a7a:	9303      	str	r3, [sp, #12]
 8010a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a7e:	4433      	add	r3, r6
 8010a80:	9309      	str	r3, [sp, #36]	; 0x24
 8010a82:	e768      	b.n	8010956 <_svfiprintf_r+0x4e>
 8010a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a88:	460c      	mov	r4, r1
 8010a8a:	2001      	movs	r0, #1
 8010a8c:	e7a6      	b.n	80109dc <_svfiprintf_r+0xd4>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	3401      	adds	r4, #1
 8010a92:	9305      	str	r3, [sp, #20]
 8010a94:	4619      	mov	r1, r3
 8010a96:	f04f 0c0a 	mov.w	ip, #10
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aa0:	3a30      	subs	r2, #48	; 0x30
 8010aa2:	2a09      	cmp	r2, #9
 8010aa4:	d903      	bls.n	8010aae <_svfiprintf_r+0x1a6>
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d0c6      	beq.n	8010a38 <_svfiprintf_r+0x130>
 8010aaa:	9105      	str	r1, [sp, #20]
 8010aac:	e7c4      	b.n	8010a38 <_svfiprintf_r+0x130>
 8010aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	e7f0      	b.n	8010a9a <_svfiprintf_r+0x192>
 8010ab8:	ab03      	add	r3, sp, #12
 8010aba:	9300      	str	r3, [sp, #0]
 8010abc:	462a      	mov	r2, r5
 8010abe:	4b0f      	ldr	r3, [pc, #60]	; (8010afc <_svfiprintf_r+0x1f4>)
 8010ac0:	a904      	add	r1, sp, #16
 8010ac2:	4638      	mov	r0, r7
 8010ac4:	f7fc fc82 	bl	800d3cc <_printf_float>
 8010ac8:	1c42      	adds	r2, r0, #1
 8010aca:	4606      	mov	r6, r0
 8010acc:	d1d6      	bne.n	8010a7c <_svfiprintf_r+0x174>
 8010ace:	89ab      	ldrh	r3, [r5, #12]
 8010ad0:	065b      	lsls	r3, r3, #25
 8010ad2:	f53f af2d 	bmi.w	8010930 <_svfiprintf_r+0x28>
 8010ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ad8:	b01d      	add	sp, #116	; 0x74
 8010ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ade:	ab03      	add	r3, sp, #12
 8010ae0:	9300      	str	r3, [sp, #0]
 8010ae2:	462a      	mov	r2, r5
 8010ae4:	4b05      	ldr	r3, [pc, #20]	; (8010afc <_svfiprintf_r+0x1f4>)
 8010ae6:	a904      	add	r1, sp, #16
 8010ae8:	4638      	mov	r0, r7
 8010aea:	f7fc ff13 	bl	800d914 <_printf_i>
 8010aee:	e7eb      	b.n	8010ac8 <_svfiprintf_r+0x1c0>
 8010af0:	08012870 	.word	0x08012870
 8010af4:	0801287a 	.word	0x0801287a
 8010af8:	0800d3cd 	.word	0x0800d3cd
 8010afc:	08010855 	.word	0x08010855
 8010b00:	08012876 	.word	0x08012876

08010b04 <__sfputc_r>:
 8010b04:	6893      	ldr	r3, [r2, #8]
 8010b06:	3b01      	subs	r3, #1
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	b410      	push	{r4}
 8010b0c:	6093      	str	r3, [r2, #8]
 8010b0e:	da08      	bge.n	8010b22 <__sfputc_r+0x1e>
 8010b10:	6994      	ldr	r4, [r2, #24]
 8010b12:	42a3      	cmp	r3, r4
 8010b14:	db01      	blt.n	8010b1a <__sfputc_r+0x16>
 8010b16:	290a      	cmp	r1, #10
 8010b18:	d103      	bne.n	8010b22 <__sfputc_r+0x1e>
 8010b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b1e:	f7fd bbc6 	b.w	800e2ae <__swbuf_r>
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	1c58      	adds	r0, r3, #1
 8010b26:	6010      	str	r0, [r2, #0]
 8010b28:	7019      	strb	r1, [r3, #0]
 8010b2a:	4608      	mov	r0, r1
 8010b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <__sfputs_r>:
 8010b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b34:	4606      	mov	r6, r0
 8010b36:	460f      	mov	r7, r1
 8010b38:	4614      	mov	r4, r2
 8010b3a:	18d5      	adds	r5, r2, r3
 8010b3c:	42ac      	cmp	r4, r5
 8010b3e:	d101      	bne.n	8010b44 <__sfputs_r+0x12>
 8010b40:	2000      	movs	r0, #0
 8010b42:	e007      	b.n	8010b54 <__sfputs_r+0x22>
 8010b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b48:	463a      	mov	r2, r7
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f7ff ffda 	bl	8010b04 <__sfputc_r>
 8010b50:	1c43      	adds	r3, r0, #1
 8010b52:	d1f3      	bne.n	8010b3c <__sfputs_r+0xa>
 8010b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b58 <_vfiprintf_r>:
 8010b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5c:	460d      	mov	r5, r1
 8010b5e:	b09d      	sub	sp, #116	; 0x74
 8010b60:	4614      	mov	r4, r2
 8010b62:	4698      	mov	r8, r3
 8010b64:	4606      	mov	r6, r0
 8010b66:	b118      	cbz	r0, 8010b70 <_vfiprintf_r+0x18>
 8010b68:	6a03      	ldr	r3, [r0, #32]
 8010b6a:	b90b      	cbnz	r3, 8010b70 <_vfiprintf_r+0x18>
 8010b6c:	f7fd fa90 	bl	800e090 <__sinit>
 8010b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b72:	07d9      	lsls	r1, r3, #31
 8010b74:	d405      	bmi.n	8010b82 <_vfiprintf_r+0x2a>
 8010b76:	89ab      	ldrh	r3, [r5, #12]
 8010b78:	059a      	lsls	r2, r3, #22
 8010b7a:	d402      	bmi.n	8010b82 <_vfiprintf_r+0x2a>
 8010b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b7e:	f7fd fcca 	bl	800e516 <__retarget_lock_acquire_recursive>
 8010b82:	89ab      	ldrh	r3, [r5, #12]
 8010b84:	071b      	lsls	r3, r3, #28
 8010b86:	d501      	bpl.n	8010b8c <_vfiprintf_r+0x34>
 8010b88:	692b      	ldr	r3, [r5, #16]
 8010b8a:	b99b      	cbnz	r3, 8010bb4 <_vfiprintf_r+0x5c>
 8010b8c:	4629      	mov	r1, r5
 8010b8e:	4630      	mov	r0, r6
 8010b90:	f7fd fbca 	bl	800e328 <__swsetup_r>
 8010b94:	b170      	cbz	r0, 8010bb4 <_vfiprintf_r+0x5c>
 8010b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b98:	07dc      	lsls	r4, r3, #31
 8010b9a:	d504      	bpl.n	8010ba6 <_vfiprintf_r+0x4e>
 8010b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ba0:	b01d      	add	sp, #116	; 0x74
 8010ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba6:	89ab      	ldrh	r3, [r5, #12]
 8010ba8:	0598      	lsls	r0, r3, #22
 8010baa:	d4f7      	bmi.n	8010b9c <_vfiprintf_r+0x44>
 8010bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bae:	f7fd fcb3 	bl	800e518 <__retarget_lock_release_recursive>
 8010bb2:	e7f3      	b.n	8010b9c <_vfiprintf_r+0x44>
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8010bb8:	2320      	movs	r3, #32
 8010bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bc2:	2330      	movs	r3, #48	; 0x30
 8010bc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010d78 <_vfiprintf_r+0x220>
 8010bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bcc:	f04f 0901 	mov.w	r9, #1
 8010bd0:	4623      	mov	r3, r4
 8010bd2:	469a      	mov	sl, r3
 8010bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bd8:	b10a      	cbz	r2, 8010bde <_vfiprintf_r+0x86>
 8010bda:	2a25      	cmp	r2, #37	; 0x25
 8010bdc:	d1f9      	bne.n	8010bd2 <_vfiprintf_r+0x7a>
 8010bde:	ebba 0b04 	subs.w	fp, sl, r4
 8010be2:	d00b      	beq.n	8010bfc <_vfiprintf_r+0xa4>
 8010be4:	465b      	mov	r3, fp
 8010be6:	4622      	mov	r2, r4
 8010be8:	4629      	mov	r1, r5
 8010bea:	4630      	mov	r0, r6
 8010bec:	f7ff ffa1 	bl	8010b32 <__sfputs_r>
 8010bf0:	3001      	adds	r0, #1
 8010bf2:	f000 80a9 	beq.w	8010d48 <_vfiprintf_r+0x1f0>
 8010bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bf8:	445a      	add	r2, fp
 8010bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8010bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 80a1 	beq.w	8010d48 <_vfiprintf_r+0x1f0>
 8010c06:	2300      	movs	r3, #0
 8010c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c10:	f10a 0a01 	add.w	sl, sl, #1
 8010c14:	9304      	str	r3, [sp, #16]
 8010c16:	9307      	str	r3, [sp, #28]
 8010c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8010c1e:	4654      	mov	r4, sl
 8010c20:	2205      	movs	r2, #5
 8010c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c26:	4854      	ldr	r0, [pc, #336]	; (8010d78 <_vfiprintf_r+0x220>)
 8010c28:	f7ef fada 	bl	80001e0 <memchr>
 8010c2c:	9a04      	ldr	r2, [sp, #16]
 8010c2e:	b9d8      	cbnz	r0, 8010c68 <_vfiprintf_r+0x110>
 8010c30:	06d1      	lsls	r1, r2, #27
 8010c32:	bf44      	itt	mi
 8010c34:	2320      	movmi	r3, #32
 8010c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c3a:	0713      	lsls	r3, r2, #28
 8010c3c:	bf44      	itt	mi
 8010c3e:	232b      	movmi	r3, #43	; 0x2b
 8010c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c44:	f89a 3000 	ldrb.w	r3, [sl]
 8010c48:	2b2a      	cmp	r3, #42	; 0x2a
 8010c4a:	d015      	beq.n	8010c78 <_vfiprintf_r+0x120>
 8010c4c:	9a07      	ldr	r2, [sp, #28]
 8010c4e:	4654      	mov	r4, sl
 8010c50:	2000      	movs	r0, #0
 8010c52:	f04f 0c0a 	mov.w	ip, #10
 8010c56:	4621      	mov	r1, r4
 8010c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c5c:	3b30      	subs	r3, #48	; 0x30
 8010c5e:	2b09      	cmp	r3, #9
 8010c60:	d94d      	bls.n	8010cfe <_vfiprintf_r+0x1a6>
 8010c62:	b1b0      	cbz	r0, 8010c92 <_vfiprintf_r+0x13a>
 8010c64:	9207      	str	r2, [sp, #28]
 8010c66:	e014      	b.n	8010c92 <_vfiprintf_r+0x13a>
 8010c68:	eba0 0308 	sub.w	r3, r0, r8
 8010c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8010c70:	4313      	orrs	r3, r2
 8010c72:	9304      	str	r3, [sp, #16]
 8010c74:	46a2      	mov	sl, r4
 8010c76:	e7d2      	b.n	8010c1e <_vfiprintf_r+0xc6>
 8010c78:	9b03      	ldr	r3, [sp, #12]
 8010c7a:	1d19      	adds	r1, r3, #4
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	9103      	str	r1, [sp, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bfbb      	ittet	lt
 8010c84:	425b      	neglt	r3, r3
 8010c86:	f042 0202 	orrlt.w	r2, r2, #2
 8010c8a:	9307      	strge	r3, [sp, #28]
 8010c8c:	9307      	strlt	r3, [sp, #28]
 8010c8e:	bfb8      	it	lt
 8010c90:	9204      	strlt	r2, [sp, #16]
 8010c92:	7823      	ldrb	r3, [r4, #0]
 8010c94:	2b2e      	cmp	r3, #46	; 0x2e
 8010c96:	d10c      	bne.n	8010cb2 <_vfiprintf_r+0x15a>
 8010c98:	7863      	ldrb	r3, [r4, #1]
 8010c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8010c9c:	d134      	bne.n	8010d08 <_vfiprintf_r+0x1b0>
 8010c9e:	9b03      	ldr	r3, [sp, #12]
 8010ca0:	1d1a      	adds	r2, r3, #4
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	9203      	str	r2, [sp, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	bfb8      	it	lt
 8010caa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010cae:	3402      	adds	r4, #2
 8010cb0:	9305      	str	r3, [sp, #20]
 8010cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010d88 <_vfiprintf_r+0x230>
 8010cb6:	7821      	ldrb	r1, [r4, #0]
 8010cb8:	2203      	movs	r2, #3
 8010cba:	4650      	mov	r0, sl
 8010cbc:	f7ef fa90 	bl	80001e0 <memchr>
 8010cc0:	b138      	cbz	r0, 8010cd2 <_vfiprintf_r+0x17a>
 8010cc2:	9b04      	ldr	r3, [sp, #16]
 8010cc4:	eba0 000a 	sub.w	r0, r0, sl
 8010cc8:	2240      	movs	r2, #64	; 0x40
 8010cca:	4082      	lsls	r2, r0
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	3401      	adds	r4, #1
 8010cd0:	9304      	str	r3, [sp, #16]
 8010cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cd6:	4829      	ldr	r0, [pc, #164]	; (8010d7c <_vfiprintf_r+0x224>)
 8010cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cdc:	2206      	movs	r2, #6
 8010cde:	f7ef fa7f 	bl	80001e0 <memchr>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	d03f      	beq.n	8010d66 <_vfiprintf_r+0x20e>
 8010ce6:	4b26      	ldr	r3, [pc, #152]	; (8010d80 <_vfiprintf_r+0x228>)
 8010ce8:	bb1b      	cbnz	r3, 8010d32 <_vfiprintf_r+0x1da>
 8010cea:	9b03      	ldr	r3, [sp, #12]
 8010cec:	3307      	adds	r3, #7
 8010cee:	f023 0307 	bic.w	r3, r3, #7
 8010cf2:	3308      	adds	r3, #8
 8010cf4:	9303      	str	r3, [sp, #12]
 8010cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cf8:	443b      	add	r3, r7
 8010cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8010cfc:	e768      	b.n	8010bd0 <_vfiprintf_r+0x78>
 8010cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d02:	460c      	mov	r4, r1
 8010d04:	2001      	movs	r0, #1
 8010d06:	e7a6      	b.n	8010c56 <_vfiprintf_r+0xfe>
 8010d08:	2300      	movs	r3, #0
 8010d0a:	3401      	adds	r4, #1
 8010d0c:	9305      	str	r3, [sp, #20]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	f04f 0c0a 	mov.w	ip, #10
 8010d14:	4620      	mov	r0, r4
 8010d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d1a:	3a30      	subs	r2, #48	; 0x30
 8010d1c:	2a09      	cmp	r2, #9
 8010d1e:	d903      	bls.n	8010d28 <_vfiprintf_r+0x1d0>
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d0c6      	beq.n	8010cb2 <_vfiprintf_r+0x15a>
 8010d24:	9105      	str	r1, [sp, #20]
 8010d26:	e7c4      	b.n	8010cb2 <_vfiprintf_r+0x15a>
 8010d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e7f0      	b.n	8010d14 <_vfiprintf_r+0x1bc>
 8010d32:	ab03      	add	r3, sp, #12
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	462a      	mov	r2, r5
 8010d38:	4b12      	ldr	r3, [pc, #72]	; (8010d84 <_vfiprintf_r+0x22c>)
 8010d3a:	a904      	add	r1, sp, #16
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f7fc fb45 	bl	800d3cc <_printf_float>
 8010d42:	4607      	mov	r7, r0
 8010d44:	1c78      	adds	r0, r7, #1
 8010d46:	d1d6      	bne.n	8010cf6 <_vfiprintf_r+0x19e>
 8010d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d4a:	07d9      	lsls	r1, r3, #31
 8010d4c:	d405      	bmi.n	8010d5a <_vfiprintf_r+0x202>
 8010d4e:	89ab      	ldrh	r3, [r5, #12]
 8010d50:	059a      	lsls	r2, r3, #22
 8010d52:	d402      	bmi.n	8010d5a <_vfiprintf_r+0x202>
 8010d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d56:	f7fd fbdf 	bl	800e518 <__retarget_lock_release_recursive>
 8010d5a:	89ab      	ldrh	r3, [r5, #12]
 8010d5c:	065b      	lsls	r3, r3, #25
 8010d5e:	f53f af1d 	bmi.w	8010b9c <_vfiprintf_r+0x44>
 8010d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d64:	e71c      	b.n	8010ba0 <_vfiprintf_r+0x48>
 8010d66:	ab03      	add	r3, sp, #12
 8010d68:	9300      	str	r3, [sp, #0]
 8010d6a:	462a      	mov	r2, r5
 8010d6c:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <_vfiprintf_r+0x22c>)
 8010d6e:	a904      	add	r1, sp, #16
 8010d70:	4630      	mov	r0, r6
 8010d72:	f7fc fdcf 	bl	800d914 <_printf_i>
 8010d76:	e7e4      	b.n	8010d42 <_vfiprintf_r+0x1ea>
 8010d78:	08012870 	.word	0x08012870
 8010d7c:	0801287a 	.word	0x0801287a
 8010d80:	0800d3cd 	.word	0x0800d3cd
 8010d84:	08010b33 	.word	0x08010b33
 8010d88:	08012876 	.word	0x08012876

08010d8c <__sflush_r>:
 8010d8c:	898a      	ldrh	r2, [r1, #12]
 8010d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d92:	4605      	mov	r5, r0
 8010d94:	0710      	lsls	r0, r2, #28
 8010d96:	460c      	mov	r4, r1
 8010d98:	d458      	bmi.n	8010e4c <__sflush_r+0xc0>
 8010d9a:	684b      	ldr	r3, [r1, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	dc05      	bgt.n	8010dac <__sflush_r+0x20>
 8010da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	dc02      	bgt.n	8010dac <__sflush_r+0x20>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dae:	2e00      	cmp	r6, #0
 8010db0:	d0f9      	beq.n	8010da6 <__sflush_r+0x1a>
 8010db2:	2300      	movs	r3, #0
 8010db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010db8:	682f      	ldr	r7, [r5, #0]
 8010dba:	6a21      	ldr	r1, [r4, #32]
 8010dbc:	602b      	str	r3, [r5, #0]
 8010dbe:	d032      	beq.n	8010e26 <__sflush_r+0x9a>
 8010dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	075a      	lsls	r2, r3, #29
 8010dc6:	d505      	bpl.n	8010dd4 <__sflush_r+0x48>
 8010dc8:	6863      	ldr	r3, [r4, #4]
 8010dca:	1ac0      	subs	r0, r0, r3
 8010dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dce:	b10b      	cbz	r3, 8010dd4 <__sflush_r+0x48>
 8010dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dd2:	1ac0      	subs	r0, r0, r3
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dda:	6a21      	ldr	r1, [r4, #32]
 8010ddc:	4628      	mov	r0, r5
 8010dde:	47b0      	blx	r6
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	89a3      	ldrh	r3, [r4, #12]
 8010de4:	d106      	bne.n	8010df4 <__sflush_r+0x68>
 8010de6:	6829      	ldr	r1, [r5, #0]
 8010de8:	291d      	cmp	r1, #29
 8010dea:	d82b      	bhi.n	8010e44 <__sflush_r+0xb8>
 8010dec:	4a29      	ldr	r2, [pc, #164]	; (8010e94 <__sflush_r+0x108>)
 8010dee:	410a      	asrs	r2, r1
 8010df0:	07d6      	lsls	r6, r2, #31
 8010df2:	d427      	bmi.n	8010e44 <__sflush_r+0xb8>
 8010df4:	2200      	movs	r2, #0
 8010df6:	6062      	str	r2, [r4, #4]
 8010df8:	04d9      	lsls	r1, r3, #19
 8010dfa:	6922      	ldr	r2, [r4, #16]
 8010dfc:	6022      	str	r2, [r4, #0]
 8010dfe:	d504      	bpl.n	8010e0a <__sflush_r+0x7e>
 8010e00:	1c42      	adds	r2, r0, #1
 8010e02:	d101      	bne.n	8010e08 <__sflush_r+0x7c>
 8010e04:	682b      	ldr	r3, [r5, #0]
 8010e06:	b903      	cbnz	r3, 8010e0a <__sflush_r+0x7e>
 8010e08:	6560      	str	r0, [r4, #84]	; 0x54
 8010e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e0c:	602f      	str	r7, [r5, #0]
 8010e0e:	2900      	cmp	r1, #0
 8010e10:	d0c9      	beq.n	8010da6 <__sflush_r+0x1a>
 8010e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e16:	4299      	cmp	r1, r3
 8010e18:	d002      	beq.n	8010e20 <__sflush_r+0x94>
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f7fe fa0e 	bl	800f23c <_free_r>
 8010e20:	2000      	movs	r0, #0
 8010e22:	6360      	str	r0, [r4, #52]	; 0x34
 8010e24:	e7c0      	b.n	8010da8 <__sflush_r+0x1c>
 8010e26:	2301      	movs	r3, #1
 8010e28:	4628      	mov	r0, r5
 8010e2a:	47b0      	blx	r6
 8010e2c:	1c41      	adds	r1, r0, #1
 8010e2e:	d1c8      	bne.n	8010dc2 <__sflush_r+0x36>
 8010e30:	682b      	ldr	r3, [r5, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d0c5      	beq.n	8010dc2 <__sflush_r+0x36>
 8010e36:	2b1d      	cmp	r3, #29
 8010e38:	d001      	beq.n	8010e3e <__sflush_r+0xb2>
 8010e3a:	2b16      	cmp	r3, #22
 8010e3c:	d101      	bne.n	8010e42 <__sflush_r+0xb6>
 8010e3e:	602f      	str	r7, [r5, #0]
 8010e40:	e7b1      	b.n	8010da6 <__sflush_r+0x1a>
 8010e42:	89a3      	ldrh	r3, [r4, #12]
 8010e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	e7ad      	b.n	8010da8 <__sflush_r+0x1c>
 8010e4c:	690f      	ldr	r7, [r1, #16]
 8010e4e:	2f00      	cmp	r7, #0
 8010e50:	d0a9      	beq.n	8010da6 <__sflush_r+0x1a>
 8010e52:	0793      	lsls	r3, r2, #30
 8010e54:	680e      	ldr	r6, [r1, #0]
 8010e56:	bf08      	it	eq
 8010e58:	694b      	ldreq	r3, [r1, #20]
 8010e5a:	600f      	str	r7, [r1, #0]
 8010e5c:	bf18      	it	ne
 8010e5e:	2300      	movne	r3, #0
 8010e60:	eba6 0807 	sub.w	r8, r6, r7
 8010e64:	608b      	str	r3, [r1, #8]
 8010e66:	f1b8 0f00 	cmp.w	r8, #0
 8010e6a:	dd9c      	ble.n	8010da6 <__sflush_r+0x1a>
 8010e6c:	6a21      	ldr	r1, [r4, #32]
 8010e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e70:	4643      	mov	r3, r8
 8010e72:	463a      	mov	r2, r7
 8010e74:	4628      	mov	r0, r5
 8010e76:	47b0      	blx	r6
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	dc06      	bgt.n	8010e8a <__sflush_r+0xfe>
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e82:	81a3      	strh	r3, [r4, #12]
 8010e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e88:	e78e      	b.n	8010da8 <__sflush_r+0x1c>
 8010e8a:	4407      	add	r7, r0
 8010e8c:	eba8 0800 	sub.w	r8, r8, r0
 8010e90:	e7e9      	b.n	8010e66 <__sflush_r+0xda>
 8010e92:	bf00      	nop
 8010e94:	dfbffffe 	.word	0xdfbffffe

08010e98 <_fflush_r>:
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	690b      	ldr	r3, [r1, #16]
 8010e9c:	4605      	mov	r5, r0
 8010e9e:	460c      	mov	r4, r1
 8010ea0:	b913      	cbnz	r3, 8010ea8 <_fflush_r+0x10>
 8010ea2:	2500      	movs	r5, #0
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	bd38      	pop	{r3, r4, r5, pc}
 8010ea8:	b118      	cbz	r0, 8010eb2 <_fflush_r+0x1a>
 8010eaa:	6a03      	ldr	r3, [r0, #32]
 8010eac:	b90b      	cbnz	r3, 8010eb2 <_fflush_r+0x1a>
 8010eae:	f7fd f8ef 	bl	800e090 <__sinit>
 8010eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d0f3      	beq.n	8010ea2 <_fflush_r+0xa>
 8010eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ebc:	07d0      	lsls	r0, r2, #31
 8010ebe:	d404      	bmi.n	8010eca <_fflush_r+0x32>
 8010ec0:	0599      	lsls	r1, r3, #22
 8010ec2:	d402      	bmi.n	8010eca <_fflush_r+0x32>
 8010ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ec6:	f7fd fb26 	bl	800e516 <__retarget_lock_acquire_recursive>
 8010eca:	4628      	mov	r0, r5
 8010ecc:	4621      	mov	r1, r4
 8010ece:	f7ff ff5d 	bl	8010d8c <__sflush_r>
 8010ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ed4:	07da      	lsls	r2, r3, #31
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	d4e4      	bmi.n	8010ea4 <_fflush_r+0xc>
 8010eda:	89a3      	ldrh	r3, [r4, #12]
 8010edc:	059b      	lsls	r3, r3, #22
 8010ede:	d4e1      	bmi.n	8010ea4 <_fflush_r+0xc>
 8010ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ee2:	f7fd fb19 	bl	800e518 <__retarget_lock_release_recursive>
 8010ee6:	e7dd      	b.n	8010ea4 <_fflush_r+0xc>

08010ee8 <__swhatbuf_r>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	460c      	mov	r4, r1
 8010eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef0:	2900      	cmp	r1, #0
 8010ef2:	b096      	sub	sp, #88	; 0x58
 8010ef4:	4615      	mov	r5, r2
 8010ef6:	461e      	mov	r6, r3
 8010ef8:	da0d      	bge.n	8010f16 <__swhatbuf_r+0x2e>
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010f00:	f04f 0100 	mov.w	r1, #0
 8010f04:	bf0c      	ite	eq
 8010f06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010f0a:	2340      	movne	r3, #64	; 0x40
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	6031      	str	r1, [r6, #0]
 8010f10:	602b      	str	r3, [r5, #0]
 8010f12:	b016      	add	sp, #88	; 0x58
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	466a      	mov	r2, sp
 8010f18:	f000 f896 	bl	8011048 <_fstat_r>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	dbec      	blt.n	8010efa <__swhatbuf_r+0x12>
 8010f20:	9901      	ldr	r1, [sp, #4]
 8010f22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010f26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010f2a:	4259      	negs	r1, r3
 8010f2c:	4159      	adcs	r1, r3
 8010f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f32:	e7eb      	b.n	8010f0c <__swhatbuf_r+0x24>

08010f34 <__smakebuf_r>:
 8010f34:	898b      	ldrh	r3, [r1, #12]
 8010f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f38:	079d      	lsls	r5, r3, #30
 8010f3a:	4606      	mov	r6, r0
 8010f3c:	460c      	mov	r4, r1
 8010f3e:	d507      	bpl.n	8010f50 <__smakebuf_r+0x1c>
 8010f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	2301      	movs	r3, #1
 8010f4a:	6163      	str	r3, [r4, #20]
 8010f4c:	b002      	add	sp, #8
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}
 8010f50:	ab01      	add	r3, sp, #4
 8010f52:	466a      	mov	r2, sp
 8010f54:	f7ff ffc8 	bl	8010ee8 <__swhatbuf_r>
 8010f58:	9900      	ldr	r1, [sp, #0]
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	4630      	mov	r0, r6
 8010f5e:	f7fc f87b 	bl	800d058 <_malloc_r>
 8010f62:	b948      	cbnz	r0, 8010f78 <__smakebuf_r+0x44>
 8010f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f68:	059a      	lsls	r2, r3, #22
 8010f6a:	d4ef      	bmi.n	8010f4c <__smakebuf_r+0x18>
 8010f6c:	f023 0303 	bic.w	r3, r3, #3
 8010f70:	f043 0302 	orr.w	r3, r3, #2
 8010f74:	81a3      	strh	r3, [r4, #12]
 8010f76:	e7e3      	b.n	8010f40 <__smakebuf_r+0xc>
 8010f78:	89a3      	ldrh	r3, [r4, #12]
 8010f7a:	6020      	str	r0, [r4, #0]
 8010f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f80:	81a3      	strh	r3, [r4, #12]
 8010f82:	9b00      	ldr	r3, [sp, #0]
 8010f84:	6163      	str	r3, [r4, #20]
 8010f86:	9b01      	ldr	r3, [sp, #4]
 8010f88:	6120      	str	r0, [r4, #16]
 8010f8a:	b15b      	cbz	r3, 8010fa4 <__smakebuf_r+0x70>
 8010f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f90:	4630      	mov	r0, r6
 8010f92:	f000 f86b 	bl	801106c <_isatty_r>
 8010f96:	b128      	cbz	r0, 8010fa4 <__smakebuf_r+0x70>
 8010f98:	89a3      	ldrh	r3, [r4, #12]
 8010f9a:	f023 0303 	bic.w	r3, r3, #3
 8010f9e:	f043 0301 	orr.w	r3, r3, #1
 8010fa2:	81a3      	strh	r3, [r4, #12]
 8010fa4:	89a3      	ldrh	r3, [r4, #12]
 8010fa6:	431d      	orrs	r5, r3
 8010fa8:	81a5      	strh	r5, [r4, #12]
 8010faa:	e7cf      	b.n	8010f4c <__smakebuf_r+0x18>

08010fac <_putc_r>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	460d      	mov	r5, r1
 8010fb0:	4614      	mov	r4, r2
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	b118      	cbz	r0, 8010fbe <_putc_r+0x12>
 8010fb6:	6a03      	ldr	r3, [r0, #32]
 8010fb8:	b90b      	cbnz	r3, 8010fbe <_putc_r+0x12>
 8010fba:	f7fd f869 	bl	800e090 <__sinit>
 8010fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fc0:	07d8      	lsls	r0, r3, #31
 8010fc2:	d405      	bmi.n	8010fd0 <_putc_r+0x24>
 8010fc4:	89a3      	ldrh	r3, [r4, #12]
 8010fc6:	0599      	lsls	r1, r3, #22
 8010fc8:	d402      	bmi.n	8010fd0 <_putc_r+0x24>
 8010fca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fcc:	f7fd faa3 	bl	800e516 <__retarget_lock_acquire_recursive>
 8010fd0:	68a3      	ldr	r3, [r4, #8]
 8010fd2:	3b01      	subs	r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	60a3      	str	r3, [r4, #8]
 8010fd8:	da05      	bge.n	8010fe6 <_putc_r+0x3a>
 8010fda:	69a2      	ldr	r2, [r4, #24]
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	db12      	blt.n	8011006 <_putc_r+0x5a>
 8010fe0:	b2eb      	uxtb	r3, r5
 8010fe2:	2b0a      	cmp	r3, #10
 8010fe4:	d00f      	beq.n	8011006 <_putc_r+0x5a>
 8010fe6:	6823      	ldr	r3, [r4, #0]
 8010fe8:	1c5a      	adds	r2, r3, #1
 8010fea:	6022      	str	r2, [r4, #0]
 8010fec:	701d      	strb	r5, [r3, #0]
 8010fee:	b2ed      	uxtb	r5, r5
 8010ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ff2:	07da      	lsls	r2, r3, #31
 8010ff4:	d405      	bmi.n	8011002 <_putc_r+0x56>
 8010ff6:	89a3      	ldrh	r3, [r4, #12]
 8010ff8:	059b      	lsls	r3, r3, #22
 8010ffa:	d402      	bmi.n	8011002 <_putc_r+0x56>
 8010ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ffe:	f7fd fa8b 	bl	800e518 <__retarget_lock_release_recursive>
 8011002:	4628      	mov	r0, r5
 8011004:	bd70      	pop	{r4, r5, r6, pc}
 8011006:	4629      	mov	r1, r5
 8011008:	4622      	mov	r2, r4
 801100a:	4630      	mov	r0, r6
 801100c:	f7fd f94f 	bl	800e2ae <__swbuf_r>
 8011010:	4605      	mov	r5, r0
 8011012:	e7ed      	b.n	8010ff0 <_putc_r+0x44>

08011014 <memmove>:
 8011014:	4288      	cmp	r0, r1
 8011016:	b510      	push	{r4, lr}
 8011018:	eb01 0402 	add.w	r4, r1, r2
 801101c:	d902      	bls.n	8011024 <memmove+0x10>
 801101e:	4284      	cmp	r4, r0
 8011020:	4623      	mov	r3, r4
 8011022:	d807      	bhi.n	8011034 <memmove+0x20>
 8011024:	1e43      	subs	r3, r0, #1
 8011026:	42a1      	cmp	r1, r4
 8011028:	d008      	beq.n	801103c <memmove+0x28>
 801102a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801102e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011032:	e7f8      	b.n	8011026 <memmove+0x12>
 8011034:	4402      	add	r2, r0
 8011036:	4601      	mov	r1, r0
 8011038:	428a      	cmp	r2, r1
 801103a:	d100      	bne.n	801103e <memmove+0x2a>
 801103c:	bd10      	pop	{r4, pc}
 801103e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011042:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011046:	e7f7      	b.n	8011038 <memmove+0x24>

08011048 <_fstat_r>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	4d07      	ldr	r5, [pc, #28]	; (8011068 <_fstat_r+0x20>)
 801104c:	2300      	movs	r3, #0
 801104e:	4604      	mov	r4, r0
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	f7f2 fef0 	bl	8003e3a <_fstat>
 801105a:	1c43      	adds	r3, r0, #1
 801105c:	d102      	bne.n	8011064 <_fstat_r+0x1c>
 801105e:	682b      	ldr	r3, [r5, #0]
 8011060:	b103      	cbz	r3, 8011064 <_fstat_r+0x1c>
 8011062:	6023      	str	r3, [r4, #0]
 8011064:	bd38      	pop	{r3, r4, r5, pc}
 8011066:	bf00      	nop
 8011068:	20002e48 	.word	0x20002e48

0801106c <_isatty_r>:
 801106c:	b538      	push	{r3, r4, r5, lr}
 801106e:	4d06      	ldr	r5, [pc, #24]	; (8011088 <_isatty_r+0x1c>)
 8011070:	2300      	movs	r3, #0
 8011072:	4604      	mov	r4, r0
 8011074:	4608      	mov	r0, r1
 8011076:	602b      	str	r3, [r5, #0]
 8011078:	f7f2 feef 	bl	8003e5a <_isatty>
 801107c:	1c43      	adds	r3, r0, #1
 801107e:	d102      	bne.n	8011086 <_isatty_r+0x1a>
 8011080:	682b      	ldr	r3, [r5, #0]
 8011082:	b103      	cbz	r3, 8011086 <_isatty_r+0x1a>
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	bd38      	pop	{r3, r4, r5, pc}
 8011088:	20002e48 	.word	0x20002e48
 801108c:	00000000 	.word	0x00000000

08011090 <nan>:
 8011090:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011098 <nan+0x8>
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	00000000 	.word	0x00000000
 801109c:	7ff80000 	.word	0x7ff80000

080110a0 <__assert_func>:
 80110a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110a2:	4614      	mov	r4, r2
 80110a4:	461a      	mov	r2, r3
 80110a6:	4b09      	ldr	r3, [pc, #36]	; (80110cc <__assert_func+0x2c>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	4605      	mov	r5, r0
 80110ac:	68d8      	ldr	r0, [r3, #12]
 80110ae:	b14c      	cbz	r4, 80110c4 <__assert_func+0x24>
 80110b0:	4b07      	ldr	r3, [pc, #28]	; (80110d0 <__assert_func+0x30>)
 80110b2:	9100      	str	r1, [sp, #0]
 80110b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110b8:	4906      	ldr	r1, [pc, #24]	; (80110d4 <__assert_func+0x34>)
 80110ba:	462b      	mov	r3, r5
 80110bc:	f000 fbca 	bl	8011854 <fiprintf>
 80110c0:	f000 fbda 	bl	8011878 <abort>
 80110c4:	4b04      	ldr	r3, [pc, #16]	; (80110d8 <__assert_func+0x38>)
 80110c6:	461c      	mov	r4, r3
 80110c8:	e7f3      	b.n	80110b2 <__assert_func+0x12>
 80110ca:	bf00      	nop
 80110cc:	200000dc 	.word	0x200000dc
 80110d0:	08012889 	.word	0x08012889
 80110d4:	08012896 	.word	0x08012896
 80110d8:	080128c4 	.word	0x080128c4

080110dc <_calloc_r>:
 80110dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110de:	fba1 2402 	umull	r2, r4, r1, r2
 80110e2:	b94c      	cbnz	r4, 80110f8 <_calloc_r+0x1c>
 80110e4:	4611      	mov	r1, r2
 80110e6:	9201      	str	r2, [sp, #4]
 80110e8:	f7fb ffb6 	bl	800d058 <_malloc_r>
 80110ec:	9a01      	ldr	r2, [sp, #4]
 80110ee:	4605      	mov	r5, r0
 80110f0:	b930      	cbnz	r0, 8011100 <_calloc_r+0x24>
 80110f2:	4628      	mov	r0, r5
 80110f4:	b003      	add	sp, #12
 80110f6:	bd30      	pop	{r4, r5, pc}
 80110f8:	220c      	movs	r2, #12
 80110fa:	6002      	str	r2, [r0, #0]
 80110fc:	2500      	movs	r5, #0
 80110fe:	e7f8      	b.n	80110f2 <_calloc_r+0x16>
 8011100:	4621      	mov	r1, r4
 8011102:	f7fd f969 	bl	800e3d8 <memset>
 8011106:	e7f4      	b.n	80110f2 <_calloc_r+0x16>

08011108 <rshift>:
 8011108:	6903      	ldr	r3, [r0, #16]
 801110a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801110e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011112:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011116:	f100 0414 	add.w	r4, r0, #20
 801111a:	dd45      	ble.n	80111a8 <rshift+0xa0>
 801111c:	f011 011f 	ands.w	r1, r1, #31
 8011120:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011124:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011128:	d10c      	bne.n	8011144 <rshift+0x3c>
 801112a:	f100 0710 	add.w	r7, r0, #16
 801112e:	4629      	mov	r1, r5
 8011130:	42b1      	cmp	r1, r6
 8011132:	d334      	bcc.n	801119e <rshift+0x96>
 8011134:	1a9b      	subs	r3, r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	1eea      	subs	r2, r5, #3
 801113a:	4296      	cmp	r6, r2
 801113c:	bf38      	it	cc
 801113e:	2300      	movcc	r3, #0
 8011140:	4423      	add	r3, r4
 8011142:	e015      	b.n	8011170 <rshift+0x68>
 8011144:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011148:	f1c1 0820 	rsb	r8, r1, #32
 801114c:	40cf      	lsrs	r7, r1
 801114e:	f105 0e04 	add.w	lr, r5, #4
 8011152:	46a1      	mov	r9, r4
 8011154:	4576      	cmp	r6, lr
 8011156:	46f4      	mov	ip, lr
 8011158:	d815      	bhi.n	8011186 <rshift+0x7e>
 801115a:	1a9a      	subs	r2, r3, r2
 801115c:	0092      	lsls	r2, r2, #2
 801115e:	3a04      	subs	r2, #4
 8011160:	3501      	adds	r5, #1
 8011162:	42ae      	cmp	r6, r5
 8011164:	bf38      	it	cc
 8011166:	2200      	movcc	r2, #0
 8011168:	18a3      	adds	r3, r4, r2
 801116a:	50a7      	str	r7, [r4, r2]
 801116c:	b107      	cbz	r7, 8011170 <rshift+0x68>
 801116e:	3304      	adds	r3, #4
 8011170:	1b1a      	subs	r2, r3, r4
 8011172:	42a3      	cmp	r3, r4
 8011174:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011178:	bf08      	it	eq
 801117a:	2300      	moveq	r3, #0
 801117c:	6102      	str	r2, [r0, #16]
 801117e:	bf08      	it	eq
 8011180:	6143      	streq	r3, [r0, #20]
 8011182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011186:	f8dc c000 	ldr.w	ip, [ip]
 801118a:	fa0c fc08 	lsl.w	ip, ip, r8
 801118e:	ea4c 0707 	orr.w	r7, ip, r7
 8011192:	f849 7b04 	str.w	r7, [r9], #4
 8011196:	f85e 7b04 	ldr.w	r7, [lr], #4
 801119a:	40cf      	lsrs	r7, r1
 801119c:	e7da      	b.n	8011154 <rshift+0x4c>
 801119e:	f851 cb04 	ldr.w	ip, [r1], #4
 80111a2:	f847 cf04 	str.w	ip, [r7, #4]!
 80111a6:	e7c3      	b.n	8011130 <rshift+0x28>
 80111a8:	4623      	mov	r3, r4
 80111aa:	e7e1      	b.n	8011170 <rshift+0x68>

080111ac <__hexdig_fun>:
 80111ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80111b0:	2b09      	cmp	r3, #9
 80111b2:	d802      	bhi.n	80111ba <__hexdig_fun+0xe>
 80111b4:	3820      	subs	r0, #32
 80111b6:	b2c0      	uxtb	r0, r0
 80111b8:	4770      	bx	lr
 80111ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80111be:	2b05      	cmp	r3, #5
 80111c0:	d801      	bhi.n	80111c6 <__hexdig_fun+0x1a>
 80111c2:	3847      	subs	r0, #71	; 0x47
 80111c4:	e7f7      	b.n	80111b6 <__hexdig_fun+0xa>
 80111c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80111ca:	2b05      	cmp	r3, #5
 80111cc:	d801      	bhi.n	80111d2 <__hexdig_fun+0x26>
 80111ce:	3827      	subs	r0, #39	; 0x27
 80111d0:	e7f1      	b.n	80111b6 <__hexdig_fun+0xa>
 80111d2:	2000      	movs	r0, #0
 80111d4:	4770      	bx	lr
	...

080111d8 <__gethex>:
 80111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	4617      	mov	r7, r2
 80111de:	680a      	ldr	r2, [r1, #0]
 80111e0:	b085      	sub	sp, #20
 80111e2:	f102 0b02 	add.w	fp, r2, #2
 80111e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80111ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80111ee:	4681      	mov	r9, r0
 80111f0:	468a      	mov	sl, r1
 80111f2:	9302      	str	r3, [sp, #8]
 80111f4:	32fe      	adds	r2, #254	; 0xfe
 80111f6:	eb02 030b 	add.w	r3, r2, fp
 80111fa:	46d8      	mov	r8, fp
 80111fc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8011200:	9301      	str	r3, [sp, #4]
 8011202:	2830      	cmp	r0, #48	; 0x30
 8011204:	d0f7      	beq.n	80111f6 <__gethex+0x1e>
 8011206:	f7ff ffd1 	bl	80111ac <__hexdig_fun>
 801120a:	4604      	mov	r4, r0
 801120c:	2800      	cmp	r0, #0
 801120e:	d138      	bne.n	8011282 <__gethex+0xaa>
 8011210:	49a7      	ldr	r1, [pc, #668]	; (80114b0 <__gethex+0x2d8>)
 8011212:	2201      	movs	r2, #1
 8011214:	4640      	mov	r0, r8
 8011216:	f7fd f8e7 	bl	800e3e8 <strncmp>
 801121a:	4606      	mov	r6, r0
 801121c:	2800      	cmp	r0, #0
 801121e:	d169      	bne.n	80112f4 <__gethex+0x11c>
 8011220:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011224:	465d      	mov	r5, fp
 8011226:	f7ff ffc1 	bl	80111ac <__hexdig_fun>
 801122a:	2800      	cmp	r0, #0
 801122c:	d064      	beq.n	80112f8 <__gethex+0x120>
 801122e:	465a      	mov	r2, fp
 8011230:	7810      	ldrb	r0, [r2, #0]
 8011232:	2830      	cmp	r0, #48	; 0x30
 8011234:	4690      	mov	r8, r2
 8011236:	f102 0201 	add.w	r2, r2, #1
 801123a:	d0f9      	beq.n	8011230 <__gethex+0x58>
 801123c:	f7ff ffb6 	bl	80111ac <__hexdig_fun>
 8011240:	2301      	movs	r3, #1
 8011242:	fab0 f480 	clz	r4, r0
 8011246:	0964      	lsrs	r4, r4, #5
 8011248:	465e      	mov	r6, fp
 801124a:	9301      	str	r3, [sp, #4]
 801124c:	4642      	mov	r2, r8
 801124e:	4615      	mov	r5, r2
 8011250:	3201      	adds	r2, #1
 8011252:	7828      	ldrb	r0, [r5, #0]
 8011254:	f7ff ffaa 	bl	80111ac <__hexdig_fun>
 8011258:	2800      	cmp	r0, #0
 801125a:	d1f8      	bne.n	801124e <__gethex+0x76>
 801125c:	4994      	ldr	r1, [pc, #592]	; (80114b0 <__gethex+0x2d8>)
 801125e:	2201      	movs	r2, #1
 8011260:	4628      	mov	r0, r5
 8011262:	f7fd f8c1 	bl	800e3e8 <strncmp>
 8011266:	b978      	cbnz	r0, 8011288 <__gethex+0xb0>
 8011268:	b946      	cbnz	r6, 801127c <__gethex+0xa4>
 801126a:	1c6e      	adds	r6, r5, #1
 801126c:	4632      	mov	r2, r6
 801126e:	4615      	mov	r5, r2
 8011270:	3201      	adds	r2, #1
 8011272:	7828      	ldrb	r0, [r5, #0]
 8011274:	f7ff ff9a 	bl	80111ac <__hexdig_fun>
 8011278:	2800      	cmp	r0, #0
 801127a:	d1f8      	bne.n	801126e <__gethex+0x96>
 801127c:	1b73      	subs	r3, r6, r5
 801127e:	009e      	lsls	r6, r3, #2
 8011280:	e004      	b.n	801128c <__gethex+0xb4>
 8011282:	2400      	movs	r4, #0
 8011284:	4626      	mov	r6, r4
 8011286:	e7e1      	b.n	801124c <__gethex+0x74>
 8011288:	2e00      	cmp	r6, #0
 801128a:	d1f7      	bne.n	801127c <__gethex+0xa4>
 801128c:	782b      	ldrb	r3, [r5, #0]
 801128e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011292:	2b50      	cmp	r3, #80	; 0x50
 8011294:	d13d      	bne.n	8011312 <__gethex+0x13a>
 8011296:	786b      	ldrb	r3, [r5, #1]
 8011298:	2b2b      	cmp	r3, #43	; 0x2b
 801129a:	d02f      	beq.n	80112fc <__gethex+0x124>
 801129c:	2b2d      	cmp	r3, #45	; 0x2d
 801129e:	d031      	beq.n	8011304 <__gethex+0x12c>
 80112a0:	1c69      	adds	r1, r5, #1
 80112a2:	f04f 0b00 	mov.w	fp, #0
 80112a6:	7808      	ldrb	r0, [r1, #0]
 80112a8:	f7ff ff80 	bl	80111ac <__hexdig_fun>
 80112ac:	1e42      	subs	r2, r0, #1
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	2a18      	cmp	r2, #24
 80112b2:	d82e      	bhi.n	8011312 <__gethex+0x13a>
 80112b4:	f1a0 0210 	sub.w	r2, r0, #16
 80112b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80112bc:	f7ff ff76 	bl	80111ac <__hexdig_fun>
 80112c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80112c4:	fa5f fc8c 	uxtb.w	ip, ip
 80112c8:	f1bc 0f18 	cmp.w	ip, #24
 80112cc:	d91d      	bls.n	801130a <__gethex+0x132>
 80112ce:	f1bb 0f00 	cmp.w	fp, #0
 80112d2:	d000      	beq.n	80112d6 <__gethex+0xfe>
 80112d4:	4252      	negs	r2, r2
 80112d6:	4416      	add	r6, r2
 80112d8:	f8ca 1000 	str.w	r1, [sl]
 80112dc:	b1dc      	cbz	r4, 8011316 <__gethex+0x13e>
 80112de:	9b01      	ldr	r3, [sp, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	bf14      	ite	ne
 80112e4:	f04f 0800 	movne.w	r8, #0
 80112e8:	f04f 0806 	moveq.w	r8, #6
 80112ec:	4640      	mov	r0, r8
 80112ee:	b005      	add	sp, #20
 80112f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f4:	4645      	mov	r5, r8
 80112f6:	4626      	mov	r6, r4
 80112f8:	2401      	movs	r4, #1
 80112fa:	e7c7      	b.n	801128c <__gethex+0xb4>
 80112fc:	f04f 0b00 	mov.w	fp, #0
 8011300:	1ca9      	adds	r1, r5, #2
 8011302:	e7d0      	b.n	80112a6 <__gethex+0xce>
 8011304:	f04f 0b01 	mov.w	fp, #1
 8011308:	e7fa      	b.n	8011300 <__gethex+0x128>
 801130a:	230a      	movs	r3, #10
 801130c:	fb03 0002 	mla	r0, r3, r2, r0
 8011310:	e7d0      	b.n	80112b4 <__gethex+0xdc>
 8011312:	4629      	mov	r1, r5
 8011314:	e7e0      	b.n	80112d8 <__gethex+0x100>
 8011316:	eba5 0308 	sub.w	r3, r5, r8
 801131a:	3b01      	subs	r3, #1
 801131c:	4621      	mov	r1, r4
 801131e:	2b07      	cmp	r3, #7
 8011320:	dc0a      	bgt.n	8011338 <__gethex+0x160>
 8011322:	4648      	mov	r0, r9
 8011324:	f7fd ffd6 	bl	800f2d4 <_Balloc>
 8011328:	4604      	mov	r4, r0
 801132a:	b940      	cbnz	r0, 801133e <__gethex+0x166>
 801132c:	4b61      	ldr	r3, [pc, #388]	; (80114b4 <__gethex+0x2dc>)
 801132e:	4602      	mov	r2, r0
 8011330:	21e4      	movs	r1, #228	; 0xe4
 8011332:	4861      	ldr	r0, [pc, #388]	; (80114b8 <__gethex+0x2e0>)
 8011334:	f7ff feb4 	bl	80110a0 <__assert_func>
 8011338:	3101      	adds	r1, #1
 801133a:	105b      	asrs	r3, r3, #1
 801133c:	e7ef      	b.n	801131e <__gethex+0x146>
 801133e:	f100 0a14 	add.w	sl, r0, #20
 8011342:	2300      	movs	r3, #0
 8011344:	495a      	ldr	r1, [pc, #360]	; (80114b0 <__gethex+0x2d8>)
 8011346:	f8cd a004 	str.w	sl, [sp, #4]
 801134a:	469b      	mov	fp, r3
 801134c:	45a8      	cmp	r8, r5
 801134e:	d342      	bcc.n	80113d6 <__gethex+0x1fe>
 8011350:	9801      	ldr	r0, [sp, #4]
 8011352:	f840 bb04 	str.w	fp, [r0], #4
 8011356:	eba0 000a 	sub.w	r0, r0, sl
 801135a:	1080      	asrs	r0, r0, #2
 801135c:	6120      	str	r0, [r4, #16]
 801135e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8011362:	4658      	mov	r0, fp
 8011364:	f7fe f8a8 	bl	800f4b8 <__hi0bits>
 8011368:	683d      	ldr	r5, [r7, #0]
 801136a:	eba8 0000 	sub.w	r0, r8, r0
 801136e:	42a8      	cmp	r0, r5
 8011370:	dd59      	ble.n	8011426 <__gethex+0x24e>
 8011372:	eba0 0805 	sub.w	r8, r0, r5
 8011376:	4641      	mov	r1, r8
 8011378:	4620      	mov	r0, r4
 801137a:	f7fe fc37 	bl	800fbec <__any_on>
 801137e:	4683      	mov	fp, r0
 8011380:	b1b8      	cbz	r0, 80113b2 <__gethex+0x1da>
 8011382:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8011386:	1159      	asrs	r1, r3, #5
 8011388:	f003 021f 	and.w	r2, r3, #31
 801138c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011390:	f04f 0b01 	mov.w	fp, #1
 8011394:	fa0b f202 	lsl.w	r2, fp, r2
 8011398:	420a      	tst	r2, r1
 801139a:	d00a      	beq.n	80113b2 <__gethex+0x1da>
 801139c:	455b      	cmp	r3, fp
 801139e:	dd06      	ble.n	80113ae <__gethex+0x1d6>
 80113a0:	f1a8 0102 	sub.w	r1, r8, #2
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7fe fc21 	bl	800fbec <__any_on>
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d138      	bne.n	8011420 <__gethex+0x248>
 80113ae:	f04f 0b02 	mov.w	fp, #2
 80113b2:	4641      	mov	r1, r8
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff fea7 	bl	8011108 <rshift>
 80113ba:	4446      	add	r6, r8
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	42b3      	cmp	r3, r6
 80113c0:	da41      	bge.n	8011446 <__gethex+0x26e>
 80113c2:	4621      	mov	r1, r4
 80113c4:	4648      	mov	r0, r9
 80113c6:	f7fd ffc5 	bl	800f354 <_Bfree>
 80113ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113cc:	2300      	movs	r3, #0
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80113d4:	e78a      	b.n	80112ec <__gethex+0x114>
 80113d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80113da:	2a2e      	cmp	r2, #46	; 0x2e
 80113dc:	d014      	beq.n	8011408 <__gethex+0x230>
 80113de:	2b20      	cmp	r3, #32
 80113e0:	d106      	bne.n	80113f0 <__gethex+0x218>
 80113e2:	9b01      	ldr	r3, [sp, #4]
 80113e4:	f843 bb04 	str.w	fp, [r3], #4
 80113e8:	f04f 0b00 	mov.w	fp, #0
 80113ec:	9301      	str	r3, [sp, #4]
 80113ee:	465b      	mov	r3, fp
 80113f0:	7828      	ldrb	r0, [r5, #0]
 80113f2:	9303      	str	r3, [sp, #12]
 80113f4:	f7ff feda 	bl	80111ac <__hexdig_fun>
 80113f8:	9b03      	ldr	r3, [sp, #12]
 80113fa:	f000 000f 	and.w	r0, r0, #15
 80113fe:	4098      	lsls	r0, r3
 8011400:	ea4b 0b00 	orr.w	fp, fp, r0
 8011404:	3304      	adds	r3, #4
 8011406:	e7a1      	b.n	801134c <__gethex+0x174>
 8011408:	45a8      	cmp	r8, r5
 801140a:	d8e8      	bhi.n	80113de <__gethex+0x206>
 801140c:	2201      	movs	r2, #1
 801140e:	4628      	mov	r0, r5
 8011410:	9303      	str	r3, [sp, #12]
 8011412:	f7fc ffe9 	bl	800e3e8 <strncmp>
 8011416:	4926      	ldr	r1, [pc, #152]	; (80114b0 <__gethex+0x2d8>)
 8011418:	9b03      	ldr	r3, [sp, #12]
 801141a:	2800      	cmp	r0, #0
 801141c:	d1df      	bne.n	80113de <__gethex+0x206>
 801141e:	e795      	b.n	801134c <__gethex+0x174>
 8011420:	f04f 0b03 	mov.w	fp, #3
 8011424:	e7c5      	b.n	80113b2 <__gethex+0x1da>
 8011426:	da0b      	bge.n	8011440 <__gethex+0x268>
 8011428:	eba5 0800 	sub.w	r8, r5, r0
 801142c:	4621      	mov	r1, r4
 801142e:	4642      	mov	r2, r8
 8011430:	4648      	mov	r0, r9
 8011432:	f7fe f9a9 	bl	800f788 <__lshift>
 8011436:	eba6 0608 	sub.w	r6, r6, r8
 801143a:	4604      	mov	r4, r0
 801143c:	f100 0a14 	add.w	sl, r0, #20
 8011440:	f04f 0b00 	mov.w	fp, #0
 8011444:	e7ba      	b.n	80113bc <__gethex+0x1e4>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	42b3      	cmp	r3, r6
 801144a:	dd73      	ble.n	8011534 <__gethex+0x35c>
 801144c:	1b9e      	subs	r6, r3, r6
 801144e:	42b5      	cmp	r5, r6
 8011450:	dc34      	bgt.n	80114bc <__gethex+0x2e4>
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2b02      	cmp	r3, #2
 8011456:	d023      	beq.n	80114a0 <__gethex+0x2c8>
 8011458:	2b03      	cmp	r3, #3
 801145a:	d025      	beq.n	80114a8 <__gethex+0x2d0>
 801145c:	2b01      	cmp	r3, #1
 801145e:	d115      	bne.n	801148c <__gethex+0x2b4>
 8011460:	42b5      	cmp	r5, r6
 8011462:	d113      	bne.n	801148c <__gethex+0x2b4>
 8011464:	2d01      	cmp	r5, #1
 8011466:	d10b      	bne.n	8011480 <__gethex+0x2a8>
 8011468:	9a02      	ldr	r2, [sp, #8]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6013      	str	r3, [r2, #0]
 801146e:	2301      	movs	r3, #1
 8011470:	6123      	str	r3, [r4, #16]
 8011472:	f8ca 3000 	str.w	r3, [sl]
 8011476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011478:	f04f 0862 	mov.w	r8, #98	; 0x62
 801147c:	601c      	str	r4, [r3, #0]
 801147e:	e735      	b.n	80112ec <__gethex+0x114>
 8011480:	1e69      	subs	r1, r5, #1
 8011482:	4620      	mov	r0, r4
 8011484:	f7fe fbb2 	bl	800fbec <__any_on>
 8011488:	2800      	cmp	r0, #0
 801148a:	d1ed      	bne.n	8011468 <__gethex+0x290>
 801148c:	4621      	mov	r1, r4
 801148e:	4648      	mov	r0, r9
 8011490:	f7fd ff60 	bl	800f354 <_Bfree>
 8011494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011496:	2300      	movs	r3, #0
 8011498:	6013      	str	r3, [r2, #0]
 801149a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801149e:	e725      	b.n	80112ec <__gethex+0x114>
 80114a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1f2      	bne.n	801148c <__gethex+0x2b4>
 80114a6:	e7df      	b.n	8011468 <__gethex+0x290>
 80114a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d1dc      	bne.n	8011468 <__gethex+0x290>
 80114ae:	e7ed      	b.n	801148c <__gethex+0x2b4>
 80114b0:	0801281c 	.word	0x0801281c
 80114b4:	080126b6 	.word	0x080126b6
 80114b8:	080128c5 	.word	0x080128c5
 80114bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80114c0:	f1bb 0f00 	cmp.w	fp, #0
 80114c4:	d133      	bne.n	801152e <__gethex+0x356>
 80114c6:	f1b8 0f00 	cmp.w	r8, #0
 80114ca:	d004      	beq.n	80114d6 <__gethex+0x2fe>
 80114cc:	4641      	mov	r1, r8
 80114ce:	4620      	mov	r0, r4
 80114d0:	f7fe fb8c 	bl	800fbec <__any_on>
 80114d4:	4683      	mov	fp, r0
 80114d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80114da:	2301      	movs	r3, #1
 80114dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80114e0:	f008 081f 	and.w	r8, r8, #31
 80114e4:	fa03 f308 	lsl.w	r3, r3, r8
 80114e8:	4213      	tst	r3, r2
 80114ea:	4631      	mov	r1, r6
 80114ec:	4620      	mov	r0, r4
 80114ee:	bf18      	it	ne
 80114f0:	f04b 0b02 	orrne.w	fp, fp, #2
 80114f4:	1bad      	subs	r5, r5, r6
 80114f6:	f7ff fe07 	bl	8011108 <rshift>
 80114fa:	687e      	ldr	r6, [r7, #4]
 80114fc:	f04f 0802 	mov.w	r8, #2
 8011500:	f1bb 0f00 	cmp.w	fp, #0
 8011504:	d04a      	beq.n	801159c <__gethex+0x3c4>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2b02      	cmp	r3, #2
 801150a:	d016      	beq.n	801153a <__gethex+0x362>
 801150c:	2b03      	cmp	r3, #3
 801150e:	d018      	beq.n	8011542 <__gethex+0x36a>
 8011510:	2b01      	cmp	r3, #1
 8011512:	d109      	bne.n	8011528 <__gethex+0x350>
 8011514:	f01b 0f02 	tst.w	fp, #2
 8011518:	d006      	beq.n	8011528 <__gethex+0x350>
 801151a:	f8da 3000 	ldr.w	r3, [sl]
 801151e:	ea4b 0b03 	orr.w	fp, fp, r3
 8011522:	f01b 0f01 	tst.w	fp, #1
 8011526:	d10f      	bne.n	8011548 <__gethex+0x370>
 8011528:	f048 0810 	orr.w	r8, r8, #16
 801152c:	e036      	b.n	801159c <__gethex+0x3c4>
 801152e:	f04f 0b01 	mov.w	fp, #1
 8011532:	e7d0      	b.n	80114d6 <__gethex+0x2fe>
 8011534:	f04f 0801 	mov.w	r8, #1
 8011538:	e7e2      	b.n	8011500 <__gethex+0x328>
 801153a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801153c:	f1c3 0301 	rsb	r3, r3, #1
 8011540:	930f      	str	r3, [sp, #60]	; 0x3c
 8011542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d0ef      	beq.n	8011528 <__gethex+0x350>
 8011548:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801154c:	f104 0214 	add.w	r2, r4, #20
 8011550:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801155a:	2300      	movs	r3, #0
 801155c:	4694      	mov	ip, r2
 801155e:	f852 1b04 	ldr.w	r1, [r2], #4
 8011562:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8011566:	d01e      	beq.n	80115a6 <__gethex+0x3ce>
 8011568:	3101      	adds	r1, #1
 801156a:	f8cc 1000 	str.w	r1, [ip]
 801156e:	f1b8 0f02 	cmp.w	r8, #2
 8011572:	f104 0214 	add.w	r2, r4, #20
 8011576:	d13d      	bne.n	80115f4 <__gethex+0x41c>
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	3b01      	subs	r3, #1
 801157c:	42ab      	cmp	r3, r5
 801157e:	d10b      	bne.n	8011598 <__gethex+0x3c0>
 8011580:	1169      	asrs	r1, r5, #5
 8011582:	2301      	movs	r3, #1
 8011584:	f005 051f 	and.w	r5, r5, #31
 8011588:	fa03 f505 	lsl.w	r5, r3, r5
 801158c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011590:	421d      	tst	r5, r3
 8011592:	bf18      	it	ne
 8011594:	f04f 0801 	movne.w	r8, #1
 8011598:	f048 0820 	orr.w	r8, r8, #32
 801159c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801159e:	601c      	str	r4, [r3, #0]
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	601e      	str	r6, [r3, #0]
 80115a4:	e6a2      	b.n	80112ec <__gethex+0x114>
 80115a6:	4290      	cmp	r0, r2
 80115a8:	f842 3c04 	str.w	r3, [r2, #-4]
 80115ac:	d8d6      	bhi.n	801155c <__gethex+0x384>
 80115ae:	68a2      	ldr	r2, [r4, #8]
 80115b0:	4593      	cmp	fp, r2
 80115b2:	db17      	blt.n	80115e4 <__gethex+0x40c>
 80115b4:	6861      	ldr	r1, [r4, #4]
 80115b6:	4648      	mov	r0, r9
 80115b8:	3101      	adds	r1, #1
 80115ba:	f7fd fe8b 	bl	800f2d4 <_Balloc>
 80115be:	4682      	mov	sl, r0
 80115c0:	b918      	cbnz	r0, 80115ca <__gethex+0x3f2>
 80115c2:	4b1b      	ldr	r3, [pc, #108]	; (8011630 <__gethex+0x458>)
 80115c4:	4602      	mov	r2, r0
 80115c6:	2184      	movs	r1, #132	; 0x84
 80115c8:	e6b3      	b.n	8011332 <__gethex+0x15a>
 80115ca:	6922      	ldr	r2, [r4, #16]
 80115cc:	3202      	adds	r2, #2
 80115ce:	f104 010c 	add.w	r1, r4, #12
 80115d2:	0092      	lsls	r2, r2, #2
 80115d4:	300c      	adds	r0, #12
 80115d6:	f7fc ffa0 	bl	800e51a <memcpy>
 80115da:	4621      	mov	r1, r4
 80115dc:	4648      	mov	r0, r9
 80115de:	f7fd feb9 	bl	800f354 <_Bfree>
 80115e2:	4654      	mov	r4, sl
 80115e4:	6922      	ldr	r2, [r4, #16]
 80115e6:	1c51      	adds	r1, r2, #1
 80115e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80115ec:	6121      	str	r1, [r4, #16]
 80115ee:	2101      	movs	r1, #1
 80115f0:	6151      	str	r1, [r2, #20]
 80115f2:	e7bc      	b.n	801156e <__gethex+0x396>
 80115f4:	6921      	ldr	r1, [r4, #16]
 80115f6:	4559      	cmp	r1, fp
 80115f8:	dd0b      	ble.n	8011612 <__gethex+0x43a>
 80115fa:	2101      	movs	r1, #1
 80115fc:	4620      	mov	r0, r4
 80115fe:	f7ff fd83 	bl	8011108 <rshift>
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	3601      	adds	r6, #1
 8011606:	42b3      	cmp	r3, r6
 8011608:	f6ff aedb 	blt.w	80113c2 <__gethex+0x1ea>
 801160c:	f04f 0801 	mov.w	r8, #1
 8011610:	e7c2      	b.n	8011598 <__gethex+0x3c0>
 8011612:	f015 051f 	ands.w	r5, r5, #31
 8011616:	d0f9      	beq.n	801160c <__gethex+0x434>
 8011618:	9b01      	ldr	r3, [sp, #4]
 801161a:	441a      	add	r2, r3
 801161c:	f1c5 0520 	rsb	r5, r5, #32
 8011620:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8011624:	f7fd ff48 	bl	800f4b8 <__hi0bits>
 8011628:	42a8      	cmp	r0, r5
 801162a:	dbe6      	blt.n	80115fa <__gethex+0x422>
 801162c:	e7ee      	b.n	801160c <__gethex+0x434>
 801162e:	bf00      	nop
 8011630:	080126b6 	.word	0x080126b6

08011634 <L_shift>:
 8011634:	f1c2 0208 	rsb	r2, r2, #8
 8011638:	0092      	lsls	r2, r2, #2
 801163a:	b570      	push	{r4, r5, r6, lr}
 801163c:	f1c2 0620 	rsb	r6, r2, #32
 8011640:	6843      	ldr	r3, [r0, #4]
 8011642:	6804      	ldr	r4, [r0, #0]
 8011644:	fa03 f506 	lsl.w	r5, r3, r6
 8011648:	432c      	orrs	r4, r5
 801164a:	40d3      	lsrs	r3, r2
 801164c:	6004      	str	r4, [r0, #0]
 801164e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011652:	4288      	cmp	r0, r1
 8011654:	d3f4      	bcc.n	8011640 <L_shift+0xc>
 8011656:	bd70      	pop	{r4, r5, r6, pc}

08011658 <__match>:
 8011658:	b530      	push	{r4, r5, lr}
 801165a:	6803      	ldr	r3, [r0, #0]
 801165c:	3301      	adds	r3, #1
 801165e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011662:	b914      	cbnz	r4, 801166a <__match+0x12>
 8011664:	6003      	str	r3, [r0, #0]
 8011666:	2001      	movs	r0, #1
 8011668:	bd30      	pop	{r4, r5, pc}
 801166a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801166e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011672:	2d19      	cmp	r5, #25
 8011674:	bf98      	it	ls
 8011676:	3220      	addls	r2, #32
 8011678:	42a2      	cmp	r2, r4
 801167a:	d0f0      	beq.n	801165e <__match+0x6>
 801167c:	2000      	movs	r0, #0
 801167e:	e7f3      	b.n	8011668 <__match+0x10>

08011680 <__hexnan>:
 8011680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	680b      	ldr	r3, [r1, #0]
 8011686:	6801      	ldr	r1, [r0, #0]
 8011688:	115e      	asrs	r6, r3, #5
 801168a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801168e:	f013 031f 	ands.w	r3, r3, #31
 8011692:	b087      	sub	sp, #28
 8011694:	bf18      	it	ne
 8011696:	3604      	addne	r6, #4
 8011698:	2500      	movs	r5, #0
 801169a:	1f37      	subs	r7, r6, #4
 801169c:	4682      	mov	sl, r0
 801169e:	4690      	mov	r8, r2
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80116a6:	46b9      	mov	r9, r7
 80116a8:	463c      	mov	r4, r7
 80116aa:	9502      	str	r5, [sp, #8]
 80116ac:	46ab      	mov	fp, r5
 80116ae:	784a      	ldrb	r2, [r1, #1]
 80116b0:	1c4b      	adds	r3, r1, #1
 80116b2:	9303      	str	r3, [sp, #12]
 80116b4:	b342      	cbz	r2, 8011708 <__hexnan+0x88>
 80116b6:	4610      	mov	r0, r2
 80116b8:	9105      	str	r1, [sp, #20]
 80116ba:	9204      	str	r2, [sp, #16]
 80116bc:	f7ff fd76 	bl	80111ac <__hexdig_fun>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d14f      	bne.n	8011764 <__hexnan+0xe4>
 80116c4:	9a04      	ldr	r2, [sp, #16]
 80116c6:	9905      	ldr	r1, [sp, #20]
 80116c8:	2a20      	cmp	r2, #32
 80116ca:	d818      	bhi.n	80116fe <__hexnan+0x7e>
 80116cc:	9b02      	ldr	r3, [sp, #8]
 80116ce:	459b      	cmp	fp, r3
 80116d0:	dd13      	ble.n	80116fa <__hexnan+0x7a>
 80116d2:	454c      	cmp	r4, r9
 80116d4:	d206      	bcs.n	80116e4 <__hexnan+0x64>
 80116d6:	2d07      	cmp	r5, #7
 80116d8:	dc04      	bgt.n	80116e4 <__hexnan+0x64>
 80116da:	462a      	mov	r2, r5
 80116dc:	4649      	mov	r1, r9
 80116de:	4620      	mov	r0, r4
 80116e0:	f7ff ffa8 	bl	8011634 <L_shift>
 80116e4:	4544      	cmp	r4, r8
 80116e6:	d950      	bls.n	801178a <__hexnan+0x10a>
 80116e8:	2300      	movs	r3, #0
 80116ea:	f1a4 0904 	sub.w	r9, r4, #4
 80116ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80116f2:	f8cd b008 	str.w	fp, [sp, #8]
 80116f6:	464c      	mov	r4, r9
 80116f8:	461d      	mov	r5, r3
 80116fa:	9903      	ldr	r1, [sp, #12]
 80116fc:	e7d7      	b.n	80116ae <__hexnan+0x2e>
 80116fe:	2a29      	cmp	r2, #41	; 0x29
 8011700:	d155      	bne.n	80117ae <__hexnan+0x12e>
 8011702:	3102      	adds	r1, #2
 8011704:	f8ca 1000 	str.w	r1, [sl]
 8011708:	f1bb 0f00 	cmp.w	fp, #0
 801170c:	d04f      	beq.n	80117ae <__hexnan+0x12e>
 801170e:	454c      	cmp	r4, r9
 8011710:	d206      	bcs.n	8011720 <__hexnan+0xa0>
 8011712:	2d07      	cmp	r5, #7
 8011714:	dc04      	bgt.n	8011720 <__hexnan+0xa0>
 8011716:	462a      	mov	r2, r5
 8011718:	4649      	mov	r1, r9
 801171a:	4620      	mov	r0, r4
 801171c:	f7ff ff8a 	bl	8011634 <L_shift>
 8011720:	4544      	cmp	r4, r8
 8011722:	d934      	bls.n	801178e <__hexnan+0x10e>
 8011724:	f1a8 0204 	sub.w	r2, r8, #4
 8011728:	4623      	mov	r3, r4
 801172a:	f853 1b04 	ldr.w	r1, [r3], #4
 801172e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011732:	429f      	cmp	r7, r3
 8011734:	d2f9      	bcs.n	801172a <__hexnan+0xaa>
 8011736:	1b3b      	subs	r3, r7, r4
 8011738:	f023 0303 	bic.w	r3, r3, #3
 801173c:	3304      	adds	r3, #4
 801173e:	3e03      	subs	r6, #3
 8011740:	3401      	adds	r4, #1
 8011742:	42a6      	cmp	r6, r4
 8011744:	bf38      	it	cc
 8011746:	2304      	movcc	r3, #4
 8011748:	4443      	add	r3, r8
 801174a:	2200      	movs	r2, #0
 801174c:	f843 2b04 	str.w	r2, [r3], #4
 8011750:	429f      	cmp	r7, r3
 8011752:	d2fb      	bcs.n	801174c <__hexnan+0xcc>
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	b91b      	cbnz	r3, 8011760 <__hexnan+0xe0>
 8011758:	4547      	cmp	r7, r8
 801175a:	d126      	bne.n	80117aa <__hexnan+0x12a>
 801175c:	2301      	movs	r3, #1
 801175e:	603b      	str	r3, [r7, #0]
 8011760:	2005      	movs	r0, #5
 8011762:	e025      	b.n	80117b0 <__hexnan+0x130>
 8011764:	3501      	adds	r5, #1
 8011766:	2d08      	cmp	r5, #8
 8011768:	f10b 0b01 	add.w	fp, fp, #1
 801176c:	dd06      	ble.n	801177c <__hexnan+0xfc>
 801176e:	4544      	cmp	r4, r8
 8011770:	d9c3      	bls.n	80116fa <__hexnan+0x7a>
 8011772:	2300      	movs	r3, #0
 8011774:	f844 3c04 	str.w	r3, [r4, #-4]
 8011778:	2501      	movs	r5, #1
 801177a:	3c04      	subs	r4, #4
 801177c:	6822      	ldr	r2, [r4, #0]
 801177e:	f000 000f 	and.w	r0, r0, #15
 8011782:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011786:	6020      	str	r0, [r4, #0]
 8011788:	e7b7      	b.n	80116fa <__hexnan+0x7a>
 801178a:	2508      	movs	r5, #8
 801178c:	e7b5      	b.n	80116fa <__hexnan+0x7a>
 801178e:	9b01      	ldr	r3, [sp, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d0df      	beq.n	8011754 <__hexnan+0xd4>
 8011794:	f1c3 0320 	rsb	r3, r3, #32
 8011798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801179c:	40da      	lsrs	r2, r3
 801179e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80117a2:	4013      	ands	r3, r2
 80117a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80117a8:	e7d4      	b.n	8011754 <__hexnan+0xd4>
 80117aa:	3f04      	subs	r7, #4
 80117ac:	e7d2      	b.n	8011754 <__hexnan+0xd4>
 80117ae:	2004      	movs	r0, #4
 80117b0:	b007      	add	sp, #28
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117b6 <__ascii_mbtowc>:
 80117b6:	b082      	sub	sp, #8
 80117b8:	b901      	cbnz	r1, 80117bc <__ascii_mbtowc+0x6>
 80117ba:	a901      	add	r1, sp, #4
 80117bc:	b142      	cbz	r2, 80117d0 <__ascii_mbtowc+0x1a>
 80117be:	b14b      	cbz	r3, 80117d4 <__ascii_mbtowc+0x1e>
 80117c0:	7813      	ldrb	r3, [r2, #0]
 80117c2:	600b      	str	r3, [r1, #0]
 80117c4:	7812      	ldrb	r2, [r2, #0]
 80117c6:	1e10      	subs	r0, r2, #0
 80117c8:	bf18      	it	ne
 80117ca:	2001      	movne	r0, #1
 80117cc:	b002      	add	sp, #8
 80117ce:	4770      	bx	lr
 80117d0:	4610      	mov	r0, r2
 80117d2:	e7fb      	b.n	80117cc <__ascii_mbtowc+0x16>
 80117d4:	f06f 0001 	mvn.w	r0, #1
 80117d8:	e7f8      	b.n	80117cc <__ascii_mbtowc+0x16>

080117da <_realloc_r>:
 80117da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117de:	4680      	mov	r8, r0
 80117e0:	4614      	mov	r4, r2
 80117e2:	460e      	mov	r6, r1
 80117e4:	b921      	cbnz	r1, 80117f0 <_realloc_r+0x16>
 80117e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117ea:	4611      	mov	r1, r2
 80117ec:	f7fb bc34 	b.w	800d058 <_malloc_r>
 80117f0:	b92a      	cbnz	r2, 80117fe <_realloc_r+0x24>
 80117f2:	f7fd fd23 	bl	800f23c <_free_r>
 80117f6:	4625      	mov	r5, r4
 80117f8:	4628      	mov	r0, r5
 80117fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117fe:	f000 f842 	bl	8011886 <_malloc_usable_size_r>
 8011802:	4284      	cmp	r4, r0
 8011804:	4607      	mov	r7, r0
 8011806:	d802      	bhi.n	801180e <_realloc_r+0x34>
 8011808:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801180c:	d812      	bhi.n	8011834 <_realloc_r+0x5a>
 801180e:	4621      	mov	r1, r4
 8011810:	4640      	mov	r0, r8
 8011812:	f7fb fc21 	bl	800d058 <_malloc_r>
 8011816:	4605      	mov	r5, r0
 8011818:	2800      	cmp	r0, #0
 801181a:	d0ed      	beq.n	80117f8 <_realloc_r+0x1e>
 801181c:	42bc      	cmp	r4, r7
 801181e:	4622      	mov	r2, r4
 8011820:	4631      	mov	r1, r6
 8011822:	bf28      	it	cs
 8011824:	463a      	movcs	r2, r7
 8011826:	f7fc fe78 	bl	800e51a <memcpy>
 801182a:	4631      	mov	r1, r6
 801182c:	4640      	mov	r0, r8
 801182e:	f7fd fd05 	bl	800f23c <_free_r>
 8011832:	e7e1      	b.n	80117f8 <_realloc_r+0x1e>
 8011834:	4635      	mov	r5, r6
 8011836:	e7df      	b.n	80117f8 <_realloc_r+0x1e>

08011838 <__ascii_wctomb>:
 8011838:	b149      	cbz	r1, 801184e <__ascii_wctomb+0x16>
 801183a:	2aff      	cmp	r2, #255	; 0xff
 801183c:	bf85      	ittet	hi
 801183e:	238a      	movhi	r3, #138	; 0x8a
 8011840:	6003      	strhi	r3, [r0, #0]
 8011842:	700a      	strbls	r2, [r1, #0]
 8011844:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011848:	bf98      	it	ls
 801184a:	2001      	movls	r0, #1
 801184c:	4770      	bx	lr
 801184e:	4608      	mov	r0, r1
 8011850:	4770      	bx	lr
	...

08011854 <fiprintf>:
 8011854:	b40e      	push	{r1, r2, r3}
 8011856:	b503      	push	{r0, r1, lr}
 8011858:	4601      	mov	r1, r0
 801185a:	ab03      	add	r3, sp, #12
 801185c:	4805      	ldr	r0, [pc, #20]	; (8011874 <fiprintf+0x20>)
 801185e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011862:	6800      	ldr	r0, [r0, #0]
 8011864:	9301      	str	r3, [sp, #4]
 8011866:	f7ff f977 	bl	8010b58 <_vfiprintf_r>
 801186a:	b002      	add	sp, #8
 801186c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011870:	b003      	add	sp, #12
 8011872:	4770      	bx	lr
 8011874:	200000dc 	.word	0x200000dc

08011878 <abort>:
 8011878:	b508      	push	{r3, lr}
 801187a:	2006      	movs	r0, #6
 801187c:	f000 f834 	bl	80118e8 <raise>
 8011880:	2001      	movs	r0, #1
 8011882:	f7f2 fa8b 	bl	8003d9c <_exit>

08011886 <_malloc_usable_size_r>:
 8011886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801188a:	1f18      	subs	r0, r3, #4
 801188c:	2b00      	cmp	r3, #0
 801188e:	bfbc      	itt	lt
 8011890:	580b      	ldrlt	r3, [r1, r0]
 8011892:	18c0      	addlt	r0, r0, r3
 8011894:	4770      	bx	lr

08011896 <_raise_r>:
 8011896:	291f      	cmp	r1, #31
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	4604      	mov	r4, r0
 801189c:	460d      	mov	r5, r1
 801189e:	d904      	bls.n	80118aa <_raise_r+0x14>
 80118a0:	2316      	movs	r3, #22
 80118a2:	6003      	str	r3, [r0, #0]
 80118a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118a8:	bd38      	pop	{r3, r4, r5, pc}
 80118aa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80118ac:	b112      	cbz	r2, 80118b4 <_raise_r+0x1e>
 80118ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80118b2:	b94b      	cbnz	r3, 80118c8 <_raise_r+0x32>
 80118b4:	4620      	mov	r0, r4
 80118b6:	f000 f831 	bl	801191c <_getpid_r>
 80118ba:	462a      	mov	r2, r5
 80118bc:	4601      	mov	r1, r0
 80118be:	4620      	mov	r0, r4
 80118c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c4:	f000 b818 	b.w	80118f8 <_kill_r>
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d00a      	beq.n	80118e2 <_raise_r+0x4c>
 80118cc:	1c59      	adds	r1, r3, #1
 80118ce:	d103      	bne.n	80118d8 <_raise_r+0x42>
 80118d0:	2316      	movs	r3, #22
 80118d2:	6003      	str	r3, [r0, #0]
 80118d4:	2001      	movs	r0, #1
 80118d6:	e7e7      	b.n	80118a8 <_raise_r+0x12>
 80118d8:	2400      	movs	r4, #0
 80118da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118de:	4628      	mov	r0, r5
 80118e0:	4798      	blx	r3
 80118e2:	2000      	movs	r0, #0
 80118e4:	e7e0      	b.n	80118a8 <_raise_r+0x12>
	...

080118e8 <raise>:
 80118e8:	4b02      	ldr	r3, [pc, #8]	; (80118f4 <raise+0xc>)
 80118ea:	4601      	mov	r1, r0
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	f7ff bfd2 	b.w	8011896 <_raise_r>
 80118f2:	bf00      	nop
 80118f4:	200000dc 	.word	0x200000dc

080118f8 <_kill_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d07      	ldr	r5, [pc, #28]	; (8011918 <_kill_r+0x20>)
 80118fc:	2300      	movs	r3, #0
 80118fe:	4604      	mov	r4, r0
 8011900:	4608      	mov	r0, r1
 8011902:	4611      	mov	r1, r2
 8011904:	602b      	str	r3, [r5, #0]
 8011906:	f7f2 fa39 	bl	8003d7c <_kill>
 801190a:	1c43      	adds	r3, r0, #1
 801190c:	d102      	bne.n	8011914 <_kill_r+0x1c>
 801190e:	682b      	ldr	r3, [r5, #0]
 8011910:	b103      	cbz	r3, 8011914 <_kill_r+0x1c>
 8011912:	6023      	str	r3, [r4, #0]
 8011914:	bd38      	pop	{r3, r4, r5, pc}
 8011916:	bf00      	nop
 8011918:	20002e48 	.word	0x20002e48

0801191c <_getpid_r>:
 801191c:	f7f2 ba26 	b.w	8003d6c <_getpid>

08011920 <_init>:
 8011920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011922:	bf00      	nop
 8011924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011926:	bc08      	pop	{r3}
 8011928:	469e      	mov	lr, r3
 801192a:	4770      	bx	lr

0801192c <_fini>:
 801192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192e:	bf00      	nop
 8011930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011932:	bc08      	pop	{r3}
 8011934:	469e      	mov	lr, r3
 8011936:	4770      	bx	lr
