
F411CE_RFM95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  08011660  08011660  00021660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125c0  080125c0  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  080125c0  080125c0  000225c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c8  080125c8  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c8  080125c8  000225c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125cc  080125cc  000225cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  080125d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c04  2000022c  080127fc  0003022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e30  080127fc  00032e30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001772d  00000000  00000000  0003029f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000347e  00000000  00000000  000479cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0004ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111d  00000000  00000000  0004c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a92d  00000000  00000000  0004d525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b250  00000000  00000000  00067e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009acf1  00000000  00000000  000830a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000716c  00000000  00000000  0011dd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00124f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000022c 	.word	0x2000022c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011648 	.word	0x08011648

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000230 	.word	0x20000230
 80001dc:	08011648 	.word	0x08011648

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_2

/* SPI Chip Select */
static void SELECT(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	2104      	movs	r1, #4
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <SELECT+0x14>)
 800100a:	f003 fa79 	bl	8004500 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40020400 	.word	0x40020400

08001018 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2104      	movs	r1, #4
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DESELECT+0x14>)
 8001022:	f003 fa6d 	bl	8004500 <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020400 	.word	0x40020400

08001030 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800103a:	bf00      	nop
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <SPI_TxByte+0x30>)
 800103e:	f004 ff79 	bl	8005f34 <HAL_SPI_GetState>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d1f9      	bne.n	800103c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001048:	1df9      	adds	r1, r7, #7
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <SPI_TxByte+0x30>)
 8001052:	f004 fb64 	bl	800571e <HAL_SPI_Transmit>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2000026c 	.word	0x2000026c

08001064 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800106a:	23ff      	movs	r3, #255	; 0xff
 800106c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001072:	bf00      	nop
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <SPI_RxByte+0x38>)
 8001076:	f004 ff5d 	bl	8005f34 <HAL_SPI_GetState>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d1f9      	bne.n	8001074 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001080:	1dba      	adds	r2, r7, #6
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	4803      	ldr	r0, [pc, #12]	; (800109c <SPI_RxByte+0x38>)
 800108e:	f004 fda1 	bl	8005bd4 <HAL_SPI_TransmitReceive>

  return data;
 8001092:	79bb      	ldrb	r3, [r7, #6]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000026c 	.word	0x2000026c

080010a0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80010a8:	f7ff ffdc 	bl	8001064 <SPI_RxByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <SD_ReadyWait+0x34>)
 80010c4:	2232      	movs	r2, #50	; 0x32
 80010c6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80010c8:	f7ff ffcc 	bl	8001064 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80010cc:	f7ff ffca 	bl	8001064 <SPI_RxByte>
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d004      	beq.n	80010e4 <SD_ReadyWait+0x28>
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SD_ReadyWait+0x34>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f3      	bne.n	80010cc <SD_ReadyWait+0x10>

  return res;
 80010e4:	79fb      	ldrb	r3, [r7, #7]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20002a9e 	.word	0x20002a9e

080010f4 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80010fa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80010fe:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001100:	f7ff ff8a 	bl	8001018 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	e005      	b.n	8001116 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800110a:	20ff      	movs	r0, #255	; 0xff
 800110c:	f7ff ff90 	bl	8001030 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	3301      	adds	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b09      	cmp	r3, #9
 800111a:	ddf6      	ble.n	800110a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 800111c:	f7ff ff70 	bl	8001000 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001134:	2395      	movs	r3, #149	; 0x95
 8001136:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e009      	b.n	8001152 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800113e:	1d3a      	adds	r2, r7, #4
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff72 	bl	8001030 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b05      	cmp	r3, #5
 8001156:	ddf2      	ble.n	800113e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001158:	e002      	b.n	8001160 <SD_PowerOn+0x6c>
  {
    Count--;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3b01      	subs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001160:	f7ff ff80 	bl	8001064 <SPI_RxByte>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d002      	beq.n	8001170 <SD_PowerOn+0x7c>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f4      	bne.n	800115a <SD_PowerOn+0x66>
  }

  DESELECT();
 8001170:	f7ff ff52 	bl	8001018 <DESELECT>
  SPI_TxByte(0XFF);
 8001174:	20ff      	movs	r0, #255	; 0xff
 8001176:	f7ff ff5b 	bl	8001030 <SPI_TxByte>

  PowerFlag = 1;
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <SD_PowerOn+0x94>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000249 	.word	0x20000249

0800118c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <SD_PowerOff+0x14>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000249 	.word	0x20000249

080011a4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <SD_CheckPower+0x14>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000249 	.word	0x20000249

080011bc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <SD_RxDataBlock+0x68>)
 80011c8:	220a      	movs	r2, #10
 80011ca:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 80011cc:	f7ff ff4a 	bl	8001064 <SPI_RxByte>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d104      	bne.n	80011e4 <SD_RxDataBlock+0x28>
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <SD_RxDataBlock+0x68>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f3      	bne.n	80011cc <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2bfe      	cmp	r3, #254	; 0xfe
 80011e8:	d001      	beq.n	80011ee <SD_RxDataBlock+0x32>
    return FALSE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e016      	b.n	800121c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff53 	bl	80010a0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff4d 	bl	80010a0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3b02      	subs	r3, #2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ed      	bne.n	80011ee <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001212:	f7ff ff27 	bl	8001064 <SPI_RxByte>
  SPI_RxByte();
 8001216:	f7ff ff25 	bl	8001064 <SPI_RxByte>

  return TRUE;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20002a9d 	.word	0x20002a9d

08001228 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001238:	f7ff ff40 	bl	80010bc <SD_ReadyWait>
 800123c:	4603      	mov	r3, r0
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d001      	beq.n	8001246 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001242:	2300      	movs	r3, #0
 8001244:	e040      	b.n	80012c8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fef1 	bl	8001030 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2bfd      	cmp	r3, #253	; 0xfd
 8001252:	d031      	beq.n	80012b8 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fee5 	bl	8001030 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fede 	bl	8001030 <SPI_TxByte>
    } while (--wc);
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	3b01      	subs	r3, #1
 8001278:	73bb      	strb	r3, [r7, #14]
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1eb      	bne.n	8001258 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001280:	f7ff fef0 	bl	8001064 <SPI_RxByte>
    SPI_RxByte();
 8001284:	f7ff feee 	bl	8001064 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001288:	e00b      	b.n	80012a2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800128a:	f7ff feeb 	bl	8001064 <SPI_RxByte>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b05      	cmp	r3, #5
 800129a:	d006      	beq.n	80012aa <SD_TxDataBlock+0x82>
        break;

      i++;
 800129c:	7b7b      	ldrb	r3, [r7, #13]
 800129e:	3301      	adds	r3, #1
 80012a0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	2b40      	cmp	r3, #64	; 0x40
 80012a6:	d9f0      	bls.n	800128a <SD_TxDataBlock+0x62>
 80012a8:	e000      	b.n	80012ac <SD_TxDataBlock+0x84>
        break;
 80012aa:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80012ac:	bf00      	nop
 80012ae:	f7ff fed9 	bl	8001064 <SPI_RxByte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0fa      	beq.n	80012ae <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d101      	bne.n	80012c6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012dc:	f7ff feee 	bl	80010bc <SD_ReadyWait>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d001      	beq.n	80012ea <SD_SendCmd+0x1a>
    return 0xFF;
 80012e6:	23ff      	movs	r3, #255	; 0xff
 80012e8:	e040      	b.n	800136c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe9f 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	0e1b      	lsrs	r3, r3, #24
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe99 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe93 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe8d 	bl	8001030 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe88 	bl	8001030 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b40      	cmp	r3, #64	; 0x40
 8001328:	d101      	bne.n	800132e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800132a:	2395      	movs	r3, #149	; 0x95
 800132c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b48      	cmp	r3, #72	; 0x48
 8001332:	d101      	bne.n	8001338 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001334:	2387      	movs	r3, #135	; 0x87
 8001336:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe78 	bl	8001030 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b4c      	cmp	r3, #76	; 0x4c
 8001344:	d101      	bne.n	800134a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001346:	f7ff fe8d 	bl	8001064 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800134a:	230a      	movs	r3, #10
 800134c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800134e:	f7ff fe89 	bl	8001064 <SPI_RxByte>
 8001352:	4603      	mov	r3, r0
 8001354:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001356:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da05      	bge.n	800136a <SD_SendCmd+0x9a>
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	3b01      	subs	r3, #1
 8001362:	73bb      	strb	r3, [r7, #14]
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f1      	bne.n	800134e <SD_SendCmd+0x7e>

  return res;
 800136a:	7b7b      	ldrb	r3, [r7, #13]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d5      	b.n	8001534 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001388:	4b6c      	ldr	r3, [pc, #432]	; (800153c <SD_disk_initialize+0x1c8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <SD_disk_initialize+0x2a>
    return Stat;
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <SD_disk_initialize+0x1c8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	e0ca      	b.n	8001534 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 800139e:	f7ff fea9 	bl	80010f4 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80013a2:	f7ff fe2d 	bl	8001000 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80013aa:	2100      	movs	r1, #0
 80013ac:	2040      	movs	r0, #64	; 0x40
 80013ae:	f7ff ff8f 	bl	80012d0 <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	f040 80a5 	bne.w	8001504 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80013ba:	4b61      	ldr	r3, [pc, #388]	; (8001540 <SD_disk_initialize+0x1cc>)
 80013bc:	2264      	movs	r2, #100	; 0x64
 80013be:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013c4:	2048      	movs	r0, #72	; 0x48
 80013c6:	f7ff ff83 	bl	80012d0 <SD_SendCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d158      	bne.n	8001482 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e00c      	b.n	80013f0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80013d6:	7bfc      	ldrb	r4, [r7, #15]
 80013d8:	f7ff fe44 	bl	8001064 <SPI_RxByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	f104 0310 	add.w	r3, r4, #16
 80013e4:	443b      	add	r3, r7
 80013e6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	3301      	adds	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d9ef      	bls.n	80013d6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013f6:	7abb      	ldrb	r3, [r7, #10]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	f040 8083 	bne.w	8001504 <SD_disk_initialize+0x190>
 80013fe:	7afb      	ldrb	r3, [r7, #11]
 8001400:	2baa      	cmp	r3, #170	; 0xaa
 8001402:	d17f      	bne.n	8001504 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001404:	2100      	movs	r1, #0
 8001406:	2077      	movs	r0, #119	; 0x77
 8001408:	f7ff ff62 	bl	80012d0 <SD_SendCmd>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d807      	bhi.n	8001422 <SD_disk_initialize+0xae>
 8001412:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001416:	2069      	movs	r0, #105	; 0x69
 8001418:	f7ff ff5a 	bl	80012d0 <SD_SendCmd>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <SD_disk_initialize+0x1cc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1eb      	bne.n	8001404 <SD_disk_initialize+0x90>
 800142c:	e000      	b.n	8001430 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800142e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <SD_disk_initialize+0x1cc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d064      	beq.n	8001504 <SD_disk_initialize+0x190>
 800143a:	2100      	movs	r1, #0
 800143c:	207a      	movs	r0, #122	; 0x7a
 800143e:	f7ff ff47 	bl	80012d0 <SD_SendCmd>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d15d      	bne.n	8001504 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e00c      	b.n	8001468 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800144e:	7bfc      	ldrb	r4, [r7, #15]
 8001450:	f7ff fe08 	bl	8001064 <SPI_RxByte>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	f104 0310 	add.w	r3, r4, #16
 800145c:	443b      	add	r3, r7
 800145e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	3301      	adds	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d9ef      	bls.n	800144e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800146e:	7a3b      	ldrb	r3, [r7, #8]
 8001470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SD_disk_initialize+0x108>
 8001478:	2306      	movs	r3, #6
 800147a:	e000      	b.n	800147e <SD_disk_initialize+0x10a>
 800147c:	2302      	movs	r3, #2
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	e040      	b.n	8001504 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001482:	2100      	movs	r1, #0
 8001484:	2077      	movs	r0, #119	; 0x77
 8001486:	f7ff ff23 	bl	80012d0 <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b01      	cmp	r3, #1
 800148e:	d808      	bhi.n	80014a2 <SD_disk_initialize+0x12e>
 8001490:	2100      	movs	r1, #0
 8001492:	2069      	movs	r0, #105	; 0x69
 8001494:	f7ff ff1c 	bl	80012d0 <SD_SendCmd>
 8001498:	4603      	mov	r3, r0
 800149a:	2b01      	cmp	r3, #1
 800149c:	d801      	bhi.n	80014a2 <SD_disk_initialize+0x12e>
 800149e:	2302      	movs	r3, #2
 80014a0:	e000      	b.n	80014a4 <SD_disk_initialize+0x130>
 80014a2:	2301      	movs	r3, #1
 80014a4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d10e      	bne.n	80014ca <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80014ac:	2100      	movs	r1, #0
 80014ae:	2077      	movs	r0, #119	; 0x77
 80014b0:	f7ff ff0e 	bl	80012d0 <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d80e      	bhi.n	80014d8 <SD_disk_initialize+0x164>
 80014ba:	2100      	movs	r1, #0
 80014bc:	2069      	movs	r0, #105	; 0x69
 80014be:	f7ff ff07 	bl	80012d0 <SD_SendCmd>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80014c8:	e00d      	b.n	80014e6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80014ca:	2100      	movs	r1, #0
 80014cc:	2041      	movs	r0, #65	; 0x41
 80014ce:	f7ff feff 	bl	80012d0 <SD_SendCmd>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <SD_disk_initialize+0x1cc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e1      	bne.n	80014a6 <SD_disk_initialize+0x132>
 80014e2:	e000      	b.n	80014e6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80014e4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <SD_disk_initialize+0x1cc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <SD_disk_initialize+0x18c>
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	2050      	movs	r0, #80	; 0x50
 80014f6:	f7ff feeb 	bl	80012d0 <SD_SendCmd>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <SD_disk_initialize+0x1d0>)
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800150a:	f7ff fd85 	bl	8001018 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800150e:	f7ff fda9 	bl	8001064 <SPI_RxByte>

  if (type)
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <SD_disk_initialize+0x1c8>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SD_disk_initialize+0x1c8>)
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	e001      	b.n	800152e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800152a:	f7ff fe2f 	bl	800118c <SD_PowerOff>
  }

  return Stat;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <SD_disk_initialize+0x1c8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20002a9d 	.word	0x20002a9d
 8001544:	20000248 	.word	0x20000248

08001548 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001558:	2301      	movs	r3, #1
 800155a:	e002      	b.n	8001562 <SD_disk_status+0x1a>

  return Stat;
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SD_disk_status+0x28>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000

08001574 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <SD_disk_read+0x1c>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <SD_disk_read+0x20>
    return RES_PARERR;
 8001590:	2304      	movs	r3, #4
 8001592:	e051      	b.n	8001638 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001594:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <SD_disk_read+0xcc>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e048      	b.n	8001638 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <SD_disk_read+0xd0>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	607b      	str	r3, [r7, #4]

  SELECT();
 80015b8:	f7ff fd22 	bl	8001000 <SELECT>

  if (count == 1)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d111      	bne.n	80015e6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2051      	movs	r0, #81	; 0x51
 80015c6:	f7ff fe83 	bl	80012d0 <SD_SendCmd>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d129      	bne.n	8001624 <SD_disk_read+0xb0>
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f7ff fdf1 	bl	80011bc <SD_RxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <SD_disk_read+0xb0>
      count = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	e01e      	b.n	8001624 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2052      	movs	r0, #82	; 0x52
 80015ea:	f7ff fe71 	bl	80012d0 <SD_SendCmd>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d117      	bne.n	8001624 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80015f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7ff fddf 	bl	80011bc <SD_RxDataBlock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00a      	beq.n	800161a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800160a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ed      	bne.n	80015f4 <SD_disk_read+0x80>
 8001618:	e000      	b.n	800161c <SD_disk_read+0xa8>
          break;
 800161a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800161c:	2100      	movs	r1, #0
 800161e:	204c      	movs	r0, #76	; 0x4c
 8001620:	f7ff fe56 	bl	80012d0 <SD_SendCmd>
    }
  }

  DESELECT();
 8001624:	f7ff fcf8 	bl	8001018 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001628:	f7ff fd1c 	bl	8001064 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000000 	.word	0x20000000
 8001644:	20000248 	.word	0x20000248

08001648 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <SD_disk_write+0x1c>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <SD_disk_write+0x20>
    return RES_PARERR;
 8001664:	2304      	movs	r3, #4
 8001666:	e06b      	b.n	8001740 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001668:	4b37      	ldr	r3, [pc, #220]	; (8001748 <SD_disk_write+0x100>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001676:	2303      	movs	r3, #3
 8001678:	e062      	b.n	8001740 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <SD_disk_write+0x100>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001688:	2302      	movs	r3, #2
 800168a:	e059      	b.n	8001740 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800168c:	4b2f      	ldr	r3, [pc, #188]	; (800174c <SD_disk_write+0x104>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	025b      	lsls	r3, r3, #9
 800169c:	607b      	str	r3, [r7, #4]

  SELECT();
 800169e:	f7ff fcaf 	bl	8001000 <SELECT>

  if (count == 1)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d110      	bne.n	80016ca <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	2058      	movs	r0, #88	; 0x58
 80016ac:	f7ff fe10 	bl	80012d0 <SD_SendCmd>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d13a      	bne.n	800172c <SD_disk_write+0xe4>
 80016b6:	21fe      	movs	r1, #254	; 0xfe
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f7ff fdb5 	bl	8001228 <SD_TxDataBlock>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d033      	beq.n	800172c <SD_disk_write+0xe4>
      count = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	e030      	b.n	800172c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80016ca:	4b20      	ldr	r3, [pc, #128]	; (800174c <SD_disk_write+0x104>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2077      	movs	r0, #119	; 0x77
 80016da:	f7ff fdf9 	bl	80012d0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	2057      	movs	r0, #87	; 0x57
 80016e2:	f7ff fdf5 	bl	80012d0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	2059      	movs	r0, #89	; 0x59
 80016ea:	f7ff fdf1 	bl	80012d0 <SD_SendCmd>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d11b      	bne.n	800172c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80016f4:	21fc      	movs	r1, #252	; 0xfc
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f7ff fd96 	bl	8001228 <SD_TxDataBlock>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001708:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	3b01      	subs	r3, #1
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ee      	bne.n	80016f4 <SD_disk_write+0xac>
 8001716:	e000      	b.n	800171a <SD_disk_write+0xd2>
          break;
 8001718:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800171a:	21fd      	movs	r1, #253	; 0xfd
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fd83 	bl	8001228 <SD_TxDataBlock>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <SD_disk_write+0xe4>
      {
        count = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800172c:	f7ff fc74 	bl	8001018 <DESELECT>
  SPI_RxByte();
 8001730:	f7ff fc98 	bl	8001064 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000248 	.word	0x20000248

08001750 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	603a      	str	r2, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	460b      	mov	r3, r1
 800175e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800176a:	2304      	movs	r3, #4
 800176c:	e11b      	b.n	80019a6 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d129      	bne.n	80017ce <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d017      	beq.n	80017b2 <SD_disk_ioctl+0x62>
 8001782:	2b02      	cmp	r3, #2
 8001784:	dc1f      	bgt.n	80017c6 <SD_disk_ioctl+0x76>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d002      	beq.n	8001790 <SD_disk_ioctl+0x40>
 800178a:	2b01      	cmp	r3, #1
 800178c:	d00b      	beq.n	80017a6 <SD_disk_ioctl+0x56>
 800178e:	e01a      	b.n	80017c6 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001790:	f7ff fd08 	bl	80011a4 <SD_CheckPower>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800179a:	f7ff fcf7 	bl	800118c <SD_PowerOff>
      res = RES_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017a4:	e0fd      	b.n	80019a2 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80017a6:	f7ff fca5 	bl	80010f4 <SD_PowerOn>
      res = RES_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017b0:	e0f7      	b.n	80019a2 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	1c5c      	adds	r4, r3, #1
 80017b6:	f7ff fcf5 	bl	80011a4 <SD_CheckPower>
 80017ba:	4603      	mov	r3, r0
 80017bc:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80017c4:	e0ed      	b.n	80019a2 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 80017c6:	2304      	movs	r3, #4
 80017c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017cc:	e0e9      	b.n	80019a2 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <SD_disk_ioctl+0x260>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0e2      	b.n	80019a6 <SD_disk_ioctl+0x256>

    SELECT();
 80017e0:	f7ff fc0e 	bl	8001000 <SELECT>

    switch (ctrl)
 80017e4:	79bb      	ldrb	r3, [r7, #6]
 80017e6:	2b0d      	cmp	r3, #13
 80017e8:	f200 80cc 	bhi.w	8001984 <SD_disk_ioctl+0x234>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <SD_disk_ioctl+0xa4>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	080018ef 	.word	0x080018ef
 80017f8:	0800182d 	.word	0x0800182d
 80017fc:	080018df 	.word	0x080018df
 8001800:	08001985 	.word	0x08001985
 8001804:	08001985 	.word	0x08001985
 8001808:	08001985 	.word	0x08001985
 800180c:	08001985 	.word	0x08001985
 8001810:	08001985 	.word	0x08001985
 8001814:	08001985 	.word	0x08001985
 8001818:	08001985 	.word	0x08001985
 800181c:	08001985 	.word	0x08001985
 8001820:	08001901 	.word	0x08001901
 8001824:	08001925 	.word	0x08001925
 8001828:	08001949 	.word	0x08001949
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800182c:	2100      	movs	r1, #0
 800182e:	2049      	movs	r0, #73	; 0x49
 8001830:	f7ff fd4e 	bl	80012d0 <SD_SendCmd>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80a8 	bne.w	800198c <SD_disk_ioctl+0x23c>
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2110      	movs	r1, #16
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fcba 	bl	80011bc <SD_RxDataBlock>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 809e 	beq.w	800198c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8001850:	7b3b      	ldrb	r3, [r7, #12]
 8001852:	099b      	lsrs	r3, r3, #6
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	b29a      	uxth	r2, r3
 800185e:	7d3b      	ldrb	r3, [r7, #20]
 8001860:	b29b      	uxth	r3, r3
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b29b      	uxth	r3, r3
 800186a:	3301      	adds	r3, #1
 800186c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800186e:	8bfb      	ldrh	r3, [r7, #30]
 8001870:	029a      	lsls	r2, r3, #10
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e02e      	b.n	80018d6 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001878:	7c7b      	ldrb	r3, [r7, #17]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	b2da      	uxtb	r2, r3
 8001880:	7dbb      	ldrb	r3, [r7, #22]
 8001882:	09db      	lsrs	r3, r3, #7
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2da      	uxtb	r2, r3
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0306 	and.w	r3, r3, #6
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3302      	adds	r3, #2
 800189c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80018a0:	7d3b      	ldrb	r3, [r7, #20]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	7cfb      	ldrb	r3, [r7, #19]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	7cbb      	ldrb	r3, [r7, #18]
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80018c8:	8bfa      	ldrh	r2, [r7, #30]
 80018ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ce:	3b09      	subs	r3, #9
 80018d0:	409a      	lsls	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80018dc:	e056      	b.n	800198c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018ec:	e055      	b.n	800199a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80018ee:	f7ff fbe5 	bl	80010bc <SD_ReadyWait>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2bff      	cmp	r3, #255	; 0xff
 80018f6:	d14b      	bne.n	8001990 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018fe:	e047      	b.n	8001990 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001900:	2100      	movs	r1, #0
 8001902:	2049      	movs	r0, #73	; 0x49
 8001904:	f7ff fce4 	bl	80012d0 <SD_SendCmd>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d142      	bne.n	8001994 <SD_disk_ioctl+0x244>
 800190e:	2110      	movs	r1, #16
 8001910:	6a38      	ldr	r0, [r7, #32]
 8001912:	f7ff fc53 	bl	80011bc <SD_RxDataBlock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d03b      	beq.n	8001994 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001922:	e037      	b.n	8001994 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001924:	2100      	movs	r1, #0
 8001926:	204a      	movs	r0, #74	; 0x4a
 8001928:	f7ff fcd2 	bl	80012d0 <SD_SendCmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d132      	bne.n	8001998 <SD_disk_ioctl+0x248>
 8001932:	2110      	movs	r1, #16
 8001934:	6a38      	ldr	r0, [r7, #32]
 8001936:	f7ff fc41 	bl	80011bc <SD_RxDataBlock>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d02b      	beq.n	8001998 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001946:	e027      	b.n	8001998 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001948:	2100      	movs	r1, #0
 800194a:	207a      	movs	r0, #122	; 0x7a
 800194c:	f7ff fcc0 	bl	80012d0 <SD_SendCmd>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8001956:	2300      	movs	r3, #0
 8001958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800195c:	e00b      	b.n	8001976 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800195e:	6a3c      	ldr	r4, [r7, #32]
 8001960:	1c63      	adds	r3, r4, #1
 8001962:	623b      	str	r3, [r7, #32]
 8001964:	f7ff fb7e 	bl	8001064 <SPI_RxByte>
 8001968:	4603      	mov	r3, r0
 800196a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800196c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001970:	3301      	adds	r3, #1
 8001972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001976:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800197a:	2b03      	cmp	r3, #3
 800197c:	d9ef      	bls.n	800195e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001984:	2304      	movs	r3, #4
 8001986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800198a:	e006      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 800198c:	bf00      	nop
 800198e:	e004      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001990:	bf00      	nop
 8001992:	e002      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <SD_disk_ioctl+0x24a>
      break;
 8001998:	bf00      	nop
    }

    DESELECT();
 800199a:	f7ff fb3d 	bl	8001018 <DESELECT>
    SPI_RxByte();
 800199e:	f7ff fb61 	bl	8001064 <SPI_RxByte>
  }

  return res;
 80019a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	372c      	adds	r7, #44	; 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000000 	.word	0x20000000

080019b4 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
PUTCHAR_PROTOTYPE
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80019bc:	1d39      	adds	r1, r7, #4
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	2201      	movs	r2, #1
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <__io_putchar+0x20>)
 80019c6:	f005 f917 	bl	8006bf8 <HAL_UART_Transmit>
	return ch;
 80019ca:	687b      	ldr	r3, [r7, #4]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000039c 	.word	0x2000039c

080019d8 <HAL_GPIO_EXTI_Callback>:
uint8_t STM32_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout);
uint8_t STM32_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout);
uint8_t STM32_SPI_CheckState(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
	// The user push button on your black pill board is connected between PA0 and GND.
	if(GPIO_Pin == BTN_Pin)
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_GPIO_EXTI_Callback+0x16>
	{
		txFlag = true;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_GPIO_EXTI_Callback+0x30>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == DIO0_Pin)
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d102      	bne.n	80019fa <HAL_GPIO_EXTI_Callback+0x22>
	{
		rxFlag = true;
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x34>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
	}
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000450 	.word	0x20000450
 8001a0c:	20000451 	.word	0x20000451

08001a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a53      	ldr	r2, [pc, #332]	; (8001b6c <HAL_UART_RxCpltCallback+0x15c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	f040 80a0 	bne.w	8001b64 <HAL_UART_RxCpltCallback+0x154>
	{
		/* Enabling interrupt receive again */
		HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxData,1);
 8001a24:	2201      	movs	r2, #1
 8001a26:	4952      	ldr	r1, [pc, #328]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001a28:	4852      	ldr	r0, [pc, #328]	; (8001b74 <HAL_UART_RxCpltCallback+0x164>)
 8001a2a:	f005 f970 	bl	8006d0e <HAL_UART_Receive_IT>
		switch(rxData)
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b0d      	cmp	r3, #13
 8001a34:	d030      	beq.n	8001a98 <HAL_UART_RxCpltCallback+0x88>
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	f040 8081 	bne.w	8001b3e <HAL_UART_RxCpltCallback+0x12e>
		{
		case ' ':
			// clear array
			if(myRxCmd.cmdLen)
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_UART_RxCpltCallback+0x46>
				memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2100      	movs	r1, #0
 8001a50:	484a      	ldr	r0, [pc, #296]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001a52:	f00c fb55 	bl	800e100 <memset>
			memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 8001a56:	4b4a      	ldr	r3, [pc, #296]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4946      	ldr	r1, [pc, #280]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a60:	4846      	ldr	r0, [pc, #280]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001a62:	f00c fbee 	bl	800e242 <memcpy>
			memset(myRxCmd.temp, '\0', pos + 1);
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4841      	ldr	r0, [pc, #260]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a72:	f00c fb45 	bl	800e100 <memset>
			myRxCmd.cmdLen = pos + 1;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			pos = 0;
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			uartFlag = 1;
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
			printf(" ");
 8001a90:	2020      	movs	r0, #32
 8001a92:	f00c f9d9 	bl	800de48 <putchar>
			break;
 8001a96:	e065      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
		case '\r':
			if(uartFlag)
 8001a98:	4b3a      	ldr	r3, [pc, #232]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01c      	beq.n	8001adc <HAL_UART_RxCpltCallback+0xcc>
			{
				// clear array
				if(myRxCmd.paramLen)
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001aa4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_UART_RxCpltCallback+0xac>
					memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001aae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4834      	ldr	r0, [pc, #208]	; (8001b88 <HAL_UART_RxCpltCallback+0x178>)
 8001ab8:	f00c fb22 	bl	800e100 <memset>
				memcpy(myRxCmd.param, myRxCmd.temp, pos + 1);
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	492c      	ldr	r1, [pc, #176]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ac6:	4830      	ldr	r0, [pc, #192]	; (8001b88 <HAL_UART_RxCpltCallback+0x178>)
 8001ac8:	f00c fbbb 	bl	800e242 <memcpy>
				myRxCmd.paramLen = pos + 1;
 8001acc:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ad6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001ada:	e01b      	b.n	8001b14 <HAL_UART_RxCpltCallback+0x104>
			}
			else
			{
				// clear array
				if(myRxCmd.paramLen)
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ade:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_UART_RxCpltCallback+0xe6>
					memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001ae8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001aec:	461a      	mov	r2, r3
 8001aee:	2100      	movs	r1, #0
 8001af0:	4822      	ldr	r0, [pc, #136]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001af2:	f00c fb05 	bl	800e100 <memset>
				memcpy(myRxCmd.cmd, myRxCmd.temp, pos + 1);
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	461a      	mov	r2, r3
 8001afe:	491e      	ldr	r1, [pc, #120]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b00:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_UART_RxCpltCallback+0x16c>)
 8001b02:	f00c fb9e 	bl	800e242 <memcpy>
				myRxCmd.cmdLen = pos + 1;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			memset(myRxCmd.temp, '\0', pos + 1);
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b20:	f00c faee 	bl	800e100 <memset>
			pos = 0;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
			uartFlag = 0;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_UART_RxCpltCallback+0x174>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			/* Start execute command */
			cmdFlag = 1;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_UART_RxCpltCallback+0x17c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
			printf("\r\n");
 8001b36:	4816      	ldr	r0, [pc, #88]	; (8001b90 <HAL_UART_RxCpltCallback+0x180>)
 8001b38:	f00c f9e2 	bl	800df00 <puts>
			break;
 8001b3c:	e012      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
		default:
			myRxCmd.temp[pos] = rxData;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001b46:	7819      	ldrb	r1, [r3, #0]
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_UART_RxCpltCallback+0x168>)
 8001b4a:	5499      	strb	r1, [r3, r2]
			pos++;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_UART_RxCpltCallback+0x170>)
 8001b56:	701a      	strb	r2, [r3, #0]
			printf("%c", rxData);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_UART_RxCpltCallback+0x160>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00c f973 	bl	800de48 <putchar>
		}
	}
}
 8001b62:	e7ff      	b.n	8001b64 <HAL_UART_RxCpltCallback+0x154>
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	20002a99 	.word	0x20002a99
 8001b74:	2000039c 	.word	0x2000039c
 8001b78:	20002a50 	.word	0x20002a50
 8001b7c:	20002a6e 	.word	0x20002a6e
 8001b80:	20002a98 	.word	0x20002a98
 8001b84:	20002a9a 	.word	0x20002a9a
 8001b88:	20002a78 	.word	0x20002a78
 8001b8c:	20002a9b 	.word	0x20002a9b
 8001b90:	08011660 	.word	0x08011660

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	f5ad 5d21 	sub.w	sp, sp, #10304	; 0x2840
 8001b9a:	b08d      	sub	sp, #52	; 0x34
 8001b9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9e:	f002 f8d9 	bl	8003d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba2:	f001 f8fb 	bl	8002d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba6:	f001 fb09 	bl	80031bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8001baa:	f001 f9bb 	bl	8002f24 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bae:	f001 f9ef 	bl	8002f90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001bb2:	f001 fad9 	bl	8003168 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001bb6:	f006 f825 	bl	8007c04 <MX_FATFS_Init>
  MX_RTC_Init();
 8001bba:	f001 f959 	bl	8002e70 <MX_RTC_Init>
  MX_TIM2_Init();
 8001bbe:	f001 fa37 	bl	8003030 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bc2:	f001 fa83 	bl	80030cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001bc6:	48b6      	ldr	r0, [pc, #728]	; (8001ea0 <main+0x30c>)
 8001bc8:	f004 fb54 	bl	8006274 <HAL_TIM_Base_Start>
	/* Enabling interrupt receive again */
	HAL_UART_Receive_IT(&huart1,(uint8_t*)&rxData,1);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	49b5      	ldr	r1, [pc, #724]	; (8001ea4 <main+0x310>)
 8001bd0:	48b5      	ldr	r0, [pc, #724]	; (8001ea8 <main+0x314>)
 8001bd2:	f005 f89c 	bl	8006d0e <HAL_UART_Receive_IT>
//	__HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
	/* LoRa initialization */
	rfm95.DIO.DIO0 = STM32_DIO0;
 8001bd6:	4bb5      	ldr	r3, [pc, #724]	; (8001eac <main+0x318>)
 8001bd8:	4ab5      	ldr	r2, [pc, #724]	; (8001eb0 <main+0x31c>)
 8001bda:	621a      	str	r2, [r3, #32]
	rfm95.NRST = STM32_NRST;
 8001bdc:	4bb3      	ldr	r3, [pc, #716]	; (8001eac <main+0x318>)
 8001bde:	4ab5      	ldr	r2, [pc, #724]	; (8001eb4 <main+0x320>)
 8001be0:	61da      	str	r2, [r3, #28]
	rfm95.NSEL = STM32_NSEL;
 8001be2:	4bb2      	ldr	r3, [pc, #712]	; (8001eac <main+0x318>)
 8001be4:	4ab4      	ldr	r2, [pc, #720]	; (8001eb8 <main+0x324>)
 8001be6:	619a      	str	r2, [r3, #24]
	rfm95.DelayUs = STM32_DelayUs;
 8001be8:	4bb0      	ldr	r3, [pc, #704]	; (8001eac <main+0x318>)
 8001bea:	4ab4      	ldr	r2, [pc, #720]	; (8001ebc <main+0x328>)
 8001bec:	615a      	str	r2, [r3, #20]
	rfm95.SPI_Write = STM32_SPI_Write;
 8001bee:	4baf      	ldr	r3, [pc, #700]	; (8001eac <main+0x318>)
 8001bf0:	4ab3      	ldr	r2, [pc, #716]	; (8001ec0 <main+0x32c>)
 8001bf2:	601a      	str	r2, [r3, #0]
	rfm95.SPI_Read = STM32_SPI_Read;
 8001bf4:	4bad      	ldr	r3, [pc, #692]	; (8001eac <main+0x318>)
 8001bf6:	4ab3      	ldr	r2, [pc, #716]	; (8001ec4 <main+0x330>)
 8001bf8:	605a      	str	r2, [r3, #4]
	rfm95.SPI_WriteRead = STM32_SPI_WriteRead;
 8001bfa:	4bac      	ldr	r3, [pc, #688]	; (8001eac <main+0x318>)
 8001bfc:	4ab2      	ldr	r2, [pc, #712]	; (8001ec8 <main+0x334>)
 8001bfe:	609a      	str	r2, [r3, #8]
	rfm95.SPI_CheckState = STM32_SPI_CheckState;
 8001c00:	4baa      	ldr	r3, [pc, #680]	; (8001eac <main+0x318>)
 8001c02:	4ab2      	ldr	r2, [pc, #712]	; (8001ecc <main+0x338>)
 8001c04:	60da      	str	r2, [r3, #12]
	rfm95.spi_ok = (uint8_t)HAL_SPI_STATE_READY;
 8001c06:	4ba9      	ldr	r3, [pc, #676]	; (8001eac <main+0x318>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	741a      	strb	r2, [r3, #16]

	uint8_t ret = RFM95_LoRa_Init(&rfm95);
 8001c0c:	48a7      	ldr	r0, [pc, #668]	; (8001eac <main+0x318>)
 8001c0e:	f00a feb5 	bl	800c97c <RFM95_LoRa_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8001c18:	f102 0206 	add.w	r2, r2, #6
 8001c1c:	7013      	strb	r3, [r2, #0]
	if(ret != RFM95_OK)
 8001c1e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001c22:	f103 0306 	add.w	r3, r3, #6
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <main+0xb2>
	{
	  printf("Init... fail!\r\n");
 8001c2c:	48a8      	ldr	r0, [pc, #672]	; (8001ed0 <main+0x33c>)
 8001c2e:	f00c f967 	bl	800df00 <puts>
	  printf("Error code: %d\r\n", ret);
 8001c32:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8001c36:	f103 0306 	add.w	r3, r3, #6
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	48a5      	ldr	r0, [pc, #660]	; (8001ed4 <main+0x340>)
 8001c40:	f00c f8f0 	bl	800de24 <iprintf>
 8001c44:	e002      	b.n	8001c4c <main+0xb8>
	}
	else
	{
	  printf("Init... success!\r\n");
 8001c46:	48a4      	ldr	r0, [pc, #656]	; (8001ed8 <main+0x344>)
 8001c48:	f00c f95a 	bl	800df00 <puts>
	}
	RFM95_LoRa_setSyncWord(&rfm95, 0x34);
 8001c4c:	2134      	movs	r1, #52	; 0x34
 8001c4e:	4897      	ldr	r0, [pc, #604]	; (8001eac <main+0x318>)
 8001c50:	f00a fdb4 	bl	800c7bc <RFM95_LoRa_setSyncWord>

	HAL_Delay(500);
 8001c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c58:	f002 f8ee 	bl	8003e38 <HAL_Delay>
	/* Initialize the SD card, verify file creation, updating and deletion of file. */
	SD_init();
 8001c5c:	f001 fbb6 	bl	80033cc <SD_init>
	HAL_Delay(500);
 8001c60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c64:	f002 f8e8 	bl	8003e38 <HAL_Delay>
	/* Display operating commands */
	Cmd_display();
 8001c68:	f001 fb6a 	bl	8003340 <Cmd_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(cmdFlag)
 8001c6c:	4b9b      	ldr	r3, [pc, #620]	; (8001edc <main+0x348>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0fa      	beq.n	8001c6c <main+0xd8>
	  {
		  if(strncmp("mk", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001c76:	4b9a      	ldr	r3, [pc, #616]	; (8001ee0 <main+0x34c>)
 8001c78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4999      	ldr	r1, [pc, #612]	; (8001ee4 <main+0x350>)
 8001c80:	4899      	ldr	r0, [pc, #612]	; (8001ee8 <main+0x354>)
 8001c82:	f00c fa45 	bl	800e110 <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d157      	bne.n	8001d3c <main+0x1a8>
		  {
			  if(myRxCmd.paramLen == 0)
 8001c8c:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <main+0x34c>)
 8001c8e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <main+0x10a>
			  {
				  printf("File name is invalid !\r\n");
 8001c96:	4895      	ldr	r0, [pc, #596]	; (8001eec <main+0x358>)
 8001c98:	f00c f932 	bl	800df00 <puts>
 8001c9c:	e032      	b.n	8001d04 <main+0x170>
			  }
			  else
			  {
				  uint8_t filename[20];
				  memcpy(filename, myRxCmd.param, myRxCmd.paramLen);
 8001c9e:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <main+0x34c>)
 8001ca0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001caa:	f103 0308 	add.w	r3, r3, #8
 8001cae:	4990      	ldr	r1, [pc, #576]	; (8001ef0 <main+0x35c>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00c fac6 	bl	800e242 <memcpy>
				  /* Creating/Reading a file */
				  fresult = f_open(&file, (char*)filename, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001cb6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001cba:	f103 0308 	add.w	r3, r3, #8
 8001cbe:	2213      	movs	r2, #19
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	488c      	ldr	r0, [pc, #560]	; (8001ef4 <main+0x360>)
 8001cc4:	f008 fc60 	bl	800a588 <f_open>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <main+0x364>)
 8001cce:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Create file %s successfully !\r\n", filename);
 8001cd0:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <main+0x364>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <main+0x154>
 8001cd8:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8001cdc:	f103 0308 	add.w	r3, r3, #8
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4886      	ldr	r0, [pc, #536]	; (8001efc <main+0x368>)
 8001ce4:	f00c f89e 	bl	800de24 <iprintf>
				  /* Close file */
				  fresult = f_close(&file);
 8001ce8:	4882      	ldr	r0, [pc, #520]	; (8001ef4 <main+0x360>)
 8001cea:	f009 f98a 	bl	800b002 <f_close>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b81      	ldr	r3, [pc, #516]	; (8001ef8 <main+0x364>)
 8001cf4:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Close file !\r\n");
 8001cf6:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <main+0x364>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <main+0x170>
 8001cfe:	4880      	ldr	r0, [pc, #512]	; (8001f00 <main+0x36c>)
 8001d00:	f00c f8fe 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001d04:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <main+0x34c>)
 8001d06:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4875      	ldr	r0, [pc, #468]	; (8001ee4 <main+0x350>)
 8001d10:	f00c f9f6 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8001d14:	4b72      	ldr	r3, [pc, #456]	; (8001ee0 <main+0x34c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <main+0x34c>)
 8001d1e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001d22:	461a      	mov	r2, r3
 8001d24:	2100      	movs	r1, #0
 8001d26:	4872      	ldr	r0, [pc, #456]	; (8001ef0 <main+0x35c>)
 8001d28:	f00c f9ea 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <main+0x34c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001d34:	4b69      	ldr	r3, [pc, #420]	; (8001edc <main+0x348>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e797      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("del", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <main+0x34c>)
 8001d3e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d42:	461a      	mov	r2, r3
 8001d44:	4967      	ldr	r1, [pc, #412]	; (8001ee4 <main+0x350>)
 8001d46:	486f      	ldr	r0, [pc, #444]	; (8001f04 <main+0x370>)
 8001d48:	f00c f9e2 	bl	800e110 <strncmp>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13c      	bne.n	8001dcc <main+0x238>
		  {
			  if(myRxCmd.paramLen == 0)
 8001d52:	4b63      	ldr	r3, [pc, #396]	; (8001ee0 <main+0x34c>)
 8001d54:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <main+0x1d0>
			  {
				  printf("File name is invalid !\r\n");
 8001d5c:	4863      	ldr	r0, [pc, #396]	; (8001eec <main+0x358>)
 8001d5e:	f00c f8cf 	bl	800df00 <puts>
 8001d62:	e017      	b.n	8001d94 <main+0x200>
			  }
			  else
			  {
				  /* Remove files */
				  fresult = f_unlink((char*)myRxCmd.param);
 8001d64:	4862      	ldr	r0, [pc, #392]	; (8001ef0 <main+0x35c>)
 8001d66:	f009 fd25 	bl	800b7b4 <f_unlink>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <main+0x364>)
 8001d70:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK)
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <main+0x364>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d104      	bne.n	8001d84 <main+0x1f0>
					  printf("%s removed successfully !\r\n", myRxCmd.param);
 8001d7a:	495d      	ldr	r1, [pc, #372]	; (8001ef0 <main+0x35c>)
 8001d7c:	4862      	ldr	r0, [pc, #392]	; (8001f08 <main+0x374>)
 8001d7e:	f00c f851 	bl	800de24 <iprintf>
 8001d82:	e007      	b.n	8001d94 <main+0x200>
				  else if(fresult == FR_NO_FILE)
 8001d84:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <main+0x364>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d103      	bne.n	8001d94 <main+0x200>
					  printf("%s is not found !\r\n", myRxCmd.param);
 8001d8c:	4958      	ldr	r1, [pc, #352]	; (8001ef0 <main+0x35c>)
 8001d8e:	485f      	ldr	r0, [pc, #380]	; (8001f0c <main+0x378>)
 8001d90:	f00c f848 	bl	800de24 <iprintf>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001d94:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <main+0x34c>)
 8001d96:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4851      	ldr	r0, [pc, #324]	; (8001ee4 <main+0x350>)
 8001da0:	f00c f9ae 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8001da4:	4b4e      	ldr	r3, [pc, #312]	; (8001ee0 <main+0x34c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001dac:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <main+0x34c>)
 8001dae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001db2:	461a      	mov	r2, r3
 8001db4:	2100      	movs	r1, #0
 8001db6:	484e      	ldr	r0, [pc, #312]	; (8001ef0 <main+0x35c>)
 8001db8:	f00c f9a2 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <main+0x34c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001dc4:	4b45      	ldr	r3, [pc, #276]	; (8001edc <main+0x348>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e74f      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("read", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001dcc:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <main+0x34c>)
 8001dce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <main+0x350>)
 8001dd6:	484e      	ldr	r0, [pc, #312]	; (8001f10 <main+0x37c>)
 8001dd8:	f00c f99a 	bl	800e110 <strncmp>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 809e 	bne.w	8001f20 <main+0x38c>
		  {
			  if(myRxCmd.paramLen == 0)
 8001de4:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <main+0x34c>)
 8001de6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <main+0x262>
			  {
				  printf("File name is invalid !\r\n");
 8001dee:	483f      	ldr	r0, [pc, #252]	; (8001eec <main+0x358>)
 8001df0:	f00c f886 	bl	800df00 <puts>
 8001df4:	e037      	b.n	8001e66 <main+0x2d2>
			  }
			  else
			  {
				  uint8_t readBuff[10240] = {0};
 8001df6:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8001dfa:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	3304      	adds	r3, #4
 8001e04:	f242 72fc 	movw	r2, #10236	; 0x27fc
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00c f978 	bl	800e100 <memset>
				  /* Open file to read */
				  fresult = f_open(&file, (char*)myRxCmd.param, FA_READ);
 8001e10:	2201      	movs	r2, #1
 8001e12:	4937      	ldr	r1, [pc, #220]	; (8001ef0 <main+0x35c>)
 8001e14:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <main+0x360>)
 8001e16:	f008 fbb7 	bl	800a588 <f_open>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <main+0x364>)
 8001e20:	701a      	strb	r2, [r3, #0]
				  /* Read string from the file */
				  f_read(&file, readBuff, f_size(&file), &br);
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <main+0x360>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	f107 0118 	add.w	r1, r7, #24
 8001e2a:	3910      	subs	r1, #16
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <main+0x380>)
 8001e2e:	4831      	ldr	r0, [pc, #196]	; (8001ef4 <main+0x360>)
 8001e30:	f008 fd76 	bl	800a920 <f_read>
				  printf("Read %s :\r\n", myRxCmd.param);
 8001e34:	492e      	ldr	r1, [pc, #184]	; (8001ef0 <main+0x35c>)
 8001e36:	4838      	ldr	r0, [pc, #224]	; (8001f18 <main+0x384>)
 8001e38:	f00b fff4 	bl	800de24 <iprintf>
				  printf("%s\r\n", readBuff);
 8001e3c:	f107 0318 	add.w	r3, r7, #24
 8001e40:	3b10      	subs	r3, #16
 8001e42:	4619      	mov	r1, r3
 8001e44:	4835      	ldr	r0, [pc, #212]	; (8001f1c <main+0x388>)
 8001e46:	f00b ffed 	bl	800de24 <iprintf>
				  /* Close file */
				  fresult = f_close(&file);
 8001e4a:	482a      	ldr	r0, [pc, #168]	; (8001ef4 <main+0x360>)
 8001e4c:	f009 f8d9 	bl	800b002 <f_close>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <main+0x364>)
 8001e56:	701a      	strb	r2, [r3, #0]
				  if(fresult == FR_OK) printf("Close file !\r\n");
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <main+0x364>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <main+0x2d2>
 8001e60:	4827      	ldr	r0, [pc, #156]	; (8001f00 <main+0x36c>)
 8001e62:	f00c f84d 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <main+0x34c>)
 8001e68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2100      	movs	r1, #0
 8001e70:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <main+0x350>)
 8001e72:	f00c f945 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <main+0x34c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <main+0x34c>)
 8001e80:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001e84:	461a      	mov	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	4819      	ldr	r0, [pc, #100]	; (8001ef0 <main+0x35c>)
 8001e8a:	f00c f939 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <main+0x34c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <main+0x348>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e6e6      	b.n	8001c6c <main+0xd8>
 8001e9e:	bf00      	nop
 8001ea0:	200002c4 	.word	0x200002c4
 8001ea4:	20002a99 	.word	0x20002a99
 8001ea8:	2000039c 	.word	0x2000039c
 8001eac:	200003e4 	.word	0x200003e4
 8001eb0:	08003629 	.word	0x08003629
 8001eb4:	08003649 	.word	0x08003649
 8001eb8:	0800366d 	.word	0x0800366d
 8001ebc:	08003691 	.word	0x08003691
 8001ec0:	080036c1 	.word	0x080036c1
 8001ec4:	080036ed 	.word	0x080036ed
 8001ec8:	08003719 	.word	0x08003719
 8001ecc:	08003789 	.word	0x08003789
 8001ed0:	08011664 	.word	0x08011664
 8001ed4:	08011674 	.word	0x08011674
 8001ed8:	08011688 	.word	0x08011688
 8001edc:	20002a9b 	.word	0x20002a9b
 8001ee0:	20002a50 	.word	0x20002a50
 8001ee4:	20002a6e 	.word	0x20002a6e
 8001ee8:	0801169c 	.word	0x0801169c
 8001eec:	080116a0 	.word	0x080116a0
 8001ef0:	20002a78 	.word	0x20002a78
 8001ef4:	200014a0 	.word	0x200014a0
 8001ef8:	200024d0 	.word	0x200024d0
 8001efc:	080116b8 	.word	0x080116b8
 8001f00:	080116d8 	.word	0x080116d8
 8001f04:	080116e8 	.word	0x080116e8
 8001f08:	080116ec 	.word	0x080116ec
 8001f0c:	08011708 	.word	0x08011708
 8001f10:	0801171c 	.word	0x0801171c
 8001f14:	200028d4 	.word	0x200028d4
 8001f18:	08011724 	.word	0x08011724
 8001f1c:	08011730 	.word	0x08011730
		  }
		  else if(strncmp("ls", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001f20:	4b95      	ldr	r3, [pc, #596]	; (8002178 <main+0x5e4>)
 8001f22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f26:	461a      	mov	r2, r3
 8001f28:	4994      	ldr	r1, [pc, #592]	; (800217c <main+0x5e8>)
 8001f2a:	4895      	ldr	r0, [pc, #596]	; (8002180 <main+0x5ec>)
 8001f2c:	f00c f8f0 	bl	800e110 <strncmp>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d126      	bne.n	8001f84 <main+0x3f0>
		  {
			  f_opendir(&dir, "/");
 8001f36:	4993      	ldr	r1, [pc, #588]	; (8002184 <main+0x5f0>)
 8001f38:	4893      	ldr	r0, [pc, #588]	; (8002188 <main+0x5f4>)
 8001f3a:	f009 fab0 	bl	800b49e <f_opendir>
			  do{
				  f_readdir(&dir, &fno);
 8001f3e:	4993      	ldr	r1, [pc, #588]	; (800218c <main+0x5f8>)
 8001f40:	4891      	ldr	r0, [pc, #580]	; (8002188 <main+0x5f4>)
 8001f42:	f009 fb45 	bl	800b5d0 <f_readdir>
				  if(fno.fname[0] != 0)
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <main+0x5f8>)
 8001f48:	7d9b      	ldrb	r3, [r3, #22]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <main+0x3c2>
					  printf("File found: %s \r\n", fno.fname);
 8001f4e:	4990      	ldr	r1, [pc, #576]	; (8002190 <main+0x5fc>)
 8001f50:	4890      	ldr	r0, [pc, #576]	; (8002194 <main+0x600>)
 8001f52:	f00b ff67 	bl	800de24 <iprintf>
			  }while(fno.fname[0]);
 8001f56:	4b8d      	ldr	r3, [pc, #564]	; (800218c <main+0x5f8>)
 8001f58:	7d9b      	ldrb	r3, [r3, #22]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ef      	bne.n	8001f3e <main+0x3aa>
			  f_closedir(&dir);
 8001f5e:	488a      	ldr	r0, [pc, #552]	; (8002188 <main+0x5f4>)
 8001f60:	f009 fb10 	bl	800b584 <f_closedir>
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8001f64:	4b84      	ldr	r3, [pc, #528]	; (8002178 <main+0x5e4>)
 8001f66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4883      	ldr	r0, [pc, #524]	; (800217c <main+0x5e8>)
 8001f70:	f00c f8c6 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8001f74:	4b80      	ldr	r3, [pc, #512]	; (8002178 <main+0x5e4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 8001f7c:	4b86      	ldr	r3, [pc, #536]	; (8002198 <main+0x604>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e673      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("rtc", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8001f84:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <main+0x5e4>)
 8001f86:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	497b      	ldr	r1, [pc, #492]	; (800217c <main+0x5e8>)
 8001f8e:	4883      	ldr	r0, [pc, #524]	; (800219c <main+0x608>)
 8001f90:	f00c f8be 	bl	800e110 <strncmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d154      	bne.n	8002044 <main+0x4b0>
		  {
			  if(strncmp("on", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8001f9a:	4b77      	ldr	r3, [pc, #476]	; (8002178 <main+0x5e4>)
 8001f9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	497f      	ldr	r1, [pc, #508]	; (80021a0 <main+0x60c>)
 8001fa4:	487f      	ldr	r0, [pc, #508]	; (80021a4 <main+0x610>)
 8001fa6:	f00c f8b3 	bl	800e110 <strncmp>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11e      	bne.n	8001fee <main+0x45a>
			  {
				  get_Date_Time();
 8001fb0:	f001 fb26 	bl	8003600 <get_Date_Time>
				  printf("%02d-%02d-%04d\r\n", gDate.Date, gDate.Month, 2000 + gDate.Year);
 8001fb4:	4b7c      	ldr	r3, [pc, #496]	; (80021a8 <main+0x614>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4b7b      	ldr	r3, [pc, #492]	; (80021a8 <main+0x614>)
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <main+0x614>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fc8:	4878      	ldr	r0, [pc, #480]	; (80021ac <main+0x618>)
 8001fca:	f00b ff2b 	bl	800de24 <iprintf>
				  printf("%02d:%02d:%02d\r\n", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001fce:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <main+0x61c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <main+0x61c>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <main+0x61c>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	4875      	ldr	r0, [pc, #468]	; (80021b4 <main+0x620>)
 8001fe0:	f00b ff20 	bl	800de24 <iprintf>
				  HAL_Delay(5000);
 8001fe4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fe8:	f001 ff26 	bl	8003e38 <HAL_Delay>
 8001fec:	e63e      	b.n	8001c6c <main+0xd8>
			  }
			  else if(strncmp("off", (char*)myRxCmd.param, myRxCmd.paramLen) == 0)
 8001fee:	4b62      	ldr	r3, [pc, #392]	; (8002178 <main+0x5e4>)
 8001ff0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	496a      	ldr	r1, [pc, #424]	; (80021a0 <main+0x60c>)
 8001ff8:	486f      	ldr	r0, [pc, #444]	; (80021b8 <main+0x624>)
 8001ffa:	f00c f889 	bl	800e110 <strncmp>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11b      	bne.n	800203c <main+0x4a8>
			  {
				  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002004:	4b5c      	ldr	r3, [pc, #368]	; (8002178 <main+0x5e4>)
 8002006:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800200a:	461a      	mov	r2, r3
 800200c:	2100      	movs	r1, #0
 800200e:	485b      	ldr	r0, [pc, #364]	; (800217c <main+0x5e8>)
 8002010:	f00c f876 	bl	800e100 <memset>
				  myRxCmd.cmdLen = 0;
 8002014:	4b58      	ldr	r3, [pc, #352]	; (8002178 <main+0x5e4>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <main+0x5e4>)
 800201e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002022:	461a      	mov	r2, r3
 8002024:	2100      	movs	r1, #0
 8002026:	485e      	ldr	r0, [pc, #376]	; (80021a0 <main+0x60c>)
 8002028:	f00c f86a 	bl	800e100 <memset>
				  myRxCmd.paramLen = 0;
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <main+0x5e4>)
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
				  cmdFlag = 0;
 8002034:	4b58      	ldr	r3, [pc, #352]	; (8002198 <main+0x604>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	e617      	b.n	8001c6c <main+0xd8>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 800203c:	485f      	ldr	r0, [pc, #380]	; (80021bc <main+0x628>)
 800203e:	f00b ff5f 	bl	800df00 <puts>
 8002042:	e613      	b.n	8001c6c <main+0xd8>
			  }
		  }
		  else if(strncmp("ready", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <main+0x5e4>)
 8002046:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800204a:	461a      	mov	r2, r3
 800204c:	494b      	ldr	r1, [pc, #300]	; (800217c <main+0x5e8>)
 800204e:	485c      	ldr	r0, [pc, #368]	; (80021c0 <main+0x62c>)
 8002050:	f00c f85e 	bl	800e110 <strncmp>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d133      	bne.n	80020c2 <main+0x52e>
		  {
			  ret = RFM95_LoRa_prepareReceive(&rfm95, true);
 800205a:	2101      	movs	r1, #1
 800205c:	4859      	ldr	r0, [pc, #356]	; (80021c4 <main+0x630>)
 800205e:	f00a fae3 	bl	800c628 <RFM95_LoRa_prepareReceive>
 8002062:	4603      	mov	r3, r0
 8002064:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002068:	f102 0206 	add.w	r2, r2, #6
 800206c:	7013      	strb	r3, [r2, #0]
			  if(ret != RFM95_OK)
 800206e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002072:	f103 0306 	add.w	r3, r3, #6
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <main+0x502>
			  {
				  printf("Rx init.. fail !\r\n");
 800207c:	4852      	ldr	r0, [pc, #328]	; (80021c8 <main+0x634>)
 800207e:	f00b ff3f 	bl	800df00 <puts>
				  printf("Error code: %d\r\n", ret);
 8002082:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002086:	f103 0306 	add.w	r3, r3, #6
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	484f      	ldr	r0, [pc, #316]	; (80021cc <main+0x638>)
 8002090:	f00b fec8 	bl	800de24 <iprintf>
 8002094:	e002      	b.n	800209c <main+0x508>
			  }
			  else
			  {
				  printf("Rx init.. success !\r\n");
 8002096:	484e      	ldr	r0, [pc, #312]	; (80021d0 <main+0x63c>)
 8002098:	f00b ff32 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <main+0x5e4>)
 800209e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	4835      	ldr	r0, [pc, #212]	; (800217c <main+0x5e8>)
 80020a8:	f00c f82a 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 80020ac:	4b32      	ldr	r3, [pc, #200]	; (8002178 <main+0x5e4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <main+0x604>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
			  /* able to initialize timer interrupt once. */
			  timerStartFlag = 1;
 80020ba:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <main+0x640>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	e5d4      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("stop", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <main+0x5e4>)
 80020c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80020c8:	461a      	mov	r2, r3
 80020ca:	492c      	ldr	r1, [pc, #176]	; (800217c <main+0x5e8>)
 80020cc:	4842      	ldr	r0, [pc, #264]	; (80021d8 <main+0x644>)
 80020ce:	f00c f81f 	bl	800e110 <strncmp>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d13a      	bne.n	800214e <main+0x5ba>
		  {
			  ret = RFM95_LoRa_setOpMode(&rfm95, SLEEP_MODE);
 80020d8:	2100      	movs	r1, #0
 80020da:	483a      	ldr	r0, [pc, #232]	; (80021c4 <main+0x630>)
 80020dc:	f009 fdec 	bl	800bcb8 <RFM95_LoRa_setOpMode>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80020e6:	f102 0206 	add.w	r2, r2, #6
 80020ea:	7013      	strb	r3, [r2, #0]
			  if(ret == RFM95_OK)
 80020ec:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80020f0:	f103 0306 	add.w	r3, r3, #6
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <main+0x56c>
				  printf("Exit rx mode !\r\n");
 80020fa:	4838      	ldr	r0, [pc, #224]	; (80021dc <main+0x648>)
 80020fc:	f00b ff00 	bl	800df00 <puts>
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <main+0x5e4>)
 8002102:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002106:	461a      	mov	r2, r3
 8002108:	2100      	movs	r1, #0
 800210a:	481c      	ldr	r0, [pc, #112]	; (800217c <main+0x5e8>)
 800210c:	f00b fff8 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <main+0x5e4>)
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  cmdFlag = 0;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <main+0x604>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
			  id = 0;
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <main+0x64c>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
			  /* restart the timer */
			  htim2.Instance->CNT &= 0x0;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <main+0x650>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <main+0x650>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Stop_IT(&htim2);
 8002132:	482c      	ldr	r0, [pc, #176]	; (80021e4 <main+0x650>)
 8002134:	f004 f95a 	bl	80063ec <HAL_TIM_Base_Stop_IT>
			  htim3.Instance->CNT &= 0x0;
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <main+0x654>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <main+0x654>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Stop_IT(&htim3);
 8002146:	4828      	ldr	r0, [pc, #160]	; (80021e8 <main+0x654>)
 8002148:	f004 f950 	bl	80063ec <HAL_TIM_Base_Stop_IT>
 800214c:	e58e      	b.n	8001c6c <main+0xd8>
		  }
		  else if(strncmp("rx", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <main+0x5e4>)
 8002150:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002154:	461a      	mov	r2, r3
 8002156:	4909      	ldr	r1, [pc, #36]	; (800217c <main+0x5e8>)
 8002158:	4824      	ldr	r0, [pc, #144]	; (80021ec <main+0x658>)
 800215a:	f00b ffd9 	bl	800e110 <strncmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 82d7 	bne.w	8002714 <main+0xb80>
		  {
			  if(myRxCmd.paramLen == 0)
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <main+0x5e4>)
 8002168:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13f      	bne.n	80021f0 <main+0x65c>
			  {
				  printf("Invalid parameter !\r\n");
 8002170:	4812      	ldr	r0, [pc, #72]	; (80021bc <main+0x628>)
 8002172:	f00b fec5 	bl	800df00 <puts>
 8002176:	e579      	b.n	8001c6c <main+0xd8>
 8002178:	20002a50 	.word	0x20002a50
 800217c:	20002a6e 	.word	0x20002a6e
 8002180:	08011738 	.word	0x08011738
 8002184:	0801173c 	.word	0x0801173c
 8002188:	200028e8 	.word	0x200028e8
 800218c:	2000291c 	.word	0x2000291c
 8002190:	20002932 	.word	0x20002932
 8002194:	08011740 	.word	0x08011740
 8002198:	20002a9b 	.word	0x20002a9b
 800219c:	08011754 	.word	0x08011754
 80021a0:	20002a78 	.word	0x20002a78
 80021a4:	08011758 	.word	0x08011758
 80021a8:	20002a34 	.word	0x20002a34
 80021ac:	0801175c 	.word	0x0801175c
 80021b0:	20002a38 	.word	0x20002a38
 80021b4:	08011770 	.word	0x08011770
 80021b8:	08011784 	.word	0x08011784
 80021bc:	08011788 	.word	0x08011788
 80021c0:	080117a0 	.word	0x080117a0
 80021c4:	200003e4 	.word	0x200003e4
 80021c8:	080117a8 	.word	0x080117a8
 80021cc:	08011674 	.word	0x08011674
 80021d0:	080117bc 	.word	0x080117bc
 80021d4:	20002a4c 	.word	0x20002a4c
 80021d8:	080117d4 	.word	0x080117d4
 80021dc:	080117dc 	.word	0x080117dc
 80021e0:	20000464 	.word	0x20000464
 80021e4:	2000030c 	.word	0x2000030c
 80021e8:	20000354 	.word	0x20000354
 80021ec:	080117ec 	.word	0x080117ec
			  }
			  else
			  {
				  /* Timer interrupt and RTC time recorder startup to alignment time */
				  if(timerStartFlag)
 80021f0:	4ba9      	ldr	r3, [pc, #676]	; (8002498 <main+0x904>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d048      	beq.n	800228a <main+0x6f6>
				  {
					  /* restart the timer */
					  htim2.Instance->CNT &= 0x0;
 80021f8:	4ba8      	ldr	r3, [pc, #672]	; (800249c <main+0x908>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4ba7      	ldr	r3, [pc, #668]	; (800249c <main+0x908>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim2);
 8002206:	48a5      	ldr	r0, [pc, #660]	; (800249c <main+0x908>)
 8002208:	f004 f88e 	bl	8006328 <HAL_TIM_Base_Start_IT>
					  /* initialize RTC to 00:00 */
					  init_Date_Time();
 800220c:	f001 f9d8 	bl	80035c0 <init_Date_Time>
					  /* According to the parameter, define counter period value (AutoReload Register). */
					  uint8_t row,col; // row: cr, column: sf
					  row = (rfm95.Settings.LoRa.codingRate >> 1) - 1;
 8002210:	4ba3      	ldr	r3, [pc, #652]	; (80024a0 <main+0x90c>)
 8002212:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002220:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8002224:	7013      	strb	r3, [r2, #0]
					  col = rfm95.Settings.LoRa.spreadingFactor - 7;
 8002226:	4b9e      	ldr	r3, [pc, #632]	; (80024a0 <main+0x90c>)
 8002228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800222c:	3b07      	subs	r3, #7
 800222e:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002232:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8002236:	7013      	strb	r3, [r2, #0]
					  printf("Matrix[%d][%d]\r\n", row, col);
 8002238:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800223c:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002246:	f102 0225 	add.w	r2, r2, #37	; 0x25
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	4895      	ldr	r0, [pc, #596]	; (80024a4 <main+0x910>)
 8002250:	f00b fde8 	bl	800de24 <iprintf>
					  htim3.Instance->ARR = cr_sf_array[row][col] * 10 - 1;
 8002254:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002258:	f103 0326 	add.w	r3, r3, #38	; 0x26
 800225c:	781a      	ldrb	r2, [r3, #0]
 800225e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002262:	f103 0325 	add.w	r3, r3, #37	; 0x25
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	498f      	ldr	r1, [pc, #572]	; (80024a8 <main+0x914>)
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4413      	add	r3, r2
 800226e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	461a      	mov	r2, r3
 800227c:	4b8b      	ldr	r3, [pc, #556]	; (80024ac <main+0x918>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3a01      	subs	r2, #1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
					  timerStartFlag = 0;
 8002284:	4b84      	ldr	r3, [pc, #528]	; (8002498 <main+0x904>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
				  }
				  /* If it exceeded threshold, triggering Timer interrupt */
				  if(timer2Flag | timer3Flag)
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <main+0x91c>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <main+0x920>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80af 	beq.w	80023fa <main+0x866>
				  {
					  uint8_t buff[50] = {0};
 800229c:	f607 0358 	addw	r3, r7, #2136	; 0x858
 80022a0:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	3304      	adds	r3, #4
 80022aa:	222e      	movs	r2, #46	; 0x2e
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00b ff26 	bl	800e100 <memset>
					  /* Receive data fail */
					  /* Update time */
					  get_Date_Time();
 80022b4:	f001 f9a4 	bl	8003600 <get_Date_Time>
					  printf("Rx didn't receive the predicted signal !\r\n");
 80022b8:	487f      	ldr	r0, [pc, #508]	; (80024b8 <main+0x924>)
 80022ba:	f00b fe21 	bl	800df00 <puts>
					  /* id, status, mm:ss.ooo */
					  int milisec = (1.0f - (float)gTime.SubSeconds / (float)gTime.SecondFraction) * 1000;
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <main+0x928>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <main+0x928>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80024c0 <main+0x92c>
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ee:	ee17 3a90 	vmov	r3, s15
 80022f2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80022f6:	f102 0214 	add.w	r2, r2, #20
 80022fa:	6013      	str	r3, [r2, #0]
					  if(milisec >= 1000) milisec = 999;
 80022fc:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002300:	f103 0314 	add.w	r3, r3, #20
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800230a:	db06      	blt.n	800231a <main+0x786>
 800230c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002310:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002314:	f102 0214 	add.w	r2, r2, #20
 8002318:	6013      	str	r3, [r2, #0]
					  sprintf((char*)buff, "%d,%d,%02d:%02d.%03d\n", id++, -1, gTime.Minutes, gTime.Seconds, milisec);
 800231a:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <main+0x930>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	1c53      	adds	r3, r2, #1
 8002320:	4968      	ldr	r1, [pc, #416]	; (80024c4 <main+0x930>)
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	4b65      	ldr	r3, [pc, #404]	; (80024bc <main+0x928>)
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	4619      	mov	r1, r3
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <main+0x928>)
 800232c:	789b      	ldrb	r3, [r3, #2]
 800232e:	461c      	mov	r4, r3
 8002330:	f107 0018 	add.w	r0, r7, #24
 8002334:	3810      	subs	r0, #16
 8002336:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800233a:	f103 0314 	add.w	r3, r3, #20
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	9401      	str	r4, [sp, #4]
 8002344:	9100      	str	r1, [sp, #0]
 8002346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234a:	495f      	ldr	r1, [pc, #380]	; (80024c8 <main+0x934>)
 800234c:	f00b fde0 	bl	800df10 <siprintf>
					  printf("Current time: %02d:%02d.%03d \r\n", gTime.Minutes, gTime.Seconds, milisec);
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <main+0x928>)
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	4619      	mov	r1, r3
 8002356:	4b59      	ldr	r3, [pc, #356]	; (80024bc <main+0x928>)
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	461a      	mov	r2, r3
 800235c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002360:	f103 0314 	add.w	r3, r3, #20
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4859      	ldr	r0, [pc, #356]	; (80024cc <main+0x938>)
 8002368:	f00b fd5c 	bl	800de24 <iprintf>
					  /* Updating an existing file */
					  fresult = f_open(&file, (char*)myRxCmd.param, FA_OPEN_ALWAYS | FA_WRITE);
 800236c:	2212      	movs	r2, #18
 800236e:	4958      	ldr	r1, [pc, #352]	; (80024d0 <main+0x93c>)
 8002370:	4858      	ldr	r0, [pc, #352]	; (80024d4 <main+0x940>)
 8002372:	f008 f909 	bl	800a588 <f_open>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <main+0x944>)
 800237c:	701a      	strb	r2, [r3, #0]
					  if(fresult == FR_OK) printf("%s opened successfully !\r\n", myRxCmd.param);
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <main+0x944>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <main+0x7fa>
 8002386:	4952      	ldr	r1, [pc, #328]	; (80024d0 <main+0x93c>)
 8002388:	4854      	ldr	r0, [pc, #336]	; (80024dc <main+0x948>)
 800238a:	f00b fd4b 	bl	800de24 <iprintf>
					  /* Move to offset to the end to the file */
					  fresult = f_lseek(&file, f_size(&file));
 800238e:	4b51      	ldr	r3, [pc, #324]	; (80024d4 <main+0x940>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4619      	mov	r1, r3
 8002394:	484f      	ldr	r0, [pc, #316]	; (80024d4 <main+0x940>)
 8002396:	f008 fe5e 	bl	800b056 <f_lseek>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <main+0x944>)
 80023a0:	701a      	strb	r2, [r3, #0]
					  /* Writing text */
					  fresult = f_puts((char*)buff, &file);
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	3b10      	subs	r3, #16
 80023a8:	494a      	ldr	r1, [pc, #296]	; (80024d4 <main+0x940>)
 80023aa:	4618      	mov	r0, r3
 80023ac:	f009 fb24 	bl	800b9f8 <f_puts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <main+0x944>)
 80023b6:	701a      	strb	r2, [r3, #0]
					  /* Close file */
					  fresult = f_close(&file);
 80023b8:	4846      	ldr	r0, [pc, #280]	; (80024d4 <main+0x940>)
 80023ba:	f008 fe22 	bl	800b002 <f_close>
 80023be:	4603      	mov	r3, r0
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <main+0x944>)
 80023c4:	701a      	strb	r2, [r3, #0]
					  if(fresult == FR_OK) printf("Close file !\r\n");
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <main+0x944>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <main+0x840>
 80023ce:	4844      	ldr	r0, [pc, #272]	; (80024e0 <main+0x94c>)
 80023d0:	f00b fd96 	bl	800df00 <puts>

					  timer2Flag = 0;
 80023d4:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <main+0x91c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
					  HAL_TIM_Base_Stop_IT(&htim2);
 80023da:	4830      	ldr	r0, [pc, #192]	; (800249c <main+0x908>)
 80023dc:	f004 f806 	bl	80063ec <HAL_TIM_Base_Stop_IT>
					  timer3Flag = 0;
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <main+0x920>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]

					  htim3.Instance->CNT &= 0x0;
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <main+0x918>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <main+0x918>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim3);
 80023f4:	482d      	ldr	r0, [pc, #180]	; (80024ac <main+0x918>)
 80023f6:	f003 ff97 	bl	8006328 <HAL_TIM_Base_Start_IT>
				  }
				  // DIO0 interrupt
				  if(rxFlag)
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <main+0x950>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f43f ac34 	beq.w	8001c6c <main+0xd8>
				  {
					  /* Refresh Timer2 Interrupt */
					  htim2.Instance->CNT &= 0x0;
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <main+0x908>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <main+0x908>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Start_IT(&htim2);
 8002412:	4822      	ldr	r0, [pc, #136]	; (800249c <main+0x908>)
 8002414:	f003 ff88 	bl	8006328 <HAL_TIM_Base_Start_IT>
					  /* Stop Timer3 Interrupt */
					  htim3.Instance->CNT &= 0x0;
 8002418:	4b24      	ldr	r3, [pc, #144]	; (80024ac <main+0x918>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <main+0x918>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
					  HAL_TIM_Base_Stop_IT(&htim3);
 8002426:	4821      	ldr	r0, [pc, #132]	; (80024ac <main+0x918>)
 8002428:	f003 ffe0 	bl	80063ec <HAL_TIM_Base_Stop_IT>

					  ret = RFM95_LoRa_receive(&rfm95, rxBuff, 16);
 800242c:	2210      	movs	r2, #16
 800242e:	492e      	ldr	r1, [pc, #184]	; (80024e8 <main+0x954>)
 8002430:	481b      	ldr	r0, [pc, #108]	; (80024a0 <main+0x90c>)
 8002432:	f00a f95b 	bl	800c6ec <RFM95_LoRa_receive>
 8002436:	4603      	mov	r3, r0
 8002438:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800243c:	f102 0206 	add.w	r2, r2, #6
 8002440:	7013      	strb	r3, [r2, #0]
					  if(ret != RFM95_ERR_RX_FAIL)
 8002442:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002446:	f103 0306 	add.w	r3, r3, #6
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b2b      	cmp	r3, #43	; 0x2b
 800244e:	f000 8150 	beq.w	80026f2 <main+0xb5e>
					  {
						  int8_t crc = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002458:	f102 0213 	add.w	r2, r2, #19
 800245c:	7013      	strb	r3, [r2, #0]
						  uint8_t buff[50] = {0};
 800245e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 8002462:	f5a3 6305 	sub.w	r3, r3, #2128	; 0x850
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	3304      	adds	r3, #4
 800246c:	222e      	movs	r2, #46	; 0x2e
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f00b fe45 	bl	800e100 <memset>
						  if(ret == RFM95_ERR_RX_PAYLOAD_CRC)
 8002476:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800247a:	f103 0306 	add.w	r3, r3, #6
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b29      	cmp	r3, #41	; 0x29
 8002482:	d135      	bne.n	80024f0 <main+0x95c>
						  {
							  crc = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800248a:	f102 0213 	add.w	r2, r2, #19
 800248e:	7013      	strb	r3, [r2, #0]
							  printf("Rx.. crc error !\r\n");
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <main+0x958>)
 8002492:	f00b fd35 	bl	800df00 <puts>
 8002496:	e03b      	b.n	8002510 <main+0x97c>
 8002498:	20002a4c 	.word	0x20002a4c
 800249c:	2000030c 	.word	0x2000030c
 80024a0:	200003e4 	.word	0x200003e4
 80024a4:	080117f0 	.word	0x080117f0
 80024a8:	20000004 	.word	0x20000004
 80024ac:	20000354 	.word	0x20000354
 80024b0:	20002a4d 	.word	0x20002a4d
 80024b4:	20002a4e 	.word	0x20002a4e
 80024b8:	08011804 	.word	0x08011804
 80024bc:	20002a38 	.word	0x20002a38
 80024c0:	447a0000 	.word	0x447a0000
 80024c4:	20000464 	.word	0x20000464
 80024c8:	08011830 	.word	0x08011830
 80024cc:	08011848 	.word	0x08011848
 80024d0:	20002a78 	.word	0x20002a78
 80024d4:	200014a0 	.word	0x200014a0
 80024d8:	200024d0 	.word	0x200024d0
 80024dc:	08011868 	.word	0x08011868
 80024e0:	080116d8 	.word	0x080116d8
 80024e4:	20000451 	.word	0x20000451
 80024e8:	20000454 	.word	0x20000454
 80024ec:	08011884 	.word	0x08011884
						  }
						  else if(ret == RFM95_OK)
 80024f0:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80024f4:	f103 0306 	add.w	r3, r3, #6
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d108      	bne.n	8002510 <main+0x97c>
						  {
							  crc = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002504:	f102 0213 	add.w	r2, r2, #19
 8002508:	7013      	strb	r3, [r2, #0]
							  printf("Rx.. success!\r\n");
 800250a:	48b8      	ldr	r0, [pc, #736]	; (80027ec <main+0xc58>)
 800250c:	f00b fcf8 	bl	800df00 <puts>
						  }
						  int16_t rssi = RFM95_getPcktRSSI(&rfm95);
 8002510:	48b7      	ldr	r0, [pc, #732]	; (80027f0 <main+0xc5c>)
 8002512:	f00a f993 	bl	800c83c <RFM95_getPcktRSSI>
 8002516:	4603      	mov	r3, r0
 8002518:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 800251c:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8002520:	8013      	strh	r3, [r2, #0]
						  float snr = RFM95_getPcktSNR(&rfm95);
 8002522:	48b3      	ldr	r0, [pc, #716]	; (80027f0 <main+0xc5c>)
 8002524:	f00a f960 	bl	800c7e8 <RFM95_getPcktSNR>
 8002528:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800252c:	f103 031c 	add.w	r3, r3, #28
 8002530:	ed83 0a00 	vstr	s0, [r3]
						  printf("RSSI: %d, SNR: %f\r\n", rssi, snr);
 8002534:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002538:	f103 0322 	add.w	r3, r3, #34	; 0x22
 800253c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002540:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002544:	f103 031c 	add.w	r3, r3, #28
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	f7fe f805 	bl	8000558 <__aeabi_f2d>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4621      	mov	r1, r4
 8002554:	48a7      	ldr	r0, [pc, #668]	; (80027f4 <main+0xc60>)
 8002556:	f00b fc65 	bl	800de24 <iprintf>
						  for(int i = 0; i<16;i++)
 800255a:	2300      	movs	r3, #0
 800255c:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002560:	f102 020c 	add.w	r2, r2, #12
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e016      	b.n	8002596 <main+0xa02>
						  {
							  printf("%02x ", rxBuff[i]);
 8002568:	4aa3      	ldr	r2, [pc, #652]	; (80027f8 <main+0xc64>)
 800256a:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800256e:	f103 030c 	add.w	r3, r3, #12
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	48a0      	ldr	r0, [pc, #640]	; (80027fc <main+0xc68>)
 800257c:	f00b fc52 	bl	800de24 <iprintf>
						  for(int i = 0; i<16;i++)
 8002580:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002584:	f103 030c 	add.w	r3, r3, #12
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002590:	f102 020c 	add.w	r2, r2, #12
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 800259a:	f103 030c 	add.w	r3, r3, #12
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	dde1      	ble.n	8002568 <main+0x9d4>
						  }
						  printf("\r\n");
 80025a4:	4896      	ldr	r0, [pc, #600]	; (8002800 <main+0xc6c>)
 80025a6:	f00b fcab 	bl	800df00 <puts>

						  /* Update time */
						  get_Date_Time();
 80025aa:	f001 f829 	bl	8003600 <get_Date_Time>
						  /* id, status, mm:ss.ooo */
						  int milisec = (1.0f - (float)gTime.SubSeconds / (float)gTime.SecondFraction) * 1000;
 80025ae:	4b95      	ldr	r3, [pc, #596]	; (8002804 <main+0xc70>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ba:	4b92      	ldr	r3, [pc, #584]	; (8002804 <main+0xc70>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002808 <main+0xc74>
 80025d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025de:	ee17 3a90 	vmov	r3, s15
 80025e2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80025e6:	f102 0208 	add.w	r2, r2, #8
 80025ea:	6013      	str	r3, [r2, #0]
						  if(milisec >= 1000) milisec = 999;
 80025ec:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80025f0:	f103 0308 	add.w	r3, r3, #8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fa:	db06      	blt.n	800260a <main+0xa76>
 80025fc:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002600:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002604:	f102 0208 	add.w	r2, r2, #8
 8002608:	6013      	str	r3, [r2, #0]
						  sprintf((char*)buff, "%d,%d,%02d:%02d.%03d,%d,%.2f\n", id++, crc, gTime.Minutes, gTime.Seconds, milisec, rssi, snr);
 800260a:	4b80      	ldr	r3, [pc, #512]	; (800280c <main+0xc78>)
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	1c63      	adds	r3, r4, #1
 8002610:	4a7e      	ldr	r2, [pc, #504]	; (800280c <main+0xc78>)
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002618:	f103 0313 	add.w	r3, r3, #19
 800261c:	f993 6000 	ldrsb.w	r6, [r3]
 8002620:	4b78      	ldr	r3, [pc, #480]	; (8002804 <main+0xc70>)
 8002622:	785b      	ldrb	r3, [r3, #1]
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b77      	ldr	r3, [pc, #476]	; (8002804 <main+0xc70>)
 8002628:	789b      	ldrb	r3, [r3, #2]
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	f507 5120 	add.w	r1, r7, #10240	; 0x2800
 8002630:	f101 0122 	add.w	r1, r1, #34	; 0x22
 8002634:	f9b1 5000 	ldrsh.w	r5, [r1]
 8002638:	f507 5120 	add.w	r1, r7, #10240	; 0x2800
 800263c:	f101 011c 	add.w	r1, r1, #28
 8002640:	6808      	ldr	r0, [r1, #0]
 8002642:	f7fd ff89 	bl	8000558 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	f107 0018 	add.w	r0, r7, #24
 800264e:	3810      	subs	r0, #16
 8002650:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002654:	9503      	str	r5, [sp, #12]
 8002656:	f507 5121 	add.w	r1, r7, #10304	; 0x2840
 800265a:	f101 0108 	add.w	r1, r1, #8
 800265e:	680b      	ldr	r3, [r1, #0]
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	9201      	str	r2, [sp, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4633      	mov	r3, r6
 800266c:	4622      	mov	r2, r4
 800266e:	4968      	ldr	r1, [pc, #416]	; (8002810 <main+0xc7c>)
 8002670:	f00b fc4e 	bl	800df10 <siprintf>
						  printf("Current time: %02d:%02d.%03d \r\n", gTime.Minutes, gTime.Seconds, milisec);
 8002674:	4b63      	ldr	r3, [pc, #396]	; (8002804 <main+0xc70>)
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	4619      	mov	r1, r3
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <main+0xc70>)
 800267c:	789b      	ldrb	r3, [r3, #2]
 800267e:	461a      	mov	r2, r3
 8002680:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002684:	f103 0308 	add.w	r3, r3, #8
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4862      	ldr	r0, [pc, #392]	; (8002814 <main+0xc80>)
 800268c:	f00b fbca 	bl	800de24 <iprintf>
						  /* Updating an existing file */
						  fresult = f_open(&file, (char*)myRxCmd.param, FA_OPEN_ALWAYS | FA_WRITE);
 8002690:	2212      	movs	r2, #18
 8002692:	4961      	ldr	r1, [pc, #388]	; (8002818 <main+0xc84>)
 8002694:	4861      	ldr	r0, [pc, #388]	; (800281c <main+0xc88>)
 8002696:	f007 ff77 	bl	800a588 <f_open>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4b60      	ldr	r3, [pc, #384]	; (8002820 <main+0xc8c>)
 80026a0:	701a      	strb	r2, [r3, #0]
						  if(fresult == FR_OK) printf("%s opened successfully !\r\n", myRxCmd.param);
 80026a2:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <main+0xc8c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <main+0xb1e>
 80026aa:	495b      	ldr	r1, [pc, #364]	; (8002818 <main+0xc84>)
 80026ac:	485d      	ldr	r0, [pc, #372]	; (8002824 <main+0xc90>)
 80026ae:	f00b fbb9 	bl	800de24 <iprintf>
						  /* Move to offset to the end to the file */
						  fresult = f_lseek(&file, f_size(&file));
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <main+0xc88>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4858      	ldr	r0, [pc, #352]	; (800281c <main+0xc88>)
 80026ba:	f008 fccc 	bl	800b056 <f_lseek>
 80026be:	4603      	mov	r3, r0
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <main+0xc8c>)
 80026c4:	701a      	strb	r2, [r3, #0]
						  /* Writing text */
						  fresult = f_puts((char*)buff, &file);
 80026c6:	f107 0318 	add.w	r3, r7, #24
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4953      	ldr	r1, [pc, #332]	; (800281c <main+0xc88>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f009 f992 	bl	800b9f8 <f_puts>
 80026d4:	4603      	mov	r3, r0
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b51      	ldr	r3, [pc, #324]	; (8002820 <main+0xc8c>)
 80026da:	701a      	strb	r2, [r3, #0]
						  /* Close file */
						  f_close(&file);
 80026dc:	484f      	ldr	r0, [pc, #316]	; (800281c <main+0xc88>)
 80026de:	f008 fc90 	bl	800b002 <f_close>
						  if(fresult == FR_OK) printf("Close file !\r\n");
 80026e2:	4b4f      	ldr	r3, [pc, #316]	; (8002820 <main+0xc8c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <main+0xb76>
 80026ea:	484f      	ldr	r0, [pc, #316]	; (8002828 <main+0xc94>)
 80026ec:	f00b fc08 	bl	800df00 <puts>
 80026f0:	e00b      	b.n	800270a <main+0xb76>
					  }
					  else
					  {
						  printf("Rx.. fail!\r\n");
 80026f2:	484e      	ldr	r0, [pc, #312]	; (800282c <main+0xc98>)
 80026f4:	f00b fc04 	bl	800df00 <puts>
						  printf("ERROR CODE: %d\r\n", ret);
 80026f8:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80026fc:	f103 0306 	add.w	r3, r3, #6
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	484a      	ldr	r0, [pc, #296]	; (8002830 <main+0xc9c>)
 8002706:	f00b fb8d 	bl	800de24 <iprintf>
					  }
					  rxFlag = false;
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <main+0xca0>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	f7ff baac 	b.w	8001c6c <main+0xd8>
				  }
			  }
		  }
		  else if(strncmp("sf", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002714:	4b48      	ldr	r3, [pc, #288]	; (8002838 <main+0xca4>)
 8002716:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800271a:	461a      	mov	r2, r3
 800271c:	4947      	ldr	r1, [pc, #284]	; (800283c <main+0xca8>)
 800271e:	4848      	ldr	r0, [pc, #288]	; (8002840 <main+0xcac>)
 8002720:	f00b fcf6 	bl	800e110 <strncmp>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 8092 	bne.w	8002850 <main+0xcbc>
		  {
			  int sf = atoi((char*)myRxCmd.param);
 800272c:	483a      	ldr	r0, [pc, #232]	; (8002818 <main+0xc84>)
 800272e:	f00a faf3 	bl	800cd18 <atoi>
 8002732:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002736:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800273a:	6018      	str	r0, [r3, #0]
			  if(sf >= 7 && sf <= 12 )
 800273c:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002740:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b06      	cmp	r3, #6
 8002748:	dd30      	ble.n	80027ac <main+0xc18>
 800274a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800274e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	dc29      	bgt.n	80027ac <main+0xc18>
			  {
				  uint8_t ret;
				  ret = RFM95_LoRa_setSpreadingFactor(&rfm95, sf);
 8002758:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800275c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	4822      	ldr	r0, [pc, #136]	; (80027f0 <main+0xc5c>)
 8002768:	f009 fd05 	bl	800c176 <RFM95_LoRa_setSpreadingFactor>
 800276c:	4603      	mov	r3, r0
 800276e:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002772:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8002776:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002778:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800277c:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <main+0xc06>
 8002786:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800278a:	f103 0327 	add.w	r3, r3, #39	; 0x27
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	4827      	ldr	r0, [pc, #156]	; (8002830 <main+0xc9c>)
 8002794:	f00b fb46 	bl	800de24 <iprintf>
			  {
 8002798:	e00b      	b.n	80027b2 <main+0xc1e>
				  else printf("SF %d is set.\r\n", sf);
 800279a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800279e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	4827      	ldr	r0, [pc, #156]	; (8002844 <main+0xcb0>)
 80027a6:	f00b fb3d 	bl	800de24 <iprintf>
			  {
 80027aa:	e002      	b.n	80027b2 <main+0xc1e>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 80027ac:	4826      	ldr	r0, [pc, #152]	; (8002848 <main+0xcb4>)
 80027ae:	f00b fba7 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <main+0xca4>)
 80027b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	481f      	ldr	r0, [pc, #124]	; (800283c <main+0xca8>)
 80027be:	f00b fc9f 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <main+0xca4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <main+0xca4>)
 80027cc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80027d0:	461a      	mov	r2, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	4810      	ldr	r0, [pc, #64]	; (8002818 <main+0xc84>)
 80027d6:	f00b fc93 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <main+0xca4>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <main+0xcb8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	f7ff ba40 	b.w	8001c6c <main+0xd8>
 80027ec:	08011898 	.word	0x08011898
 80027f0:	200003e4 	.word	0x200003e4
 80027f4:	080118a8 	.word	0x080118a8
 80027f8:	20000454 	.word	0x20000454
 80027fc:	080118bc 	.word	0x080118bc
 8002800:	08011660 	.word	0x08011660
 8002804:	20002a38 	.word	0x20002a38
 8002808:	447a0000 	.word	0x447a0000
 800280c:	20000464 	.word	0x20000464
 8002810:	080118c4 	.word	0x080118c4
 8002814:	08011848 	.word	0x08011848
 8002818:	20002a78 	.word	0x20002a78
 800281c:	200014a0 	.word	0x200014a0
 8002820:	200024d0 	.word	0x200024d0
 8002824:	08011868 	.word	0x08011868
 8002828:	080116d8 	.word	0x080116d8
 800282c:	080118e4 	.word	0x080118e4
 8002830:	080118f0 	.word	0x080118f0
 8002834:	20000451 	.word	0x20000451
 8002838:	20002a50 	.word	0x20002a50
 800283c:	20002a6e 	.word	0x20002a6e
 8002840:	08011904 	.word	0x08011904
 8002844:	08011908 	.word	0x08011908
 8002848:	08011788 	.word	0x08011788
 800284c:	20002a9b 	.word	0x20002a9b
		  }
		  else if(strncmp("bw", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002850:	4bb4      	ldr	r3, [pc, #720]	; (8002b24 <main+0xf90>)
 8002852:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002856:	461a      	mov	r2, r3
 8002858:	49b3      	ldr	r1, [pc, #716]	; (8002b28 <main+0xf94>)
 800285a:	48b4      	ldr	r0, [pc, #720]	; (8002b2c <main+0xf98>)
 800285c:	f00b fc58 	bl	800e110 <strncmp>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 80ee 	bne.w	8002a44 <main+0xeb0>
		  {
			  int bw = atoi((char*)myRxCmd.param);
 8002868:	48b1      	ldr	r0, [pc, #708]	; (8002b30 <main+0xf9c>)
 800286a:	f00a fa55 	bl	800cd18 <atoi>
 800286e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002872:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002876:	6018      	str	r0, [r3, #0]
			  if(bw >= 7 && bw <=500)
 8002878:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800287c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b06      	cmp	r3, #6
 8002884:	f340 80be 	ble.w	8002a04 <main+0xe70>
 8002888:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800288c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002896:	f300 80b5 	bgt.w	8002a04 <main+0xe70>
			  {
				  lora_bw lbw;
				  if(bw <= 8)
 800289a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800289e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	dc06      	bgt.n	80028b6 <main+0xd22>
					  lbw = BW_7_8_kHz;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80028ae:	f102 0207 	add.w	r2, r2, #7
 80028b2:	7013      	strb	r3, [r2, #0]
 80028b4:	e07d      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 11)
 80028b6:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028ba:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b0b      	cmp	r3, #11
 80028c2:	dc06      	bgt.n	80028d2 <main+0xd3e>
					  lbw = BW_10_4_kHz;
 80028c4:	2310      	movs	r3, #16
 80028c6:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80028ca:	f102 0207 	add.w	r2, r2, #7
 80028ce:	7013      	strb	r3, [r2, #0]
 80028d0:	e06f      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 16)
 80028d2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b10      	cmp	r3, #16
 80028de:	dc06      	bgt.n	80028ee <main+0xd5a>
					  lbw = BW_15_6_kHz;
 80028e0:	2320      	movs	r3, #32
 80028e2:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80028e6:	f102 0207 	add.w	r2, r2, #7
 80028ea:	7013      	strb	r3, [r2, #0]
 80028ec:	e061      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 21)
 80028ee:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80028f2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b15      	cmp	r3, #21
 80028fa:	dc06      	bgt.n	800290a <main+0xd76>
					  lbw = BW_20_8_kHz;
 80028fc:	2330      	movs	r3, #48	; 0x30
 80028fe:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002902:	f102 0207 	add.w	r2, r2, #7
 8002906:	7013      	strb	r3, [r2, #0]
 8002908:	e053      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 32)
 800290a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800290e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b20      	cmp	r3, #32
 8002916:	dc06      	bgt.n	8002926 <main+0xd92>
					  lbw = BW_31_25_kHz;
 8002918:	2340      	movs	r3, #64	; 0x40
 800291a:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800291e:	f102 0207 	add.w	r2, r2, #7
 8002922:	7013      	strb	r3, [r2, #0]
 8002924:	e045      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 42)
 8002926:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800292a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b2a      	cmp	r3, #42	; 0x2a
 8002932:	dc06      	bgt.n	8002942 <main+0xdae>
					  lbw = BW_41_7_kHz;
 8002934:	2350      	movs	r3, #80	; 0x50
 8002936:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800293a:	f102 0207 	add.w	r2, r2, #7
 800293e:	7013      	strb	r3, [r2, #0]
 8002940:	e037      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 63)
 8002942:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002946:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b3f      	cmp	r3, #63	; 0x3f
 800294e:	dc06      	bgt.n	800295e <main+0xdca>
					  lbw = BW_62_5_kHz;
 8002950:	2360      	movs	r3, #96	; 0x60
 8002952:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002956:	f102 0207 	add.w	r2, r2, #7
 800295a:	7013      	strb	r3, [r2, #0]
 800295c:	e029      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 125)
 800295e:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002962:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b7d      	cmp	r3, #125	; 0x7d
 800296a:	dc06      	bgt.n	800297a <main+0xde6>
					  lbw = BW_125_kHz;
 800296c:	2370      	movs	r3, #112	; 0x70
 800296e:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 8002972:	f102 0207 	add.w	r2, r2, #7
 8002976:	7013      	strb	r3, [r2, #0]
 8002978:	e01b      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 250)
 800297a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800297e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2bfa      	cmp	r3, #250	; 0xfa
 8002986:	dc06      	bgt.n	8002996 <main+0xe02>
					  lbw = BW_250_kHz;
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 800298e:	f102 0207 	add.w	r2, r2, #7
 8002992:	7013      	strb	r3, [r2, #0]
 8002994:	e00d      	b.n	80029b2 <main+0xe1e>
				  else if(bw <= 500)
 8002996:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 800299a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029a4:	dc05      	bgt.n	80029b2 <main+0xe1e>
					  lbw = BW_500_kHz;
 80029a6:	2390      	movs	r3, #144	; 0x90
 80029a8:	f507 5221 	add.w	r2, r7, #10304	; 0x2840
 80029ac:	f102 0207 	add.w	r2, r2, #7
 80029b0:	7013      	strb	r3, [r2, #0]

				  uint8_t ret = RFM95_LoRa_setBandwidth(&rfm95, lbw);
 80029b2:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 80029b6:	f103 0307 	add.w	r3, r3, #7
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	485d      	ldr	r0, [pc, #372]	; (8002b34 <main+0xfa0>)
 80029c0:	f009 fc92 	bl	800c2e8 <RFM95_LoRa_setBandwidth>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 80029ca:	f102 022f 	add.w	r2, r2, #47	; 0x2f
 80029ce:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 80029d0:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80029d4:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <main+0xe5e>
 80029de:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80029e2:	f103 032f 	add.w	r3, r3, #47	; 0x2f
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	4853      	ldr	r0, [pc, #332]	; (8002b38 <main+0xfa4>)
 80029ec:	f00b fa1a 	bl	800de24 <iprintf>
			  {
 80029f0:	e00b      	b.n	8002a0a <main+0xe76>
				  else printf("BW %d is set.\r\n", bw);
 80029f2:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 80029f6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	484f      	ldr	r0, [pc, #316]	; (8002b3c <main+0xfa8>)
 80029fe:	f00b fa11 	bl	800de24 <iprintf>
			  {
 8002a02:	e002      	b.n	8002a0a <main+0xe76>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002a04:	484e      	ldr	r0, [pc, #312]	; (8002b40 <main+0xfac>)
 8002a06:	f00b fa7b 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002a0a:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <main+0xf90>)
 8002a0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a10:	461a      	mov	r2, r3
 8002a12:	2100      	movs	r1, #0
 8002a14:	4844      	ldr	r0, [pc, #272]	; (8002b28 <main+0xf94>)
 8002a16:	f00b fb73 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8002a1a:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <main+0xf90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <main+0xf90>)
 8002a24:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4840      	ldr	r0, [pc, #256]	; (8002b30 <main+0xf9c>)
 8002a2e:	f00b fb67 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <main+0xf90>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002a3a:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <main+0xfb0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	f7ff b914 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("cr", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002a44:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <main+0xf90>)
 8002a46:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4936      	ldr	r1, [pc, #216]	; (8002b28 <main+0xf94>)
 8002a4e:	483e      	ldr	r0, [pc, #248]	; (8002b48 <main+0xfb4>)
 8002a50:	f00b fb5e 	bl	800e110 <strncmp>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d17a      	bne.n	8002b50 <main+0xfbc>
		  {
			  int cr = atoi((char*)myRxCmd.param);
 8002a5a:	4835      	ldr	r0, [pc, #212]	; (8002b30 <main+0xf9c>)
 8002a5c:	f00a f95c 	bl	800cd18 <atoi>
 8002a60:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a64:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002a68:	6018      	str	r0, [r3, #0]
			  if(cr >= 1 && cr <=4)
 8002a6a:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a6e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd34      	ble.n	8002ae2 <main+0xf4e>
 8002a78:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a7c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	dc2d      	bgt.n	8002ae2 <main+0xf4e>
			  {
				  uint8_t ret = RFM95_LoRa_setCodingRate(&rfm95, cr*2);
 8002a86:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002a8a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	4826      	ldr	r0, [pc, #152]	; (8002b34 <main+0xfa0>)
 8002a9a:	f009 fc91 	bl	800c3c0 <RFM95_LoRa_setCodingRate>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002aa4:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8002aa8:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002aaa:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002aae:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d009      	beq.n	8002acc <main+0xf38>
 8002ab8:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002abc:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	481c      	ldr	r0, [pc, #112]	; (8002b38 <main+0xfa4>)
 8002ac6:	f00b f9ad 	bl	800de24 <iprintf>
			  {
 8002aca:	e00d      	b.n	8002ae8 <main+0xf54>
				  else printf("CR 4/%d is set.\r\n", cr + 4);
 8002acc:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002ad0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	481c      	ldr	r0, [pc, #112]	; (8002b4c <main+0xfb8>)
 8002adc:	f00b f9a2 	bl	800de24 <iprintf>
			  {
 8002ae0:	e002      	b.n	8002ae8 <main+0xf54>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <main+0xfac>)
 8002ae4:	f00b fa0c 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <main+0xf90>)
 8002aea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002aee:	461a      	mov	r2, r3
 8002af0:	2100      	movs	r1, #0
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <main+0xf94>)
 8002af4:	f00b fb04 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <main+0xf90>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <main+0xf90>)
 8002b02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b06:	461a      	mov	r2, r3
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4809      	ldr	r0, [pc, #36]	; (8002b30 <main+0xf9c>)
 8002b0c:	f00b faf8 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <main+0xf90>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <main+0xfb0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	f7ff b8a5 	b.w	8001c6c <main+0xd8>
 8002b22:	bf00      	nop
 8002b24:	20002a50 	.word	0x20002a50
 8002b28:	20002a6e 	.word	0x20002a6e
 8002b2c:	08011918 	.word	0x08011918
 8002b30:	20002a78 	.word	0x20002a78
 8002b34:	200003e4 	.word	0x200003e4
 8002b38:	080118f0 	.word	0x080118f0
 8002b3c:	0801191c 	.word	0x0801191c
 8002b40:	08011788 	.word	0x08011788
 8002b44:	20002a9b 	.word	0x20002a9b
 8002b48:	0801192c 	.word	0x0801192c
 8002b4c:	08011930 	.word	0x08011930
		  }
		  else if(strncmp("freq", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002b50:	4b79      	ldr	r3, [pc, #484]	; (8002d38 <main+0x11a4>)
 8002b52:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b56:	461a      	mov	r2, r3
 8002b58:	4978      	ldr	r1, [pc, #480]	; (8002d3c <main+0x11a8>)
 8002b5a:	4879      	ldr	r0, [pc, #484]	; (8002d40 <main+0x11ac>)
 8002b5c:	f00b fad8 	bl	800e110 <strncmp>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d15f      	bne.n	8002c26 <main+0x1092>
		  {
			  int kHz = atoi((char*)myRxCmd.param);
 8002b66:	4877      	ldr	r0, [pc, #476]	; (8002d44 <main+0x11b0>)
 8002b68:	f00a f8d6 	bl	800cd18 <atoi>
 8002b6c:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002b70:	6018      	str	r0, [r3, #0]
			  if(kHz >= 902000 && kHz <= 928000)
 8002b72:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a73      	ldr	r2, [pc, #460]	; (8002d48 <main+0x11b4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	dd33      	ble.n	8002be6 <main+0x1052>
 8002b7e:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a71      	ldr	r2, [pc, #452]	; (8002d4c <main+0x11b8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	dc2d      	bgt.n	8002be6 <main+0x1052>
			  {
				  uint8_t ret = RFM95_setFrequency(&rfm95, kHz*1000);
 8002b8a:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	4619      	mov	r1, r3
 8002b9a:	486d      	ldr	r0, [pc, #436]	; (8002d50 <main+0x11bc>)
 8002b9c:	f009 f912 	bl	800bdc4 <RFM95_setFrequency>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f507 5220 	add.w	r2, r7, #10240	; 0x2800
 8002ba6:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002baa:	7013      	strb	r3, [r2, #0]
				  if(ret) printf("ERROR CODE: %d\r\n", ret);
 8002bac:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002bb0:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <main+0x103a>
 8002bba:	f507 5320 	add.w	r3, r7, #10240	; 0x2800
 8002bbe:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4863      	ldr	r0, [pc, #396]	; (8002d54 <main+0x11c0>)
 8002bc8:	f00b f92c 	bl	800de24 <iprintf>
			  {
 8002bcc:	e00e      	b.n	8002bec <main+0x1058>
				  else printf("Frequency %d is set.\r\n", kHz*1000);
 8002bce:	f507 5321 	add.w	r3, r7, #10304	; 0x2840
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	485e      	ldr	r0, [pc, #376]	; (8002d58 <main+0x11c4>)
 8002be0:	f00b f920 	bl	800de24 <iprintf>
			  {
 8002be4:	e002      	b.n	8002bec <main+0x1058>
			  }
			  else
			  {
				  printf("Invalid parameter !\r\n");
 8002be6:	485d      	ldr	r0, [pc, #372]	; (8002d5c <main+0x11c8>)
 8002be8:	f00b f98a 	bl	800df00 <puts>
			  }
			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002bec:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <main+0x11a4>)
 8002bee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4851      	ldr	r0, [pc, #324]	; (8002d3c <main+0x11a8>)
 8002bf8:	f00b fa82 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8002bfc:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <main+0x11a4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002c04:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <main+0x11a4>)
 8002c06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	484d      	ldr	r0, [pc, #308]	; (8002d44 <main+0x11b0>)
 8002c10:	f00b fa76 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8002c14:	4b48      	ldr	r3, [pc, #288]	; (8002d38 <main+0x11a4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <main+0x11cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
 8002c22:	f7ff b823 	b.w	8001c6c <main+0xd8>
		  }
		  else if(strncmp("mount", (char*)myRxCmd.cmd, myRxCmd.cmdLen) == 0)
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <main+0x11a4>)
 8002c28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4943      	ldr	r1, [pc, #268]	; (8002d3c <main+0x11a8>)
 8002c30:	484c      	ldr	r0, [pc, #304]	; (8002d64 <main+0x11d0>)
 8002c32:	f00b fa6d 	bl	800e110 <strncmp>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d174      	bne.n	8002d26 <main+0x1192>
		  {
			  fresult = f_mount(&fs, "", 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	494a      	ldr	r1, [pc, #296]	; (8002d68 <main+0x11d4>)
 8002c40:	484a      	ldr	r0, [pc, #296]	; (8002d6c <main+0x11d8>)
 8002c42:	f007 fc5b 	bl	800a4fc <f_mount>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <main+0x11dc>)
 8002c4c:	701a      	strb	r2, [r3, #0]
			  if(fresult != FR_OK)
 8002c4e:	4b48      	ldr	r3, [pc, #288]	; (8002d70 <main+0x11dc>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <main+0x10ca>
				  printf("error in mounting SD CARD... \r\n");
 8002c56:	4847      	ldr	r0, [pc, #284]	; (8002d74 <main+0x11e0>)
 8002c58:	f00b f952 	bl	800df00 <puts>
 8002c5c:	e002      	b.n	8002c64 <main+0x10d0>
			  else
				  printf("SD CARD mounted successfully... \r\n");
 8002c5e:	4846      	ldr	r0, [pc, #280]	; (8002d78 <main+0x11e4>)
 8002c60:	f00b f94e 	bl	800df00 <puts>
			  /* Check free space */
			  f_getfree("", &fre_clust, &pfs);
 8002c64:	4a45      	ldr	r2, [pc, #276]	; (8002d7c <main+0x11e8>)
 8002c66:	4946      	ldr	r1, [pc, #280]	; (8002d80 <main+0x11ec>)
 8002c68:	483f      	ldr	r0, [pc, #252]	; (8002d68 <main+0x11d4>)
 8002c6a:	f008 fcee 	bl	800b64a <f_getfree>

			  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <main+0x11e8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	3b02      	subs	r3, #2
 8002c76:	4a41      	ldr	r2, [pc, #260]	; (8002d7c <main+0x11e8>)
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	8952      	ldrh	r2, [r2, #10]
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fd fc47 	bl	8000514 <__aeabi_ui2d>
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <main+0x11f0>)
 8002c8c:	f7fd fcbc 	bl	8000608 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7fd ff8e 	bl	8000bb8 <__aeabi_d2uiz>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	; (8002d88 <main+0x11f4>)
 8002ca0:	6013      	str	r3, [r2, #0]
			  printf("SD CARD total size: \t%lu\r\n", total);
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <main+0x11f4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4838      	ldr	r0, [pc, #224]	; (8002d8c <main+0x11f8>)
 8002caa:	f00b f8bb 	bl	800de24 <iprintf>
			  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <main+0x11e8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	895b      	ldrh	r3, [r3, #10]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <main+0x11ec>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc28 	bl	8000514 <__aeabi_ui2d>
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <main+0x11f0>)
 8002cca:	f7fd fc9d 	bl	8000608 <__aeabi_dmul>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7fd ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <main+0x11fc>)
 8002cde:	6013      	str	r3, [r2, #0]
			  printf("SD CARD free space: \t%lu\r\n", free_space);
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <main+0x11fc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	482b      	ldr	r0, [pc, #172]	; (8002d94 <main+0x1200>)
 8002ce8:	f00b f89c 	bl	800de24 <iprintf>

			  memset(myRxCmd.cmd, '\0', myRxCmd.cmdLen);
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <main+0x11a4>)
 8002cee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4811      	ldr	r0, [pc, #68]	; (8002d3c <main+0x11a8>)
 8002cf8:	f00b fa02 	bl	800e100 <memset>
			  myRxCmd.cmdLen = 0;
 8002cfc:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <main+0x11a4>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			  memset(myRxCmd.param, '\0', myRxCmd.paramLen);
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <main+0x11a4>)
 8002d06:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	480d      	ldr	r0, [pc, #52]	; (8002d44 <main+0x11b0>)
 8002d10:	f00b f9f6 	bl	800e100 <memset>
			  myRxCmd.paramLen = 0;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <main+0x11a4>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			  cmdFlag = 0;
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <main+0x11cc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	f7fe bfa3 	b.w	8001c6c <main+0xd8>
		  }
		  else
		  {
			  printf("Invalid command !\r\n");
 8002d26:	481c      	ldr	r0, [pc, #112]	; (8002d98 <main+0x1204>)
 8002d28:	f00b f8ea 	bl	800df00 <puts>
			  cmdFlag = 0;
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <main+0x11cc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
	  if(cmdFlag)
 8002d32:	f7fe bf9b 	b.w	8001c6c <main+0xd8>
 8002d36:	bf00      	nop
 8002d38:	20002a50 	.word	0x20002a50
 8002d3c:	20002a6e 	.word	0x20002a6e
 8002d40:	08011944 	.word	0x08011944
 8002d44:	20002a78 	.word	0x20002a78
 8002d48:	000dc36f 	.word	0x000dc36f
 8002d4c:	000e2900 	.word	0x000e2900
 8002d50:	200003e4 	.word	0x200003e4
 8002d54:	080118f0 	.word	0x080118f0
 8002d58:	0801194c 	.word	0x0801194c
 8002d5c:	08011788 	.word	0x08011788
 8002d60:	20002a9b 	.word	0x20002a9b
 8002d64:	08011964 	.word	0x08011964
 8002d68:	0801196c 	.word	0x0801196c
 8002d6c:	20000468 	.word	0x20000468
 8002d70:	200024d0 	.word	0x200024d0
 8002d74:	08011970 	.word	0x08011970
 8002d78:	08011990 	.word	0x08011990
 8002d7c:	200028d8 	.word	0x200028d8
 8002d80:	200028dc 	.word	0x200028dc
 8002d84:	3fe00000 	.word	0x3fe00000
 8002d88:	200028e0 	.word	0x200028e0
 8002d8c:	080119b4 	.word	0x080119b4
 8002d90:	200028e4 	.word	0x200028e4
 8002d94:	080119d0 	.word	0x080119d0
 8002d98:	080119ec 	.word	0x080119ec

08002d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b094      	sub	sp, #80	; 0x50
 8002da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002da2:	f107 0320 	add.w	r3, r7, #32
 8002da6:	2230      	movs	r2, #48	; 0x30
 8002da8:	2100      	movs	r1, #0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f00b f9a8 	bl	800e100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <SystemClock_Config+0xcc>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	4a27      	ldr	r2, [pc, #156]	; (8002e68 <SystemClock_Config+0xcc>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dce:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <SystemClock_Config+0xcc>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	607b      	str	r3, [r7, #4]
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <SystemClock_Config+0xd0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <SystemClock_Config+0xd0>)
 8002de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <SystemClock_Config+0xd0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e00:	2301      	movs	r3, #1
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e04:	2310      	movs	r3, #16
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e10:	2308      	movs	r3, #8
 8002e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002e14:	2364      	movs	r3, #100	; 0x64
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e20:	f107 0320 	add.w	r3, r7, #32
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 fb9d 	bl	8004564 <HAL_RCC_OscConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002e30:	f000 fcb4 	bl	800379c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e34:	230f      	movs	r3, #15
 8002e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	2103      	movs	r1, #3
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fdff 	bl	8004a54 <HAL_RCC_ClockConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002e5c:	f000 fc9e 	bl	800379c <Error_Handler>
  }
}
 8002e60:	bf00      	nop
 8002e62:	3750      	adds	r7, #80	; 0x50
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40007000 	.word	0x40007000

08002e70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002e84:	2300      	movs	r3, #0
 8002e86:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <MX_RTC_Init+0xac>)
 8002e8a:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <MX_RTC_Init+0xb0>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e8e:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <MX_RTC_Init+0xac>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e94:	4b21      	ldr	r3, [pc, #132]	; (8002f1c <MX_RTC_Init+0xac>)
 8002e96:	227f      	movs	r2, #127	; 0x7f
 8002e98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <MX_RTC_Init+0xac>)
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <MX_RTC_Init+0xac>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <MX_RTC_Init+0xac>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <MX_RTC_Init+0xac>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002eb2:	481a      	ldr	r0, [pc, #104]	; (8002f1c <MX_RTC_Init+0xac>)
 8002eb4:	f002 f89e 	bl	8004ff4 <HAL_RTC_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002ebe:	f000 fc6d 	bl	800379c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8002ec2:	2321      	movs	r3, #33	; 0x21
 8002ec4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 8002ec6:	2350      	movs	r3, #80	; 0x50
 8002ec8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4619      	mov	r1, r3
 8002edc:	480f      	ldr	r0, [pc, #60]	; (8002f1c <MX_RTC_Init+0xac>)
 8002ede:	f002 f90c 	bl	80050fa <HAL_RTC_SetTime>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002ee8:	f000 fc58 	bl	800379c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002eec:	2306      	movs	r3, #6
 8002eee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 8002ef4:	2324      	movs	r3, #36	; 0x24
 8002ef6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8002ef8:	2324      	movs	r3, #36	; 0x24
 8002efa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002efc:	463b      	mov	r3, r7
 8002efe:	2201      	movs	r2, #1
 8002f00:	4619      	mov	r1, r3
 8002f02:	4806      	ldr	r0, [pc, #24]	; (8002f1c <MX_RTC_Init+0xac>)
 8002f04:	f002 f9f1 	bl	80052ea <HAL_RTC_SetDate>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002f0e:	f000 fc45 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000024c 	.word	0x2000024c
 8002f20:	40002800 	.word	0x40002800

08002f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f2a:	4a18      	ldr	r2, [pc, #96]	; (8002f8c <MX_SPI1_Init+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f58:	2228      	movs	r2, #40	; 0x28
 8002f5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f70:	220a      	movs	r2, #10
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <MX_SPI1_Init+0x64>)
 8002f76:	f002 fb49 	bl	800560c <HAL_SPI_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f80:	f000 fc0c 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000026c 	.word	0x2000026c
 8002f8c:	40013000 	.word	0x40013000

08002f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f96:	f107 0308 	add.w	r3, r7, #8
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fac:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <MX_TIM1_Init+0x9c>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fb4:	2263      	movs	r2, #99	; 0x63
 8002fb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fd8:	4813      	ldr	r0, [pc, #76]	; (8003028 <MX_TIM1_Init+0x98>)
 8002fda:	f003 f8fb 	bl	80061d4 <HAL_TIM_Base_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fe4:	f000 fbda 	bl	800379c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	480c      	ldr	r0, [pc, #48]	; (8003028 <MX_TIM1_Init+0x98>)
 8002ff6:	f003 fb18 	bl	800662a <HAL_TIM_ConfigClockSource>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003000:	f000 fbcc 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800300c:	463b      	mov	r3, r7
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	; (8003028 <MX_TIM1_Init+0x98>)
 8003012:	f003 fd1f 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800301c:	f000 fbbe 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200002c4 	.word	0x200002c4
 800302c:	40010000 	.word	0x40010000

08003030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003044:	463b      	mov	r3, r7
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <MX_TIM2_Init+0x94>)
 800304e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003054:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <MX_TIM2_Init+0x94>)
 8003056:	2263      	movs	r2, #99	; 0x63
 8003058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_TIM2_Init+0x94>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000000-1;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <MX_TIM2_Init+0x94>)
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <MX_TIM2_Init+0x98>)
 8003064:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <MX_TIM2_Init+0x94>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <MX_TIM2_Init+0x94>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003072:	4814      	ldr	r0, [pc, #80]	; (80030c4 <MX_TIM2_Init+0x94>)
 8003074:	f003 f8ae 	bl	80061d4 <HAL_TIM_Base_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800307e:	f000 fb8d 	bl	800379c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	4619      	mov	r1, r3
 800308e:	480d      	ldr	r0, [pc, #52]	; (80030c4 <MX_TIM2_Init+0x94>)
 8003090:	f003 facb 	bl	800662a <HAL_TIM_ConfigClockSource>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800309a:	f000 fb7f 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030a6:	463b      	mov	r3, r7
 80030a8:	4619      	mov	r1, r3
 80030aa:	4806      	ldr	r0, [pc, #24]	; (80030c4 <MX_TIM2_Init+0x94>)
 80030ac:	f003 fcd2 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80030b6:	f000 fb71 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000030c 	.word	0x2000030c
 80030c8:	002dc6bf 	.word	0x002dc6bf

080030cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
 80030de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e0:	463b      	mov	r3, r7
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <MX_TIM3_Init+0x94>)
 80030ea:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <MX_TIM3_Init+0x98>)
 80030ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <MX_TIM3_Init+0x94>)
 80030f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80030f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <MX_TIM3_Init+0x94>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25000-1;
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <MX_TIM3_Init+0x94>)
 80030fe:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8003102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <MX_TIM3_Init+0x94>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <MX_TIM3_Init+0x94>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003110:	4813      	ldr	r0, [pc, #76]	; (8003160 <MX_TIM3_Init+0x94>)
 8003112:	f003 f85f 	bl	80061d4 <HAL_TIM_Base_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800311c:	f000 fb3e 	bl	800379c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	4619      	mov	r1, r3
 800312c:	480c      	ldr	r0, [pc, #48]	; (8003160 <MX_TIM3_Init+0x94>)
 800312e:	f003 fa7c 	bl	800662a <HAL_TIM_ConfigClockSource>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003138:	f000 fb30 	bl	800379c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003144:	463b      	mov	r3, r7
 8003146:	4619      	mov	r1, r3
 8003148:	4805      	ldr	r0, [pc, #20]	; (8003160 <MX_TIM3_Init+0x94>)
 800314a:	f003 fc83 	bl	8006a54 <HAL_TIMEx_MasterConfigSynchronization>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003154:	f000 fb22 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000354 	.word	0x20000354
 8003164:	40000400 	.word	0x40000400

08003168 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <MX_USART1_UART_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800318e:	220c      	movs	r2, #12
 8003190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 80031a0:	f003 fcda 	bl	8006b58 <HAL_UART_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031aa:	f000 faf7 	bl	800379c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	2000039c 	.word	0x2000039c
 80031b8:	40011000 	.word	0x40011000

080031bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	4b46      	ldr	r3, [pc, #280]	; (80032f0 <MX_GPIO_Init+0x134>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a45      	ldr	r2, [pc, #276]	; (80032f0 <MX_GPIO_Init+0x134>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <MX_GPIO_Init+0x134>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <MX_GPIO_Init+0x134>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a3e      	ldr	r2, [pc, #248]	; (80032f0 <MX_GPIO_Init+0x134>)
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <MX_GPIO_Init+0x134>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <MX_GPIO_Init+0x134>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <MX_GPIO_Init+0x134>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <MX_GPIO_Init+0x134>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MX_GPIO_Init+0x134>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a30      	ldr	r2, [pc, #192]	; (80032f0 <MX_GPIO_Init+0x134>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <MX_GPIO_Init+0x134>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 8003242:	2200      	movs	r2, #0
 8003244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003248:	482a      	ldr	r0, [pc, #168]	; (80032f4 <MX_GPIO_Init+0x138>)
 800324a:	f001 f959 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin|SD_CS_Pin, GPIO_PIN_SET);
 800324e:	2201      	movs	r2, #1
 8003250:	2107      	movs	r1, #7
 8003252:	4829      	ldr	r0, [pc, #164]	; (80032f8 <MX_GPIO_Init+0x13c>)
 8003254:	f001 f954 	bl	8004500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8003258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800325c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325e:	2301      	movs	r3, #1
 8003260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4820      	ldr	r0, [pc, #128]	; (80032f4 <MX_GPIO_Init+0x138>)
 8003272:	f000 ffa9 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8003276:	2301      	movs	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800327a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800327e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003280:	2301      	movs	r3, #1
 8003282:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	481c      	ldr	r0, [pc, #112]	; (80032fc <MX_GPIO_Init+0x140>)
 800328c:	f000 ff9c 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003290:	2310      	movs	r3, #16
 8003292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003294:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800329a:	2302      	movs	r3, #2
 800329c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	4815      	ldr	r0, [pc, #84]	; (80032fc <MX_GPIO_Init+0x140>)
 80032a6:	f000 ff8f 	bl	80041c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|SD_CS_Pin;
 80032aa:	2307      	movs	r3, #7
 80032ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	4619      	mov	r1, r3
 80032c0:	480d      	ldr	r0, [pc, #52]	; (80032f8 <MX_GPIO_Init+0x13c>)
 80032c2:	f000 ff81 	bl	80041c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2105      	movs	r1, #5
 80032ca:	2006      	movs	r0, #6
 80032cc:	f000 feb3 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80032d0:	2006      	movs	r0, #6
 80032d2:	f000 fecc 	bl	800406e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2105      	movs	r1, #5
 80032da:	200a      	movs	r0, #10
 80032dc:	f000 feab 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80032e0:	200a      	movs	r0, #10
 80032e2:	f000 fec4 	bl	800406e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032e6:	bf00      	nop
 80032e8:	3728      	adds	r7, #40	; 0x28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020000 	.word	0x40020000

08003300 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Trigger Timer Interrupt per 3 seconds */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a09      	ldr	r2, [pc, #36]	; (8003330 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d102      	bne.n	8003316 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer2Flag = 1;
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
	}
	if(htim == &htim3)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d102      	bne.n	8003324 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		timer3Flag = 1;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
	}
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	2000030c 	.word	0x2000030c
 8003334:	20002a4d 	.word	0x20002a4d
 8003338:	20000354 	.word	0x20000354
 800333c:	20002a4e 	.word	0x20002a4e

08003340 <Cmd_display>:

void Cmd_display(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	printf("Create file -----------------> mk    [filename] \r\n");
 8003344:	4814      	ldr	r0, [pc, #80]	; (8003398 <Cmd_display+0x58>)
 8003346:	f00a fddb 	bl	800df00 <puts>
	printf("Delete file -----------------> del   [filename] \r\n");
 800334a:	4814      	ldr	r0, [pc, #80]	; (800339c <Cmd_display+0x5c>)
 800334c:	f00a fdd8 	bl	800df00 <puts>
	printf("Read file -------------------> read  [filename] \r\n");
 8003350:	4813      	ldr	r0, [pc, #76]	; (80033a0 <Cmd_display+0x60>)
 8003352:	f00a fdd5 	bl	800df00 <puts>
	printf("Listing files ---------------> ls \r\n");
 8003356:	4813      	ldr	r0, [pc, #76]	; (80033a4 <Cmd_display+0x64>)
 8003358:	f00a fdd2 	bl	800df00 <puts>
	printf("Rx mode turn on -------------> ready \r\n");
 800335c:	4812      	ldr	r0, [pc, #72]	; (80033a8 <Cmd_display+0x68>)
 800335e:	f00a fdcf 	bl	800df00 <puts>
	printf("Rx mode turn off ------------> stop \r\n");
 8003362:	4812      	ldr	r0, [pc, #72]	; (80033ac <Cmd_display+0x6c>)
 8003364:	f00a fdcc 	bl	800df00 <puts>
	printf("Persist data to a file ------> rx    [filename] \r\n");
 8003368:	4811      	ldr	r0, [pc, #68]	; (80033b0 <Cmd_display+0x70>)
 800336a:	f00a fdc9 	bl	800df00 <puts>
	printf("Get current time ------------> rtc   [on/off]\r\n");
 800336e:	4811      	ldr	r0, [pc, #68]	; (80033b4 <Cmd_display+0x74>)
 8003370:	f00a fdc6 	bl	800df00 <puts>
	printf("Set Spreading Factor --------> sf    [number] \r\n");
 8003374:	4810      	ldr	r0, [pc, #64]	; (80033b8 <Cmd_display+0x78>)
 8003376:	f00a fdc3 	bl	800df00 <puts>
	printf("Set Bandwidth ---------------> bw    [kHz] \r\n");
 800337a:	4810      	ldr	r0, [pc, #64]	; (80033bc <Cmd_display+0x7c>)
 800337c:	f00a fdc0 	bl	800df00 <puts>
	printf("Set Coding Rate -------------> cr    [number] \r\n");
 8003380:	480f      	ldr	r0, [pc, #60]	; (80033c0 <Cmd_display+0x80>)
 8003382:	f00a fdbd 	bl	800df00 <puts>
	printf("Set Frequency ---------------> freq  [kHz] \r\n");
 8003386:	480f      	ldr	r0, [pc, #60]	; (80033c4 <Cmd_display+0x84>)
 8003388:	f00a fdba 	bl	800df00 <puts>
	printf("Reset SD Card ---------------> mount");
 800338c:	480e      	ldr	r0, [pc, #56]	; (80033c8 <Cmd_display+0x88>)
 800338e:	f00a fd49 	bl	800de24 <iprintf>
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	08011a00 	.word	0x08011a00
 800339c:	08011a34 	.word	0x08011a34
 80033a0:	08011a68 	.word	0x08011a68
 80033a4:	08011a9c 	.word	0x08011a9c
 80033a8:	08011ac0 	.word	0x08011ac0
 80033ac:	08011ae8 	.word	0x08011ae8
 80033b0:	08011b10 	.word	0x08011b10
 80033b4:	08011b44 	.word	0x08011b44
 80033b8:	08011b74 	.word	0x08011b74
 80033bc:	08011ba4 	.word	0x08011ba4
 80033c0:	08011bd4 	.word	0x08011bd4
 80033c4:	08011c04 	.word	0x08011c04
 80033c8:	08011c34 	.word	0x08011c34

080033cc <SD_init>:

void SD_init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	/* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	4967      	ldr	r1, [pc, #412]	; (8003570 <SD_init+0x1a4>)
 80033d4:	4867      	ldr	r0, [pc, #412]	; (8003574 <SD_init+0x1a8>)
 80033d6:	f007 f891 	bl	800a4fc <f_mount>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <SD_init+0x1ac>)
 80033e0:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <SD_init+0x1ac>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <SD_init+0x26>
		printf("error in mounting SD CARD... \r\n");
 80033ea:	4864      	ldr	r0, [pc, #400]	; (800357c <SD_init+0x1b0>)
 80033ec:	f00a fd88 	bl	800df00 <puts>
 80033f0:	e002      	b.n	80033f8 <SD_init+0x2c>
	else
		printf("SD CARD mounted successfully... \r\n");
 80033f2:	4863      	ldr	r0, [pc, #396]	; (8003580 <SD_init+0x1b4>)
 80033f4:	f00a fd84 	bl	800df00 <puts>
	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80033f8:	4a62      	ldr	r2, [pc, #392]	; (8003584 <SD_init+0x1b8>)
 80033fa:	4963      	ldr	r1, [pc, #396]	; (8003588 <SD_init+0x1bc>)
 80033fc:	485c      	ldr	r0, [pc, #368]	; (8003570 <SD_init+0x1a4>)
 80033fe:	f008 f924 	bl	800b64a <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8003402:	4b60      	ldr	r3, [pc, #384]	; (8003584 <SD_init+0x1b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	3b02      	subs	r3, #2
 800340a:	4a5e      	ldr	r2, [pc, #376]	; (8003584 <SD_init+0x1b8>)
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	8952      	ldrh	r2, [r2, #10]
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	4618      	mov	r0, r3
 8003416:	f7fd f87d 	bl	8000514 <__aeabi_ui2d>
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	4b5b      	ldr	r3, [pc, #364]	; (800358c <SD_init+0x1c0>)
 8003420:	f7fd f8f2 	bl	8000608 <__aeabi_dmul>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fbc4 	bl	8000bb8 <__aeabi_d2uiz>
 8003430:	4603      	mov	r3, r0
 8003432:	4a57      	ldr	r2, [pc, #348]	; (8003590 <SD_init+0x1c4>)
 8003434:	6013      	str	r3, [r2, #0]
	printf("SD CARD total size: \t%lu\r\n", total);
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <SD_init+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	4855      	ldr	r0, [pc, #340]	; (8003594 <SD_init+0x1c8>)
 800343e:	f00a fcf1 	bl	800de24 <iprintf>
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8003442:	4b50      	ldr	r3, [pc, #320]	; (8003584 <SD_init+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	895b      	ldrh	r3, [r3, #10]
 8003448:	461a      	mov	r2, r3
 800344a:	4b4f      	ldr	r3, [pc, #316]	; (8003588 <SD_init+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd f85e 	bl	8000514 <__aeabi_ui2d>
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	4b4b      	ldr	r3, [pc, #300]	; (800358c <SD_init+0x1c0>)
 800345e:	f7fd f8d3 	bl	8000608 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f7fd fba5 	bl	8000bb8 <__aeabi_d2uiz>
 800346e:	4603      	mov	r3, r0
 8003470:	4a49      	ldr	r2, [pc, #292]	; (8003598 <SD_init+0x1cc>)
 8003472:	6013      	str	r3, [r2, #0]
	printf("SD CARD free space: \t%lu\r\n", free_space);
 8003474:	4b48      	ldr	r3, [pc, #288]	; (8003598 <SD_init+0x1cc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	4848      	ldr	r0, [pc, #288]	; (800359c <SD_init+0x1d0>)
 800347c:	f00a fcd2 	bl	800de24 <iprintf>
	/* Creating/Reading a file */
	fresult = f_open(&file, "test.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003480:	2213      	movs	r2, #19
 8003482:	4947      	ldr	r1, [pc, #284]	; (80035a0 <SD_init+0x1d4>)
 8003484:	4847      	ldr	r0, [pc, #284]	; (80035a4 <SD_init+0x1d8>)
 8003486:	f007 f87f 	bl	800a588 <f_open>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b3a      	ldr	r3, [pc, #232]	; (8003578 <SD_init+0x1ac>)
 8003490:	701a      	strb	r2, [r3, #0]
	/* Writing text */
	fresult = f_puts("First line\n", &file);
 8003492:	4944      	ldr	r1, [pc, #272]	; (80035a4 <SD_init+0x1d8>)
 8003494:	4844      	ldr	r0, [pc, #272]	; (80035a8 <SD_init+0x1dc>)
 8003496:	f008 faaf 	bl	800b9f8 <f_puts>
 800349a:	4603      	mov	r3, r0
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <SD_init+0x1ac>)
 80034a0:	701a      	strb	r2, [r3, #0]
	/* Close file */
	fresult = f_close(&file);
 80034a2:	4840      	ldr	r0, [pc, #256]	; (80035a4 <SD_init+0x1d8>)
 80034a4:	f007 fdad 	bl	800b002 <f_close>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b32      	ldr	r3, [pc, #200]	; (8003578 <SD_init+0x1ac>)
 80034ae:	701a      	strb	r2, [r3, #0]
	/* Open file to read */
	fresult = f_open(&file, "test.txt", FA_READ);
 80034b0:	2201      	movs	r2, #1
 80034b2:	493b      	ldr	r1, [pc, #236]	; (80035a0 <SD_init+0x1d4>)
 80034b4:	483b      	ldr	r0, [pc, #236]	; (80035a4 <SD_init+0x1d8>)
 80034b6:	f007 f867 	bl	800a588 <f_open>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <SD_init+0x1ac>)
 80034c0:	701a      	strb	r2, [r3, #0]
	/* Read string from the file */
	f_read(&file, buffer, f_size(&file), &br);
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <SD_init+0x1d8>)
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <SD_init+0x1e0>)
 80034c8:	4939      	ldr	r1, [pc, #228]	; (80035b0 <SD_init+0x1e4>)
 80034ca:	4836      	ldr	r0, [pc, #216]	; (80035a4 <SD_init+0x1d8>)
 80034cc:	f007 fa28 	bl	800a920 <f_read>
	printf("%s\r\n", buffer);
 80034d0:	4937      	ldr	r1, [pc, #220]	; (80035b0 <SD_init+0x1e4>)
 80034d2:	4838      	ldr	r0, [pc, #224]	; (80035b4 <SD_init+0x1e8>)
 80034d4:	f00a fca6 	bl	800de24 <iprintf>
	/* Close file */
	fresult = f_close(&file);
 80034d8:	4832      	ldr	r0, [pc, #200]	; (80035a4 <SD_init+0x1d8>)
 80034da:	f007 fd92 	bl	800b002 <f_close>
 80034de:	4603      	mov	r3, r0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b25      	ldr	r3, [pc, #148]	; (8003578 <SD_init+0x1ac>)
 80034e4:	701a      	strb	r2, [r3, #0]

	/* Updating an existing file */
	fresult = f_open(&file, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80034e6:	2212      	movs	r2, #18
 80034e8:	492d      	ldr	r1, [pc, #180]	; (80035a0 <SD_init+0x1d4>)
 80034ea:	482e      	ldr	r0, [pc, #184]	; (80035a4 <SD_init+0x1d8>)
 80034ec:	f007 f84c 	bl	800a588 <f_open>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b20      	ldr	r3, [pc, #128]	; (8003578 <SD_init+0x1ac>)
 80034f6:	701a      	strb	r2, [r3, #0]
	/* Move to offset to the end to the file */
	fresult = f_lseek(&file, f_size(&file));
 80034f8:	4b2a      	ldr	r3, [pc, #168]	; (80035a4 <SD_init+0x1d8>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4829      	ldr	r0, [pc, #164]	; (80035a4 <SD_init+0x1d8>)
 8003500:	f007 fda9 	bl	800b056 <f_lseek>
 8003504:	4603      	mov	r3, r0
 8003506:	461a      	mov	r2, r3
 8003508:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <SD_init+0x1ac>)
 800350a:	701a      	strb	r2, [r3, #0]
	/* Writing text */
	fresult = f_puts("This is updated data and it should be in the end\n", &file);
 800350c:	4925      	ldr	r1, [pc, #148]	; (80035a4 <SD_init+0x1d8>)
 800350e:	482a      	ldr	r0, [pc, #168]	; (80035b8 <SD_init+0x1ec>)
 8003510:	f008 fa72 	bl	800b9f8 <f_puts>
 8003514:	4603      	mov	r3, r0
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <SD_init+0x1ac>)
 800351a:	701a      	strb	r2, [r3, #0]
	f_close(&file);
 800351c:	4821      	ldr	r0, [pc, #132]	; (80035a4 <SD_init+0x1d8>)
 800351e:	f007 fd70 	bl	800b002 <f_close>
	/* Open file to read */
	fresult = f_open(&file, "test.txt", FA_READ);
 8003522:	2201      	movs	r2, #1
 8003524:	491e      	ldr	r1, [pc, #120]	; (80035a0 <SD_init+0x1d4>)
 8003526:	481f      	ldr	r0, [pc, #124]	; (80035a4 <SD_init+0x1d8>)
 8003528:	f007 f82e 	bl	800a588 <f_open>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <SD_init+0x1ac>)
 8003532:	701a      	strb	r2, [r3, #0]
	/* Read string from the file */
	f_read(&file, buffer, f_size(&file), &br);
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <SD_init+0x1d8>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <SD_init+0x1e0>)
 800353a:	491d      	ldr	r1, [pc, #116]	; (80035b0 <SD_init+0x1e4>)
 800353c:	4819      	ldr	r0, [pc, #100]	; (80035a4 <SD_init+0x1d8>)
 800353e:	f007 f9ef 	bl	800a920 <f_read>
	printf("%s\r\n", buffer);
 8003542:	491b      	ldr	r1, [pc, #108]	; (80035b0 <SD_init+0x1e4>)
 8003544:	481b      	ldr	r0, [pc, #108]	; (80035b4 <SD_init+0x1e8>)
 8003546:	f00a fc6d 	bl	800de24 <iprintf>
	f_close(&file);
 800354a:	4816      	ldr	r0, [pc, #88]	; (80035a4 <SD_init+0x1d8>)
 800354c:	f007 fd59 	bl	800b002 <f_close>
	/* Remove files */
	fresult = f_unlink("test.txt");
 8003550:	4813      	ldr	r0, [pc, #76]	; (80035a0 <SD_init+0x1d4>)
 8003552:	f008 f92f 	bl	800b7b4 <f_unlink>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <SD_init+0x1ac>)
 800355c:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK) printf("test.txt removed successfully\r\n");
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <SD_init+0x1ac>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <SD_init+0x1a0>
 8003566:	4815      	ldr	r0, [pc, #84]	; (80035bc <SD_init+0x1f0>)
 8003568:	f00a fcca 	bl	800df00 <puts>
}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	0801196c 	.word	0x0801196c
 8003574:	20000468 	.word	0x20000468
 8003578:	200024d0 	.word	0x200024d0
 800357c:	08011970 	.word	0x08011970
 8003580:	08011990 	.word	0x08011990
 8003584:	200028d8 	.word	0x200028d8
 8003588:	200028dc 	.word	0x200028dc
 800358c:	3fe00000 	.word	0x3fe00000
 8003590:	200028e0 	.word	0x200028e0
 8003594:	080119b4 	.word	0x080119b4
 8003598:	200028e4 	.word	0x200028e4
 800359c:	080119d0 	.word	0x080119d0
 80035a0:	08011c5c 	.word	0x08011c5c
 80035a4:	200014a0 	.word	0x200014a0
 80035a8:	08011c68 	.word	0x08011c68
 80035ac:	200028d4 	.word	0x200028d4
 80035b0:	200024d4 	.word	0x200024d4
 80035b4:	08011730 	.word	0x08011730
 80035b8:	08011c74 	.word	0x08011c74
 80035bc:	08011ca8 	.word	0x08011ca8

080035c0 <init_Date_Time>:

void init_Date_Time()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	gTime.Hours = 0x14;
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <init_Date_Time+0x34>)
 80035c6:	2214      	movs	r2, #20
 80035c8:	701a      	strb	r2, [r3, #0]
	gTime.Minutes = 0x00;
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <init_Date_Time+0x34>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	705a      	strb	r2, [r3, #1]
	gTime.Seconds = 0x00;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <init_Date_Time+0x34>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	709a      	strb	r2, [r3, #2]
	gDate.Date = 0x26;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <init_Date_Time+0x38>)
 80035d8:	2226      	movs	r2, #38	; 0x26
 80035da:	709a      	strb	r2, [r3, #2]
	/* Get the RTC current Time */
	HAL_RTC_SetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80035dc:	2200      	movs	r2, #0
 80035de:	4905      	ldr	r1, [pc, #20]	; (80035f4 <init_Date_Time+0x34>)
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <init_Date_Time+0x3c>)
 80035e2:	f001 fd8a 	bl	80050fa <HAL_RTC_SetTime>
	/* Get the RTC current Date */
	HAL_RTC_SetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80035e6:	2200      	movs	r2, #0
 80035e8:	4903      	ldr	r1, [pc, #12]	; (80035f8 <init_Date_Time+0x38>)
 80035ea:	4804      	ldr	r0, [pc, #16]	; (80035fc <init_Date_Time+0x3c>)
 80035ec:	f001 fe7d 	bl	80052ea <HAL_RTC_SetDate>
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20002a38 	.word	0x20002a38
 80035f8:	20002a34 	.word	0x20002a34
 80035fc:	2000024c 	.word	0x2000024c

08003600 <get_Date_Time>:

void get_Date_Time(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003604:	2200      	movs	r2, #0
 8003606:	4905      	ldr	r1, [pc, #20]	; (800361c <get_Date_Time+0x1c>)
 8003608:	4805      	ldr	r0, [pc, #20]	; (8003620 <get_Date_Time+0x20>)
 800360a:	f001 fe10 	bl	800522e <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800360e:	2200      	movs	r2, #0
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <get_Date_Time+0x24>)
 8003612:	4803      	ldr	r0, [pc, #12]	; (8003620 <get_Date_Time+0x20>)
 8003614:	f001 feed 	bl	80053f2 <HAL_RTC_GetDate>
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20002a38 	.word	0x20002a38
 8003620:	2000024c 	.word	0x2000024c
 8003624:	20002a34 	.word	0x20002a34

08003628 <STM32_DIO0>:

bool STM32_DIO0(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	return (bool)HAL_GPIO_ReadPin(DIO0_GPIO_Port, DIO0_Pin);
 800362c:	2110      	movs	r1, #16
 800362e:	4805      	ldr	r0, [pc, #20]	; (8003644 <STM32_DIO0+0x1c>)
 8003630:	f000 ff4e 	bl	80044d0 <HAL_GPIO_ReadPin>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf14      	ite	ne
 800363a:	2301      	movne	r3, #1
 800363c:	2300      	moveq	r3, #0
 800363e:	b2db      	uxtb	r3, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40020000 	.word	0x40020000

08003648 <STM32_NRST>:

void STM32_NRST(bool val)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, (GPIO_PinState)val);
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	461a      	mov	r2, r3
 8003656:	2102      	movs	r1, #2
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <STM32_NRST+0x20>)
 800365a:	f000 ff51 	bl	8004500 <HAL_GPIO_WritePin>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40020400 	.word	0x40020400

0800366c <STM32_NSEL>:

void STM32_NSEL(bool val)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, (GPIO_PinState)val);
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	461a      	mov	r2, r3
 800367a:	2101      	movs	r1, #1
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <STM32_NSEL+0x20>)
 800367e:	f000 ff3f 	bl	8004500 <HAL_GPIO_WritePin>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40020400 	.word	0x40020400

08003690 <STM32_DelayUs>:

void STM32_DelayUs(uint32_t delay)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <STM32_DelayUs+0x2c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < delay);
 80036a0:	bf00      	nop
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <STM32_DelayUs+0x2c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d8f9      	bhi.n	80036a2 <STM32_DelayUs+0x12>
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200002c4 	.word	0x200002c4

080036c0 <STM32_SPI_Write>:

uint8_t STM32_SPI_Write(uint8_t* pTxData, uint8_t dataLen, uint32_t timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	460b      	mov	r3, r1
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	72fb      	strb	r3, [r7, #11]
	return (uint8_t)HAL_SPI_Transmit(&hspi1, pTxData, dataLen, timeout);
 80036ce:	7afb      	ldrb	r3, [r7, #11]
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	4804      	ldr	r0, [pc, #16]	; (80036e8 <STM32_SPI_Write+0x28>)
 80036d8:	f002 f821 	bl	800571e <HAL_SPI_Transmit>
 80036dc:	4603      	mov	r3, r0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000026c 	.word	0x2000026c

080036ec <STM32_SPI_Read>:

uint8_t STM32_SPI_Read(uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	460b      	mov	r3, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	72fb      	strb	r3, [r7, #11]
	return (uint8_t)HAL_SPI_Receive(&hspi1, pRxData, dataLen, timeout);
 80036fa:	7afb      	ldrb	r3, [r7, #11]
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	4804      	ldr	r0, [pc, #16]	; (8003714 <STM32_SPI_Read+0x28>)
 8003704:	f002 f94e 	bl	80059a4 <HAL_SPI_Receive>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000026c 	.word	0x2000026c

08003718 <STM32_SPI_WriteRead>:

uint8_t STM32_SPI_WriteRead(uint8_t* pTxData, uint8_t* pRxData, uint8_t dataLen, uint32_t timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
	uint8_t* rxbuff = (uint8_t*)malloc((dataLen) * sizeof(uint8_t));
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4618      	mov	r0, r3
 800372c:	f009 faf8 	bl	800cd20 <malloc>
 8003730:	4603      	mov	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]
	uint8_t ret;
	ret = (uint8_t)HAL_SPI_TransmitReceive(&hspi1, pTxData, rxbuff, dataLen, timeout);
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	b29a      	uxth	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	4810      	ldr	r0, [pc, #64]	; (8003784 <STM32_SPI_WriteRead+0x6c>)
 8003744:	f002 fa46 	bl	8005bd4 <HAL_SPI_TransmitReceive>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < dataLen - 1; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e00b      	b.n	800376a <STM32_SPI_WriteRead+0x52>
	{
		pRxData[i] = rxbuff[i + 1];
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	441a      	add	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	440b      	add	r3, r1
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLen - 1; i++)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3301      	adds	r3, #1
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	3b01      	subs	r3, #1
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	429a      	cmp	r2, r3
 8003772:	dbee      	blt.n	8003752 <STM32_SPI_WriteRead+0x3a>
	}
	free(rxbuff);
 8003774:	69b8      	ldr	r0, [r7, #24]
 8003776:	f009 fadb 	bl	800cd30 <free>
	return ret;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3720      	adds	r7, #32
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	2000026c 	.word	0x2000026c

08003788 <STM32_SPI_CheckState>:

uint8_t STM32_SPI_CheckState(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_SPI_GetState(&hspi1);
 800378c:	4802      	ldr	r0, [pc, #8]	; (8003798 <STM32_SPI_CheckState+0x10>)
 800378e:	f002 fbd1 	bl	8005f34 <HAL_SPI_GetState>
 8003792:	4603      	mov	r3, r0
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	2000026c 	.word	0x2000026c

0800379c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037a0:	b672      	cpsid	i
}
 80037a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <Error_Handler+0x8>
	...

080037a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_MspInit+0x4c>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_MspInit+0x4c>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	; 0x44
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_MspInit+0x4c>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_MspInit+0x4c>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_MspInit+0x4c>)
 80037d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_MspInit+0x4c>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003800:	f107 0308 	add.w	r3, r7, #8
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
 8003810:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <HAL_RTC_MspInit+0x50>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800381c:	2302      	movs	r3, #2
 800381e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003824:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	4618      	mov	r0, r3
 800382c:	f001 faf2 	bl	8004e14 <HAL_RCCEx_PeriphCLKConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003836:	f7ff ffb1 	bl	800379c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_RTC_MspInit+0x54>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40002800 	.word	0x40002800
 800384c:	42470e3c 	.word	0x42470e3c

08003850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <HAL_SPI_MspInit+0x84>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12b      	bne.n	80038ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 800387c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003880:	6453      	str	r3, [r2, #68]	; 0x44
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_SPI_MspInit+0x88>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038aa:	23e0      	movs	r3, #224	; 0xe0
 80038ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038ba:	2305      	movs	r3, #5
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	; (80038dc <HAL_SPI_MspInit+0x8c>)
 80038c6:	f000 fc7f 	bl	80041c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40013000 	.word	0x40013000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <HAL_TIM_Base_MspInit+0xa8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a24      	ldr	r2, [pc, #144]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800390e:	e036      	b.n	800397e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d116      	bne.n	8003948 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2104      	movs	r1, #4
 800393a:	201c      	movs	r0, #28
 800393c:	f000 fb7b 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003940:	201c      	movs	r0, #28
 8003942:	f000 fb94 	bl	800406e <HAL_NVIC_EnableIRQ>
}
 8003946:	e01a      	b.n	800397e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_TIM_Base_MspInit+0xb0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d115      	bne.n	800397e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_TIM_Base_MspInit+0xac>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2104      	movs	r1, #4
 8003972:	201d      	movs	r0, #29
 8003974:	f000 fb5f 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003978:	201d      	movs	r0, #29
 800397a:	f000 fb78 	bl	800406e <HAL_NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40023800 	.word	0x40023800
 8003990:	40000400 	.word	0x40000400

08003994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	; 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 0314 	add.w	r3, r7, #20
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <HAL_UART_MspInit+0x94>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d134      	bne.n	8003a20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039c0:	f043 0310 	orr.w	r3, r3, #16
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b19      	ldr	r3, [pc, #100]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a14      	ldr	r2, [pc, #80]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_UART_MspInit+0x98>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a00:	2307      	movs	r3, #7
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4809      	ldr	r0, [pc, #36]	; (8003a30 <HAL_UART_MspInit+0x9c>)
 8003a0c:	f000 fbdc 	bl	80041c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2106      	movs	r1, #6
 8003a14:	2025      	movs	r0, #37	; 0x25
 8003a16:	f000 fb0e 	bl	8004036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a1a:	2025      	movs	r0, #37	; 0x25
 8003a1c:	f000 fb27 	bl	800406e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a20:	bf00      	nop
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40011000 	.word	0x40011000
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40020000 	.word	0x40020000

08003a34 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <SDTimer_Handler+0x40>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <SDTimer_Handler+0x1c>
		Timer1--;
 8003a42:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <SDTimer_Handler+0x40>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <SDTimer_Handler+0x40>)
 8003a4e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <SDTimer_Handler+0x44>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <SDTimer_Handler+0x34>
		Timer2--;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <SDTimer_Handler+0x44>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <SDTimer_Handler+0x44>)
 8003a66:	701a      	strb	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20002a9d 	.word	0x20002a9d
 8003a78:	20002a9e 	.word	0x20002a9e

08003a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a80:	e7fe      	b.n	8003a80 <NMI_Handler+0x4>

08003a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a86:	e7fe      	b.n	8003a86 <HardFault_Handler+0x4>

08003a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <MemManage_Handler+0x4>

08003a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <BusFault_Handler+0x4>

08003a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <UsageFault_Handler+0x4>

08003a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <SysTick_Handler+0x30>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <SysTick_Handler+0x30>)
 8003ad4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <SysTick_Handler+0x30>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d904      	bls.n	8003aea <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <SysTick_Handler+0x30>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003ae6:	f7ff ffa5 	bl	8003a34 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aea:	f000 f985 	bl	8003df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20002a9c 	.word	0x20002a9c

08003af8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f000 fd19 	bl	8004534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8003b0a:	2010      	movs	r0, #16
 8003b0c:	f000 fd12 	bl	8004534 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <TIM2_IRQHandler+0x10>)
 8003b1a:	f002 fc96 	bl	800644a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000030c 	.word	0x2000030c

08003b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <TIM3_IRQHandler+0x10>)
 8003b2e:	f002 fc8c 	bl	800644a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000354 	.word	0x20000354

08003b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <USART1_IRQHandler+0x10>)
 8003b42:	f003 f909 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000039c 	.word	0x2000039c

08003b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return 1;
 8003b54:	2301      	movs	r3, #1
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <_kill>:

int _kill(int pid, int sig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b6a:	f00a fb3d 	bl	800e1e8 <__errno>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2216      	movs	r2, #22
 8003b72:	601a      	str	r2, [r3, #0]
  return -1;
 8003b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <_exit>:

void _exit (int status)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffe7 	bl	8003b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b92:	e7fe      	b.n	8003b92 <_exit+0x12>

08003b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e00a      	b.n	8003bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ba6:	f3af 8000 	nop.w
 8003baa:	4601      	mov	r1, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	60ba      	str	r2, [r7, #8]
 8003bb2:	b2ca      	uxtb	r2, r1
 8003bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	dbf0      	blt.n	8003ba6 <_read+0x12>
  }

  return len;
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	e009      	b.n	8003bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	60ba      	str	r2, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fee3 	bl	80019b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf1      	blt.n	8003be0 <_write+0x12>
  }
  return len;
 8003bfc:	687b      	ldr	r3, [r7, #4]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <_close>:

int _close(int file)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_isatty>:

int _isatty(int file)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c46:	2301      	movs	r3, #1
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f00a faa2 	bl	800e1e8 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20020000 	.word	0x20020000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	20002aa0 	.word	0x20002aa0
 8003cd8:	20002e30 	.word	0x20002e30

08003cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <SystemInit+0x20>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <SystemInit+0x20>)
 8003ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d04:	f7ff ffea 	bl	8003cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d0a:	490d      	ldr	r1, [pc, #52]	; (8003d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d10:	e002      	b.n	8003d18 <LoopCopyDataInit>

08003d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d16:	3304      	adds	r3, #4

08003d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d1c:	d3f9      	bcc.n	8003d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d20:	4c0a      	ldr	r4, [pc, #40]	; (8003d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d24:	e001      	b.n	8003d2a <LoopFillZerobss>

08003d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d28:	3204      	adds	r2, #4

08003d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d2c:	d3fb      	bcc.n	8003d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d2e:	f00a fa61 	bl	800e1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d32:	f7fd ff2f 	bl	8001b94 <main>
  bx  lr    
 8003d36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d40:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003d44:	080125d0 	.word	0x080125d0
  ldr r2, =_sbss
 8003d48:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8003d4c:	20002e30 	.word	0x20002e30

08003d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d50:	e7fe      	b.n	8003d50 <ADC_IRQHandler>
	...

08003d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d58:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <HAL_Init+0x40>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <HAL_Init+0x40>)
 8003d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_Init+0x40>)
 8003d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a07      	ldr	r2, [pc, #28]	; (8003d94 <HAL_Init+0x40>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	f000 f94f 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d82:	200f      	movs	r0, #15
 8003d84:	f000 f808 	bl	8003d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d88:	f7ff fd0e 	bl	80037a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40023c00 	.word	0x40023c00

08003d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_InitTick+0x54>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_InitTick+0x58>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f967 	bl	800408a <HAL_SYSTICK_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00e      	b.n	8003de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b0f      	cmp	r3, #15
 8003dca:	d80a      	bhi.n	8003de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd4:	f000 f92f 	bl	8004036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd8:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <HAL_InitTick+0x5c>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000044 	.word	0x20000044
 8003df0:	2000004c 	.word	0x2000004c
 8003df4:	20000048 	.word	0x20000048

08003df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x20>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_IncTick+0x24>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_IncTick+0x24>)
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000004c 	.word	0x2000004c
 8003e1c:	20002aa4 	.word	0x20002aa4

08003e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return uwTick;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_GetTick+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20002aa4 	.word	0x20002aa4

08003e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e40:	f7ff ffee 	bl	8003e20 <HAL_GetTick>
 8003e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e50:	d005      	beq.n	8003e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_Delay+0x44>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e5e:	bf00      	nop
 8003e60:	f7ff ffde 	bl	8003e20 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d8f7      	bhi.n	8003e60 <HAL_Delay+0x28>
  {
  }
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2000004c 	.word	0x2000004c

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	; (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff29 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff3e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff31 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff feb6 	bl	8003e20 <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d008      	beq.n	80040d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2280      	movs	r2, #128	; 0x80
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e052      	b.n	800417a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0216 	bic.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <HAL_DMA_Abort+0x62>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0208 	bic.w	r2, r2, #8
 8004112:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004124:	e013      	b.n	800414e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004126:	f7ff fe7b 	bl	8003e20 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b05      	cmp	r3, #5
 8004132:	d90c      	bls.n	800414e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e015      	b.n	800417a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e4      	bne.n	8004126 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004160:	223f      	movs	r2, #63	; 0x3f
 8004162:	409a      	lsls	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2280      	movs	r2, #128	; 0x80
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e00c      	b.n	80041ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2205      	movs	r2, #5
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b089      	sub	sp, #36	; 0x24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	2300      	movs	r3, #0
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	e159      	b.n	8004498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e4:	2201      	movs	r2, #1
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4013      	ands	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	f040 8148 	bne.w	8004492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f003 0303 	and.w	r3, r3, #3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d005      	beq.n	800421a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004216:	2b02      	cmp	r3, #2
 8004218:	d130      	bne.n	800427c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	2203      	movs	r2, #3
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4013      	ands	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004250:	2201      	movs	r2, #1
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0201 	and.w	r2, r3, #1
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d017      	beq.n	80042b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d123      	bne.n	800430c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	220f      	movs	r2, #15
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	08da      	lsrs	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3208      	adds	r2, #8
 8004306:	69b9      	ldr	r1, [r7, #24]
 8004308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2203      	movs	r2, #3
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0203 	and.w	r2, r3, #3
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80a2 	beq.w	8004492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	4b57      	ldr	r3, [pc, #348]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a56      	ldr	r2, [pc, #344]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <HAL_GPIO_Init+0x2e8>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436a:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_GPIO_Init+0x2ec>)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	3302      	adds	r3, #2
 8004372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	220f      	movs	r2, #15
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a49      	ldr	r2, [pc, #292]	; (80044b8 <HAL_GPIO_Init+0x2f0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_GPIO_Init+0x202>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a48      	ldr	r2, [pc, #288]	; (80044bc <HAL_GPIO_Init+0x2f4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_GPIO_Init+0x1fe>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a47      	ldr	r2, [pc, #284]	; (80044c0 <HAL_GPIO_Init+0x2f8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_GPIO_Init+0x1fa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a46      	ldr	r2, [pc, #280]	; (80044c4 <HAL_GPIO_Init+0x2fc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_Init+0x1f6>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a45      	ldr	r2, [pc, #276]	; (80044c8 <HAL_GPIO_Init+0x300>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_GPIO_Init+0x1f2>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e008      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043be:	2303      	movs	r3, #3
 80043c0:	e004      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_GPIO_Init+0x204>
 80043ca:	2300      	movs	r3, #0
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f002 0203 	and.w	r2, r2, #3
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	4093      	lsls	r3, r2
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043dc:	4935      	ldr	r1, [pc, #212]	; (80044b4 <HAL_GPIO_Init+0x2ec>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <HAL_GPIO_Init+0x304>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a2f      	ldr	r2, [pc, #188]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a24      	ldr	r2, [pc, #144]	; (80044cc <HAL_GPIO_Init+0x304>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_GPIO_Init+0x304>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004468:	4b18      	ldr	r3, [pc, #96]	; (80044cc <HAL_GPIO_Init+0x304>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800448c:	4a0f      	ldr	r2, [pc, #60]	; (80044cc <HAL_GPIO_Init+0x304>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	f67f aea2 	bls.w	80041e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40013c00 	.word	0x40013c00

080044d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e001      	b.n	80044f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800451c:	e003      	b.n	8004526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	041a      	lsls	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	619a      	str	r2, [r3, #24]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004540:	695a      	ldr	r2, [r3, #20]
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d006      	beq.n	8004558 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800454a:	4a05      	ldr	r2, [pc, #20]	; (8004560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004550:	88fb      	ldrh	r3, [r7, #6]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fa40 	bl	80019d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40013c00 	.word	0x40013c00

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e267      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b85      	ldr	r3, [pc, #532]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b82      	ldr	r3, [pc, #520]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b7e      	ldr	r3, [pc, #504]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b76      	ldr	r3, [pc, #472]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b70      	ldr	r3, [pc, #448]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6f      	ldr	r2, [pc, #444]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b69      	ldr	r3, [pc, #420]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b66      	ldr	r3, [pc, #408]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7ff fc00 	bl	8003e20 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7ff fbfc 	bl	8003e20 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e207      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b5b      	ldr	r3, [pc, #364]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7ff fbec 	bl	8003e20 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7ff fbe8 	bl	8003e20 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f3      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b51      	ldr	r3, [pc, #324]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	4b4a      	ldr	r3, [pc, #296]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b47      	ldr	r3, [pc, #284]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b44      	ldr	r3, [pc, #272]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b41      	ldr	r3, [pc, #260]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c7      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4937      	ldr	r1, [pc, #220]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_RCC_OscConfig+0x244>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7ff fba1 	bl	8003e20 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e2:	f7ff fb9d 	bl	8003e20 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a8      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4925      	ldr	r1, [pc, #148]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <HAL_RCC_OscConfig+0x244>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7ff fb80 	bl	8003e20 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004724:	f7ff fb7c 	bl	8003e20 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e187      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HAL_RCC_OscConfig+0x248>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7ff fb60 	bl	8003e20 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7ff fb5c 	bl	8003e20 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e167      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_OscConfig+0x248>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7ff fb49 	bl	8003e20 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e00e      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004792:	f7ff fb45 	bl	8003e20 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d907      	bls.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e150      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	42470000 	.word	0x42470000
 80047ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ea      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8097 	beq.w	80048f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b81      	ldr	r3, [pc, #516]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b7d      	ldr	r3, [pc, #500]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a7c      	ldr	r2, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b7a      	ldr	r3, [pc, #488]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b77      	ldr	r3, [pc, #476]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b74      	ldr	r3, [pc, #464]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7ff fb05 	bl	8003e20 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7ff fb01 	bl	8003e20 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e10c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <HAL_RCC_OscConfig+0x474>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x2ea>
 8004840:	4b64      	ldr	r3, [pc, #400]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a63      	ldr	r2, [pc, #396]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x30c>
 8004856:	4b5f      	ldr	r3, [pc, #380]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a5e      	ldr	r2, [pc, #376]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a5b      	ldr	r2, [pc, #364]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 8004870:	4b58      	ldr	r3, [pc, #352]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a57      	ldr	r2, [pc, #348]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
 800487c:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a54      	ldr	r2, [pc, #336]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7ff fac6 	bl	8003e20 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7ff fac2 	bl	8003e20 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0cb      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <HAL_RCC_OscConfig+0x334>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7ff fab0 	bl	8003e20 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7ff faac 	bl	8003e20 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b5      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004902:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d05c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d141      	bne.n	800499a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b31      	ldr	r3, [pc, #196]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7ff fa80 	bl	8003e20 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7ff fa7c 	bl	8003e20 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e087      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	491b      	ldr	r1, [pc, #108]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7ff fa55 	bl	8003e20 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497a:	f7ff fa51 	bl	8003e20 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e05c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x416>
 8004998:	e054      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7ff fa3e 	bl	8003e20 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a8:	f7ff fa3a 	bl	8003e20 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x444>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e038      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d028      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d111      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7ff f96c 	bl	8003e20 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7ff f968 	bl	8003e20 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f821 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff f8cc 	bl	8003d98 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	08011d3c 	.word	0x08011d3c
 8004c18:	20000044 	.word	0x20000044
 8004c1c:	20000048 	.word	0x20000048

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b090      	sub	sp, #64	; 0x40
 8004c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c30:	2300      	movs	r3, #0
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d00d      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x40>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	f200 80a1 	bhi.w	8004d8c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c52:	e09b      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c58:	e09b      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c5a:	4b53      	ldr	r3, [pc, #332]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c5e:	e098      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c60:	4b4f      	ldr	r3, [pc, #316]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6a:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d028      	beq.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	627a      	str	r2, [r7, #36]	; 0x24
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4b47      	ldr	r3, [pc, #284]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c8c:	fb03 f201 	mul.w	r2, r3, r1
 8004c90:	2300      	movs	r3, #0
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	4a43      	ldr	r2, [pc, #268]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c9a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca6:	4413      	add	r3, r2
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2200      	movs	r2, #0
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	61fa      	str	r2, [r7, #28]
 8004cb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cba:	f7fb ffed 	bl	8000c98 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc6:	e053      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	617a      	str	r2, [r7, #20]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cda:	f04f 0b00 	mov.w	fp, #0
 8004cde:	4652      	mov	r2, sl
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	0159      	lsls	r1, r3, #5
 8004cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf0:	0150      	lsls	r0, r2, #5
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cfa:	eb63 090b 	sbc.w	r9, r3, fp
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d12:	ebb2 0408 	subs.w	r4, r2, r8
 8004d16:	eb63 0509 	sbc.w	r5, r3, r9
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	00eb      	lsls	r3, r5, #3
 8004d24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d28:	00e2      	lsls	r2, r4, #3
 8004d2a:	4614      	mov	r4, r2
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	eb14 030a 	adds.w	r3, r4, sl
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	eb45 030b 	adc.w	r3, r5, fp
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d46:	4629      	mov	r1, r5
 8004d48:	028b      	lsls	r3, r1, #10
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d50:	4621      	mov	r1, r4
 8004d52:	028a      	lsls	r2, r1, #10
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d64:	f7fb ff98 	bl	8000c98 <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	0c1b      	lsrs	r3, r3, #16
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d8a:	e002      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3740      	adds	r7, #64	; 0x40
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	00f42400 	.word	0x00f42400
 8004da8:	017d7840 	.word	0x017d7840

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000044 	.word	0x20000044

08004dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	; (8004de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	08011d4c 	.word	0x08011d4c

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004df0:	f7ff ffdc 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0b5b      	lsrs	r3, r3, #13
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	; (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08011d4c 	.word	0x08011d4c

08004e14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d038      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e3c:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e42:	f7fe ffed 	bl	8003e20 <HAL_GetTick>
 8004e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e4a:	f7fe ffe9 	bl	8003e20 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e0bd      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e5c:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	071b      	lsls	r3, r3, #28
 8004e7a:	495a      	ldr	r1, [pc, #360]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e82:	4b57      	ldr	r3, [pc, #348]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fe ffca 	bl	8003e20 <HAL_GetTick>
 8004e8c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e90:	f7fe ffc6 	bl	8003e20 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e09a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ea2:	4b50      	ldr	r3, [pc, #320]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8083 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4b48      	ldr	r3, [pc, #288]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	4a47      	ldr	r2, [pc, #284]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eca:	6413      	str	r3, [r2, #64]	; 0x40
 8004ecc:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ed8:	4b43      	ldr	r3, [pc, #268]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a42      	ldr	r2, [pc, #264]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee4:	f7fe ff9c 	bl	8003e20 <HAL_GetTick>
 8004ee8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eec:	f7fe ff98 	bl	8003e20 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e06c      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004efe:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0a:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d02f      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d028      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f28:	4b2e      	ldr	r3, [pc, #184]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f30:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f3e:	4a29      	ldr	r2, [pc, #164]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d114      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe ff66 	bl	8003e20 <HAL_GetTick>
 8004f54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	e00a      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fe ff62 	bl	8003e20 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e034      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0ee      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f86:	d10d      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f88:	4b16      	ldr	r3, [pc, #88]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9c:	4911      	ldr	r1, [pc, #68]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fae:	6093      	str	r3, [r2, #8]
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbc:	4909      	ldr	r1, [pc, #36]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7d1a      	ldrb	r2, [r3, #20]
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fd4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	42470068 	.word	0x42470068
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42470e40 	.word	0x42470e40
 8004ff0:	424711e0 	.word	0x424711e0

08004ff4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e073      	b.n	80050f2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7f5b      	ldrb	r3, [r3, #29]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7fe fbec 	bl	80037f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b10      	cmp	r3, #16
 8005032:	d055      	beq.n	80050e0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	22ca      	movs	r2, #202	; 0xca
 800503a:	625a      	str	r2, [r3, #36]	; 0x24
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2253      	movs	r2, #83	; 0x53
 8005042:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fa49 	bl	80054dc <RTC_EnterInitMode>
 800504a:	4603      	mov	r3, r0
 800504c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d12c      	bne.n	80050ae <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005066:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6919      	ldr	r1, [r3, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	041a      	lsls	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fa50 	bl	800554a <RTC_ExitInitMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d110      	bne.n	80050d6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050c2:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24
 80050de:	e001      	b.n	80050e4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050fa:	b590      	push	{r4, r7, lr}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	7f1b      	ldrb	r3, [r3, #28]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_RTC_SetTime+0x1c>
 8005112:	2302      	movs	r3, #2
 8005114:	e087      	b.n	8005226 <HAL_RTC_SetTime+0x12c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2202      	movs	r2, #2
 8005120:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d126      	bne.n	8005176 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2200      	movs	r2, #0
 800513a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fa27 	bl	8005594 <RTC_ByteToBcd2>
 8005146:	4603      	mov	r3, r0
 8005148:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fa20 	bl	8005594 <RTC_ByteToBcd2>
 8005154:	4603      	mov	r3, r0
 8005156:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005158:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	789b      	ldrb	r3, [r3, #2]
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fa18 	bl	8005594 <RTC_ByteToBcd2>
 8005164:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005166:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	78db      	ldrb	r3, [r3, #3]
 800516e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e018      	b.n	80051a8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005196:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800519c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	78db      	ldrb	r3, [r3, #3]
 80051a2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	22ca      	movs	r2, #202	; 0xca
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2253      	movs	r2, #83	; 0x53
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f98f 	bl	80054dc <RTC_EnterInitMode>
 80051be:	4603      	mov	r3, r0
 80051c0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80051c2:	7cfb      	ldrb	r3, [r7, #19]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d120      	bne.n	800520a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80051d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f9a2 	bl	800554a <RTC_ExitInitMode>
 8005206:	4603      	mov	r3, r0
 8005208:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	22ff      	movs	r2, #255	; 0xff
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	771a      	strb	r2, [r3, #28]

  return status;
 8005224:	7cfb      	ldrb	r3, [r7, #19]
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bd90      	pop	{r4, r7, pc}

0800522e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b086      	sub	sp, #24
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005260:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005264:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	0c1b      	lsrs	r3, r3, #16
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	0a1b      	lsrs	r3, r3, #8
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005280:	b2da      	uxtb	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	0d9b      	lsrs	r3, r3, #22
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d11a      	bne.n	80052e0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f98e 	bl	80055d0 <RTC_Bcd2ToByte>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	785b      	ldrb	r3, [r3, #1]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f985 	bl	80055d0 <RTC_Bcd2ToByte>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	789b      	ldrb	r3, [r3, #2]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f97c 	bl	80055d0 <RTC_Bcd2ToByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80052ea:	b590      	push	{r4, r7, lr}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	7f1b      	ldrb	r3, [r3, #28]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_RTC_SetDate+0x1c>
 8005302:	2302      	movs	r3, #2
 8005304:	e071      	b.n	80053ea <HAL_RTC_SetDate+0x100>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2202      	movs	r2, #2
 8005310:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10e      	bne.n	8005336 <HAL_RTC_SetDate+0x4c>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	b2db      	uxtb	r3, r3
 800532e:	330a      	adds	r3, #10
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d11c      	bne.n	8005376 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	78db      	ldrb	r3, [r3, #3]
 8005340:	4618      	mov	r0, r3
 8005342:	f000 f927 	bl	8005594 <RTC_ByteToBcd2>
 8005346:	4603      	mov	r3, r0
 8005348:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f920 	bl	8005594 <RTC_ByteToBcd2>
 8005354:	4603      	mov	r3, r0
 8005356:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005358:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	789b      	ldrb	r3, [r3, #2]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f918 	bl	8005594 <RTC_ByteToBcd2>
 8005364:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005366:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	e00e      	b.n	8005394 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005382:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005388:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	22ca      	movs	r2, #202	; 0xca
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2253      	movs	r2, #83	; 0x53
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f899 	bl	80054dc <RTC_EnterInitMode>
 80053aa:	4603      	mov	r3, r0
 80053ac:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10c      	bne.n	80053ce <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053c2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f8c0 	bl	800554a <RTC_ExitInitMode>
 80053ca:	4603      	mov	r3, r0
 80053cc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	22ff      	movs	r2, #255	; 0xff
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]

  return status;
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}

080053f2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800540c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005410:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	0b5b      	lsrs	r3, r3, #13
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	b2da      	uxtb	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11a      	bne.n	8005486 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f8bb 	bl	80055d0 <RTC_Bcd2ToByte>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f8b2 	bl	80055d0 <RTC_Bcd2ToByte>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	789b      	ldrb	r3, [r3, #2]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f8a9 	bl	80055d0 <RTC_Bcd2ToByte>
 800547e:	4603      	mov	r3, r0
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0d      	ldr	r2, [pc, #52]	; (80054d8 <HAL_RTC_WaitForSynchro+0x48>)
 80054a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a4:	f7fe fcbc 	bl	8003e20 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054aa:	e009      	b.n	80054c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ac:	f7fe fcb8 	bl	8003e20 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ba:	d901      	bls.n	80054c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e007      	b.n	80054d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0ee      	beq.n	80054ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	00013f5f 	.word	0x00013f5f

080054dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d122      	bne.n	8005540 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005508:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800550a:	f7fe fc89 	bl	8003e20 <HAL_GetTick>
 800550e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005510:	e00c      	b.n	800552c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005512:	f7fe fc85 	bl	8003e20 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005520:	d904      	bls.n	800552c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2204      	movs	r2, #4
 8005526:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <RTC_EnterInitMode+0x64>
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d1e8      	bne.n	8005512 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005564:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff8b 	bl	8005490 <HAL_RTC_WaitForSynchro>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d004      	beq.n	800558a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2204      	movs	r2, #4
 8005584:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80055a2:	e005      	b.n	80055b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	3b0a      	subs	r3, #10
 80055ae:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b09      	cmp	r3, #9
 80055b4:	d8f6      	bhi.n	80055a4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	b2db      	uxtb	r3, r3
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	091b      	lsrs	r3, r3, #4
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	005b      	lsls	r3, r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	b2db      	uxtb	r3, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e07b      	b.n	8005716 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d108      	bne.n	8005638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800562e:	d009      	beq.n	8005644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	61da      	str	r2, [r3, #28]
 8005636:	e005      	b.n	8005644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fe f8f6 	bl	8003850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c8:	ea42 0103 	orr.w	r1, r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	f003 0104 	and.w	r1, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	f003 0210 	and.w	r2, r3, #16
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005704:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b088      	sub	sp, #32
 8005722:	af00      	add	r7, sp, #0
 8005724:	60f8      	str	r0, [r7, #12]
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	603b      	str	r3, [r7, #0]
 800572a:	4613      	mov	r3, r2
 800572c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_SPI_Transmit+0x22>
 800573c:	2302      	movs	r3, #2
 800573e:	e12d      	b.n	800599c <HAL_SPI_Transmit+0x27e>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005748:	f7fe fb6a 	bl	8003e20 <HAL_GetTick>
 800574c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b01      	cmp	r3, #1
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005762:	e116      	b.n	8005992 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Transmit+0x52>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005774:	e10d      	b.n	8005992 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2203      	movs	r2, #3
 800577a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	88fa      	ldrh	r2, [r7, #6]
 800578e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d10f      	bne.n	80057de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d007      	beq.n	80057fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005804:	d14f      	bne.n	80058a6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <HAL_SPI_Transmit+0xf6>
 800580e:	8afb      	ldrh	r3, [r7, #22]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d142      	bne.n	800589a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	881a      	ldrh	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	1c9a      	adds	r2, r3, #2
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005838:	e02f      	b.n	800589a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b02      	cmp	r3, #2
 8005846:	d112      	bne.n	800586e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	86da      	strh	r2, [r3, #54]	; 0x36
 800586c:	e015      	b.n	800589a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800586e:	f7fe fad7 	bl	8003e20 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d803      	bhi.n	8005886 <HAL_SPI_Transmit+0x168>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005884:	d102      	bne.n	800588c <HAL_SPI_Transmit+0x16e>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005898:	e07b      	b.n	8005992 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ca      	bne.n	800583a <HAL_SPI_Transmit+0x11c>
 80058a4:	e050      	b.n	8005948 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Transmit+0x196>
 80058ae:	8afb      	ldrh	r3, [r7, #22]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d144      	bne.n	800593e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058da:	e030      	b.n	800593e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d113      	bne.n	8005912 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	7812      	ldrb	r2, [r2, #0]
 80058f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005910:	e015      	b.n	800593e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005912:	f7fe fa85 	bl	8003e20 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d803      	bhi.n	800592a <HAL_SPI_Transmit+0x20c>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005928:	d102      	bne.n	8005930 <HAL_SPI_Transmit+0x212>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800593c:	e029      	b.n	8005992 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1c9      	bne.n	80058dc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fbed 	bl	800612c <SPI_EndRxTxTransaction>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005966:	2300      	movs	r3, #0
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e003      	b.n	8005992 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800599a:	7ffb      	ldrb	r3, [r7, #31]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d002      	beq.n	80059ca <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80059c4:	2302      	movs	r3, #2
 80059c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059c8:	e0fb      	b.n	8005bc2 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d112      	bne.n	80059fa <HAL_SPI_Receive+0x56>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10e      	bne.n	80059fa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2204      	movs	r2, #4
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059e4:	88fa      	ldrh	r2, [r7, #6]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4613      	mov	r3, r2
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f8ef 	bl	8005bd4 <HAL_SPI_TransmitReceive>
 80059f6:	4603      	mov	r3, r0
 80059f8:	e0e8      	b.n	8005bcc <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_SPI_Receive+0x64>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0e1      	b.n	8005bcc <HAL_SPI_Receive+0x228>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a10:	f7fe fa06 	bl	8003e20 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Receive+0x7e>
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a26:	e0cc      	b.n	8005bc2 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	88fa      	ldrh	r2, [r7, #6]
 8005a40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	88fa      	ldrh	r2, [r7, #6]
 8005a46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6e:	d10f      	bne.n	8005a90 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d007      	beq.n	8005aae <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d16a      	bne.n	8005b8c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ab6:	e032      	b.n	8005b1e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d115      	bne.n	8005af2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f103 020c 	add.w	r2, r3, #12
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af0:	e015      	b.n	8005b1e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af2:	f7fe f995 	bl	8003e20 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d803      	bhi.n	8005b0a <HAL_SPI_Receive+0x166>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b08:	d102      	bne.n	8005b10 <HAL_SPI_Receive+0x16c>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d106      	bne.n	8005b1e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b1c:	e051      	b.n	8005bc2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1c7      	bne.n	8005ab8 <HAL_SPI_Receive+0x114>
 8005b28:	e035      	b.n	8005b96 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d113      	bne.n	8005b60 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	b292      	uxth	r2, r2
 8005b44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	1c9a      	adds	r2, r3, #2
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b5e:	e015      	b.n	8005b8c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b60:	f7fe f95e 	bl	8003e20 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d803      	bhi.n	8005b78 <HAL_SPI_Receive+0x1d4>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d102      	bne.n	8005b7e <HAL_SPI_Receive+0x1da>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005b8a:	e01a      	b.n	8005bc2 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1c9      	bne.n	8005b2a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 fa60 	bl	8006060 <SPI_EndRxTransaction>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
 8005bb8:	e003      	b.n	8005bc2 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005be2:	2301      	movs	r3, #1
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_SPI_TransmitReceive+0x26>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e198      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x358>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c02:	f7fe f90d 	bl	8003e20 <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d00f      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x70>
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2a:	d107      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d103      	bne.n	8005c3c <HAL_SPI_TransmitReceive+0x68>
 8005c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d003      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c42:	e16d      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x82>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x82>
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c5c:	e160      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	d003      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2205      	movs	r2, #5
 8005c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	887a      	ldrh	r2, [r7, #2]
 8005c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	887a      	ldrh	r2, [r7, #2]
 8005c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	887a      	ldrh	r2, [r7, #2]
 8005c9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d007      	beq.n	8005cc6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cce:	d17c      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_SPI_TransmitReceive+0x10a>
 8005cd8:	8b7b      	ldrh	r3, [r7, #26]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d16a      	bne.n	8005db4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	1c9a      	adds	r2, r3, #2
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d02:	e057      	b.n	8005db4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d11b      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x176>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d016      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x176>
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d113      	bne.n	8005d4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	881a      	ldrh	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	1c9a      	adds	r2, r3, #2
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d119      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x1b8>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d014      	beq.n	8005d8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	b292      	uxth	r2, r2
 8005d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d8c:	f7fe f848 	bl	8003e20 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d80b      	bhi.n	8005db4 <HAL_SPI_TransmitReceive+0x1e0>
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da2:	d007      	beq.n	8005db4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005db2:	e0b5      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1a2      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x130>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d19d      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x130>
 8005dc8:	e080      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_SPI_TransmitReceive+0x204>
 8005dd2:	8b7b      	ldrh	r3, [r7, #26]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d16f      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	330c      	adds	r3, #12
 8005de2:	7812      	ldrb	r2, [r2, #0]
 8005de4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfe:	e05b      	b.n	8005eb8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11c      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x274>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d017      	beq.n	8005e48 <HAL_SPI_TransmitReceive+0x274>
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d114      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	330c      	adds	r3, #12
 8005e28:	7812      	ldrb	r2, [r2, #0]
 8005e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d119      	bne.n	8005e8a <HAL_SPI_TransmitReceive+0x2b6>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d014      	beq.n	8005e8a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e86:	2301      	movs	r3, #1
 8005e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e8a:	f7fd ffc9 	bl	8003e20 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d803      	bhi.n	8005ea2 <HAL_SPI_TransmitReceive+0x2ce>
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_TransmitReceive+0x2d4>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d107      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005eb6:	e033      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d19e      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x22c>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d199      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f92b 	bl	800612c <SPI_EndRxTxTransaction>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ee8:	e01a      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e003      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3730      	adds	r7, #48	; 0x30
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f42:	b2db      	uxtb	r3, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f60:	f7fd ff5e 	bl	8003e20 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f70:	f7fd ff56 	bl	8003e20 <HAL_GetTick>
 8005f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f76:	4b39      	ldr	r3, [pc, #228]	; (800605c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	015b      	lsls	r3, r3, #5
 8005f7c:	0d1b      	lsrs	r3, r3, #20
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f86:	e054      	b.n	8006032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8e:	d050      	beq.n	8006032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f90:	f7fd ff46 	bl	8003e20 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d902      	bls.n	8005fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d13d      	bne.n	8006022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fbe:	d111      	bne.n	8005fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc8:	d004      	beq.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	d107      	bne.n	8005fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fec:	d10f      	bne.n	800600e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800600c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e017      	b.n	8006052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	3b01      	subs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4013      	ands	r3, r2
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	429a      	cmp	r2, r3
 8006040:	bf0c      	ite	eq
 8006042:	2301      	moveq	r3, #1
 8006044:	2300      	movne	r3, #0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	429a      	cmp	r2, r3
 800604e:	d19b      	bne.n	8005f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3720      	adds	r7, #32
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000044 	.word	0x20000044

08006060 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006074:	d111      	bne.n	800609a <SPI_EndRxTransaction+0x3a>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607e:	d004      	beq.n	800608a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d107      	bne.n	800609a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a2:	d12a      	bne.n	80060fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d012      	beq.n	80060d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2180      	movs	r1, #128	; 0x80
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff ff49 	bl	8005f50 <SPI_WaitFlagStateUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d02d      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e026      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	2101      	movs	r1, #1
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff ff36 	bl	8005f50 <SPI_WaitFlagStateUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	f043 0220 	orr.w	r2, r3, #32
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e013      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	2101      	movs	r1, #1
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff23 	bl	8005f50 <SPI_WaitFlagStateUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e000      	b.n	8006122 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2201      	movs	r2, #1
 8006140:	2102      	movs	r1, #2
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff ff04 	bl	8005f50 <SPI_WaitFlagStateUntilTimeout>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	f043 0220 	orr.w	r2, r3, #32
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e032      	b.n	80061c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <SPI_EndRxTxTransaction+0xa0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1b      	ldr	r2, [pc, #108]	; (80061d0 <SPI_EndRxTxTransaction+0xa4>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	0d5b      	lsrs	r3, r3, #21
 800616a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617c:	d112      	bne.n	80061a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fee1 	bl	8005f50 <SPI_WaitFlagStateUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d016      	beq.n	80061c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006198:	f043 0220 	orr.w	r2, r3, #32
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e00f      	b.n	80061c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3b01      	subs	r3, #1
 80061ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d0f2      	beq.n	80061a4 <SPI_EndRxTxTransaction+0x78>
 80061be:	e000      	b.n	80061c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80061c0:	bf00      	nop
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000044 	.word	0x20000044
 80061d0:	165e9f81 	.word	0x165e9f81

080061d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e041      	b.n	800626a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fd fb70 	bl	80038e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f000 faf8 	bl	8006808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d001      	beq.n	800628c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e03c      	b.n	8006306 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_TIM_Base_Start+0xa0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIM_Base_Start+0x5c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a6:	d013      	beq.n	80062d0 <HAL_TIM_Base_Start+0x5c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIM_Base_Start+0xa4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIM_Base_Start+0x5c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a19      	ldr	r2, [pc, #100]	; (800631c <HAL_TIM_Base_Start+0xa8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIM_Base_Start+0x5c>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIM_Base_Start+0xac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIM_Base_Start+0x5c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_Base_Start+0xb0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d010      	beq.n	8006304 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	e007      	b.n	8006304 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40014000 	.word	0x40014000

08006328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	d001      	beq.n	8006340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e044      	b.n	80063ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1e      	ldr	r2, [pc, #120]	; (80063d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d013      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <HAL_TIM_Base_Start_IT+0xb4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a19      	ldr	r2, [pc, #100]	; (80063e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x6c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIM_Base_Start_IT+0x6c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d111      	bne.n	80063b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d010      	beq.n	80063c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b6:	e007      	b.n	80063c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 0201 	orr.w	r2, r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40014000 	.word	0x40014000

080063ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6a1a      	ldr	r2, [r3, #32]
 800640a:	f241 1311 	movw	r3, #4369	; 0x1111
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10f      	bne.n	8006434 <HAL_TIM_Base_Stop_IT+0x48>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	f240 4344 	movw	r3, #1092	; 0x444
 800641e:	4013      	ands	r3, r2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <HAL_TIM_Base_Stop_IT+0x48>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01b      	beq.n	80064ae <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0202 	mvn.w	r2, #2
 800647e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f999 	bl	80067cc <HAL_TIM_IC_CaptureCallback>
 800649a:	e005      	b.n	80064a8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f98b 	bl	80067b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f99c 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01b      	beq.n	80064fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0204 	mvn.w	r2, #4
 80064ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f973 	bl	80067cc <HAL_TIM_IC_CaptureCallback>
 80064e6:	e005      	b.n	80064f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f965 	bl	80067b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f976 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d020      	beq.n	8006546 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01b      	beq.n	8006546 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f06f 0208 	mvn.w	r2, #8
 8006516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f94d 	bl	80067cc <HAL_TIM_IC_CaptureCallback>
 8006532:	e005      	b.n	8006540 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f93f 	bl	80067b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f950 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0310 	and.w	r3, r3, #16
 800654c:	2b00      	cmp	r3, #0
 800654e:	d020      	beq.n	8006592 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0210 	mvn.w	r2, #16
 8006562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2208      	movs	r2, #8
 8006568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f927 	bl	80067cc <HAL_TIM_IC_CaptureCallback>
 800657e:	e005      	b.n	800658c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f919 	bl	80067b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f92a 	bl	80067e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0201 	mvn.w	r2, #1
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7fc fea5 	bl	8003300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fab5 	bl	8006b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f8fb 	bl	80067f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f06f 0220 	mvn.w	r2, #32
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa87 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006622:	bf00      	nop
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_TIM_ConfigClockSource+0x1c>
 8006642:	2302      	movs	r3, #2
 8006644:	e0b4      	b.n	80067b0 <HAL_TIM_ConfigClockSource+0x186>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006664:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667e:	d03e      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0xd4>
 8006680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006684:	f200 8087 	bhi.w	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 8006688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668c:	f000 8086 	beq.w	800679c <HAL_TIM_ConfigClockSource+0x172>
 8006690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006694:	d87f      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 8006696:	2b70      	cmp	r3, #112	; 0x70
 8006698:	d01a      	beq.n	80066d0 <HAL_TIM_ConfigClockSource+0xa6>
 800669a:	2b70      	cmp	r3, #112	; 0x70
 800669c:	d87b      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 800669e:	2b60      	cmp	r3, #96	; 0x60
 80066a0:	d050      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x11a>
 80066a2:	2b60      	cmp	r3, #96	; 0x60
 80066a4:	d877      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 80066a6:	2b50      	cmp	r3, #80	; 0x50
 80066a8:	d03c      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0xfa>
 80066aa:	2b50      	cmp	r3, #80	; 0x50
 80066ac:	d873      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d058      	beq.n	8006764 <HAL_TIM_ConfigClockSource+0x13a>
 80066b2:	2b40      	cmp	r3, #64	; 0x40
 80066b4:	d86f      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 80066b6:	2b30      	cmp	r3, #48	; 0x30
 80066b8:	d064      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x15a>
 80066ba:	2b30      	cmp	r3, #48	; 0x30
 80066bc:	d86b      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 80066be:	2b20      	cmp	r3, #32
 80066c0:	d060      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x15a>
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d867      	bhi.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d05c      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x15a>
 80066ca:	2b10      	cmp	r3, #16
 80066cc:	d05a      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x15a>
 80066ce:	e062      	b.n	8006796 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066e0:	f000 f998 	bl	8006a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	609a      	str	r2, [r3, #8]
      break;
 80066fc:	e04f      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800670e:	f000 f981 	bl	8006a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006720:	609a      	str	r2, [r3, #8]
      break;
 8006722:	e03c      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006730:	461a      	mov	r2, r3
 8006732:	f000 f8f5 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2150      	movs	r1, #80	; 0x50
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f94e 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006742:	e02c      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006750:	461a      	mov	r2, r3
 8006752:	f000 f914 	bl	800697e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2160      	movs	r1, #96	; 0x60
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f93e 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006762:	e01c      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006770:	461a      	mov	r2, r3
 8006772:	f000 f8d5 	bl	8006920 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2140      	movs	r1, #64	; 0x40
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f92e 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006782:	e00c      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 f925 	bl	80069de <TIM_ITRx_SetConfig>
      break;
 8006794:	e003      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	73fb      	strb	r3, [r7, #15]
      break;
 800679a:	e000      	b.n	800679e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800679c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a3a      	ldr	r2, [pc, #232]	; (8006904 <TIM_Base_SetConfig+0xfc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00f      	beq.n	8006840 <TIM_Base_SetConfig+0x38>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006826:	d00b      	beq.n	8006840 <TIM_Base_SetConfig+0x38>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a37      	ldr	r2, [pc, #220]	; (8006908 <TIM_Base_SetConfig+0x100>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d007      	beq.n	8006840 <TIM_Base_SetConfig+0x38>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a36      	ldr	r2, [pc, #216]	; (800690c <TIM_Base_SetConfig+0x104>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d003      	beq.n	8006840 <TIM_Base_SetConfig+0x38>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a35      	ldr	r2, [pc, #212]	; (8006910 <TIM_Base_SetConfig+0x108>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a2b      	ldr	r2, [pc, #172]	; (8006904 <TIM_Base_SetConfig+0xfc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01b      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d017      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <TIM_Base_SetConfig+0x100>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <TIM_Base_SetConfig+0x104>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a26      	ldr	r2, [pc, #152]	; (8006910 <TIM_Base_SetConfig+0x108>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a25      	ldr	r2, [pc, #148]	; (8006914 <TIM_Base_SetConfig+0x10c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a24      	ldr	r2, [pc, #144]	; (8006918 <TIM_Base_SetConfig+0x110>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0x8a>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a23      	ldr	r2, [pc, #140]	; (800691c <TIM_Base_SetConfig+0x114>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a0e      	ldr	r2, [pc, #56]	; (8006904 <TIM_Base_SetConfig+0xfc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d103      	bne.n	80068d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d105      	bne.n	80068f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]
  }
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010000 	.word	0x40010000
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800

08006920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4313      	orrs	r3, r2
 8006954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 030a 	bic.w	r3, r3, #10
 800695c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
 8006964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f023 0210 	bic.w	r2, r3, #16
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	031b      	lsls	r3, r3, #12
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069de:	b480      	push	{r7}
 80069e0:	b085      	sub	sp, #20
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	f043 0307 	orr.w	r3, r3, #7
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	021a      	lsls	r2, r3, #8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	609a      	str	r2, [r3, #8]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	e050      	b.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d018      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab8:	d013      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d00e      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a16      	ldr	r2, [pc, #88]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d009      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a15      	ldr	r2, [pc, #84]	; (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d004      	beq.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d10c      	bne.n	8006afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000400 	.word	0x40000400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	40000c00 	.word	0x40000c00
 8006b2c:	40014000 	.word	0x40014000

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e042      	b.n	8006bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fc ff08 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fdbd 	bl	800771c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b20      	cmp	r3, #32
 8006c16:	d175      	bne.n	8006d04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_UART_Transmit+0x2c>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e06e      	b.n	8006d06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2221      	movs	r2, #33	; 0x21
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c36:	f7fd f8f3 	bl	8003e20 <HAL_GetTick>
 8006c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	88fa      	ldrh	r2, [r7, #6]
 8006c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c50:	d108      	bne.n	8006c64 <HAL_UART_Transmit+0x6c>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	e003      	b.n	8006c6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c6c:	e02e      	b.n	8006ccc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2200      	movs	r2, #0
 8006c76:	2180      	movs	r1, #128	; 0x80
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 fb1f 	bl	80072bc <UART_WaitOnFlagUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e03a      	b.n	8006d06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10b      	bne.n	8006cae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	3302      	adds	r3, #2
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	e007      	b.n	8006cbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	781a      	ldrb	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1cb      	bne.n	8006c6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2140      	movs	r1, #64	; 0x40
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 faeb 	bl	80072bc <UART_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e006      	b.n	8006d06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d04:	2302      	movs	r3, #2
  }
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d112      	bne.n	8006d4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_UART_Receive_IT+0x26>
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e00b      	b.n	8006d50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fb12 	bl	800736e <UART_Start_Receive_IT>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d4e:	2302      	movs	r3, #2
  }
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b0ba      	sub	sp, #232	; 0xe8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10f      	bne.n	8006dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
 8006daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fbf2 	bl	80075a0 <UART_Receive_IT>
      return;
 8006dbc:	e25b      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80de 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
 8006dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80d1 	beq.w	8006f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00b      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
 8006dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfe:	f043 0201 	orr.w	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	f043 0202 	orr.w	r2, r3, #2
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e46:	f043 0204 	orr.w	r2, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d011      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
 8006e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	f043 0208 	orr.w	r2, r3, #8
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 81f2 	beq.w	800726c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
 8006e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb7d 	bl	80075a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x17a>
 8006eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04f      	beq.n	8006f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa85 	bl	80073e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b40      	cmp	r3, #64	; 0x40
 8006ee4:	d141      	bne.n	8006f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3314      	adds	r3, #20
 8006eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3314      	adds	r3, #20
 8006f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d9      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	4a7e      	ldr	r2, [pc, #504]	; (8007138 <HAL_UART_IRQHandler+0x3e0>)
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fd f91b 	bl	8004182 <HAL_DMA_Abort_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	e00e      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f994 	bl	8007290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f68:	e00a      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f990 	bl	8007290 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f70:	e006      	b.n	8006f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f98c 	bl	8007290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f7e:	e175      	b.n	800726c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	bf00      	nop
    return;
 8006f82:	e173      	b.n	800726c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	f040 814f 	bne.w	800722c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8148 	beq.w	800722c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8141 	beq.w	800722c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	60bb      	str	r3, [r7, #8]
 8006fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b40      	cmp	r3, #64	; 0x40
 8006fcc:	f040 80b6 	bne.w	800713c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8145 	beq.w	8007270 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	f080 813e 	bcs.w	8007270 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	f000 8088 	beq.w	800711a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	330c      	adds	r3, #12
 8007010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007018:	e853 3f00 	ldrex	r3, [r3]
 800701c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007036:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800703a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800704e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1d9      	bne.n	800700a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800707a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800707e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007086:	e841 2300 	strex	r3, r2, [r1]
 800708a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800708c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e1      	bne.n	8007056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3314      	adds	r3, #20
 80070b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e3      	bne.n	8007092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e2:	e853 3f00 	ldrex	r3, [r3]
 80070e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ea:	f023 0310 	bic.w	r3, r3, #16
 80070ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80070fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007102:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e3      	bne.n	80070d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	4618      	mov	r0, r3
 8007116:	f7fc ffc4 	bl	80040a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007128:	b29b      	uxth	r3, r3
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	b29b      	uxth	r3, r3
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f8b7 	bl	80072a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007136:	e09b      	b.n	8007270 <HAL_UART_IRQHandler+0x518>
 8007138:	080074a9 	.word	0x080074a9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007144:	b29b      	uxth	r3, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007150:	b29b      	uxth	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 808e 	beq.w	8007274 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007158:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 8089 	beq.w	8007274 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	330c      	adds	r3, #12
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007186:	647a      	str	r2, [r7, #68]	; 0x44
 8007188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800718c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e3      	bne.n	8007162 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	623b      	str	r3, [r7, #32]
   return(result);
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071be:	633a      	str	r2, [r7, #48]	; 0x30
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e3      	bne.n	800719a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0310 	bic.w	r3, r3, #16
 80071f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	330c      	adds	r3, #12
 8007200:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007204:	61fa      	str	r2, [r7, #28]
 8007206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69b9      	ldr	r1, [r7, #24]
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	617b      	str	r3, [r7, #20]
   return(result);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e3      	bne.n	80071e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800721e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f83d 	bl	80072a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800722a:	e023      	b.n	8007274 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d009      	beq.n	800724c <HAL_UART_IRQHandler+0x4f4>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f943 	bl	80074d0 <UART_Transmit_IT>
    return;
 800724a:	e014      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800724c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <HAL_UART_IRQHandler+0x51e>
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f983 	bl	8007570 <UART_EndTransmit_IT>
    return;
 800726a:	e004      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
    return;
 800726c:	bf00      	nop
 800726e:	e002      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
      return;
 8007270:	bf00      	nop
 8007272:	e000      	b.n	8007276 <HAL_UART_IRQHandler+0x51e>
      return;
 8007274:	bf00      	nop
  }
}
 8007276:	37e8      	adds	r7, #232	; 0xe8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	603b      	str	r3, [r7, #0]
 80072c8:	4613      	mov	r3, r2
 80072ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072cc:	e03b      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d4:	d037      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d6:	f7fc fda3 	bl	8003e20 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d302      	bcc.n	80072ec <UART_WaitOnFlagUntilTimeout+0x30>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e03a      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d023      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b80      	cmp	r3, #128	; 0x80
 8007302:	d020      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d01d      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b08      	cmp	r3, #8
 8007316:	d116      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 f857 	bl	80073e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2208      	movs	r2, #8
 8007338:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e00f      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d0b4      	beq.n	80072ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	4613      	mov	r3, r2
 800737a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	88fa      	ldrh	r2, [r7, #6]
 8007386:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2222      	movs	r2, #34	; 0x22
 8007398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695a      	ldr	r2, [r3, #20]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0220 	orr.w	r2, r2, #32
 80073d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b095      	sub	sp, #84	; 0x54
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800740a:	643a      	str	r2, [r7, #64]	; 0x40
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3314      	adds	r3, #20
 8007424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	61fb      	str	r3, [r7, #28]
   return(result);
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	64bb      	str	r3, [r7, #72]	; 0x48
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3314      	adds	r3, #20
 800743c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800743e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	2b01      	cmp	r3, #1
 8007458:	d119      	bne.n	800748e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60bb      	str	r3, [r7, #8]
   return(result);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	647b      	str	r3, [r7, #68]	; 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747a:	61ba      	str	r2, [r7, #24]
 800747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	613b      	str	r3, [r7, #16]
   return(result);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800749c:	bf00      	nop
 800749e:	3754      	adds	r7, #84	; 0x54
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff fee4 	bl	8007290 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b21      	cmp	r3, #33	; 0x21
 80074e2:	d13e      	bne.n	8007562 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ec:	d114      	bne.n	8007518 <UART_Transmit_IT+0x48>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d110      	bne.n	8007518 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800750a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	1c9a      	adds	r2, r3, #2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	621a      	str	r2, [r3, #32]
 8007516:	e008      	b.n	800752a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	1c59      	adds	r1, r3, #1
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6211      	str	r1, [r2, #32]
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4619      	mov	r1, r3
 8007538:	84d1      	strh	r1, [r2, #38]	; 0x26
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10f      	bne.n	800755e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800754c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	e000      	b.n	8007564 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007562:	2302      	movs	r3, #2
  }
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007586:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7ff fe73 	bl	800727c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	; 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b22      	cmp	r3, #34	; 0x22
 80075b2:	f040 80ae 	bne.w	8007712 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d117      	bne.n	80075f0 <UART_Receive_IT+0x50>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d113      	bne.n	80075f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	b29a      	uxth	r2, r3
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	1c9a      	adds	r2, r3, #2
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	629a      	str	r2, [r3, #40]	; 0x28
 80075ee:	e026      	b.n	800763e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007602:	d007      	beq.n	8007614 <UART_Receive_IT+0x74>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <UART_Receive_IT+0x82>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e008      	b.n	8007634 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007632:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29b      	uxth	r3, r3
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	4619      	mov	r1, r3
 800764c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800764e:	2b00      	cmp	r3, #0
 8007650:	d15d      	bne.n	800770e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0220 	bic.w	r2, r2, #32
 8007660:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007670:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	2b01      	cmp	r3, #1
 8007696:	d135      	bne.n	8007704 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	613b      	str	r3, [r7, #16]
   return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	623a      	str	r2, [r7, #32]
 80076c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	69f9      	ldr	r1, [r7, #28]
 80076c4:	6a3a      	ldr	r2, [r7, #32]
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b10      	cmp	r3, #16
 80076de:	d10a      	bne.n	80076f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fdd1 	bl	80072a4 <HAL_UARTEx_RxEventCallback>
 8007702:	e002      	b.n	800770a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fa f983 	bl	8001a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e002      	b.n	8007714 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	e000      	b.n	8007714 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007712:	2302      	movs	r3, #2
  }
}
 8007714:	4618      	mov	r0, r3
 8007716:	3730      	adds	r7, #48	; 0x30
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800771c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007720:	b0c0      	sub	sp, #256	; 0x100
 8007722:	af00      	add	r7, sp, #0
 8007724:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	68d9      	ldr	r1, [r3, #12]
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	ea40 0301 	orr.w	r3, r0, r1
 8007744:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	431a      	orrs	r2, r3
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	431a      	orrs	r2, r3
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007774:	f021 010c 	bic.w	r1, r1, #12
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007782:	430b      	orrs	r3, r1
 8007784:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007796:	6999      	ldr	r1, [r3, #24]
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	ea40 0301 	orr.w	r3, r0, r1
 80077a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b8f      	ldr	r3, [pc, #572]	; (80079e8 <UART_SetConfig+0x2cc>)
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d005      	beq.n	80077bc <UART_SetConfig+0xa0>
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	4b8d      	ldr	r3, [pc, #564]	; (80079ec <UART_SetConfig+0x2d0>)
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d104      	bne.n	80077c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7fd fb16 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 80077c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077c4:	e003      	b.n	80077ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077c6:	f7fd fafd 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 80077ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	f040 810c 	bne.w	80079f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077ee:	4622      	mov	r2, r4
 80077f0:	462b      	mov	r3, r5
 80077f2:	1891      	adds	r1, r2, r2
 80077f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80077f6:	415b      	adcs	r3, r3
 80077f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077fe:	4621      	mov	r1, r4
 8007800:	eb12 0801 	adds.w	r8, r2, r1
 8007804:	4629      	mov	r1, r5
 8007806:	eb43 0901 	adc.w	r9, r3, r1
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007816:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800781a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800781e:	4690      	mov	r8, r2
 8007820:	4699      	mov	r9, r3
 8007822:	4623      	mov	r3, r4
 8007824:	eb18 0303 	adds.w	r3, r8, r3
 8007828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800782c:	462b      	mov	r3, r5
 800782e:	eb49 0303 	adc.w	r3, r9, r3
 8007832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007842:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007846:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800784a:	460b      	mov	r3, r1
 800784c:	18db      	adds	r3, r3, r3
 800784e:	653b      	str	r3, [r7, #80]	; 0x50
 8007850:	4613      	mov	r3, r2
 8007852:	eb42 0303 	adc.w	r3, r2, r3
 8007856:	657b      	str	r3, [r7, #84]	; 0x54
 8007858:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800785c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007860:	f7f9 fa1a 	bl	8000c98 <__aeabi_uldivmod>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <UART_SetConfig+0x2d4>)
 800786a:	fba3 2302 	umull	r2, r3, r3, r2
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	011c      	lsls	r4, r3, #4
 8007872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007876:	2200      	movs	r2, #0
 8007878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800787c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007880:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	1891      	adds	r1, r2, r2
 800788a:	64b9      	str	r1, [r7, #72]	; 0x48
 800788c:	415b      	adcs	r3, r3
 800788e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007890:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007894:	4641      	mov	r1, r8
 8007896:	eb12 0a01 	adds.w	sl, r2, r1
 800789a:	4649      	mov	r1, r9
 800789c:	eb43 0b01 	adc.w	fp, r3, r1
 80078a0:	f04f 0200 	mov.w	r2, #0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078b4:	4692      	mov	sl, r2
 80078b6:	469b      	mov	fp, r3
 80078b8:	4643      	mov	r3, r8
 80078ba:	eb1a 0303 	adds.w	r3, sl, r3
 80078be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c2:	464b      	mov	r3, r9
 80078c4:	eb4b 0303 	adc.w	r3, fp, r3
 80078c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078e0:	460b      	mov	r3, r1
 80078e2:	18db      	adds	r3, r3, r3
 80078e4:	643b      	str	r3, [r7, #64]	; 0x40
 80078e6:	4613      	mov	r3, r2
 80078e8:	eb42 0303 	adc.w	r3, r2, r3
 80078ec:	647b      	str	r3, [r7, #68]	; 0x44
 80078ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078f6:	f7f9 f9cf 	bl	8000c98 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	4b3b      	ldr	r3, [pc, #236]	; (80079f0 <UART_SetConfig+0x2d4>)
 8007902:	fba3 2301 	umull	r2, r3, r3, r1
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	2264      	movs	r2, #100	; 0x64
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	1acb      	subs	r3, r1, r3
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007916:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <UART_SetConfig+0x2d4>)
 8007918:	fba3 2302 	umull	r2, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007924:	441c      	add	r4, r3
 8007926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800792a:	2200      	movs	r2, #0
 800792c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007930:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007934:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	1891      	adds	r1, r2, r2
 800793e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007940:	415b      	adcs	r3, r3
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007944:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007948:	4641      	mov	r1, r8
 800794a:	1851      	adds	r1, r2, r1
 800794c:	6339      	str	r1, [r7, #48]	; 0x30
 800794e:	4649      	mov	r1, r9
 8007950:	414b      	adcs	r3, r1
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007960:	4659      	mov	r1, fp
 8007962:	00cb      	lsls	r3, r1, #3
 8007964:	4651      	mov	r1, sl
 8007966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796a:	4651      	mov	r1, sl
 800796c:	00ca      	lsls	r2, r1, #3
 800796e:	4610      	mov	r0, r2
 8007970:	4619      	mov	r1, r3
 8007972:	4603      	mov	r3, r0
 8007974:	4642      	mov	r2, r8
 8007976:	189b      	adds	r3, r3, r2
 8007978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800797c:	464b      	mov	r3, r9
 800797e:	460a      	mov	r2, r1
 8007980:	eb42 0303 	adc.w	r3, r2, r3
 8007984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007994:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007998:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800799c:	460b      	mov	r3, r1
 800799e:	18db      	adds	r3, r3, r3
 80079a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079a2:	4613      	mov	r3, r2
 80079a4:	eb42 0303 	adc.w	r3, r2, r3
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80079ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80079b2:	f7f9 f971 	bl	8000c98 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <UART_SetConfig+0x2d4>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	; 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	3332      	adds	r3, #50	; 0x32
 80079ce:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <UART_SetConfig+0x2d4>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f003 0207 	and.w	r2, r3, #7
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4422      	add	r2, r4
 80079e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079e4:	e106      	b.n	8007bf4 <UART_SetConfig+0x4d8>
 80079e6:	bf00      	nop
 80079e8:	40011000 	.word	0x40011000
 80079ec:	40011400 	.word	0x40011400
 80079f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007a02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007a06:	4642      	mov	r2, r8
 8007a08:	464b      	mov	r3, r9
 8007a0a:	1891      	adds	r1, r2, r2
 8007a0c:	6239      	str	r1, [r7, #32]
 8007a0e:	415b      	adcs	r3, r3
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
 8007a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a16:	4641      	mov	r1, r8
 8007a18:	1854      	adds	r4, r2, r1
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	eb43 0501 	adc.w	r5, r3, r1
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	00eb      	lsls	r3, r5, #3
 8007a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a2e:	00e2      	lsls	r2, r4, #3
 8007a30:	4614      	mov	r4, r2
 8007a32:	461d      	mov	r5, r3
 8007a34:	4643      	mov	r3, r8
 8007a36:	18e3      	adds	r3, r4, r3
 8007a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	eb45 0303 	adc.w	r3, r5, r3
 8007a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a62:	4629      	mov	r1, r5
 8007a64:	008b      	lsls	r3, r1, #2
 8007a66:	4621      	mov	r1, r4
 8007a68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a6c:	4621      	mov	r1, r4
 8007a6e:	008a      	lsls	r2, r1, #2
 8007a70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a74:	f7f9 f910 	bl	8000c98 <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4b60      	ldr	r3, [pc, #384]	; (8007c00 <UART_SetConfig+0x4e4>)
 8007a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	011c      	lsls	r4, r3, #4
 8007a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	1891      	adds	r1, r2, r2
 8007a9e:	61b9      	str	r1, [r7, #24]
 8007aa0:	415b      	adcs	r3, r3
 8007aa2:	61fb      	str	r3, [r7, #28]
 8007aa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	1851      	adds	r1, r2, r1
 8007aac:	6139      	str	r1, [r7, #16]
 8007aae:	4649      	mov	r1, r9
 8007ab0:	414b      	adcs	r3, r1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	f04f 0200 	mov.w	r2, #0
 8007ab8:	f04f 0300 	mov.w	r3, #0
 8007abc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	00cb      	lsls	r3, r1, #3
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aca:	4651      	mov	r1, sl
 8007acc:	00ca      	lsls	r2, r1, #3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	189b      	adds	r3, r3, r2
 8007ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007adc:	464b      	mov	r3, r9
 8007ade:	460a      	mov	r2, r1
 8007ae0:	eb42 0303 	adc.w	r3, r2, r3
 8007ae4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007af2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007b00:	4649      	mov	r1, r9
 8007b02:	008b      	lsls	r3, r1, #2
 8007b04:	4641      	mov	r1, r8
 8007b06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	008a      	lsls	r2, r1, #2
 8007b0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007b12:	f7f9 f8c1 	bl	8000c98 <__aeabi_uldivmod>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	4b38      	ldr	r3, [pc, #224]	; (8007c00 <UART_SetConfig+0x4e4>)
 8007b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	2264      	movs	r2, #100	; 0x64
 8007b26:	fb02 f303 	mul.w	r3, r2, r3
 8007b2a:	1acb      	subs	r3, r1, r3
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	3332      	adds	r3, #50	; 0x32
 8007b30:	4a33      	ldr	r2, [pc, #204]	; (8007c00 <UART_SetConfig+0x4e4>)
 8007b32:	fba2 2303 	umull	r2, r3, r2, r3
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3c:	441c      	add	r4, r3
 8007b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b42:	2200      	movs	r2, #0
 8007b44:	673b      	str	r3, [r7, #112]	; 0x70
 8007b46:	677a      	str	r2, [r7, #116]	; 0x74
 8007b48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	464b      	mov	r3, r9
 8007b50:	1891      	adds	r1, r2, r2
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	415b      	adcs	r3, r3
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b5c:	4641      	mov	r1, r8
 8007b5e:	1851      	adds	r1, r2, r1
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	4649      	mov	r1, r9
 8007b64:	414b      	adcs	r3, r1
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b74:	4659      	mov	r1, fp
 8007b76:	00cb      	lsls	r3, r1, #3
 8007b78:	4651      	mov	r1, sl
 8007b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b7e:	4651      	mov	r1, sl
 8007b80:	00ca      	lsls	r2, r1, #3
 8007b82:	4610      	mov	r0, r2
 8007b84:	4619      	mov	r1, r3
 8007b86:	4603      	mov	r3, r0
 8007b88:	4642      	mov	r2, r8
 8007b8a:	189b      	adds	r3, r3, r2
 8007b8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b8e:	464b      	mov	r3, r9
 8007b90:	460a      	mov	r2, r1
 8007b92:	eb42 0303 	adc.w	r3, r2, r3
 8007b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ba2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	008b      	lsls	r3, r1, #2
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bba:	4641      	mov	r1, r8
 8007bbc:	008a      	lsls	r2, r1, #2
 8007bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007bc2:	f7f9 f869 	bl	8000c98 <__aeabi_uldivmod>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <UART_SetConfig+0x4e4>)
 8007bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd0:	095b      	lsrs	r3, r3, #5
 8007bd2:	2164      	movs	r1, #100	; 0x64
 8007bd4:	fb01 f303 	mul.w	r3, r1, r3
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	3332      	adds	r3, #50	; 0x32
 8007bde:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <UART_SetConfig+0x4e4>)
 8007be0:	fba2 2303 	umull	r2, r3, r2, r3
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	f003 020f 	and.w	r2, r3, #15
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4422      	add	r2, r4
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c00:	51eb851f 	.word	0x51eb851f

08007c04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007c08:	4904      	ldr	r1, [pc, #16]	; (8007c1c <MX_FATFS_Init+0x18>)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <MX_FATFS_Init+0x1c>)
 8007c0c:	f003 ff64 	bl	800bad8 <FATFS_LinkDriver>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <MX_FATFS_Init+0x20>)
 8007c16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c18:	bf00      	nop
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20002aac 	.word	0x20002aac
 8007c20:	20000050 	.word	0x20000050
 8007c24:	20002aa8 	.word	0x20002aa8

08007c28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7f9 fb95 	bl	8001374 <SD_disk_initialize>
 8007c4a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7f9 fc71 	bl	8001548 <SD_disk_status>
 8007c66:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007c80:	7bf8      	ldrb	r0, [r7, #15]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	f7f9 fc74 	bl	8001574 <SD_disk_read>
 8007c8c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007ca6:	7bf8      	ldrb	r0, [r7, #15]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	f7f9 fccb 	bl	8001648 <SD_disk_write>
 8007cb2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	603a      	str	r2, [r7, #0]
 8007cc6:	71fb      	strb	r3, [r7, #7]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007ccc:	79b9      	ldrb	r1, [r7, #6]
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7f9 fd3c 	bl	8001750 <SD_disk_ioctl>
 8007cd8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	4a08      	ldr	r2, [pc, #32]	; (8007d14 <disk_status+0x30>)
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	79fa      	ldrb	r2, [r7, #7]
 8007cfc:	4905      	ldr	r1, [pc, #20]	; (8007d14 <disk_status+0x30>)
 8007cfe:	440a      	add	r2, r1
 8007d00:	7a12      	ldrb	r2, [r2, #8]
 8007d02:	4610      	mov	r0, r2
 8007d04:	4798      	blx	r3
 8007d06:	4603      	mov	r3, r0
 8007d08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20002cd8 	.word	0x20002cd8

08007d18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <disk_initialize+0x4c>)
 8007d2a:	5cd3      	ldrb	r3, [r2, r3]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d114      	bne.n	8007d5a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	4a0c      	ldr	r2, [pc, #48]	; (8007d64 <disk_initialize+0x4c>)
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	79fa      	ldrb	r2, [r7, #7]
 8007d3e:	4909      	ldr	r1, [pc, #36]	; (8007d64 <disk_initialize+0x4c>)
 8007d40:	440a      	add	r2, r1
 8007d42:	7a12      	ldrb	r2, [r2, #8]
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	4a03      	ldr	r2, [pc, #12]	; (8007d64 <disk_initialize+0x4c>)
 8007d56:	2101      	movs	r1, #1
 8007d58:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20002cd8 	.word	0x20002cd8

08007d68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <disk_read+0x3c>)
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	689c      	ldr	r4, [r3, #8]
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	4a07      	ldr	r2, [pc, #28]	; (8007da4 <disk_read+0x3c>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	7a18      	ldrb	r0, [r3, #8]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	47a0      	blx	r4
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd90      	pop	{r4, r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20002cd8 	.word	0x20002cd8

08007da8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007da8:	b590      	push	{r4, r7, lr}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	603b      	str	r3, [r7, #0]
 8007db4:	4603      	mov	r3, r0
 8007db6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <disk_write+0x3c>)
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68dc      	ldr	r4, [r3, #12]
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4a07      	ldr	r2, [pc, #28]	; (8007de4 <disk_write+0x3c>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	7a18      	ldrb	r0, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	47a0      	blx	r4
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20002cd8 	.word	0x20002cd8

08007de8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	603a      	str	r2, [r7, #0]
 8007df2:	71fb      	strb	r3, [r7, #7]
 8007df4:	460b      	mov	r3, r1
 8007df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <disk_ioctl+0x38>)
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	4906      	ldr	r1, [pc, #24]	; (8007e20 <disk_ioctl+0x38>)
 8007e08:	440a      	add	r2, r1
 8007e0a:	7a10      	ldrb	r0, [r2, #8]
 8007e0c:	79b9      	ldrb	r1, [r7, #6]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
  return res;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20002cd8 	.word	0x20002cd8

08007e24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e34:	89fb      	ldrh	r3, [r7, #14]
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	b21a      	sxth	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	4313      	orrs	r3, r2
 8007e42:	b21b      	sxth	r3, r3
 8007e44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e46:	89fb      	ldrh	r3, [r7, #14]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	021b      	lsls	r3, r3, #8
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	3202      	adds	r2, #2
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	3201      	adds	r2, #1
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	7812      	ldrb	r2, [r2, #0]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	887a      	ldrh	r2, [r7, #2]
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	0a1b      	lsrs	r3, r3, #8
 8007eb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	887a      	ldrh	r2, [r7, #2]
 8007ec0:	b2d2      	uxtb	r2, r2
 8007ec2:	701a      	strb	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	0a1b      	lsrs	r3, r3, #8
 8007eea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	0a1b      	lsrs	r3, r3, #8
 8007f0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	1c53      	adds	r3, r2, #1
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	1c59      	adds	r1, r3, #1
 8007f4c:	6179      	str	r1, [r7, #20]
 8007f4e:	7812      	ldrb	r2, [r2, #0]
 8007f50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3b01      	subs	r3, #1
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f1      	bne.n	8007f42 <mem_cpy+0x1a>
	}
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	617a      	str	r2, [r7, #20]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	607b      	str	r3, [r7, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f3      	bne.n	8007f7a <mem_set+0x10>
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007fa0:	b480      	push	{r7}
 8007fa2:	b089      	sub	sp, #36	; 0x24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	61fa      	str	r2, [r7, #28]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	61ba      	str	r2, [r7, #24]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	1acb      	subs	r3, r1, r3
 8007fcc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d002      	beq.n	8007fe0 <mem_cmp+0x40>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0eb      	beq.n	8007fb8 <mem_cmp+0x18>

	return r;
 8007fe0:	697b      	ldr	r3, [r7, #20]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ff8:	e002      	b.n	8008000 <chk_chr+0x12>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <chk_chr+0x26>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4293      	cmp	r3, r2
 8008012:	d1f2      	bne.n	8007ffa <chk_chr+0xc>
	return *str;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	781b      	ldrb	r3, [r3, #0]
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800802e:	2300      	movs	r3, #0
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	e029      	b.n	800808c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008038:	4a27      	ldr	r2, [pc, #156]	; (80080d8 <chk_lock+0xb4>)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	4413      	add	r3, r2
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01d      	beq.n	8008082 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008046:	4a24      	ldr	r2, [pc, #144]	; (80080d8 <chk_lock+0xb4>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d116      	bne.n	8008086 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008058:	4a1f      	ldr	r2, [pc, #124]	; (80080d8 <chk_lock+0xb4>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	4413      	add	r3, r2
 8008060:	3304      	adds	r3, #4
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008068:	429a      	cmp	r2, r3
 800806a:	d10c      	bne.n	8008086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800806c:	4a1a      	ldr	r2, [pc, #104]	; (80080d8 <chk_lock+0xb4>)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	4413      	add	r3, r2
 8008074:	3308      	adds	r3, #8
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800807c:	429a      	cmp	r2, r3
 800807e:	d102      	bne.n	8008086 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008080:	e007      	b.n	8008092 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008082:	2301      	movs	r3, #1
 8008084:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d9d2      	bls.n	8008038 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d109      	bne.n	80080ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d102      	bne.n	80080a4 <chk_lock+0x80>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d101      	bne.n	80080a8 <chk_lock+0x84>
 80080a4:	2300      	movs	r3, #0
 80080a6:	e010      	b.n	80080ca <chk_lock+0xa6>
 80080a8:	2312      	movs	r3, #18
 80080aa:	e00e      	b.n	80080ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d108      	bne.n	80080c4 <chk_lock+0xa0>
 80080b2:	4a09      	ldr	r2, [pc, #36]	; (80080d8 <chk_lock+0xb4>)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	4413      	add	r3, r2
 80080ba:	330c      	adds	r3, #12
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c2:	d101      	bne.n	80080c8 <chk_lock+0xa4>
 80080c4:	2310      	movs	r3, #16
 80080c6:	e000      	b.n	80080ca <chk_lock+0xa6>
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20002ab8 	.word	0x20002ab8

080080dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080e2:	2300      	movs	r3, #0
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	e002      	b.n	80080ee <enq_lock+0x12>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d806      	bhi.n	8008102 <enq_lock+0x26>
 80080f4:	4a09      	ldr	r2, [pc, #36]	; (800811c <enq_lock+0x40>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	4413      	add	r3, r2
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f2      	bne.n	80080e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b02      	cmp	r3, #2
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
}
 800810e:	4618      	mov	r0, r3
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20002ab8 	.word	0x20002ab8

08008120 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e01f      	b.n	8008170 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008130:	4a41      	ldr	r2, [pc, #260]	; (8008238 <inc_lock+0x118>)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	4413      	add	r3, r2
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d113      	bne.n	800816a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008142:	4a3d      	ldr	r2, [pc, #244]	; (8008238 <inc_lock+0x118>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	4413      	add	r3, r2
 800814a:	3304      	adds	r3, #4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008152:	429a      	cmp	r2, r3
 8008154:	d109      	bne.n	800816a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008156:	4a38      	ldr	r2, [pc, #224]	; (8008238 <inc_lock+0x118>)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	4413      	add	r3, r2
 800815e:	3308      	adds	r3, #8
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008166:	429a      	cmp	r2, r3
 8008168:	d006      	beq.n	8008178 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3301      	adds	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d9dc      	bls.n	8008130 <inc_lock+0x10>
 8008176:	e000      	b.n	800817a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008178:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d132      	bne.n	80081e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e002      	b.n	800818c <inc_lock+0x6c>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3301      	adds	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d806      	bhi.n	80081a0 <inc_lock+0x80>
 8008192:	4a29      	ldr	r2, [pc, #164]	; (8008238 <inc_lock+0x118>)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	4413      	add	r3, r2
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1f2      	bne.n	8008186 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d101      	bne.n	80081aa <inc_lock+0x8a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	e040      	b.n	800822c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	4922      	ldr	r1, [pc, #136]	; (8008238 <inc_lock+0x118>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	440b      	add	r3, r1
 80081b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	491e      	ldr	r1, [pc, #120]	; (8008238 <inc_lock+0x118>)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	440b      	add	r3, r1
 80081c4:	3304      	adds	r3, #4
 80081c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	491a      	ldr	r1, [pc, #104]	; (8008238 <inc_lock+0x118>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	440b      	add	r3, r1
 80081d4:	3308      	adds	r3, #8
 80081d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081d8:	4a17      	ldr	r2, [pc, #92]	; (8008238 <inc_lock+0x118>)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	4413      	add	r3, r2
 80081e0:	330c      	adds	r3, #12
 80081e2:	2200      	movs	r2, #0
 80081e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <inc_lock+0xe0>
 80081ec:	4a12      	ldr	r2, [pc, #72]	; (8008238 <inc_lock+0x118>)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	4413      	add	r3, r2
 80081f4:	330c      	adds	r3, #12
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <inc_lock+0xe0>
 80081fc:	2300      	movs	r3, #0
 80081fe:	e015      	b.n	800822c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d108      	bne.n	8008218 <inc_lock+0xf8>
 8008206:	4a0c      	ldr	r2, [pc, #48]	; (8008238 <inc_lock+0x118>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	4413      	add	r3, r2
 800820e:	330c      	adds	r3, #12
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	e001      	b.n	800821c <inc_lock+0xfc>
 8008218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800821c:	4906      	ldr	r1, [pc, #24]	; (8008238 <inc_lock+0x118>)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	011b      	lsls	r3, r3, #4
 8008222:	440b      	add	r3, r1
 8008224:	330c      	adds	r3, #12
 8008226:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	20002ab8 	.word	0x20002ab8

0800823c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3b01      	subs	r3, #1
 8008248:	607b      	str	r3, [r7, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d825      	bhi.n	800829c <dec_lock+0x60>
		n = Files[i].ctr;
 8008250:	4a17      	ldr	r2, [pc, #92]	; (80082b0 <dec_lock+0x74>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	4413      	add	r3, r2
 8008258:	330c      	adds	r3, #12
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800825e:	89fb      	ldrh	r3, [r7, #14]
 8008260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008264:	d101      	bne.n	800826a <dec_lock+0x2e>
 8008266:	2300      	movs	r3, #0
 8008268:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800826a:	89fb      	ldrh	r3, [r7, #14]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <dec_lock+0x3a>
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	3b01      	subs	r3, #1
 8008274:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008276:	4a0e      	ldr	r2, [pc, #56]	; (80082b0 <dec_lock+0x74>)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	011b      	lsls	r3, r3, #4
 800827c:	4413      	add	r3, r2
 800827e:	330c      	adds	r3, #12
 8008280:	89fa      	ldrh	r2, [r7, #14]
 8008282:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008284:	89fb      	ldrh	r3, [r7, #14]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d105      	bne.n	8008296 <dec_lock+0x5a>
 800828a:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <dec_lock+0x74>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	4413      	add	r3, r2
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	737b      	strb	r3, [r7, #13]
 800829a:	e001      	b.n	80082a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800829c:	2302      	movs	r3, #2
 800829e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80082a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20002ab8 	.word	0x20002ab8

080082b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e010      	b.n	80082e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082c2:	4a0d      	ldr	r2, [pc, #52]	; (80082f8 <clear_lock+0x44>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4413      	add	r3, r2
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d105      	bne.n	80082de <clear_lock+0x2a>
 80082d2:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <clear_lock+0x44>)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	011b      	lsls	r3, r3, #4
 80082d8:	4413      	add	r3, r2
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3301      	adds	r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d9eb      	bls.n	80082c2 <clear_lock+0xe>
	}
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	20002ab8 	.word	0x20002ab8

080082fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	78db      	ldrb	r3, [r3, #3]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d034      	beq.n	800837a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7858      	ldrb	r0, [r3, #1]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008320:	2301      	movs	r3, #1
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	f7ff fd40 	bl	8007da8 <disk_write>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <sync_window+0x38>
			res = FR_DISK_ERR;
 800832e:	2301      	movs	r3, #1
 8008330:	73fb      	strb	r3, [r7, #15]
 8008332:	e022      	b.n	800837a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	1ad2      	subs	r2, r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	429a      	cmp	r2, r3
 8008348:	d217      	bcs.n	800837a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	789b      	ldrb	r3, [r3, #2]
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	e010      	b.n	8008374 <sync_window+0x78>
					wsect += fs->fsize;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4413      	add	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7858      	ldrb	r0, [r3, #1]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008366:	2301      	movs	r3, #1
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	f7ff fd1d 	bl	8007da8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	3b01      	subs	r3, #1
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d8eb      	bhi.n	8008352 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800837a:	7bfb      	ldrb	r3, [r7, #15]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d01b      	beq.n	80083d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff ffad 	bl	80082fc <sync_window>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d113      	bne.n	80083d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7858      	ldrb	r0, [r3, #1]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083b6:	2301      	movs	r3, #1
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	f7ff fcd5 	bl	8007d68 <disk_read>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d004      	beq.n	80083ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff87 	bl	80082fc <sync_window>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d159      	bne.n	80084ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d149      	bne.n	8008494 <sync_fs+0xb4>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	791b      	ldrb	r3, [r3, #4]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d145      	bne.n	8008494 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	899b      	ldrh	r3, [r3, #12]
 8008412:	461a      	mov	r2, r3
 8008414:	2100      	movs	r1, #0
 8008416:	f7ff fda8 	bl	8007f6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	3338      	adds	r3, #56	; 0x38
 800841e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008422:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff fd37 	bl	8007e9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3338      	adds	r3, #56	; 0x38
 8008430:	4921      	ldr	r1, [pc, #132]	; (80084b8 <sync_fs+0xd8>)
 8008432:	4618      	mov	r0, r3
 8008434:	f7ff fd4c 	bl	8007ed0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3338      	adds	r3, #56	; 0x38
 800843c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008440:	491e      	ldr	r1, [pc, #120]	; (80084bc <sync_fs+0xdc>)
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff fd44 	bl	8007ed0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	3338      	adds	r3, #56	; 0x38
 800844c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7ff fd3a 	bl	8007ed0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	3338      	adds	r3, #56	; 0x38
 8008460:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7ff fd30 	bl	8007ed0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7858      	ldrb	r0, [r3, #1]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008488:	2301      	movs	r3, #1
 800848a:	f7ff fc8d 	bl	8007da8 <disk_write>
			fs->fsi_flag = 0;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff fca3 	bl	8007de8 <disk_ioctl>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <sync_fs+0xcc>
 80084a8:	2301      	movs	r3, #1
 80084aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	41615252 	.word	0x41615252
 80084bc:	61417272 	.word	0x61417272

080084c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	3b02      	subs	r3, #2
 80084ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	3b02      	subs	r3, #2
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d301      	bcc.n	80084e0 <clust2sect+0x20>
 80084dc:	2300      	movs	r3, #0
 80084de:	e008      	b.n	80084f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	895b      	ldrh	r3, [r3, #10]
 80084e4:	461a      	mov	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	fb03 f202 	mul.w	r2, r3, r2
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	4413      	add	r3, r2
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d904      	bls.n	800851e <get_fat+0x20>
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d302      	bcc.n	8008524 <get_fat+0x26>
		val = 1;	/* Internal error */
 800851e:	2301      	movs	r3, #1
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	e0bb      	b.n	800869c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008528:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b03      	cmp	r3, #3
 8008530:	f000 8083 	beq.w	800863a <get_fat+0x13c>
 8008534:	2b03      	cmp	r3, #3
 8008536:	f300 80a7 	bgt.w	8008688 <get_fat+0x18a>
 800853a:	2b01      	cmp	r3, #1
 800853c:	d002      	beq.n	8008544 <get_fat+0x46>
 800853e:	2b02      	cmp	r3, #2
 8008540:	d056      	beq.n	80085f0 <get_fat+0xf2>
 8008542:	e0a1      	b.n	8008688 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	899b      	ldrh	r3, [r3, #12]
 800855a:	4619      	mov	r1, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008562:	4413      	add	r3, r2
 8008564:	4619      	mov	r1, r3
 8008566:	6938      	ldr	r0, [r7, #16]
 8008568:	f7ff ff0c 	bl	8008384 <move_window>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	f040 808d 	bne.w	800868e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	1c5a      	adds	r2, r3, #1
 8008578:	60fa      	str	r2, [r7, #12]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	8992      	ldrh	r2, [r2, #12]
 800857e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008582:	fb01 f202 	mul.w	r2, r1, r2
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008590:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	899b      	ldrh	r3, [r3, #12]
 800859a:	4619      	mov	r1, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	fbb3 f3f1 	udiv	r3, r3, r1
 80085a2:	4413      	add	r3, r2
 80085a4:	4619      	mov	r1, r3
 80085a6:	6938      	ldr	r0, [r7, #16]
 80085a8:	f7ff feec 	bl	8008384 <move_window>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d16f      	bne.n	8008692 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	899b      	ldrh	r3, [r3, #12]
 80085b6:	461a      	mov	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80085be:	fb01 f202 	mul.w	r2, r1, r2
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085cc:	021b      	lsls	r3, r3, #8
 80085ce:	461a      	mov	r2, r3
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <get_fat+0xe8>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	091b      	lsrs	r3, r3, #4
 80085e4:	e002      	b.n	80085ec <get_fat+0xee>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085ec:	617b      	str	r3, [r7, #20]
			break;
 80085ee:	e055      	b.n	800869c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	899b      	ldrh	r3, [r3, #12]
 80085f8:	085b      	lsrs	r3, r3, #1
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4619      	mov	r1, r3
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	fbb3 f3f1 	udiv	r3, r3, r1
 8008604:	4413      	add	r3, r2
 8008606:	4619      	mov	r1, r3
 8008608:	6938      	ldr	r0, [r7, #16]
 800860a:	f7ff febb 	bl	8008384 <move_window>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d140      	bne.n	8008696 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	8992      	ldrh	r2, [r2, #12]
 8008622:	fbb3 f0f2 	udiv	r0, r3, r2
 8008626:	fb00 f202 	mul.w	r2, r0, r2
 800862a:	1a9b      	subs	r3, r3, r2
 800862c:	440b      	add	r3, r1
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fbf8 	bl	8007e24 <ld_word>
 8008634:	4603      	mov	r3, r0
 8008636:	617b      	str	r3, [r7, #20]
			break;
 8008638:	e030      	b.n	800869c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	899b      	ldrh	r3, [r3, #12]
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	b29b      	uxth	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	fbb3 f3f1 	udiv	r3, r3, r1
 800864e:	4413      	add	r3, r2
 8008650:	4619      	mov	r1, r3
 8008652:	6938      	ldr	r0, [r7, #16]
 8008654:	f7ff fe96 	bl	8008384 <move_window>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d11d      	bne.n	800869a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	8992      	ldrh	r2, [r2, #12]
 800866c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008670:	fb00 f202 	mul.w	r2, r0, r2
 8008674:	1a9b      	subs	r3, r3, r2
 8008676:	440b      	add	r3, r1
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fbeb 	bl	8007e54 <ld_dword>
 800867e:	4603      	mov	r3, r0
 8008680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008684:	617b      	str	r3, [r7, #20]
			break;
 8008686:	e009      	b.n	800869c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008688:	2301      	movs	r3, #1
 800868a:	617b      	str	r3, [r7, #20]
 800868c:	e006      	b.n	800869c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800868e:	bf00      	nop
 8008690:	e004      	b.n	800869c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008692:	bf00      	nop
 8008694:	e002      	b.n	800869c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008696:	bf00      	nop
 8008698:	e000      	b.n	800869c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800869a:	bf00      	nop
		}
	}

	return val;
 800869c:	697b      	ldr	r3, [r7, #20]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80086a6:	b590      	push	{r4, r7, lr}
 80086a8:	b089      	sub	sp, #36	; 0x24
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80086b2:	2302      	movs	r3, #2
 80086b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	f240 8109 	bls.w	80088d0 <put_fat+0x22a>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	f080 8103 	bcs.w	80088d0 <put_fat+0x22a>
		switch (fs->fs_type) {
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	f000 80b6 	beq.w	8008840 <put_fat+0x19a>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	f300 80fb 	bgt.w	80088d0 <put_fat+0x22a>
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d003      	beq.n	80086e6 <put_fat+0x40>
 80086de:	2b02      	cmp	r3, #2
 80086e0:	f000 8083 	beq.w	80087ea <put_fat+0x144>
 80086e4:	e0f4      	b.n	80088d0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	61bb      	str	r3, [r7, #24]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	085b      	lsrs	r3, r3, #1
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4413      	add	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	899b      	ldrh	r3, [r3, #12]
 80086fc:	4619      	mov	r1, r3
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	fbb3 f3f1 	udiv	r3, r3, r1
 8008704:	4413      	add	r3, r2
 8008706:	4619      	mov	r1, r3
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff fe3b 	bl	8008384 <move_window>
 800870e:	4603      	mov	r3, r0
 8008710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008712:	7ffb      	ldrb	r3, [r7, #31]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 80d4 	bne.w	80088c2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	61ba      	str	r2, [r7, #24]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	8992      	ldrh	r2, [r2, #12]
 800872a:	fbb3 f0f2 	udiv	r0, r3, r2
 800872e:	fb00 f202 	mul.w	r2, r0, r2
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	440b      	add	r3, r1
 8008736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00d      	beq.n	800875e <put_fat+0xb8>
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b25b      	sxtb	r3, r3
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	b25a      	sxtb	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	b2db      	uxtb	r3, r3
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	b25b      	sxtb	r3, r3
 8008756:	4313      	orrs	r3, r2
 8008758:	b25b      	sxtb	r3, r3
 800875a:	b2db      	uxtb	r3, r3
 800875c:	e001      	b.n	8008762 <put_fat+0xbc>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	b2db      	uxtb	r3, r3
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	899b      	ldrh	r3, [r3, #12]
 8008774:	4619      	mov	r1, r3
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	fbb3 f3f1 	udiv	r3, r3, r1
 800877c:	4413      	add	r3, r2
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fdff 	bl	8008384 <move_window>
 8008786:	4603      	mov	r3, r0
 8008788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800878a:	7ffb      	ldrb	r3, [r7, #31]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 809a 	bne.w	80088c6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	899b      	ldrh	r3, [r3, #12]
 800879c:	461a      	mov	r2, r3
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80087a4:	fb00 f202 	mul.w	r2, r0, r2
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	440b      	add	r3, r1
 80087ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <put_fat+0x11a>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	091b      	lsrs	r3, r3, #4
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	e00e      	b.n	80087de <put_fat+0x138>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f023 030f 	bic.w	r3, r3, #15
 80087ca:	b25a      	sxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	b25b      	sxtb	r3, r3
 80087d2:	f003 030f 	and.w	r3, r3, #15
 80087d6:	b25b      	sxtb	r3, r3
 80087d8:	4313      	orrs	r3, r2
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	70da      	strb	r2, [r3, #3]
			break;
 80087e8:	e072      	b.n	80088d0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	899b      	ldrh	r3, [r3, #12]
 80087f2:	085b      	lsrs	r3, r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4619      	mov	r1, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80087fe:	4413      	add	r3, r2
 8008800:	4619      	mov	r1, r3
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f7ff fdbe 	bl	8008384 <move_window>
 8008808:	4603      	mov	r3, r0
 800880a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800880c:	7ffb      	ldrb	r3, [r7, #31]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d15b      	bne.n	80088ca <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	8992      	ldrh	r2, [r2, #12]
 8008820:	fbb3 f0f2 	udiv	r0, r3, r2
 8008824:	fb00 f202 	mul.w	r2, r0, r2
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	440b      	add	r3, r1
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	b292      	uxth	r2, r2
 8008830:	4611      	mov	r1, r2
 8008832:	4618      	mov	r0, r3
 8008834:	f7ff fb31 	bl	8007e9a <st_word>
			fs->wflag = 1;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	70da      	strb	r2, [r3, #3]
			break;
 800883e:	e047      	b.n	80088d0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	899b      	ldrh	r3, [r3, #12]
 8008848:	089b      	lsrs	r3, r3, #2
 800884a:	b29b      	uxth	r3, r3
 800884c:	4619      	mov	r1, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	fbb3 f3f1 	udiv	r3, r3, r1
 8008854:	4413      	add	r3, r2
 8008856:	4619      	mov	r1, r3
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fd93 	bl	8008384 <move_window>
 800885e:	4603      	mov	r3, r0
 8008860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008862:	7ffb      	ldrb	r3, [r7, #31]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d132      	bne.n	80088ce <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	8992      	ldrh	r2, [r2, #12]
 800887c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008880:	fb00 f202 	mul.w	r2, r0, r2
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	440b      	add	r3, r1
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fae3 	bl	8007e54 <ld_dword>
 800888e:	4603      	mov	r3, r0
 8008890:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008894:	4323      	orrs	r3, r4
 8008896:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	8992      	ldrh	r2, [r2, #12]
 80088a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80088aa:	fb00 f202 	mul.w	r2, r0, r2
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	440b      	add	r3, r1
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff fb0b 	bl	8007ed0 <st_dword>
			fs->wflag = 1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	70da      	strb	r2, [r3, #3]
			break;
 80088c0:	e006      	b.n	80088d0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088ce:	bf00      	nop
		}
	}
	return res;
 80088d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3724      	adds	r7, #36	; 0x24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}

080088da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b088      	sub	sp, #32
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d904      	bls.n	8008900 <remove_chain+0x26>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d301      	bcc.n	8008904 <remove_chain+0x2a>
 8008900:	2302      	movs	r3, #2
 8008902:	e04b      	b.n	800899c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800890a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	69b8      	ldr	r0, [r7, #24]
 8008912:	f7ff fec8 	bl	80086a6 <put_fat>
 8008916:	4603      	mov	r3, r0
 8008918:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800891a:	7ffb      	ldrb	r3, [r7, #31]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <remove_chain+0x4a>
 8008920:	7ffb      	ldrb	r3, [r7, #31]
 8008922:	e03b      	b.n	800899c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7ff fde9 	bl	80084fe <get_fat>
 800892c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d031      	beq.n	8008998 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d101      	bne.n	800893e <remove_chain+0x64>
 800893a:	2302      	movs	r3, #2
 800893c:	e02e      	b.n	800899c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008944:	d101      	bne.n	800894a <remove_chain+0x70>
 8008946:	2301      	movs	r3, #1
 8008948:	e028      	b.n	800899c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800894a:	2200      	movs	r2, #0
 800894c:	68b9      	ldr	r1, [r7, #8]
 800894e:	69b8      	ldr	r0, [r7, #24]
 8008950:	f7ff fea9 	bl	80086a6 <put_fat>
 8008954:	4603      	mov	r3, r0
 8008956:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008958:	7ffb      	ldrb	r3, [r7, #31]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <remove_chain+0x88>
 800895e:	7ffb      	ldrb	r3, [r7, #31]
 8008960:	e01c      	b.n	800899c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	3b02      	subs	r3, #2
 800896c:	429a      	cmp	r2, r3
 800896e:	d20b      	bcs.n	8008988 <remove_chain+0xae>
			fs->free_clst++;
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	791b      	ldrb	r3, [r3, #4]
 800897e:	f043 0301 	orr.w	r3, r3, #1
 8008982:	b2da      	uxtb	r2, r3
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	429a      	cmp	r2, r3
 8008994:	d3c6      	bcc.n	8008924 <remove_chain+0x4a>
 8008996:	e000      	b.n	800899a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008998:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10d      	bne.n	80089d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d004      	beq.n	80089d0 <create_chain+0x2c>
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d31b      	bcc.n	8008a08 <create_chain+0x64>
 80089d0:	2301      	movs	r3, #1
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	e018      	b.n	8008a08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089d6:	6839      	ldr	r1, [r7, #0]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff fd90 	bl	80084fe <get_fat>
 80089de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d801      	bhi.n	80089ea <create_chain+0x46>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e070      	b.n	8008acc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f0:	d101      	bne.n	80089f6 <create_chain+0x52>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	e06a      	b.n	8008acc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d201      	bcs.n	8008a04 <create_chain+0x60>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	e063      	b.n	8008acc <create_chain+0x128>
		scl = clst;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d307      	bcc.n	8008a2c <create_chain+0x88>
				ncl = 2;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d901      	bls.n	8008a2c <create_chain+0x88>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e04f      	b.n	8008acc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a2c:	69f9      	ldr	r1, [r7, #28]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fd65 	bl	80084fe <get_fat>
 8008a34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00e      	beq.n	8008a5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d003      	beq.n	8008a4a <create_chain+0xa6>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a48:	d101      	bne.n	8008a4e <create_chain+0xaa>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	e03e      	b.n	8008acc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d1da      	bne.n	8008a0c <create_chain+0x68>
 8008a56:	2300      	movs	r3, #0
 8008a58:	e038      	b.n	8008acc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a60:	69f9      	ldr	r1, [r7, #28]
 8008a62:	6938      	ldr	r0, [r7, #16]
 8008a64:	f7ff fe1f 	bl	80086a6 <put_fat>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <create_chain+0xe2>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6938      	ldr	r0, [r7, #16]
 8008a7e:	f7ff fe12 	bl	80086a6 <put_fat>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d116      	bne.n	8008aba <create_chain+0x116>
		fs->last_clst = ncl;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	699a      	ldr	r2, [r3, #24]
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	3b02      	subs	r3, #2
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d804      	bhi.n	8008aaa <create_chain+0x106>
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	1e5a      	subs	r2, r3, #1
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	791b      	ldrb	r3, [r3, #4]
 8008aae:	f043 0301 	orr.w	r3, r3, #1
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	711a      	strb	r2, [r3, #4]
 8008ab8:	e007      	b.n	8008aca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <create_chain+0x122>
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ac4:	e000      	b.n	8008ac8 <create_chain+0x124>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008aca:	69fb      	ldr	r3, [r7, #28]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	3304      	adds	r3, #4
 8008aea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	899b      	ldrh	r3, [r3, #12]
 8008af0:	461a      	mov	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	8952      	ldrh	r2, [r2, #10]
 8008afc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	1d1a      	adds	r2, r3, #4
 8008b06:	613a      	str	r2, [r7, #16]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <clmt_clust+0x42>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e010      	b.n	8008b38 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d307      	bcc.n	8008b2e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b2c:	e7e9      	b.n	8008b02 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008b2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	371c      	adds	r7, #28
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b5a:	d204      	bcs.n	8008b66 <dir_sdi+0x22>
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	f003 031f 	and.w	r3, r3, #31
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b66:	2302      	movs	r3, #2
 8008b68:	e071      	b.n	8008c4e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <dir_sdi+0x46>
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d902      	bls.n	8008b8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10c      	bne.n	8008baa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	095b      	lsrs	r3, r3, #5
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	8912      	ldrh	r2, [r2, #8]
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d301      	bcc.n	8008ba0 <dir_sdi+0x5c>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e056      	b.n	8008c4e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	61da      	str	r2, [r3, #28]
 8008ba8:	e02d      	b.n	8008c06 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	895b      	ldrh	r3, [r3, #10]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	899b      	ldrh	r3, [r3, #12]
 8008bb4:	fb02 f303 	mul.w	r3, r2, r3
 8008bb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bba:	e019      	b.n	8008bf0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6979      	ldr	r1, [r7, #20]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff fc9c 	bl	80084fe <get_fat>
 8008bc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bce:	d101      	bne.n	8008bd4 <dir_sdi+0x90>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e03c      	b.n	8008c4e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d904      	bls.n	8008be4 <dir_sdi+0xa0>
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d301      	bcc.n	8008be8 <dir_sdi+0xa4>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e032      	b.n	8008c4e <dir_sdi+0x10a>
			ofs -= csz;
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d2e1      	bcs.n	8008bbc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008bf8:	6979      	ldr	r1, [r7, #20]
 8008bfa:	6938      	ldr	r0, [r7, #16]
 8008bfc:	f7ff fc60 	bl	80084c0 <clust2sect>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <dir_sdi+0xd4>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e01a      	b.n	8008c4e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	69da      	ldr	r2, [r3, #28]
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	899b      	ldrh	r3, [r3, #12]
 8008c20:	4619      	mov	r1, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c28:	441a      	add	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	899b      	ldrh	r3, [r3, #12]
 8008c38:	461a      	mov	r2, r3
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c40:	fb00 f202 	mul.w	r2, r0, r2
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	18ca      	adds	r2, r1, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	3320      	adds	r3, #32
 8008c6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <dir_next+0x28>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c7c:	d301      	bcc.n	8008c82 <dir_next+0x2c>
 8008c7e:	2304      	movs	r3, #4
 8008c80:	e0bb      	b.n	8008dfa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	899b      	ldrh	r3, [r3, #12]
 8008c86:	461a      	mov	r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c8e:	fb01 f202 	mul.w	r2, r1, r2
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 809d 	bne.w	8008dd4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	69db      	ldr	r3, [r3, #28]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10b      	bne.n	8008cc4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	095b      	lsrs	r3, r3, #5
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	8912      	ldrh	r2, [r2, #8]
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	f0c0 808d 	bcc.w	8008dd4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	61da      	str	r2, [r3, #28]
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	e09a      	b.n	8008dfa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	899b      	ldrh	r3, [r3, #12]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	8952      	ldrh	r2, [r2, #10]
 8008cd4:	3a01      	subs	r2, #1
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d17b      	bne.n	8008dd4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	f7ff fc0a 	bl	80084fe <get_fat>
 8008cea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d801      	bhi.n	8008cf6 <dir_next+0xa0>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e081      	b.n	8008dfa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cfc:	d101      	bne.n	8008d02 <dir_next+0xac>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e07b      	b.n	8008dfa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d359      	bcc.n	8008dc0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	61da      	str	r2, [r3, #28]
 8008d18:	2304      	movs	r3, #4
 8008d1a:	e06e      	b.n	8008dfa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f7ff fe3d 	bl	80089a4 <create_chain>
 8008d2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <dir_next+0xe0>
 8008d32:	2307      	movs	r3, #7
 8008d34:	e061      	b.n	8008dfa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d101      	bne.n	8008d40 <dir_next+0xea>
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	e05c      	b.n	8008dfa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d46:	d101      	bne.n	8008d4c <dir_next+0xf6>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e056      	b.n	8008dfa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff fad5 	bl	80082fc <sync_window>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <dir_next+0x106>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e04e      	b.n	8008dfa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	899b      	ldrh	r3, [r3, #12]
 8008d66:	461a      	mov	r2, r3
 8008d68:	2100      	movs	r1, #0
 8008d6a:	f7ff f8fe 	bl	8007f6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d6e:	2300      	movs	r3, #0
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	6979      	ldr	r1, [r7, #20]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f7ff fba3 	bl	80084c0 <clust2sect>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8008d80:	e012      	b.n	8008da8 <dir_next+0x152>
						fs->wflag = 1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7ff fab7 	bl	80082fc <sync_window>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <dir_next+0x142>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e030      	b.n	8008dfa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	635a      	str	r2, [r3, #52]	; 0x34
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	895b      	ldrh	r3, [r3, #10]
 8008dac:	461a      	mov	r2, r3
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d3e6      	bcc.n	8008d82 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	1ad2      	subs	r2, r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff fb79 	bl	80084c0 <clust2sect>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	899b      	ldrh	r3, [r3, #12]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dec:	fb00 f202 	mul.w	r2, r0, r2
 8008df0:	1a9b      	subs	r3, r3, r2
 8008df2:	18ca      	adds	r2, r1, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe95 	bl	8008b44 <dir_sdi>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d12b      	bne.n	8008e7c <dir_alloc+0x7a>
		n = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f7ff faa8 	bl	8008384 <move_window>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d11d      	bne.n	8008e7a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2be5      	cmp	r3, #229	; 0xe5
 8008e46:	d004      	beq.n	8008e52 <dir_alloc+0x50>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a1b      	ldr	r3, [r3, #32]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d107      	bne.n	8008e62 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3301      	adds	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d102      	bne.n	8008e66 <dir_alloc+0x64>
 8008e60:	e00c      	b.n	8008e7c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fef4 	bl	8008c56 <dir_next>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d0d7      	beq.n	8008e28 <dir_alloc+0x26>
 8008e78:	e000      	b.n	8008e7c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e7a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d101      	bne.n	8008e86 <dir_alloc+0x84>
 8008e82:	2307      	movs	r3, #7
 8008e84:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	331a      	adds	r3, #26
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe ffc0 	bl	8007e24 <ld_word>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d109      	bne.n	8008ec4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	3314      	adds	r3, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe ffb5 	bl	8007e24 <ld_word>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	041b      	lsls	r3, r3, #16
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	331a      	adds	r3, #26
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	b292      	uxth	r2, r2
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe ffd8 	bl	8007e9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d109      	bne.n	8008f06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f103 0214 	add.w	r2, r3, #20
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	0c1b      	lsrs	r3, r3, #16
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f7fe ffca 	bl	8007e9a <st_word>
	}
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008f10:	b590      	push	{r4, r7, lr}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	331a      	adds	r3, #26
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe ff80 	bl	8007e24 <ld_word>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <cmp_lfn+0x1e>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e059      	b.n	8008fe2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f36:	1e5a      	subs	r2, r3, #1
 8008f38:	4613      	mov	r3, r2
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f44:	2301      	movs	r3, #1
 8008f46:	81fb      	strh	r3, [r7, #14]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	e033      	b.n	8008fb6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f4e:	4a27      	ldr	r2, [pc, #156]	; (8008fec <cmp_lfn+0xdc>)
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	4413      	add	r3, r2
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	461a      	mov	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe ff61 	bl	8007e24 <ld_word>
 8008f62:	4603      	mov	r3, r0
 8008f64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008f66:	89fb      	ldrh	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d01a      	beq.n	8008fa2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2bfe      	cmp	r3, #254	; 0xfe
 8008f70:	d812      	bhi.n	8008f98 <cmp_lfn+0x88>
 8008f72:	89bb      	ldrh	r3, [r7, #12]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fdfb 	bl	800bb70 <ff_wtoupper>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461c      	mov	r4, r3
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	617a      	str	r2, [r7, #20]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 fdef 	bl	800bb70 <ff_wtoupper>
 8008f92:	4603      	mov	r3, r0
 8008f94:	429c      	cmp	r4, r3
 8008f96:	d001      	beq.n	8008f9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e022      	b.n	8008fe2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008f9c:	89bb      	ldrh	r3, [r7, #12]
 8008f9e:	81fb      	strh	r3, [r7, #14]
 8008fa0:	e006      	b.n	8008fb0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008fa2:	89bb      	ldrh	r3, [r7, #12]
 8008fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d001      	beq.n	8008fb0 <cmp_lfn+0xa0>
 8008fac:	2300      	movs	r3, #0
 8008fae:	e018      	b.n	8008fe2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b0c      	cmp	r3, #12
 8008fba:	d9c8      	bls.n	8008f4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <cmp_lfn+0xd0>
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d008      	beq.n	8008fe0 <cmp_lfn+0xd0>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	881b      	ldrh	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <cmp_lfn+0xd0>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e000      	b.n	8008fe2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008fe0:	2301      	movs	r3, #1
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd90      	pop	{r4, r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08011dd4 	.word	0x08011dd4

08008ff0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	331a      	adds	r3, #26
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe ff10 	bl	8007e24 <ld_word>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <pick_lfn+0x1e>
 800900a:	2300      	movs	r3, #0
 800900c:	e04d      	b.n	80090aa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009016:	1e5a      	subs	r2, r3, #1
 8009018:	4613      	mov	r3, r2
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	4413      	add	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009024:	2301      	movs	r3, #1
 8009026:	81fb      	strh	r3, [r7, #14]
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	e028      	b.n	8009080 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800902e:	4a21      	ldr	r2, [pc, #132]	; (80090b4 <pick_lfn+0xc4>)
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	4413      	add	r3, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fef1 	bl	8007e24 <ld_word>
 8009042:	4603      	mov	r3, r0
 8009044:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009046:	89fb      	ldrh	r3, [r7, #14]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00f      	beq.n	800906c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	2bfe      	cmp	r3, #254	; 0xfe
 8009050:	d901      	bls.n	8009056 <pick_lfn+0x66>
 8009052:	2300      	movs	r3, #0
 8009054:	e029      	b.n	80090aa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8009056:	89bb      	ldrh	r3, [r7, #12]
 8009058:	81fb      	strh	r3, [r7, #14]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	617a      	str	r2, [r7, #20]
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	89fa      	ldrh	r2, [r7, #14]
 8009068:	801a      	strh	r2, [r3, #0]
 800906a:	e006      	b.n	800907a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800906c:	89bb      	ldrh	r3, [r7, #12]
 800906e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009072:	4293      	cmp	r3, r2
 8009074:	d001      	beq.n	800907a <pick_lfn+0x8a>
 8009076:	2300      	movs	r3, #0
 8009078:	e017      	b.n	80090aa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	3301      	adds	r3, #1
 800907e:	613b      	str	r3, [r7, #16]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b0c      	cmp	r3, #12
 8009084:	d9d3      	bls.n	800902e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2bfe      	cmp	r3, #254	; 0xfe
 8009096:	d901      	bls.n	800909c <pick_lfn+0xac>
 8009098:	2300      	movs	r3, #0
 800909a:	e006      	b.n	80090aa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	4413      	add	r3, r2
 80090a4:	2200      	movs	r2, #0
 80090a6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80090a8:	2301      	movs	r3, #1
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	08011dd4 	.word	0x08011dd4

080090b8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4611      	mov	r1, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	460b      	mov	r3, r1
 80090c8:	71fb      	strb	r3, [r7, #7]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	330d      	adds	r3, #13
 80090d2:	79ba      	ldrb	r2, [r7, #6]
 80090d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	330b      	adds	r3, #11
 80090da:	220f      	movs	r2, #15
 80090dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	330c      	adds	r3, #12
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	331a      	adds	r3, #26
 80090ea:	2100      	movs	r1, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7fe fed4 	bl	8007e9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	1e5a      	subs	r2, r3, #1
 80090f6:	4613      	mov	r3, r2
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009102:	2300      	movs	r3, #0
 8009104:	82fb      	strh	r3, [r7, #22]
 8009106:	2300      	movs	r3, #0
 8009108:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800910a:	8afb      	ldrh	r3, [r7, #22]
 800910c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <put_lfn+0x6c>
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	61fa      	str	r2, [r7, #28]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009124:	4a17      	ldr	r2, [pc, #92]	; (8009184 <put_lfn+0xcc>)
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	4413      	add	r3, r2
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4413      	add	r3, r2
 8009132:	8afa      	ldrh	r2, [r7, #22]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe feaf 	bl	8007e9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800913c:	8afb      	ldrh	r3, [r7, #22]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <put_lfn+0x90>
 8009142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009146:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	3301      	adds	r3, #1
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	2b0c      	cmp	r3, #12
 8009152:	d9da      	bls.n	800910a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009154:	8afb      	ldrh	r3, [r7, #22]
 8009156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800915a:	4293      	cmp	r3, r2
 800915c:	d006      	beq.n	800916c <put_lfn+0xb4>
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <put_lfn+0xbc>
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009172:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	79fa      	ldrb	r2, [r7, #7]
 8009178:	701a      	strb	r2, [r3, #0]
}
 800917a:	bf00      	nop
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	08011dd4 	.word	0x08011dd4

08009188 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08c      	sub	sp, #48	; 0x30
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009196:	220b      	movs	r2, #11
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f7fe fec4 	bl	8007f28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	d92b      	bls.n	80091fe <gen_numname+0x76>
		sr = seq;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80091aa:	e022      	b.n	80091f2 <gen_numname+0x6a>
			wc = *lfn++;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1c9a      	adds	r2, r3, #2
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80091b6:	2300      	movs	r3, #0
 80091b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ba:	e017      	b.n	80091ec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	005a      	lsls	r2, r3, #1
 80091c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	4413      	add	r3, r2
 80091c8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80091ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <gen_numname+0x5e>
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80091e0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80091e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	3301      	adds	r3, #1
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d9e4      	bls.n	80091bc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1d8      	bne.n	80091ac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80091fe:	2307      	movs	r3, #7
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	b2db      	uxtb	r3, r3
 800920c:	3330      	adds	r3, #48	; 0x30
 800920e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009216:	2b39      	cmp	r3, #57	; 0x39
 8009218:	d904      	bls.n	8009224 <gen_numname+0x9c>
 800921a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800921e:	3307      	adds	r3, #7
 8009220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009226:	1e5a      	subs	r2, r3, #1
 8009228:	62ba      	str	r2, [r7, #40]	; 0x28
 800922a:	3330      	adds	r3, #48	; 0x30
 800922c:	443b      	add	r3, r7
 800922e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009232:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	091b      	lsrs	r3, r3, #4
 800923a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1df      	bne.n	8009202 <gen_numname+0x7a>
	ns[i] = '~';
 8009242:	f107 0214 	add.w	r2, r7, #20
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	4413      	add	r3, r2
 800924a:	227e      	movs	r2, #126	; 0x7e
 800924c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800924e:	2300      	movs	r3, #0
 8009250:	627b      	str	r3, [r7, #36]	; 0x24
 8009252:	e002      	b.n	800925a <gen_numname+0xd2>
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	3301      	adds	r3, #1
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
 800925a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925e:	429a      	cmp	r2, r3
 8009260:	d205      	bcs.n	800926e <gen_numname+0xe6>
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	4413      	add	r3, r2
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b20      	cmp	r3, #32
 800926c:	d1f2      	bne.n	8009254 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	2b07      	cmp	r3, #7
 8009272:	d807      	bhi.n	8009284 <gen_numname+0xfc>
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	62ba      	str	r2, [r7, #40]	; 0x28
 800927a:	3330      	adds	r3, #48	; 0x30
 800927c:	443b      	add	r3, r7
 800927e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009282:	e000      	b.n	8009286 <gen_numname+0xfe>
 8009284:	2120      	movs	r1, #32
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	627a      	str	r2, [r7, #36]	; 0x24
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	460a      	mov	r2, r1
 8009292:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	2b07      	cmp	r3, #7
 8009298:	d9e9      	bls.n	800926e <gen_numname+0xe6>
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	3730      	adds	r7, #48	; 0x30
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80092b0:	230b      	movs	r3, #11
 80092b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	0852      	lsrs	r2, r2, #1
 80092ba:	01db      	lsls	r3, r3, #7
 80092bc:	4313      	orrs	r3, r2
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	1c59      	adds	r1, r3, #1
 80092c4:	6079      	str	r1, [r7, #4]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	4413      	add	r3, r2
 80092ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1ed      	bne.n	80092b4 <sum_sfn+0x10>
	return sum;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80092f0:	2304      	movs	r3, #4
 80092f2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80092fa:	23ff      	movs	r3, #255	; 0xff
 80092fc:	757b      	strb	r3, [r7, #21]
 80092fe:	23ff      	movs	r3, #255	; 0xff
 8009300:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009302:	e081      	b.n	8009408 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	4619      	mov	r1, r3
 800930a:	6938      	ldr	r0, [r7, #16]
 800930c:	f7ff f83a 	bl	8008384 <move_window>
 8009310:	4603      	mov	r3, r0
 8009312:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17c      	bne.n	8009414 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8009322:	7dbb      	ldrb	r3, [r7, #22]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d102      	bne.n	800932e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009328:	2304      	movs	r3, #4
 800932a:	75fb      	strb	r3, [r7, #23]
 800932c:	e077      	b.n	800941e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	330b      	adds	r3, #11
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800933a:	73fb      	strb	r3, [r7, #15]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	7bfa      	ldrb	r2, [r7, #15]
 8009340:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009342:	7dbb      	ldrb	r3, [r7, #22]
 8009344:	2be5      	cmp	r3, #229	; 0xe5
 8009346:	d00e      	beq.n	8009366 <dir_read+0x80>
 8009348:	7dbb      	ldrb	r3, [r7, #22]
 800934a:	2b2e      	cmp	r3, #46	; 0x2e
 800934c:	d00b      	beq.n	8009366 <dir_read+0x80>
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	f023 0320 	bic.w	r3, r3, #32
 8009354:	2b08      	cmp	r3, #8
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	4293      	cmp	r3, r2
 8009364:	d002      	beq.n	800936c <dir_read+0x86>
				ord = 0xFF;
 8009366:	23ff      	movs	r3, #255	; 0xff
 8009368:	757b      	strb	r3, [r7, #21]
 800936a:	e044      	b.n	80093f6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b0f      	cmp	r3, #15
 8009370:	d12f      	bne.n	80093d2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009372:	7dbb      	ldrb	r3, [r7, #22]
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00d      	beq.n	8009398 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	7b5b      	ldrb	r3, [r3, #13]
 8009382:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009384:	7dbb      	ldrb	r3, [r7, #22]
 8009386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938a:	75bb      	strb	r3, [r7, #22]
 800938c:	7dbb      	ldrb	r3, [r7, #22]
 800938e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695a      	ldr	r2, [r3, #20]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009398:	7dba      	ldrb	r2, [r7, #22]
 800939a:	7d7b      	ldrb	r3, [r7, #21]
 800939c:	429a      	cmp	r2, r3
 800939e:	d115      	bne.n	80093cc <dir_read+0xe6>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	330d      	adds	r3, #13
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	7d3a      	ldrb	r2, [r7, #20]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d10e      	bne.n	80093cc <dir_read+0xe6>
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7ff fe19 	bl	8008ff0 <pick_lfn>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <dir_read+0xe6>
 80093c4:	7d7b      	ldrb	r3, [r7, #21]
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	e000      	b.n	80093ce <dir_read+0xe8>
 80093cc:	23ff      	movs	r3, #255	; 0xff
 80093ce:	757b      	strb	r3, [r7, #21]
 80093d0:	e011      	b.n	80093f6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80093d2:	7d7b      	ldrb	r3, [r7, #21]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <dir_read+0x106>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff ff61 	bl	80092a4 <sum_sfn>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	7d3b      	ldrb	r3, [r7, #20]
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d015      	beq.n	8009418 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80093f4:	e010      	b.n	8009418 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80093f6:	2100      	movs	r1, #0
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff fc2c 	bl	8008c56 <dir_next>
 80093fe:	4603      	mov	r3, r0
 8009400:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <dir_read+0x136>
	while (dp->sect) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f af79 	bne.w	8009304 <dir_read+0x1e>
 8009412:	e004      	b.n	800941e <dir_read+0x138>
		if (res != FR_OK) break;
 8009414:	bf00      	nop
 8009416:	e002      	b.n	800941e <dir_read+0x138>
					break;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <dir_read+0x138>
		if (res != FR_OK) break;
 800941c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <dir_read+0x144>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	61da      	str	r2, [r3, #28]
	return res;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009442:	2100      	movs	r1, #0
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fb7d 	bl	8008b44 <dir_sdi>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <dir_find+0x24>
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	e0a9      	b.n	80095ac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009458:	23ff      	movs	r3, #255	; 0xff
 800945a:	753b      	strb	r3, [r7, #20]
 800945c:	7d3b      	ldrb	r3, [r7, #20]
 800945e:	757b      	strb	r3, [r7, #21]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009466:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	4619      	mov	r1, r3
 800946e:	6938      	ldr	r0, [r7, #16]
 8009470:	f7fe ff88 	bl	8008384 <move_window>
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 8090 	bne.w	80095a0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <dir_find+0x60>
 800948e:	2304      	movs	r3, #4
 8009490:	75fb      	strb	r3, [r7, #23]
 8009492:	e08a      	b.n	80095aa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	330b      	adds	r3, #11
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094a0:	73fb      	strb	r3, [r7, #15]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7bfa      	ldrb	r2, [r7, #15]
 80094a6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
 80094aa:	2be5      	cmp	r3, #229	; 0xe5
 80094ac:	d007      	beq.n	80094be <dir_find+0x8a>
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
 80094b0:	f003 0308 	and.w	r3, r3, #8
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <dir_find+0x98>
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	2b0f      	cmp	r3, #15
 80094bc:	d006      	beq.n	80094cc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094be:	23ff      	movs	r3, #255	; 0xff
 80094c0:	757b      	strb	r3, [r7, #21]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
 80094ca:	e05e      	b.n	800958a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b0f      	cmp	r3, #15
 80094d0:	d136      	bne.n	8009540 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d154      	bne.n	800958a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80094e0:	7dbb      	ldrb	r3, [r7, #22]
 80094e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00d      	beq.n	8009506 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	7b5b      	ldrb	r3, [r3, #13]
 80094f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80094f2:	7dbb      	ldrb	r3, [r7, #22]
 80094f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f8:	75bb      	strb	r3, [r7, #22]
 80094fa:	7dbb      	ldrb	r3, [r7, #22]
 80094fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695a      	ldr	r2, [r3, #20]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009506:	7dba      	ldrb	r2, [r7, #22]
 8009508:	7d7b      	ldrb	r3, [r7, #21]
 800950a:	429a      	cmp	r2, r3
 800950c:	d115      	bne.n	800953a <dir_find+0x106>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	330d      	adds	r3, #13
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	7d3a      	ldrb	r2, [r7, #20]
 8009518:	429a      	cmp	r2, r3
 800951a:	d10e      	bne.n	800953a <dir_find+0x106>
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	691a      	ldr	r2, [r3, #16]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a1b      	ldr	r3, [r3, #32]
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7ff fcf2 	bl	8008f10 <cmp_lfn>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <dir_find+0x106>
 8009532:	7d7b      	ldrb	r3, [r7, #21]
 8009534:	3b01      	subs	r3, #1
 8009536:	b2db      	uxtb	r3, r3
 8009538:	e000      	b.n	800953c <dir_find+0x108>
 800953a:	23ff      	movs	r3, #255	; 0xff
 800953c:	757b      	strb	r3, [r7, #21]
 800953e:	e024      	b.n	800958a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009540:	7d7b      	ldrb	r3, [r7, #21]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <dir_find+0x126>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff feaa 	bl	80092a4 <sum_sfn>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	7d3b      	ldrb	r3, [r7, #20]
 8009556:	4293      	cmp	r3, r2
 8009558:	d024      	beq.n	80095a4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <dir_find+0x14a>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a18      	ldr	r0, [r3, #32]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3324      	adds	r3, #36	; 0x24
 8009570:	220b      	movs	r2, #11
 8009572:	4619      	mov	r1, r3
 8009574:	f7fe fd14 	bl	8007fa0 <mem_cmp>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d014      	beq.n	80095a8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800957e:	23ff      	movs	r3, #255	; 0xff
 8009580:	757b      	strb	r3, [r7, #21]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009588:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff fb62 	bl	8008c56 <dir_next>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f43f af65 	beq.w	8009468 <dir_find+0x34>
 800959e:	e004      	b.n	80095aa <dir_find+0x176>
		if (res != FR_OK) break;
 80095a0:	bf00      	nop
 80095a2:	e002      	b.n	80095aa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80095a8:	bf00      	nop

	return res;
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3718      	adds	r7, #24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08c      	sub	sp, #48	; 0x30
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80095c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <dir_register+0x20>
 80095d0:	2306      	movs	r3, #6
 80095d2:	e0e0      	b.n	8009796 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80095d4:	2300      	movs	r3, #0
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
 80095d8:	e002      	b.n	80095e0 <dir_register+0x2c>
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	3301      	adds	r3, #1
 80095de:	627b      	str	r3, [r7, #36]	; 0x24
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	005b      	lsls	r3, r3, #1
 80095e8:	4413      	add	r3, r2
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f4      	bne.n	80095da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80095f6:	f107 030c 	add.w	r3, r7, #12
 80095fa:	220c      	movs	r2, #12
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fc93 	bl	8007f28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d032      	beq.n	8009672 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2240      	movs	r2, #64	; 0x40
 8009610:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009614:	2301      	movs	r3, #1
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
 8009618:	e016      	b.n	8009648 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	f107 010c 	add.w	r1, r7, #12
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f7ff fdad 	bl	8009188 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7ff ff00 	bl	8009434 <dir_find>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800963a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	3301      	adds	r3, #1
 8009646:	62bb      	str	r3, [r7, #40]	; 0x28
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	2b63      	cmp	r3, #99	; 0x63
 800964c:	d9e5      	bls.n	800961a <dir_register+0x66>
 800964e:	e000      	b.n	8009652 <dir_register+0x9e>
			if (res != FR_OK) break;
 8009650:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	2b64      	cmp	r3, #100	; 0x64
 8009656:	d101      	bne.n	800965c <dir_register+0xa8>
 8009658:	2307      	movs	r3, #7
 800965a:	e09c      	b.n	8009796 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800965c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009660:	2b04      	cmp	r3, #4
 8009662:	d002      	beq.n	800966a <dir_register+0xb6>
 8009664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009668:	e095      	b.n	8009796 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800966a:	7dfa      	ldrb	r2, [r7, #23]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <dir_register+0xd8>
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	330c      	adds	r3, #12
 8009680:	4a47      	ldr	r2, [pc, #284]	; (80097a0 <dir_register+0x1ec>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	3301      	adds	r3, #1
 800968a:	e000      	b.n	800968e <dir_register+0xda>
 800968c:	2301      	movs	r3, #1
 800968e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009690:	6a39      	ldr	r1, [r7, #32]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff fbb5 	bl	8008e02 <dir_alloc>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800969e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d148      	bne.n	8009738 <dir_register+0x184>
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	623b      	str	r3, [r7, #32]
 80096ac:	6a3b      	ldr	r3, [r7, #32]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d042      	beq.n	8009738 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695a      	ldr	r2, [r3, #20]
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	015b      	lsls	r3, r3, #5
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff fa40 	bl	8008b44 <dir_sdi>
 80096c4:	4603      	mov	r3, r0
 80096c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80096ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d132      	bne.n	8009738 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3324      	adds	r3, #36	; 0x24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fde4 	bl	80092a4 <sum_sfn>
 80096dc:	4603      	mov	r3, r0
 80096de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	4619      	mov	r1, r3
 80096e6:	69f8      	ldr	r0, [r7, #28]
 80096e8:	f7fe fe4c 	bl	8008384 <move_window>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80096f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d11d      	bne.n	8009736 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	6918      	ldr	r0, [r3, #16]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a19      	ldr	r1, [r3, #32]
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	b2da      	uxtb	r2, r3
 8009706:	7efb      	ldrb	r3, [r7, #27]
 8009708:	f7ff fcd6 	bl	80090b8 <put_lfn>
				fs->wflag = 1;
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	2201      	movs	r2, #1
 8009710:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7ff fa9e 	bl	8008c56 <dir_next>
 800971a:	4603      	mov	r3, r0
 800971c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009724:	2b00      	cmp	r3, #0
 8009726:	d107      	bne.n	8009738 <dir_register+0x184>
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	3b01      	subs	r3, #1
 800972c:	623b      	str	r3, [r7, #32]
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1d5      	bne.n	80096e0 <dir_register+0x12c>
 8009734:	e000      	b.n	8009738 <dir_register+0x184>
				if (res != FR_OK) break;
 8009736:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800973c:	2b00      	cmp	r3, #0
 800973e:	d128      	bne.n	8009792 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	4619      	mov	r1, r3
 8009746:	69f8      	ldr	r0, [r7, #28]
 8009748:	f7fe fe1c 	bl	8008384 <move_window>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009756:	2b00      	cmp	r3, #0
 8009758:	d11b      	bne.n	8009792 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	2220      	movs	r2, #32
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe fc01 	bl	8007f6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a18      	ldr	r0, [r3, #32]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	220b      	movs	r2, #11
 8009772:	4619      	mov	r1, r3
 8009774:	f7fe fbd8 	bl	8007f28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	330c      	adds	r3, #12
 8009784:	f002 0218 	and.w	r2, r2, #24
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	2201      	movs	r2, #1
 8009790:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009796:	4618      	mov	r0, r3
 8009798:	3730      	adds	r7, #48	; 0x30
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	4ec4ec4f 	.word	0x4ec4ec4f

080097a4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c0:	d007      	beq.n	80097d2 <dir_remove+0x2e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	4619      	mov	r1, r3
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff f9bb 	bl	8008b44 <dir_sdi>
 80097ce:	4603      	mov	r3, r0
 80097d0:	e000      	b.n	80097d4 <dir_remove+0x30>
 80097d2:	2300      	movs	r3, #0
 80097d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d128      	bne.n	800982e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	4619      	mov	r1, r3
 80097e2:	6938      	ldr	r0, [r7, #16]
 80097e4:	f7fe fdce 	bl	8008384 <move_window>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d115      	bne.n	800981e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	22e5      	movs	r2, #229	; 0xe5
 80097f8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	2201      	movs	r2, #1
 80097fe:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	695b      	ldr	r3, [r3, #20]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	429a      	cmp	r2, r3
 8009808:	d90b      	bls.n	8009822 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800980a:	2100      	movs	r1, #0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff fa22 	bl	8008c56 <dir_next>
 8009812:	4603      	mov	r3, r0
 8009814:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0df      	beq.n	80097dc <dir_remove+0x38>
 800981c:	e002      	b.n	8009824 <dir_remove+0x80>
			if (res != FR_OK) break;
 800981e:	bf00      	nop
 8009820:	e000      	b.n	8009824 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8009822:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8009824:	7dfb      	ldrb	r3, [r7, #23]
 8009826:	2b04      	cmp	r3, #4
 8009828:	d101      	bne.n	800982e <dir_remove+0x8a>
 800982a:	2302      	movs	r3, #2
 800982c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800982e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 80c9 	beq.w	80099ea <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009860:	d032      	beq.n	80098c8 <get_fileinfo+0x90>
			i = j = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	61bb      	str	r3, [r7, #24]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800986a:	e01b      	b.n	80098a4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800986c:	89fb      	ldrh	r3, [r7, #14]
 800986e:	2100      	movs	r1, #0
 8009870:	4618      	mov	r0, r3
 8009872:	f002 f941 	bl	800baf8 <ff_convert>
 8009876:	4603      	mov	r3, r0
 8009878:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800987a:	89fb      	ldrh	r3, [r7, #14]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <get_fileinfo+0x4e>
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	e01a      	b.n	80098bc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	2bfe      	cmp	r3, #254	; 0xfe
 800988a:	d902      	bls.n	8009892 <get_fileinfo+0x5a>
 800988c:	2300      	movs	r3, #0
 800988e:	61fb      	str	r3, [r7, #28]
 8009890:	e014      	b.n	80098bc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	61fa      	str	r2, [r7, #28]
 8009898:	89fa      	ldrh	r2, [r7, #14]
 800989a:	b2d1      	uxtb	r1, r2
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	4413      	add	r3, r2
 80098a0:	460a      	mov	r2, r1
 80098a2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	1c59      	adds	r1, r3, #1
 80098ac:	61b9      	str	r1, [r7, #24]
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	81fb      	strh	r3, [r7, #14]
 80098b6:	89fb      	ldrh	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1d7      	bne.n	800986c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	3316      	adds	r3, #22
 80098c4:	2200      	movs	r2, #0
 80098c6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	4413      	add	r3, r2
 80098d6:	3316      	adds	r3, #22
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80098dc:	e04c      	b.n	8009978 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	1c59      	adds	r1, r3, #1
 80098e6:	61f9      	str	r1, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	d100      	bne.n	80098f6 <get_fileinfo+0xbe>
 80098f4:	e040      	b.n	8009978 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	2b05      	cmp	r3, #5
 80098fa:	d101      	bne.n	8009900 <get_fileinfo+0xc8>
 80098fc:	23e5      	movs	r3, #229	; 0xe5
 80098fe:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	2b09      	cmp	r3, #9
 8009904:	d10f      	bne.n	8009926 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009906:	89bb      	ldrh	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d105      	bne.n	8009918 <get_fileinfo+0xe0>
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	4413      	add	r3, r2
 8009912:	3316      	adds	r3, #22
 8009914:	222e      	movs	r2, #46	; 0x2e
 8009916:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	61ba      	str	r2, [r7, #24]
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	4413      	add	r3, r2
 8009922:	222e      	movs	r2, #46	; 0x2e
 8009924:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	4413      	add	r3, r2
 800992c:	3309      	adds	r3, #9
 800992e:	7dfa      	ldrb	r2, [r7, #23]
 8009930:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009932:	89bb      	ldrh	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11c      	bne.n	8009972 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b40      	cmp	r3, #64	; 0x40
 800993c:	d913      	bls.n	8009966 <get_fileinfo+0x12e>
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	2b5a      	cmp	r3, #90	; 0x5a
 8009942:	d810      	bhi.n	8009966 <get_fileinfo+0x12e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	330c      	adds	r3, #12
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	2b08      	cmp	r3, #8
 8009952:	d901      	bls.n	8009958 <get_fileinfo+0x120>
 8009954:	2310      	movs	r3, #16
 8009956:	e000      	b.n	800995a <get_fileinfo+0x122>
 8009958:	2308      	movs	r3, #8
 800995a:	4013      	ands	r3, r2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	3320      	adds	r3, #32
 8009964:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	4413      	add	r3, r2
 800996c:	3316      	adds	r3, #22
 800996e:	7dfa      	ldrb	r2, [r7, #23]
 8009970:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3301      	adds	r3, #1
 8009976:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2b0a      	cmp	r3, #10
 800997c:	d9af      	bls.n	80098de <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800997e:	89bb      	ldrh	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10d      	bne.n	80099a0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	4413      	add	r3, r2
 800998a:	3316      	adds	r3, #22
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	330c      	adds	r3, #12
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <get_fileinfo+0x168>
 800999c:	2300      	movs	r3, #0
 800999e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	4413      	add	r3, r2
 80099a6:	3309      	adds	r3, #9
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	7ada      	ldrb	r2, [r3, #11]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	331c      	adds	r3, #28
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fa49 	bl	8007e54 <ld_dword>
 80099c2:	4602      	mov	r2, r0
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a1b      	ldr	r3, [r3, #32]
 80099cc:	3316      	adds	r3, #22
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fa40 	bl	8007e54 <ld_dword>
 80099d4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	80da      	strh	r2, [r3, #6]
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	809a      	strh	r2, [r3, #4]
 80099e8:	e000      	b.n	80099ec <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099ea:	bf00      	nop
}
 80099ec:	3720      	adds	r7, #32
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	613b      	str	r3, [r7, #16]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	61ba      	str	r2, [r7, #24]
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a24:	2b1f      	cmp	r3, #31
 8009a26:	d940      	bls.n	8009aaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8009a2c:	d006      	beq.n	8009a3c <create_name+0x48>
 8009a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a30:	2b5c      	cmp	r3, #92	; 0x5c
 8009a32:	d110      	bne.n	8009a56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009a34:	e002      	b.n	8009a3c <create_name+0x48>
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	4413      	add	r3, r2
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b2f      	cmp	r3, #47	; 0x2f
 8009a46:	d0f6      	beq.n	8009a36 <create_name+0x42>
 8009a48:	693a      	ldr	r2, [r7, #16]
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b5c      	cmp	r3, #92	; 0x5c
 8009a52:	d0f0      	beq.n	8009a36 <create_name+0x42>
			break;
 8009a54:	e02a      	b.n	8009aac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2bfe      	cmp	r3, #254	; 0xfe
 8009a5a:	d901      	bls.n	8009a60 <create_name+0x6c>
 8009a5c:	2306      	movs	r3, #6
 8009a5e:	e17d      	b.n	8009d5c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009a60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a68:	2101      	movs	r1, #1
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f002 f844 	bl	800baf8 <ff_convert>
 8009a70:	4603      	mov	r3, r0
 8009a72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <create_name+0x8a>
 8009a7a:	2306      	movs	r3, #6
 8009a7c:	e16e      	b.n	8009d5c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009a7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a80:	2b7f      	cmp	r3, #127	; 0x7f
 8009a82:	d809      	bhi.n	8009a98 <create_name+0xa4>
 8009a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a86:	4619      	mov	r1, r3
 8009a88:	488d      	ldr	r0, [pc, #564]	; (8009cc0 <create_name+0x2cc>)
 8009a8a:	f7fe fab0 	bl	8007fee <chk_chr>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <create_name+0xa4>
 8009a94:	2306      	movs	r3, #6
 8009a96:	e161      	b.n	8009d5c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	617a      	str	r2, [r7, #20]
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009aa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009aa8:	e7b4      	b.n	8009a14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009aaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	441a      	add	r2, r3
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009ab6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ab8:	2b1f      	cmp	r3, #31
 8009aba:	d801      	bhi.n	8009ac0 <create_name+0xcc>
 8009abc:	2304      	movs	r3, #4
 8009abe:	e000      	b.n	8009ac2 <create_name+0xce>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009ac6:	e011      	b.n	8009aec <create_name+0xf8>
		w = lfn[di - 1];
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d002      	beq.n	8009ae6 <create_name+0xf2>
 8009ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae4:	d106      	bne.n	8009af4 <create_name+0x100>
		di--;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1ea      	bne.n	8009ac8 <create_name+0xd4>
 8009af2:	e000      	b.n	8009af6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009af4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	2200      	movs	r2, #0
 8009b00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <create_name+0x118>
 8009b08:	2306      	movs	r3, #6
 8009b0a:	e127      	b.n	8009d5c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3324      	adds	r3, #36	; 0x24
 8009b10:	220b      	movs	r2, #11
 8009b12:	2120      	movs	r1, #32
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fa28 	bl	8007f6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61bb      	str	r3, [r7, #24]
 8009b1e:	e002      	b.n	8009b26 <create_name+0x132>
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d0f5      	beq.n	8009b20 <create_name+0x12c>
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b40:	d0ee      	beq.n	8009b20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d009      	beq.n	8009b5c <create_name+0x168>
 8009b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b4c:	f043 0303 	orr.w	r3, r3, #3
 8009b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009b54:	e002      	b.n	8009b5c <create_name+0x168>
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <create_name+0x182>
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	2b2e      	cmp	r3, #46	; 0x2e
 8009b74:	d1ef      	bne.n	8009b56 <create_name+0x162>

	i = b = 0; ni = 8;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	623b      	str	r3, [r7, #32]
 8009b80:	2308      	movs	r3, #8
 8009b82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	61ba      	str	r2, [r7, #24]
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8090 	beq.w	8009cbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b9e:	2b20      	cmp	r3, #32
 8009ba0:	d006      	beq.n	8009bb0 <create_name+0x1bc>
 8009ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba6:	d10a      	bne.n	8009bbe <create_name+0x1ca>
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d006      	beq.n	8009bbe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb4:	f043 0303 	orr.w	r3, r3, #3
 8009bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bbc:	e07d      	b.n	8009cba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009bbe:	6a3a      	ldr	r2, [r7, #32]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d203      	bcs.n	8009bce <create_name+0x1da>
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d123      	bne.n	8009c16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	2b0b      	cmp	r3, #11
 8009bd2:	d106      	bne.n	8009be2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd8:	f043 0303 	orr.w	r3, r3, #3
 8009bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009be0:	e075      	b.n	8009cce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d005      	beq.n	8009bf6 <create_name+0x202>
 8009bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bee:	f043 0303 	orr.w	r3, r3, #3
 8009bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d866      	bhi.n	8009ccc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	61bb      	str	r3, [r7, #24]
 8009c02:	2308      	movs	r3, #8
 8009c04:	623b      	str	r3, [r7, #32]
 8009c06:	230b      	movs	r3, #11
 8009c08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009c0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c14:	e051      	b.n	8009cba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c18:	2b7f      	cmp	r3, #127	; 0x7f
 8009c1a:	d914      	bls.n	8009c46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 ff69 	bl	800baf8 <ff_convert>
 8009c26:	4603      	mov	r3, r0
 8009c28:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <create_name+0x246>
 8009c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c32:	3b80      	subs	r3, #128	; 0x80
 8009c34:	4a23      	ldr	r2, [pc, #140]	; (8009cc4 <create_name+0x2d0>)
 8009c36:	5cd3      	ldrb	r3, [r2, r3]
 8009c38:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3e:	f043 0302 	orr.w	r3, r3, #2
 8009c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d007      	beq.n	8009c5c <create_name+0x268>
 8009c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c4e:	4619      	mov	r1, r3
 8009c50:	481d      	ldr	r0, [pc, #116]	; (8009cc8 <create_name+0x2d4>)
 8009c52:	f7fe f9cc 	bl	8007fee <chk_chr>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d008      	beq.n	8009c6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009c5c:	235f      	movs	r3, #95	; 0x5f
 8009c5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c64:	f043 0303 	orr.w	r3, r3, #3
 8009c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c6c:	e01b      	b.n	8009ca6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d909      	bls.n	8009c88 <create_name+0x294>
 8009c74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c76:	2b5a      	cmp	r3, #90	; 0x5a
 8009c78:	d806      	bhi.n	8009c88 <create_name+0x294>
					b |= 2;
 8009c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c86:	e00e      	b.n	8009ca6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c8a:	2b60      	cmp	r3, #96	; 0x60
 8009c8c:	d90b      	bls.n	8009ca6 <create_name+0x2b2>
 8009c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c90:	2b7a      	cmp	r3, #122	; 0x7a
 8009c92:	d808      	bhi.n	8009ca6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c98:	f043 0301 	orr.w	r3, r3, #1
 8009c9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ca2:	3b20      	subs	r3, #32
 8009ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009ca6:	6a3b      	ldr	r3, [r7, #32]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	623a      	str	r2, [r7, #32]
 8009cac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009cae:	b2d1      	uxtb	r1, r2
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	460a      	mov	r2, r1
 8009cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009cba:	e763      	b.n	8009b84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009cbc:	bf00      	nop
 8009cbe:	e006      	b.n	8009cce <create_name+0x2da>
 8009cc0:	08011cc8 	.word	0x08011cc8
 8009cc4:	08011d54 	.word	0x08011d54
 8009cc8:	08011cd4 	.word	0x08011cd4
			if (si > di) break;			/* No extension */
 8009ccc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cd4:	2be5      	cmp	r3, #229	; 0xe5
 8009cd6:	d103      	bne.n	8009ce0 <create_name+0x2ec>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2205      	movs	r2, #5
 8009cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d104      	bne.n	8009cf0 <create_name+0x2fc>
 8009ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cf4:	f003 030c 	and.w	r3, r3, #12
 8009cf8:	2b0c      	cmp	r3, #12
 8009cfa:	d005      	beq.n	8009d08 <create_name+0x314>
 8009cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d105      	bne.n	8009d14 <create_name+0x320>
 8009d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d117      	bne.n	8009d50 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009d20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d105      	bne.n	8009d38 <create_name+0x344>
 8009d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d30:	f043 0310 	orr.w	r3, r3, #16
 8009d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009d38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d3c:	f003 030c 	and.w	r3, r3, #12
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	d105      	bne.n	8009d50 <create_name+0x35c>
 8009d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d48:	f043 0308 	orr.w	r3, r3, #8
 8009d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009d56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009d5a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3728      	adds	r7, #40	; 0x28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009d78:	e002      	b.n	8009d80 <follow_path+0x1c>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b2f      	cmp	r3, #47	; 0x2f
 8009d86:	d0f8      	beq.n	8009d7a <follow_path+0x16>
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b5c      	cmp	r3, #92	; 0x5c
 8009d8e:	d0f4      	beq.n	8009d7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2200      	movs	r2, #0
 8009d94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	2b1f      	cmp	r3, #31
 8009d9c:	d80a      	bhi.n	8009db4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2280      	movs	r2, #128	; 0x80
 8009da2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009da6:	2100      	movs	r1, #0
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7fe fecb 	bl	8008b44 <dir_sdi>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
 8009db2:	e048      	b.n	8009e46 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009db4:	463b      	mov	r3, r7
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fe1b 	bl	80099f4 <create_name>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d139      	bne.n	8009e3c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff fb33 	bl	8009434 <dir_find>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009dd8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d12c      	bne.n	8009e40 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	f003 0304 	and.w	r3, r3, #4
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d127      	bne.n	8009e40 <follow_path+0xdc>
 8009df0:	2305      	movs	r3, #5
 8009df2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009df4:	e024      	b.n	8009e40 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009df6:	7afb      	ldrb	r3, [r7, #11]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d121      	bne.n	8009e44 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	799b      	ldrb	r3, [r3, #6]
 8009e04:	f003 0310 	and.w	r3, r3, #16
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d102      	bne.n	8009e12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e0c:	2305      	movs	r3, #5
 8009e0e:	75fb      	strb	r3, [r7, #23]
 8009e10:	e019      	b.n	8009e46 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	8992      	ldrh	r2, [r2, #12]
 8009e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e24:	fb00 f202 	mul.w	r2, r0, r2
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	440b      	add	r3, r1
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7ff f82e 	bl	8008e90 <ld_clust>
 8009e34:	4602      	mov	r2, r0
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e3a:	e7bb      	b.n	8009db4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009e3c:	bf00      	nop
 8009e3e:	e002      	b.n	8009e46 <follow_path+0xe2>
				break;
 8009e40:	bf00      	nop
 8009e42:	e000      	b.n	8009e46 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e44:	bf00      	nop
			}
		}
	}

	return res;
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3718      	adds	r7, #24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e5c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d031      	beq.n	8009eca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	e002      	b.n	8009e74 <get_ldnumber+0x24>
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	3301      	adds	r3, #1
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b1f      	cmp	r3, #31
 8009e7a:	d903      	bls.n	8009e84 <get_ldnumber+0x34>
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b3a      	cmp	r3, #58	; 0x3a
 8009e82:	d1f4      	bne.n	8009e6e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b3a      	cmp	r3, #58	; 0x3a
 8009e8a:	d11c      	bne.n	8009ec6 <get_ldnumber+0x76>
			tp = *path;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	60fa      	str	r2, [r7, #12]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	3b30      	subs	r3, #48	; 0x30
 8009e9c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b09      	cmp	r3, #9
 8009ea2:	d80e      	bhi.n	8009ec2 <get_ldnumber+0x72>
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d10a      	bne.n	8009ec2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d107      	bne.n	8009ec2 <get_ldnumber+0x72>
					vol = (int)i;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	e002      	b.n	8009ecc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009eca:	693b      	ldr	r3, [r7, #16]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	70da      	strb	r2, [r3, #3]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7fe fa46 	bl	8008384 <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <check_fs+0x2a>
 8009efe:	2304      	movs	r3, #4
 8009f00:	e038      	b.n	8009f74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3338      	adds	r3, #56	; 0x38
 8009f06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fd ff8a 	bl	8007e24 <ld_word>
 8009f10:	4603      	mov	r3, r0
 8009f12:	461a      	mov	r2, r3
 8009f14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d001      	beq.n	8009f20 <check_fs+0x48>
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e029      	b.n	8009f74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f26:	2be9      	cmp	r3, #233	; 0xe9
 8009f28:	d009      	beq.n	8009f3e <check_fs+0x66>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009f30:	2beb      	cmp	r3, #235	; 0xeb
 8009f32:	d11e      	bne.n	8009f72 <check_fs+0x9a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f3a:	2b90      	cmp	r3, #144	; 0x90
 8009f3c:	d119      	bne.n	8009f72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3338      	adds	r3, #56	; 0x38
 8009f42:	3336      	adds	r3, #54	; 0x36
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fd ff85 	bl	8007e54 <ld_dword>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <check_fs+0xa4>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d101      	bne.n	8009f5a <check_fs+0x82>
 8009f56:	2300      	movs	r3, #0
 8009f58:	e00c      	b.n	8009f74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3338      	adds	r3, #56	; 0x38
 8009f5e:	3352      	adds	r3, #82	; 0x52
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fd ff77 	bl	8007e54 <ld_dword>
 8009f66:	4603      	mov	r3, r0
 8009f68:	4a05      	ldr	r2, [pc, #20]	; (8009f80 <check_fs+0xa8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d101      	bne.n	8009f72 <check_fs+0x9a>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	e000      	b.n	8009f74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009f72:	2302      	movs	r3, #2
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	00544146 	.word	0x00544146
 8009f80:	33544146 	.word	0x33544146

08009f84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b096      	sub	sp, #88	; 0x58
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff ff59 	bl	8009e50 <get_ldnumber>
 8009f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da01      	bge.n	8009faa <find_volume+0x26>
 8009fa6:	230b      	movs	r3, #11
 8009fa8:	e265      	b.n	800a476 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009faa:	4a9f      	ldr	r2, [pc, #636]	; (800a228 <find_volume+0x2a4>)
 8009fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <find_volume+0x3a>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	e25b      	b.n	800a476 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	f023 0301 	bic.w	r3, r3, #1
 8009fca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01a      	beq.n	800a00a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fd fe83 	bl	8007ce4 <disk_status>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10c      	bne.n	800a00a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <find_volume+0x82>
 8009ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a002:	230a      	movs	r3, #10
 800a004:	e237      	b.n	800a476 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a006:	2300      	movs	r3, #0
 800a008:	e235      	b.n	800a476 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	2200      	movs	r2, #0
 800a00e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	b2da      	uxtb	r2, r3
 800a014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a016:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01a:	785b      	ldrb	r3, [r3, #1]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fd fe7b 	bl	8007d18 <disk_initialize>
 800a022:	4603      	mov	r3, r0
 800a024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a034:	2303      	movs	r3, #3
 800a036:	e21e      	b.n	800a476 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d007      	beq.n	800a04e <find_volume+0xca>
 800a03e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a042:	f003 0304 	and.w	r3, r3, #4
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a04a:	230a      	movs	r3, #10
 800a04c:	e213      	b.n	800a476 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a050:	7858      	ldrb	r0, [r3, #1]
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	330c      	adds	r3, #12
 800a056:	461a      	mov	r2, r3
 800a058:	2102      	movs	r1, #2
 800a05a:	f7fd fec5 	bl	8007de8 <disk_ioctl>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <find_volume+0xe4>
 800a064:	2301      	movs	r3, #1
 800a066:	e206      	b.n	800a476 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	899b      	ldrh	r3, [r3, #12]
 800a06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a070:	d80d      	bhi.n	800a08e <find_volume+0x10a>
 800a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a074:	899b      	ldrh	r3, [r3, #12]
 800a076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07a:	d308      	bcc.n	800a08e <find_volume+0x10a>
 800a07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07e:	899b      	ldrh	r3, [r3, #12]
 800a080:	461a      	mov	r2, r3
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	899b      	ldrh	r3, [r3, #12]
 800a086:	3b01      	subs	r3, #1
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <find_volume+0x10e>
 800a08e:	2301      	movs	r3, #1
 800a090:	e1f1      	b.n	800a476 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a098:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a09a:	f7ff ff1d 	bl	8009ed8 <check_fs>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a0a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d149      	bne.n	800a140 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a0b0:	e01e      	b.n	800a0f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a0c0:	4413      	add	r3, r2
 800a0c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d006      	beq.n	800a0dc <find_volume+0x158>
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fd febe 	bl	8007e54 <ld_dword>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	e000      	b.n	800a0de <find_volume+0x15a>
 800a0dc:	2200      	movs	r2, #0
 800a0de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	3358      	adds	r3, #88	; 0x58
 800a0e4:	443b      	add	r3, r7
 800a0e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f2:	2b03      	cmp	r3, #3
 800a0f4:	d9dd      	bls.n	800a0b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d002      	beq.n	800a106 <find_volume+0x182>
 800a100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a102:	3b01      	subs	r3, #1
 800a104:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	3358      	adds	r3, #88	; 0x58
 800a10c:	443b      	add	r3, r7
 800a10e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a112:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <find_volume+0x1a2>
 800a11a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a11c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a11e:	f7ff fedb 	bl	8009ed8 <check_fs>
 800a122:	4603      	mov	r3, r0
 800a124:	e000      	b.n	800a128 <find_volume+0x1a4>
 800a126:	2303      	movs	r3, #3
 800a128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a130:	2b01      	cmp	r3, #1
 800a132:	d905      	bls.n	800a140 <find_volume+0x1bc>
 800a134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a136:	3301      	adds	r3, #1
 800a138:	643b      	str	r3, [r7, #64]	; 0x40
 800a13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d9e2      	bls.n	800a106 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a144:	2b04      	cmp	r3, #4
 800a146:	d101      	bne.n	800a14c <find_volume+0x1c8>
 800a148:	2301      	movs	r3, #1
 800a14a:	e194      	b.n	800a476 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a14c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a150:	2b01      	cmp	r3, #1
 800a152:	d901      	bls.n	800a158 <find_volume+0x1d4>
 800a154:	230d      	movs	r3, #13
 800a156:	e18e      	b.n	800a476 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	3338      	adds	r3, #56	; 0x38
 800a15c:	330b      	adds	r3, #11
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fd fe60 	bl	8007e24 <ld_word>
 800a164:	4603      	mov	r3, r0
 800a166:	461a      	mov	r2, r3
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	899b      	ldrh	r3, [r3, #12]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d001      	beq.n	800a174 <find_volume+0x1f0>
 800a170:	230d      	movs	r3, #13
 800a172:	e180      	b.n	800a476 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	3338      	adds	r3, #56	; 0x38
 800a178:	3316      	adds	r3, #22
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fd fe52 	bl	8007e24 <ld_word>
 800a180:	4603      	mov	r3, r0
 800a182:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <find_volume+0x214>
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	3338      	adds	r3, #56	; 0x38
 800a18e:	3324      	adds	r3, #36	; 0x24
 800a190:	4618      	mov	r0, r3
 800a192:	f7fd fe5f 	bl	8007e54 <ld_dword>
 800a196:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a19c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	789b      	ldrb	r3, [r3, #2]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d005      	beq.n	800a1bc <find_volume+0x238>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	789b      	ldrb	r3, [r3, #2]
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d001      	beq.n	800a1bc <find_volume+0x238>
 800a1b8:	230d      	movs	r3, #13
 800a1ba:	e15c      	b.n	800a476 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	789b      	ldrb	r3, [r3, #2]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1c4:	fb02 f303 	mul.w	r3, r2, r3
 800a1c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d8:	895b      	ldrh	r3, [r3, #10]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d008      	beq.n	800a1f0 <find_volume+0x26c>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	895b      	ldrh	r3, [r3, #10]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	895b      	ldrh	r3, [r3, #10]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <find_volume+0x270>
 800a1f0:	230d      	movs	r3, #13
 800a1f2:	e140      	b.n	800a476 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f6:	3338      	adds	r3, #56	; 0x38
 800a1f8:	3311      	adds	r3, #17
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd fe12 	bl	8007e24 <ld_word>
 800a200:	4603      	mov	r3, r0
 800a202:	461a      	mov	r2, r3
 800a204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a206:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	891b      	ldrh	r3, [r3, #8]
 800a20c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a20e:	8992      	ldrh	r2, [r2, #12]
 800a210:	0952      	lsrs	r2, r2, #5
 800a212:	b292      	uxth	r2, r2
 800a214:	fbb3 f1f2 	udiv	r1, r3, r2
 800a218:	fb01 f202 	mul.w	r2, r1, r2
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	b29b      	uxth	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	d003      	beq.n	800a22c <find_volume+0x2a8>
 800a224:	230d      	movs	r3, #13
 800a226:	e126      	b.n	800a476 <find_volume+0x4f2>
 800a228:	20002ab0 	.word	0x20002ab0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	3338      	adds	r3, #56	; 0x38
 800a230:	3313      	adds	r3, #19
 800a232:	4618      	mov	r0, r3
 800a234:	f7fd fdf6 	bl	8007e24 <ld_word>
 800a238:	4603      	mov	r3, r0
 800a23a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a23c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <find_volume+0x2cc>
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	3338      	adds	r3, #56	; 0x38
 800a246:	3320      	adds	r3, #32
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fd fe03 	bl	8007e54 <ld_dword>
 800a24e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	3338      	adds	r3, #56	; 0x38
 800a254:	330e      	adds	r3, #14
 800a256:	4618      	mov	r0, r3
 800a258:	f7fd fde4 	bl	8007e24 <ld_word>
 800a25c:	4603      	mov	r3, r0
 800a25e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <find_volume+0x2e6>
 800a266:	230d      	movs	r3, #13
 800a268:	e105      	b.n	800a476 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a26a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a26e:	4413      	add	r3, r2
 800a270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a272:	8911      	ldrh	r1, [r2, #8]
 800a274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a276:	8992      	ldrh	r2, [r2, #12]
 800a278:	0952      	lsrs	r2, r2, #5
 800a27a:	b292      	uxth	r2, r2
 800a27c:	fbb1 f2f2 	udiv	r2, r1, r2
 800a280:	b292      	uxth	r2, r2
 800a282:	4413      	add	r3, r2
 800a284:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d201      	bcs.n	800a292 <find_volume+0x30e>
 800a28e:	230d      	movs	r3, #13
 800a290:	e0f1      	b.n	800a476 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a29a:	8952      	ldrh	r2, [r2, #10]
 800a29c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <find_volume+0x328>
 800a2a8:	230d      	movs	r3, #13
 800a2aa:	e0e4      	b.n	800a476 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d802      	bhi.n	800a2c2 <find_volume+0x33e>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d802      	bhi.n	800a2d2 <find_volume+0x34e>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	1c9a      	adds	r2, r3, #2
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a2e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a2e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2e4:	441a      	add	r2, r3
 800a2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a2ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	441a      	add	r2, r3
 800a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d11e      	bne.n	800a33a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	3338      	adds	r3, #56	; 0x38
 800a300:	332a      	adds	r3, #42	; 0x2a
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd fd8e 	bl	8007e24 <ld_word>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <find_volume+0x38e>
 800a30e:	230d      	movs	r3, #13
 800a310:	e0b1      	b.n	800a476 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a314:	891b      	ldrh	r3, [r3, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <find_volume+0x39a>
 800a31a:	230d      	movs	r3, #13
 800a31c:	e0ab      	b.n	800a476 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	3338      	adds	r3, #56	; 0x38
 800a322:	332c      	adds	r3, #44	; 0x2c
 800a324:	4618      	mov	r0, r3
 800a326:	f7fd fd95 	bl	8007e54 <ld_dword>
 800a32a:	4602      	mov	r2, r0
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	647b      	str	r3, [r7, #68]	; 0x44
 800a338:	e01f      	b.n	800a37a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	891b      	ldrh	r3, [r3, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <find_volume+0x3c2>
 800a342:	230d      	movs	r3, #13
 800a344:	e097      	b.n	800a476 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a34c:	441a      	add	r2, r3
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a356:	2b02      	cmp	r3, #2
 800a358:	d103      	bne.n	800a362 <find_volume+0x3de>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	e00a      	b.n	800a378 <find_volume+0x3f4>
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	69da      	ldr	r2, [r3, #28]
 800a366:	4613      	mov	r3, r2
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	4413      	add	r3, r2
 800a36c:	085a      	lsrs	r2, r3, #1
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a378:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a380:	899b      	ldrh	r3, [r3, #12]
 800a382:	4619      	mov	r1, r3
 800a384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a386:	440b      	add	r3, r1
 800a388:	3b01      	subs	r3, #1
 800a38a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a38c:	8989      	ldrh	r1, [r1, #12]
 800a38e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a392:	429a      	cmp	r2, r3
 800a394:	d201      	bcs.n	800a39a <find_volume+0x416>
 800a396:	230d      	movs	r3, #13
 800a398:	e06d      	b.n	800a476 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3a0:	619a      	str	r2, [r3, #24]
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	2280      	movs	r2, #128	; 0x80
 800a3ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a3b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d149      	bne.n	800a44c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	3338      	adds	r3, #56	; 0x38
 800a3bc:	3330      	adds	r3, #48	; 0x30
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fd fd30 	bl	8007e24 <ld_word>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d140      	bne.n	800a44c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3d2:	f7fd ffd7 	bl	8008384 <move_window>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d137      	bne.n	800a44c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	2200      	movs	r2, #0
 800a3e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	3338      	adds	r3, #56	; 0x38
 800a3e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fd fd1a 	bl	8007e24 <ld_word>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d127      	bne.n	800a44c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	3338      	adds	r3, #56	; 0x38
 800a400:	4618      	mov	r0, r3
 800a402:	f7fd fd27 	bl	8007e54 <ld_dword>
 800a406:	4603      	mov	r3, r0
 800a408:	4a1d      	ldr	r2, [pc, #116]	; (800a480 <find_volume+0x4fc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d11e      	bne.n	800a44c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	3338      	adds	r3, #56	; 0x38
 800a412:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a416:	4618      	mov	r0, r3
 800a418:	f7fd fd1c 	bl	8007e54 <ld_dword>
 800a41c:	4603      	mov	r3, r0
 800a41e:	4a19      	ldr	r2, [pc, #100]	; (800a484 <find_volume+0x500>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d113      	bne.n	800a44c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	3338      	adds	r3, #56	; 0x38
 800a428:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fd fd11 	bl	8007e54 <ld_dword>
 800a432:	4602      	mov	r2, r0
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	3338      	adds	r3, #56	; 0x38
 800a43c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a440:	4618      	mov	r0, r3
 800a442:	f7fd fd07 	bl	8007e54 <ld_dword>
 800a446:	4602      	mov	r2, r0
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a452:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a454:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <find_volume+0x504>)
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	4b0a      	ldr	r3, [pc, #40]	; (800a488 <find_volume+0x504>)
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	4b09      	ldr	r3, [pc, #36]	; (800a488 <find_volume+0x504>)
 800a462:	881a      	ldrh	r2, [r3, #0]
 800a464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a466:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46a:	4a08      	ldr	r2, [pc, #32]	; (800a48c <find_volume+0x508>)
 800a46c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a46e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a470:	f7fd ff20 	bl	80082b4 <clear_lock>
#endif
	return FR_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3758      	adds	r7, #88	; 0x58
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	41615252 	.word	0x41615252
 800a484:	61417272 	.word	0x61417272
 800a488:	20002ab4 	.word	0x20002ab4
 800a48c:	20002ad8 	.word	0x20002ad8

0800a490 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a49a:	2309      	movs	r3, #9
 800a49c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01c      	beq.n	800a4de <validate+0x4e>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d018      	beq.n	800a4de <validate+0x4e>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d013      	beq.n	800a4de <validate+0x4e>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	889a      	ldrh	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	88db      	ldrh	r3, [r3, #6]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d10c      	bne.n	800a4de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd fc0a 	bl	8007ce4 <disk_status>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <validate+0x4e>
			res = FR_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <validate+0x5a>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	e000      	b.n	800a4ec <validate+0x5c>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	6013      	str	r3, [r2, #0]
	return res;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a50e:	f107 0310 	add.w	r3, r7, #16
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fc9c 	bl	8009e50 <get_ldnumber>
 800a518:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da01      	bge.n	800a524 <f_mount+0x28>
 800a520:	230b      	movs	r3, #11
 800a522:	e02b      	b.n	800a57c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a524:	4a17      	ldr	r2, [pc, #92]	; (800a584 <f_mount+0x88>)
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a52c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a534:	69b8      	ldr	r0, [r7, #24]
 800a536:	f7fd febd 	bl	80082b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	490d      	ldr	r1, [pc, #52]	; (800a584 <f_mount+0x88>)
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <f_mount+0x66>
 800a55c:	79fb      	ldrb	r3, [r7, #7]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d001      	beq.n	800a566 <f_mount+0x6a>
 800a562:	2300      	movs	r3, #0
 800a564:	e00a      	b.n	800a57c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a566:	f107 010c 	add.w	r1, r7, #12
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	2200      	movs	r2, #0
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff fd07 	bl	8009f84 <find_volume>
 800a576:	4603      	mov	r3, r0
 800a578:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3720      	adds	r7, #32
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20002ab0 	.word	0x20002ab0

0800a588 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b09a      	sub	sp, #104	; 0x68
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4613      	mov	r3, r2
 800a594:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <f_open+0x18>
 800a59c:	2309      	movs	r3, #9
 800a59e:	e1bb      	b.n	800a918 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a5a0:	79fb      	ldrb	r3, [r7, #7]
 800a5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a5a8:	79fa      	ldrb	r2, [r7, #7]
 800a5aa:	f107 0114 	add.w	r1, r7, #20
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fce6 	bl	8009f84 <find_volume>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a5be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f040 819f 	bne.w	800a906 <f_open+0x37e>
		dj.obj.fs = fs;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	f107 0318 	add.w	r3, r7, #24
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7ff fbc5 	bl	8009d64 <follow_path>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a5e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11a      	bne.n	800a61e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a5e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5ec:	b25b      	sxtb	r3, r3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	da03      	bge.n	800a5fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800a5f2:	2306      	movs	r3, #6
 800a5f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a5f8:	e011      	b.n	800a61e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	f023 0301 	bic.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf14      	ite	ne
 800a604:	2301      	movne	r3, #1
 800a606:	2300      	moveq	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	f107 0318 	add.w	r3, r7, #24
 800a610:	4611      	mov	r1, r2
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd fd06 	bl	8008024 <chk_lock>
 800a618:	4603      	mov	r3, r0
 800a61a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	f003 031c 	and.w	r3, r3, #28
 800a624:	2b00      	cmp	r3, #0
 800a626:	d07f      	beq.n	800a728 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d017      	beq.n	800a660 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a630:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a634:	2b04      	cmp	r3, #4
 800a636:	d10e      	bne.n	800a656 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a638:	f7fd fd50 	bl	80080dc <enq_lock>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d006      	beq.n	800a650 <f_open+0xc8>
 800a642:	f107 0318 	add.w	r3, r7, #24
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe ffb4 	bl	80095b4 <dir_register>
 800a64c:	4603      	mov	r3, r0
 800a64e:	e000      	b.n	800a652 <f_open+0xca>
 800a650:	2312      	movs	r3, #18
 800a652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	f043 0308 	orr.w	r3, r3, #8
 800a65c:	71fb      	strb	r3, [r7, #7]
 800a65e:	e010      	b.n	800a682 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a660:	7fbb      	ldrb	r3, [r7, #30]
 800a662:	f003 0311 	and.w	r3, r3, #17
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <f_open+0xea>
					res = FR_DENIED;
 800a66a:	2307      	movs	r3, #7
 800a66c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a670:	e007      	b.n	800a682 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <f_open+0xfa>
 800a67c:	2308      	movs	r3, #8
 800a67e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a686:	2b00      	cmp	r3, #0
 800a688:	d168      	bne.n	800a75c <f_open+0x1d4>
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	f003 0308 	and.w	r3, r3, #8
 800a690:	2b00      	cmp	r3, #0
 800a692:	d063      	beq.n	800a75c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a694:	f7fd fac8 	bl	8007c28 <get_fattime>
 800a698:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	330e      	adds	r3, #14
 800a69e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fd fc15 	bl	8007ed0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	3316      	adds	r3, #22
 800a6aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd fc0f 	bl	8007ed0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	330b      	adds	r3, #11
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fbe5 	bl	8008e90 <ld_clust>
 800a6c6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fbfd 	bl	8008ece <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d6:	331c      	adds	r3, #28
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd fbf8 	bl	8007ed0 <st_dword>
					fs->wflag = 1;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d037      	beq.n	800a75c <f_open+0x1d4>
						dw = fs->winsect;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a6f2:	f107 0318 	add.w	r3, r7, #24
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe f8ed 	bl	80088da <remove_chain>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a706:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d126      	bne.n	800a75c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a712:	4618      	mov	r0, r3
 800a714:	f7fd fe36 	bl	8008384 <move_window>
 800a718:	4603      	mov	r3, r0
 800a71a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a722:	3a01      	subs	r2, #1
 800a724:	615a      	str	r2, [r3, #20]
 800a726:	e019      	b.n	800a75c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a728:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d115      	bne.n	800a75c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a730:	7fbb      	ldrb	r3, [r7, #30]
 800a732:	f003 0310 	and.w	r3, r3, #16
 800a736:	2b00      	cmp	r3, #0
 800a738:	d003      	beq.n	800a742 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a73a:	2304      	movs	r3, #4
 800a73c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a740:	e00c      	b.n	800a75c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <f_open+0x1d4>
 800a74c:	7fbb      	ldrb	r3, [r7, #30]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <f_open+0x1d4>
						res = FR_DENIED;
 800a756:	2307      	movs	r3, #7
 800a758:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a75c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a760:	2b00      	cmp	r3, #0
 800a762:	d128      	bne.n	800a7b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a764:	79fb      	ldrb	r3, [r7, #7]
 800a766:	f003 0308 	and.w	r3, r3, #8
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a774:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a77e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	f023 0301 	bic.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bf14      	ite	ne
 800a78e:	2301      	movne	r3, #1
 800a790:	2300      	moveq	r3, #0
 800a792:	b2db      	uxtb	r3, r3
 800a794:	461a      	mov	r2, r3
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fd fcbf 	bl	8008120 <inc_lock>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <f_open+0x22e>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f040 80a3 	bne.w	800a906 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fb62 	bl	8008e90 <ld_clust>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	331c      	adds	r3, #28
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fd fb3c 	bl	8007e54 <ld_dword>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	88da      	ldrh	r2, [r3, #6]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	79fa      	ldrb	r2, [r7, #7]
 800a7fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	3330      	adds	r3, #48	; 0x30
 800a812:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fd fba6 	bl	8007f6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	f003 0320 	and.w	r3, r3, #32
 800a824:	2b00      	cmp	r3, #0
 800a826:	d06e      	beq.n	800a906 <f_open+0x37e>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d06a      	beq.n	800a906 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68da      	ldr	r2, [r3, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	895b      	ldrh	r3, [r3, #10]
 800a83c:	461a      	mov	r2, r3
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	899b      	ldrh	r3, [r3, #12]
 800a842:	fb02 f303 	mul.w	r3, r2, r3
 800a846:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a854:	e016      	b.n	800a884 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fd fe4f 	bl	80084fe <get_fat>
 800a860:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a864:	2b01      	cmp	r3, #1
 800a866:	d802      	bhi.n	800a86e <f_open+0x2e6>
 800a868:	2302      	movs	r3, #2
 800a86a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a86e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a874:	d102      	bne.n	800a87c <f_open+0x2f4>
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a87c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d103      	bne.n	800a894 <f_open+0x30c>
 800a88c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a890:	429a      	cmp	r2, r3
 800a892:	d8e0      	bhi.n	800a856 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a898:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a89a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d131      	bne.n	800a906 <f_open+0x37e>
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	899b      	ldrh	r3, [r3, #12]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ae:	fb01 f202 	mul.w	r2, r1, r2
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d026      	beq.n	800a906 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fdff 	bl	80084c0 <clust2sect>
 800a8c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d103      	bne.n	800a8d2 <f_open+0x34a>
						res = FR_INT_ERR;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8d0:	e019      	b.n	800a906 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	899b      	ldrh	r3, [r3, #12]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8da:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8e0:	441a      	add	r2, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	7858      	ldrb	r0, [r3, #1]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a1a      	ldr	r2, [r3, #32]
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	f7fd fa37 	bl	8007d68 <disk_read>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <f_open+0x37e>
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <f_open+0x38c>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a914:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3768      	adds	r7, #104	; 0x68
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b08e      	sub	sp, #56	; 0x38
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f107 0214 	add.w	r2, r7, #20
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fda5 	bl	800a490 <validate>
 800a946:	4603      	mov	r3, r0
 800a948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a94c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a950:	2b00      	cmp	r3, #0
 800a952:	d107      	bne.n	800a964 <f_read+0x44>
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	7d5b      	ldrb	r3, [r3, #21]
 800a958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a95c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <f_read+0x4a>
 800a964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a968:	e135      	b.n	800abd6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	7d1b      	ldrb	r3, [r3, #20]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <f_read+0x5a>
 800a976:	2307      	movs	r3, #7
 800a978:	e12d      	b.n	800abd6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	f240 811e 	bls.w	800abcc <f_read+0x2ac>
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a994:	e11a      	b.n	800abcc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	8992      	ldrh	r2, [r2, #12]
 800a99e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9a2:	fb01 f202 	mul.w	r2, r1, r2
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f040 80d5 	bne.w	800ab58 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	8992      	ldrh	r2, [r2, #12]
 800a9b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	8952      	ldrh	r2, [r2, #10]
 800a9be:	3a01      	subs	r2, #1
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d12f      	bne.n	800aa2a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a9d8:	e013      	b.n	800aa02 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7fe f873 	bl	8008ad4 <clmt_clust>
 800a9ee:	6338      	str	r0, [r7, #48]	; 0x30
 800a9f0:	e007      	b.n	800aa02 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7fd fd7f 	bl	80084fe <get_fat>
 800aa00:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800aa02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d804      	bhi.n	800aa12 <f_read+0xf2>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	755a      	strb	r2, [r3, #21]
 800aa0e:	2302      	movs	r3, #2
 800aa10:	e0e1      	b.n	800abd6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa18:	d104      	bne.n	800aa24 <f_read+0x104>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	755a      	strb	r2, [r3, #21]
 800aa20:	2301      	movs	r3, #1
 800aa22:	e0d8      	b.n	800abd6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fd fd44 	bl	80084c0 <clust2sect>
 800aa38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d104      	bne.n	800aa4a <f_read+0x12a>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2202      	movs	r2, #2
 800aa44:	755a      	strb	r2, [r3, #21]
 800aa46:	2302      	movs	r3, #2
 800aa48:	e0c5      	b.n	800abd6 <f_read+0x2b6>
			sect += csect;
 800aa4a:	69ba      	ldr	r2, [r7, #24]
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	4413      	add	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	899b      	ldrh	r3, [r3, #12]
 800aa56:	461a      	mov	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d041      	beq.n	800aaea <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	4413      	add	r3, r2
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	8952      	ldrh	r2, [r2, #10]
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d905      	bls.n	800aa80 <f_read+0x160>
					cc = fs->csize - csect;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	895b      	ldrh	r3, [r3, #10]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	7858      	ldrb	r0, [r3, #1]
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	69ba      	ldr	r2, [r7, #24]
 800aa88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa8a:	f7fd f96d 	bl	8007d68 <disk_read>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <f_read+0x17e>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2201      	movs	r2, #1
 800aa98:	755a      	strb	r2, [r3, #21]
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e09b      	b.n	800abd6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	7d1b      	ldrb	r3, [r3, #20]
 800aaa2:	b25b      	sxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	da18      	bge.n	800aada <f_read+0x1ba>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a1a      	ldr	r2, [r3, #32]
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d911      	bls.n	800aada <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6a1a      	ldr	r2, [r3, #32]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	8992      	ldrh	r2, [r2, #12]
 800aac2:	fb02 f303 	mul.w	r3, r2, r3
 800aac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac8:	18d0      	adds	r0, r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	899b      	ldrh	r3, [r3, #12]
 800aad4:	461a      	mov	r2, r3
 800aad6:	f7fd fa27 	bl	8007f28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	899b      	ldrh	r3, [r3, #12]
 800aade:	461a      	mov	r2, r3
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	fb02 f303 	mul.w	r3, r2, r3
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aae8:	e05c      	b.n	800aba4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d02e      	beq.n	800ab52 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	7d1b      	ldrb	r3, [r3, #20]
 800aaf8:	b25b      	sxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	da18      	bge.n	800ab30 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	7858      	ldrb	r0, [r3, #1]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6a1a      	ldr	r2, [r3, #32]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f7fd f94b 	bl	8007da8 <disk_write>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <f_read+0x202>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	755a      	strb	r2, [r3, #21]
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e059      	b.n	800abd6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	7d1b      	ldrb	r3, [r3, #20]
 800ab26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	7858      	ldrb	r0, [r3, #1]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	f7fd f913 	bl	8007d68 <disk_read>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <f_read+0x232>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	755a      	strb	r2, [r3, #21]
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e041      	b.n	800abd6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	69ba      	ldr	r2, [r7, #24]
 800ab56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	899b      	ldrh	r3, [r3, #12]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	8992      	ldrh	r2, [r2, #12]
 800ab66:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab6a:	fb01 f202 	mul.w	r2, r1, r2
 800ab6e:	1a9b      	subs	r3, r3, r2
 800ab70:	1ac3      	subs	r3, r0, r3
 800ab72:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ab74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d901      	bls.n	800ab80 <f_read+0x260>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	697a      	ldr	r2, [r7, #20]
 800ab8c:	8992      	ldrh	r2, [r2, #12]
 800ab8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab92:	fb00 f202 	mul.w	r2, r0, r2
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	440b      	add	r3, r1
 800ab9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aba0:	f7fd f9c2 	bl	8007f28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800aba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	4413      	add	r3, r2
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	699a      	ldr	r2, [r3, #24]
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	441a      	add	r2, r3
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	619a      	str	r2, [r3, #24]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	441a      	add	r2, r3
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f47f aee1 	bne.w	800a996 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3738      	adds	r7, #56	; 0x38
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b08c      	sub	sp, #48	; 0x30
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f107 0210 	add.w	r2, r7, #16
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fc46 	bl	800a490 <validate>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ac0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d107      	bne.n	800ac22 <f_write+0x44>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	7d5b      	ldrb	r3, [r3, #21]
 800ac16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ac1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d002      	beq.n	800ac28 <f_write+0x4a>
 800ac22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ac26:	e16a      	b.n	800aefe <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	7d1b      	ldrb	r3, [r3, #20]
 800ac2c:	f003 0302 	and.w	r3, r3, #2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <f_write+0x5a>
 800ac34:	2307      	movs	r3, #7
 800ac36:	e162      	b.n	800aefe <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	441a      	add	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	f080 814c 	bcs.w	800aee2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ac52:	e146      	b.n	800aee2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	8992      	ldrh	r2, [r2, #12]
 800ac5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac60:	fb01 f202 	mul.w	r2, r1, r2
 800ac64:	1a9b      	subs	r3, r3, r2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f040 80f1 	bne.w	800ae4e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	8992      	ldrh	r2, [r2, #12]
 800ac74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	8952      	ldrh	r2, [r2, #10]
 800ac7c:	3a01      	subs	r2, #1
 800ac7e:	4013      	ands	r3, r2
 800ac80:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d143      	bne.n	800ad10 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10c      	bne.n	800acaa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d11a      	bne.n	800acd2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fd fe7f 	bl	80089a4 <create_chain>
 800aca6:	62b8      	str	r0, [r7, #40]	; 0x28
 800aca8:	e013      	b.n	800acd2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7fd ff0b 	bl	8008ad4 <clmt_clust>
 800acbe:	62b8      	str	r0, [r7, #40]	; 0x28
 800acc0:	e007      	b.n	800acd2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	69db      	ldr	r3, [r3, #28]
 800acc8:	4619      	mov	r1, r3
 800acca:	4610      	mov	r0, r2
 800accc:	f7fd fe6a 	bl	80089a4 <create_chain>
 800acd0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8109 	beq.w	800aeec <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d104      	bne.n	800acea <f_write+0x10c>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2202      	movs	r2, #2
 800ace4:	755a      	strb	r2, [r3, #21]
 800ace6:	2302      	movs	r3, #2
 800ace8:	e109      	b.n	800aefe <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf0:	d104      	bne.n	800acfc <f_write+0x11e>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	755a      	strb	r2, [r3, #21]
 800acf8:	2301      	movs	r3, #1
 800acfa:	e100      	b.n	800aefe <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad00:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d102      	bne.n	800ad10 <f_write+0x132>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad0e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	7d1b      	ldrb	r3, [r3, #20]
 800ad14:	b25b      	sxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	da18      	bge.n	800ad4c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	7858      	ldrb	r0, [r3, #1]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a1a      	ldr	r2, [r3, #32]
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f7fd f83d 	bl	8007da8 <disk_write>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <f_write+0x160>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	755a      	strb	r2, [r3, #21]
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e0df      	b.n	800aefe <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	7d1b      	ldrb	r3, [r3, #20]
 800ad42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ad4c:	693a      	ldr	r2, [r7, #16]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	4619      	mov	r1, r3
 800ad54:	4610      	mov	r0, r2
 800ad56:	f7fd fbb3 	bl	80084c0 <clust2sect>
 800ad5a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d104      	bne.n	800ad6c <f_write+0x18e>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2202      	movs	r2, #2
 800ad66:	755a      	strb	r2, [r3, #21]
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e0c8      	b.n	800aefe <f_write+0x320>
			sect += csect;
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	4413      	add	r3, r2
 800ad72:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad80:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d043      	beq.n	800ae10 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	8952      	ldrh	r2, [r2, #10]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d905      	bls.n	800ada2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	895b      	ldrh	r3, [r3, #10]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	7858      	ldrb	r0, [r3, #1]
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	69f9      	ldr	r1, [r7, #28]
 800adac:	f7fc fffc 	bl	8007da8 <disk_write>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <f_write+0x1e2>
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2201      	movs	r2, #1
 800adba:	755a      	strb	r2, [r3, #21]
 800adbc:	2301      	movs	r3, #1
 800adbe:	e09e      	b.n	800aefe <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6a1a      	ldr	r2, [r3, #32]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	6a3a      	ldr	r2, [r7, #32]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d918      	bls.n	800ae00 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6a1a      	ldr	r2, [r3, #32]
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	8992      	ldrh	r2, [r2, #12]
 800ade0:	fb02 f303 	mul.w	r3, r2, r3
 800ade4:	69fa      	ldr	r2, [r7, #28]
 800ade6:	18d1      	adds	r1, r2, r3
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	899b      	ldrh	r3, [r3, #12]
 800adec:	461a      	mov	r2, r3
 800adee:	f7fd f89b 	bl	8007f28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	7d1b      	ldrb	r3, [r3, #20]
 800adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	899b      	ldrh	r3, [r3, #12]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	fb02 f303 	mul.w	r3, r2, r3
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ae0e:	e04b      	b.n	800aea8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d016      	beq.n	800ae48 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	699a      	ldr	r2, [r3, #24]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d210      	bcs.n	800ae48 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	7858      	ldrb	r0, [r3, #1]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae30:	2301      	movs	r3, #1
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	f7fc ff98 	bl	8007d68 <disk_read>
 800ae38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d004      	beq.n	800ae48 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	755a      	strb	r2, [r3, #21]
 800ae44:	2301      	movs	r3, #1
 800ae46:	e05a      	b.n	800aefe <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	4618      	mov	r0, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	8992      	ldrh	r2, [r2, #12]
 800ae5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae60:	fb01 f202 	mul.w	r2, r1, r2
 800ae64:	1a9b      	subs	r3, r3, r2
 800ae66:	1ac3      	subs	r3, r0, r3
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ae6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d901      	bls.n	800ae76 <f_write+0x298>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	8992      	ldrh	r2, [r2, #12]
 800ae84:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae88:	fb00 f202 	mul.w	r2, r0, r2
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	440b      	add	r3, r1
 800ae90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae92:	69f9      	ldr	r1, [r7, #28]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fd f847 	bl	8007f28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	7d1b      	ldrb	r3, [r3, #20]
 800ae9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aea8:	69fa      	ldr	r2, [r7, #28]
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	4413      	add	r3, r2
 800aeae:	61fb      	str	r3, [r7, #28]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	699a      	ldr	r2, [r3, #24]
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	619a      	str	r2, [r3, #24]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68da      	ldr	r2, [r3, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	bf38      	it	cc
 800aec8:	461a      	movcc	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	60da      	str	r2, [r3, #12]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	441a      	add	r2, r3
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	1ad3      	subs	r3, r2, r3
 800aee0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f47f aeb5 	bne.w	800ac54 <f_write+0x76>
 800aeea:	e000      	b.n	800aeee <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aeec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	7d1b      	ldrb	r3, [r3, #20]
 800aef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b086      	sub	sp, #24
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f107 0208 	add.w	r2, r7, #8
 800af14:	4611      	mov	r1, r2
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff faba 	bl	800a490 <validate>
 800af1c:	4603      	mov	r3, r0
 800af1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800af20:	7dfb      	ldrb	r3, [r7, #23]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d168      	bne.n	800aff8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	7d1b      	ldrb	r3, [r3, #20]
 800af2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d062      	beq.n	800aff8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	7d1b      	ldrb	r3, [r3, #20]
 800af36:	b25b      	sxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da15      	bge.n	800af68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	7858      	ldrb	r0, [r3, #1]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a1a      	ldr	r2, [r3, #32]
 800af4a:	2301      	movs	r3, #1
 800af4c:	f7fc ff2c 	bl	8007da8 <disk_write>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <f_sync+0x54>
 800af56:	2301      	movs	r3, #1
 800af58:	e04f      	b.n	800affa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	7d1b      	ldrb	r3, [r3, #20]
 800af5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af62:	b2da      	uxtb	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800af68:	f7fc fe5e 	bl	8007c28 <get_fattime>
 800af6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	4619      	mov	r1, r3
 800af76:	4610      	mov	r0, r2
 800af78:	f7fd fa04 	bl	8008384 <move_window>
 800af7c:	4603      	mov	r3, r0
 800af7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d138      	bne.n	800aff8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	330b      	adds	r3, #11
 800af90:	781a      	ldrb	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	330b      	adds	r3, #11
 800af96:	f042 0220 	orr.w	r2, r2, #32
 800af9a:	b2d2      	uxtb	r2, r2
 800af9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6818      	ldr	r0, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	461a      	mov	r2, r3
 800afa8:	68f9      	ldr	r1, [r7, #12]
 800afaa:	f7fd ff90 	bl	8008ece <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f103 021c 	add.w	r2, r3, #28
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7fc ff88 	bl	8007ed0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3316      	adds	r3, #22
 800afc4:	6939      	ldr	r1, [r7, #16]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fc ff82 	bl	8007ed0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	3312      	adds	r3, #18
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc ff61 	bl	8007e9a <st_word>
					fs->wflag = 1;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	2201      	movs	r2, #1
 800afdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fd f9fd 	bl	80083e0 <sync_fs>
 800afe6:	4603      	mov	r3, r0
 800afe8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	7d1b      	ldrb	r3, [r3, #20]
 800afee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b084      	sub	sp, #16
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff ff7b 	bl	800af06 <f_sync>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d118      	bne.n	800b04c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f107 0208 	add.w	r2, r7, #8
 800b020:	4611      	mov	r1, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fa34 	bl	800a490 <validate>
 800b028:	4603      	mov	r3, r0
 800b02a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10c      	bne.n	800b04c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	4618      	mov	r0, r3
 800b038:	f7fd f900 	bl	800823c <dec_lock>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d102      	bne.n	800b04c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b090      	sub	sp, #64	; 0x40
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f107 0208 	add.w	r2, r7, #8
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff fa11 	bl	800a490 <validate>
 800b06e:	4603      	mov	r3, r0
 800b070:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d103      	bne.n	800b084 <f_lseek+0x2e>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7d5b      	ldrb	r3, [r3, #21]
 800b080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b084:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <f_lseek+0x3c>
 800b08c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b090:	e201      	b.n	800b496 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 80d9 	beq.w	800b24e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0a2:	d15a      	bne.n	800b15a <f_lseek+0x104>
			tbl = fp->cltbl;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	1d1a      	adds	r2, r3, #4
 800b0ae:	627a      	str	r2, [r7, #36]	; 0x24
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d03a      	beq.n	800b13a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	3302      	adds	r3, #2
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	3301      	adds	r3, #1
 800b0da:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7fd fa0c 	bl	80084fe <get_fat>
 800b0e6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d804      	bhi.n	800b0f8 <f_lseek+0xa2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	755a      	strb	r2, [r3, #21]
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e1ce      	b.n	800b496 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0fe:	d104      	bne.n	800b10a <f_lseek+0xb4>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	755a      	strb	r2, [r3, #21]
 800b106:	2301      	movs	r3, #1
 800b108:	e1c5      	b.n	800b496 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b110:	429a      	cmp	r2, r3
 800b112:	d0de      	beq.n	800b0d2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d809      	bhi.n	800b130 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	1d1a      	adds	r2, r3, #4
 800b120:	627a      	str	r2, [r7, #36]	; 0x24
 800b122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	627a      	str	r2, [r7, #36]	; 0x24
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b136:	429a      	cmp	r2, r3
 800b138:	d3c4      	bcc.n	800b0c4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b140:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	429a      	cmp	r2, r3
 800b148:	d803      	bhi.n	800b152 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e19f      	b.n	800b492 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b152:	2311      	movs	r3, #17
 800b154:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b158:	e19b      	b.n	800b492 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d902      	bls.n	800b16a <f_lseek+0x114>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 818d 	beq.w	800b492 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7fd fca8 	bl	8008ad4 <clmt_clust>
 800b184:	4602      	mov	r2, r0
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f7fd f994 	bl	80084c0 <clust2sect>
 800b198:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d104      	bne.n	800b1aa <f_lseek+0x154>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	755a      	strb	r2, [r3, #21]
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e175      	b.n	800b496 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	3b01      	subs	r3, #1
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	8992      	ldrh	r2, [r2, #12]
 800b1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	8952      	ldrh	r2, [r2, #10]
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	4013      	ands	r3, r2
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	8992      	ldrh	r2, [r2, #12]
 800b1cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1d0:	fb01 f202 	mul.w	r2, r1, r2
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 815b 	beq.w	800b492 <f_lseek+0x43c>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	f000 8155 	beq.w	800b492 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7d1b      	ldrb	r3, [r3, #20]
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	da18      	bge.n	800b224 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	7858      	ldrb	r0, [r3, #1]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a1a      	ldr	r2, [r3, #32]
 800b200:	2301      	movs	r3, #1
 800b202:	f7fc fdd1 	bl	8007da8 <disk_write>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <f_lseek+0x1c0>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	755a      	strb	r2, [r3, #21]
 800b212:	2301      	movs	r3, #1
 800b214:	e13f      	b.n	800b496 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	7d1b      	ldrb	r3, [r3, #20]
 800b21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	7858      	ldrb	r0, [r3, #1]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b22e:	2301      	movs	r3, #1
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	f7fc fd99 	bl	8007d68 <disk_read>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <f_lseek+0x1f0>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	755a      	strb	r2, [r3, #21]
 800b242:	2301      	movs	r3, #1
 800b244:	e127      	b.n	800b496 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	621a      	str	r2, [r3, #32]
 800b24c:	e121      	b.n	800b492 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d908      	bls.n	800b26a <f_lseek+0x214>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	f003 0302 	and.w	r3, r3, #2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	637b      	str	r3, [r7, #52]	; 0x34
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b278:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80b5 	beq.w	800b3ec <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	895b      	ldrh	r3, [r3, #10]
 800b286:	461a      	mov	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	899b      	ldrh	r3, [r3, #12]
 800b28c:	fb02 f303 	mul.w	r3, r2, r3
 800b290:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01b      	beq.n	800b2d0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	1e5a      	subs	r2, r3, #1
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	1e59      	subs	r1, r3, #1
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d30f      	bcc.n	800b2d0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b2b0:	6a3b      	ldr	r3, [r7, #32]
 800b2b2:	1e5a      	subs	r2, r3, #1
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	425b      	negs	r3, r3
 800b2b8:	401a      	ands	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2ce:	e022      	b.n	800b316 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d119      	bne.n	800b310 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fd fb5f 	bl	80089a4 <create_chain>
 800b2e6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d104      	bne.n	800b2f8 <f_lseek+0x2a2>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	755a      	strb	r2, [r3, #21]
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	e0ce      	b.n	800b496 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2fe:	d104      	bne.n	800b30a <f_lseek+0x2b4>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	755a      	strb	r2, [r3, #21]
 800b306:	2301      	movs	r3, #1
 800b308:	e0c5      	b.n	800b496 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b30e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b314:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d067      	beq.n	800b3ec <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b31c:	e03a      	b.n	800b394 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	603b      	str	r3, [r7, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	699a      	ldr	r2, [r3, #24]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	441a      	add	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	7d1b      	ldrb	r3, [r3, #20]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00b      	beq.n	800b356 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd fb2e 	bl	80089a4 <create_chain>
 800b348:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d108      	bne.n	800b362 <f_lseek+0x30c>
							ofs = 0; break;
 800b350:	2300      	movs	r3, #0
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	e022      	b.n	800b39c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fd f8cf 	bl	80084fe <get_fat>
 800b360:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b368:	d104      	bne.n	800b374 <f_lseek+0x31e>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	755a      	strb	r2, [r3, #21]
 800b370:	2301      	movs	r3, #1
 800b372:	e090      	b.n	800b496 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b376:	2b01      	cmp	r3, #1
 800b378:	d904      	bls.n	800b384 <f_lseek+0x32e>
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b380:	429a      	cmp	r2, r3
 800b382:	d304      	bcc.n	800b38e <f_lseek+0x338>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	755a      	strb	r2, [r3, #21]
 800b38a:	2302      	movs	r3, #2
 800b38c:	e083      	b.n	800b496 <f_lseek+0x440>
					fp->clust = clst;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b392:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b394:	683a      	ldr	r2, [r7, #0]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d8c0      	bhi.n	800b31e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699a      	ldr	r2, [r3, #24]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	441a      	add	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	899b      	ldrh	r3, [r3, #12]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3b4:	fb01 f202 	mul.w	r2, r1, r2
 800b3b8:	1a9b      	subs	r3, r3, r2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d016      	beq.n	800b3ec <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fd f87c 	bl	80084c0 <clust2sect>
 800b3c8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d104      	bne.n	800b3da <f_lseek+0x384>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	755a      	strb	r2, [r3, #21]
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e05d      	b.n	800b496 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	899b      	ldrh	r3, [r3, #12]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3e8:	4413      	add	r3, r2
 800b3ea:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	699a      	ldr	r2, [r3, #24]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d90a      	bls.n	800b40e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699a      	ldr	r2, [r3, #24]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	7d1b      	ldrb	r3, [r3, #20]
 800b404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	8992      	ldrh	r2, [r2, #12]
 800b416:	fbb3 f1f2 	udiv	r1, r3, r2
 800b41a:	fb01 f202 	mul.w	r2, r1, r2
 800b41e:	1a9b      	subs	r3, r3, r2
 800b420:	2b00      	cmp	r3, #0
 800b422:	d036      	beq.n	800b492 <f_lseek+0x43c>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d031      	beq.n	800b492 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	7d1b      	ldrb	r3, [r3, #20]
 800b432:	b25b      	sxtb	r3, r3
 800b434:	2b00      	cmp	r3, #0
 800b436:	da18      	bge.n	800b46a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	7858      	ldrb	r0, [r3, #1]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a1a      	ldr	r2, [r3, #32]
 800b446:	2301      	movs	r3, #1
 800b448:	f7fc fcae 	bl	8007da8 <disk_write>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d004      	beq.n	800b45c <f_lseek+0x406>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	755a      	strb	r2, [r3, #21]
 800b458:	2301      	movs	r3, #1
 800b45a:	e01c      	b.n	800b496 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7d1b      	ldrb	r3, [r3, #20]
 800b460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b464:	b2da      	uxtb	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	7858      	ldrb	r0, [r3, #1]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b474:	2301      	movs	r3, #1
 800b476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b478:	f7fc fc76 	bl	8007d68 <disk_read>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <f_lseek+0x436>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	755a      	strb	r2, [r3, #21]
 800b488:	2301      	movs	r3, #1
 800b48a:	e004      	b.n	800b496 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b490:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b492:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b496:	4618      	mov	r0, r3
 800b498:	3740      	adds	r7, #64	; 0x40
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <f_opendir+0x14>
 800b4ae:	2309      	movs	r3, #9
 800b4b0:	e064      	b.n	800b57c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b4b6:	f107 010c 	add.w	r1, r7, #12
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fd60 	bl	8009f84 <find_volume>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4c8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d14f      	bne.n	800b56e <f_opendir+0xd0>
		obj->fs = fs;
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7fe fc43 	bl	8009d64 <follow_path>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d13d      	bne.n	800b564 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b4ee:	b25b      	sxtb	r3, r3
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	db12      	blt.n	800b51a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	799b      	ldrb	r3, [r3, #6]
 800b4f8:	f003 0310 	and.w	r3, r3, #16
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00a      	beq.n	800b516 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fd fcc1 	bl	8008e90 <ld_clust>
 800b50e:	4602      	mov	r2, r0
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	609a      	str	r2, [r3, #8]
 800b514:	e001      	b.n	800b51a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b516:	2305      	movs	r3, #5
 800b518:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d121      	bne.n	800b564 <f_opendir+0xc6>
				obj->id = fs->id;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	88da      	ldrh	r2, [r3, #6]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7fd fb0a 	bl	8008b44 <dir_sdi>
 800b530:	4603      	mov	r3, r0
 800b532:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b534:	7dfb      	ldrb	r3, [r7, #23]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d114      	bne.n	800b564 <f_opendir+0xc6>
					if (obj->sclust) {
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00d      	beq.n	800b55e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b542:	2100      	movs	r1, #0
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7fc fdeb 	bl	8008120 <inc_lock>
 800b54a:	4602      	mov	r2, r0
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d105      	bne.n	800b564 <f_opendir+0xc6>
 800b558:	2312      	movs	r3, #18
 800b55a:	75fb      	strb	r3, [r7, #23]
 800b55c:	e002      	b.n	800b564 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2200      	movs	r2, #0
 800b562:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	2b04      	cmp	r3, #4
 800b568:	d101      	bne.n	800b56e <f_opendir+0xd0>
 800b56a:	2305      	movs	r3, #5
 800b56c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <f_opendir+0xdc>
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	2200      	movs	r2, #0
 800b578:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3718      	adds	r7, #24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f107 0208 	add.w	r2, r7, #8
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f7fe ff7b 	bl	800a490 <validate>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d110      	bne.n	800b5c6 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d006      	beq.n	800b5ba <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fc fe43 	bl	800823c <dec_lock>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f107 0208 	add.w	r2, r7, #8
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fe ff54 	bl	800a490 <validate>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d126      	bne.n	800b640 <f_readdir+0x70>
		if (!fno) {
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d106      	bne.n	800b606 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fd faa2 	bl	8008b44 <dir_sdi>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
 800b604:	e01c      	b.n	800b640 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b606:	2100      	movs	r1, #0
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7fd fe6c 	bl	80092e6 <dir_read>
 800b60e:	4603      	mov	r3, r0
 800b610:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	2b04      	cmp	r3, #4
 800b616:	d101      	bne.n	800b61c <f_readdir+0x4c>
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10e      	bne.n	800b640 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7fe f907 	bl	8009838 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b62a:	2100      	movs	r1, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fd fb12 	bl	8008c56 <dir_next>
 800b632:	4603      	mov	r3, r0
 800b634:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b04      	cmp	r3, #4
 800b63a:	d101      	bne.n	800b640 <f_readdir+0x70>
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b640:	7bfb      	ldrb	r3, [r7, #15]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b092      	sub	sp, #72	; 0x48
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b656:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b65a:	f107 030c 	add.w	r3, r7, #12
 800b65e:	2200      	movs	r2, #0
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fc8f 	bl	8009f84 <find_volume>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b66c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 8099 	bne.w	800b7a8 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67e:	699a      	ldr	r2, [r3, #24]
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	3b02      	subs	r3, #2
 800b686:	429a      	cmp	r2, r3
 800b688:	d804      	bhi.n	800b694 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	e089      	b.n	800b7a8 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d128      	bne.n	800b6f2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a6:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b6a8:	f107 0314 	add.w	r3, r7, #20
 800b6ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fc ff25 	bl	80084fe <get_fat>
 800b6b4:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6bc:	d103      	bne.n	800b6c6 <f_getfree+0x7c>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b6c4:	e063      	b.n	800b78e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d103      	bne.n	800b6d4 <f_getfree+0x8a>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b6d2:	e05c      	b.n	800b78e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d102      	bne.n	800b6e0 <f_getfree+0x96>
 800b6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6dc:	3301      	adds	r3, #1
 800b6de:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b6e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d3db      	bcc.n	800b6a8 <f_getfree+0x5e>
 800b6f0:	e04d      	b.n	800b78e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
 800b702:	2300      	movs	r3, #0
 800b704:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d113      	bne.n	800b734 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	1c5a      	adds	r2, r3, #1
 800b712:	63ba      	str	r2, [r7, #56]	; 0x38
 800b714:	4619      	mov	r1, r3
 800b716:	f7fc fe35 	bl	8008384 <move_window>
 800b71a:	4603      	mov	r3, r0
 800b71c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b720:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b724:	2b00      	cmp	r3, #0
 800b726:	d131      	bne.n	800b78c <f_getfree+0x142>
							p = fs->win;
 800b728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72a:	3338      	adds	r3, #56	; 0x38
 800b72c:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	899b      	ldrh	r3, [r3, #12]
 800b732:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d10f      	bne.n	800b75c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b73c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b73e:	f7fc fb71 	bl	8007e24 <ld_word>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <f_getfree+0x104>
 800b748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b74a:	3301      	adds	r3, #1
 800b74c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	3302      	adds	r3, #2
 800b752:	633b      	str	r3, [r7, #48]	; 0x30
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	3b02      	subs	r3, #2
 800b758:	637b      	str	r3, [r7, #52]	; 0x34
 800b75a:	e010      	b.n	800b77e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b75e:	f7fc fb79 	bl	8007e54 <ld_dword>
 800b762:	4603      	mov	r3, r0
 800b764:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <f_getfree+0x128>
 800b76c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b76e:	3301      	adds	r3, #1
 800b770:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	3304      	adds	r3, #4
 800b776:	633b      	str	r3, [r7, #48]	; 0x30
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	3b04      	subs	r3, #4
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b780:	3b01      	subs	r3, #1
 800b782:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1bd      	bne.n	800b706 <f_getfree+0xbc>
 800b78a:	e000      	b.n	800b78e <f_getfree+0x144>
							if (res != FR_OK) break;
 800b78c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b792:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b798:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79c:	791a      	ldrb	r2, [r3, #4]
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	f042 0201 	orr.w	r2, r2, #1
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b7a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3748      	adds	r7, #72	; 0x48
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b0a0      	sub	sp, #128	; 0x80
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b7c0:	f107 010c 	add.w	r1, r7, #12
 800b7c4:	1d3b      	adds	r3, r7, #4
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7fe fbdb 	bl	8009f84 <find_volume>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800b7d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f040 808e 	bne.w	800b8fe <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe faba 	bl	8009d64 <follow_path>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b7f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d108      	bne.n	800b810 <f_unlink+0x5c>
 800b7fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b802:	2102      	movs	r1, #2
 800b804:	4618      	mov	r0, r3
 800b806:	f7fc fc0d 	bl	8008024 <chk_lock>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b810:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b814:	2b00      	cmp	r3, #0
 800b816:	d172      	bne.n	800b8fe <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b818:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da03      	bge.n	800b82a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b822:	2306      	movs	r3, #6
 800b824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800b828:	e008      	b.n	800b83c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b82a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b836:	2307      	movs	r3, #7
 800b838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800b83c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b840:	2b00      	cmp	r3, #0
 800b842:	d134      	bne.n	800b8ae <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fd fb20 	bl	8008e90 <ld_clust>
 800b850:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b852:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b856:	f003 0310 	and.w	r3, r3, #16
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d027      	beq.n	800b8ae <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b864:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b866:	f107 0310 	add.w	r3, r7, #16
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fd f969 	bl	8008b44 <dir_sdi>
 800b872:	4603      	mov	r3, r0
 800b874:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800b878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d116      	bne.n	800b8ae <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b880:	f107 0310 	add.w	r3, r7, #16
 800b884:	2100      	movs	r1, #0
 800b886:	4618      	mov	r0, r3
 800b888:	f7fd fd2d 	bl	80092e6 <dir_read>
 800b88c:	4603      	mov	r3, r0
 800b88e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b892:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <f_unlink+0xec>
 800b89a:	2307      	movs	r3, #7
 800b89c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b8a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8a4:	2b04      	cmp	r3, #4
 800b8a6:	d102      	bne.n	800b8ae <f_unlink+0xfa>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800b8ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d123      	bne.n	800b8fe <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b8b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fd ff72 	bl	80097a4 <dir_remove>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b8c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10c      	bne.n	800b8e8 <f_unlink+0x134>
 800b8ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d009      	beq.n	800b8e8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b8d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b8d8:	2200      	movs	r2, #0
 800b8da:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fc fffc 	bl	80088da <remove_chain>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b8e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d106      	bne.n	800b8fe <f_unlink+0x14a>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fc fd74 	bl	80083e0 <sync_fs>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b8fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b902:	4618      	mov	r0, r3
 800b904:	3780      	adds	r7, #128	; 0x80
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b084      	sub	sp, #16
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	460b      	mov	r3, r1
 800b914:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800b916:	78fb      	ldrb	r3, [r7, #3]
 800b918:	2b0a      	cmp	r3, #10
 800b91a:	d103      	bne.n	800b924 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b91c:	210d      	movs	r1, #13
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff fff3 	bl	800b90a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db25      	blt.n	800b97c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	1c5a      	adds	r2, r3, #1
 800b934:	60fa      	str	r2, [r7, #12]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	4413      	add	r3, r2
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b3c      	cmp	r3, #60	; 0x3c
 800b942:	dd12      	ble.n	800b96a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6818      	ldr	r0, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f103 010c 	add.w	r1, r3, #12
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	f107 0308 	add.w	r3, r7, #8
 800b954:	f7ff f943 	bl	800abde <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d101      	bne.n	800b964 <putc_bfd+0x5a>
 800b960:	2300      	movs	r3, #0
 800b962:	e001      	b.n	800b968 <putc_bfd+0x5e>
 800b964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b968:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	609a      	str	r2, [r3, #8]
 800b97a:	e000      	b.n	800b97e <putc_bfd+0x74>
	if (i < 0) return;
 800b97c:	bf00      	nop
}
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	db16      	blt.n	800b9c2 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f103 010c 	add.w	r1, r3, #12
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	f107 030c 	add.w	r3, r7, #12
 800b9a8:	f7ff f919 	bl	800abde <f_write>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d107      	bne.n	800b9c2 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d102      	bne.n	800b9c2 <putc_flush+0x3e>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	e001      	b.n	800b9c6 <putc_flush+0x42>
	return EOF;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b083      	sub	sp, #12
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	605a      	str	r2, [r3, #4]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	609a      	str	r2, [r3, #8]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b096      	sub	sp, #88	; 0x58
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ba02:	f107 030c 	add.w	r3, r7, #12
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff ffe0 	bl	800b9ce <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ba0e:	e009      	b.n	800ba24 <f_puts+0x2c>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	607a      	str	r2, [r7, #4]
 800ba16:	781a      	ldrb	r2, [r3, #0]
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7ff ff73 	bl	800b90a <putc_bfd>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1f1      	bne.n	800ba10 <f_puts+0x18>
	return putc_flush(&pb);
 800ba2c:	f107 030c 	add.w	r3, r7, #12
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff ffa7 	bl	800b984 <putc_flush>
 800ba36:	4603      	mov	r3, r0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3758      	adds	r7, #88	; 0x58
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba56:	4b1f      	ldr	r3, [pc, #124]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba58:	7a5b      	ldrb	r3, [r3, #9]
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d131      	bne.n	800bac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba60:	4b1c      	ldr	r3, [pc, #112]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba62:	7a5b      	ldrb	r3, [r3, #9]
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	461a      	mov	r2, r3
 800ba68:	4b1a      	ldr	r3, [pc, #104]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba6e:	4b19      	ldr	r3, [pc, #100]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba70:	7a5b      	ldrb	r3, [r3, #9]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	4a17      	ldr	r2, [pc, #92]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba7e:	4b15      	ldr	r3, [pc, #84]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba80:	7a5b      	ldrb	r3, [r3, #9]
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	461a      	mov	r2, r3
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba88:	4413      	add	r3, r2
 800ba8a:	79fa      	ldrb	r2, [r7, #7]
 800ba8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba8e:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba90:	7a5b      	ldrb	r3, [r3, #9]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	1c5a      	adds	r2, r3, #1
 800ba96:	b2d1      	uxtb	r1, r2
 800ba98:	4a0e      	ldr	r2, [pc, #56]	; (800bad4 <FATFS_LinkDriverEx+0x94>)
 800ba9a:	7251      	strb	r1, [r2, #9]
 800ba9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba9e:	7dbb      	ldrb	r3, [r7, #22]
 800baa0:	3330      	adds	r3, #48	; 0x30
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	3301      	adds	r3, #1
 800baac:	223a      	movs	r2, #58	; 0x3a
 800baae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	3302      	adds	r3, #2
 800bab4:	222f      	movs	r2, #47	; 0x2f
 800bab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	3303      	adds	r3, #3
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20002cd8 	.word	0x20002cd8

0800bad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bae2:	2200      	movs	r2, #0
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff ffaa 	bl	800ba40 <FATFS_LinkDriverEx>
 800baec:	4603      	mov	r3, r0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	2b7f      	cmp	r3, #127	; 0x7f
 800bb08:	d802      	bhi.n	800bb10 <ff_convert+0x18>
		c = chr;
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	81fb      	strh	r3, [r7, #14]
 800bb0e:	e025      	b.n	800bb5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bb16:	88fb      	ldrh	r3, [r7, #6]
 800bb18:	2bff      	cmp	r3, #255	; 0xff
 800bb1a:	d805      	bhi.n	800bb28 <ff_convert+0x30>
 800bb1c:	88fb      	ldrh	r3, [r7, #6]
 800bb1e:	3b80      	subs	r3, #128	; 0x80
 800bb20:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <ff_convert+0x74>)
 800bb22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb26:	e000      	b.n	800bb2a <ff_convert+0x32>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	81fb      	strh	r3, [r7, #14]
 800bb2c:	e016      	b.n	800bb5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bb2e:	2300      	movs	r3, #0
 800bb30:	81fb      	strh	r3, [r7, #14]
 800bb32:	e009      	b.n	800bb48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bb34:	89fb      	ldrh	r3, [r7, #14]
 800bb36:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <ff_convert+0x74>)
 800bb38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb3c:	88fa      	ldrh	r2, [r7, #6]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d006      	beq.n	800bb50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bb42:	89fb      	ldrh	r3, [r7, #14]
 800bb44:	3301      	adds	r3, #1
 800bb46:	81fb      	strh	r3, [r7, #14]
 800bb48:	89fb      	ldrh	r3, [r7, #14]
 800bb4a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb4c:	d9f2      	bls.n	800bb34 <ff_convert+0x3c>
 800bb4e:	e000      	b.n	800bb52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bb50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	3380      	adds	r3, #128	; 0x80
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bb5c:	89fb      	ldrh	r3, [r7, #14]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	08011de4 	.word	0x08011de4

0800bb70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb80:	d201      	bcs.n	800bb86 <ff_wtoupper+0x16>
 800bb82:	4b3e      	ldr	r3, [pc, #248]	; (800bc7c <ff_wtoupper+0x10c>)
 800bb84:	e000      	b.n	800bb88 <ff_wtoupper+0x18>
 800bb86:	4b3e      	ldr	r3, [pc, #248]	; (800bc80 <ff_wtoupper+0x110>)
 800bb88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	1c9a      	adds	r2, r3, #2
 800bb8e:	617a      	str	r2, [r7, #20]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bb94:	8a7b      	ldrh	r3, [r7, #18]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d068      	beq.n	800bc6c <ff_wtoupper+0xfc>
 800bb9a:	88fa      	ldrh	r2, [r7, #6]
 800bb9c:	8a7b      	ldrh	r3, [r7, #18]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d364      	bcc.n	800bc6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	1c9a      	adds	r2, r3, #2
 800bba6:	617a      	str	r2, [r7, #20]
 800bba8:	881b      	ldrh	r3, [r3, #0]
 800bbaa:	823b      	strh	r3, [r7, #16]
 800bbac:	8a3b      	ldrh	r3, [r7, #16]
 800bbae:	0a1b      	lsrs	r3, r3, #8
 800bbb0:	81fb      	strh	r3, [r7, #14]
 800bbb2:	8a3b      	ldrh	r3, [r7, #16]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bbb8:	88fa      	ldrh	r2, [r7, #6]
 800bbba:	8a79      	ldrh	r1, [r7, #18]
 800bbbc:	8a3b      	ldrh	r3, [r7, #16]
 800bbbe:	440b      	add	r3, r1
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	da49      	bge.n	800bc58 <ff_wtoupper+0xe8>
			switch (cmd) {
 800bbc4:	89fb      	ldrh	r3, [r7, #14]
 800bbc6:	2b08      	cmp	r3, #8
 800bbc8:	d84f      	bhi.n	800bc6a <ff_wtoupper+0xfa>
 800bbca:	a201      	add	r2, pc, #4	; (adr r2, 800bbd0 <ff_wtoupper+0x60>)
 800bbcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd0:	0800bbf5 	.word	0x0800bbf5
 800bbd4:	0800bc07 	.word	0x0800bc07
 800bbd8:	0800bc1d 	.word	0x0800bc1d
 800bbdc:	0800bc25 	.word	0x0800bc25
 800bbe0:	0800bc2d 	.word	0x0800bc2d
 800bbe4:	0800bc35 	.word	0x0800bc35
 800bbe8:	0800bc3d 	.word	0x0800bc3d
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc4d 	.word	0x0800bc4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bbf4:	88fa      	ldrh	r2, [r7, #6]
 800bbf6:	8a7b      	ldrh	r3, [r7, #18]
 800bbf8:	1ad3      	subs	r3, r2, r3
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4413      	add	r3, r2
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	80fb      	strh	r3, [r7, #6]
 800bc04:	e027      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bc06:	88fa      	ldrh	r2, [r7, #6]
 800bc08:	8a7b      	ldrh	r3, [r7, #18]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	80fb      	strh	r3, [r7, #6]
 800bc1a:	e01c      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bc1c:	88fb      	ldrh	r3, [r7, #6]
 800bc1e:	3b10      	subs	r3, #16
 800bc20:	80fb      	strh	r3, [r7, #6]
 800bc22:	e018      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	3b20      	subs	r3, #32
 800bc28:	80fb      	strh	r3, [r7, #6]
 800bc2a:	e014      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bc2c:	88fb      	ldrh	r3, [r7, #6]
 800bc2e:	3b30      	subs	r3, #48	; 0x30
 800bc30:	80fb      	strh	r3, [r7, #6]
 800bc32:	e010      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bc34:	88fb      	ldrh	r3, [r7, #6]
 800bc36:	3b1a      	subs	r3, #26
 800bc38:	80fb      	strh	r3, [r7, #6]
 800bc3a:	e00c      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bc3c:	88fb      	ldrh	r3, [r7, #6]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	80fb      	strh	r3, [r7, #6]
 800bc42:	e008      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bc44:	88fb      	ldrh	r3, [r7, #6]
 800bc46:	3b50      	subs	r3, #80	; 0x50
 800bc48:	80fb      	strh	r3, [r7, #6]
 800bc4a:	e004      	b.n	800bc56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bc4c:	88fb      	ldrh	r3, [r7, #6]
 800bc4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800bc52:	80fb      	strh	r3, [r7, #6]
 800bc54:	bf00      	nop
			}
			break;
 800bc56:	e008      	b.n	800bc6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bc58:	89fb      	ldrh	r3, [r7, #14]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d195      	bne.n	800bb8a <ff_wtoupper+0x1a>
 800bc5e:	8a3b      	ldrh	r3, [r7, #16]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4413      	add	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bc68:	e78f      	b.n	800bb8a <ff_wtoupper+0x1a>
			break;
 800bc6a:	bf00      	nop
	}

	return chr;
 800bc6c:	88fb      	ldrh	r3, [r7, #6]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	371c      	adds	r7, #28
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	08011ee4 	.word	0x08011ee4
 800bc80:	080120d8 	.word	0x080120d8

0800bc84 <RFM95_Reset>:
 * Setting DIO Mapping LoRa Mode
 */
uint8_t rfm95_lora_dio_mapping(RFM95_t* rfm95, uint8_t dioNB, uint8_t dioStatus);

void RFM95_Reset(RFM95_t* rfm95)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
    rfm95->NRST(0);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	2000      	movs	r0, #0
 800bc92:	4798      	blx	r3
    // delay 1 ms
    rfm95->DelayUs(1000);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc9c:	4798      	blx	r3
    rfm95->NRST(1);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	69db      	ldr	r3, [r3, #28]
 800bca2:	2001      	movs	r0, #1
 800bca4:	4798      	blx	r3
    // delay 10 ms
    rfm95->DelayUs(10000);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	f242 7010 	movw	r0, #10000	; 0x2710
 800bcae:	4798      	blx	r3
}
 800bcb0:	bf00      	nop
 800bcb2:	3708      	adds	r7, #8
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <RFM95_LoRa_setOpMode>:

uint8_t RFM95_LoRa_setOpMode(RFM95_t* rfm95, uint8_t mode)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_OP_MODE, &readVal)) 
 800bcc4:	f107 030f 	add.w	r3, r7, #15
 800bcc8:	461a      	mov	r2, r3
 800bcca:	2101      	movs	r1, #1
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 ff23 	bl	800cb18 <rfm95_readReg>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <RFM95_LoRa_setOpMode+0x24>
        return RFM95_ERR_READ_REG;
 800bcd8:	230a      	movs	r3, #10
 800bcda:	e034      	b.n	800bd46 <RFM95_LoRa_setOpMode+0x8e>
    switch(mode)
 800bcdc:	78fb      	ldrb	r3, [r7, #3]
 800bcde:	2b07      	cmp	r3, #7
 800bce0:	d812      	bhi.n	800bd08 <RFM95_LoRa_setOpMode+0x50>
 800bce2:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <RFM95_LoRa_setOpMode+0x30>)
 800bce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce8:	0800bd0d 	.word	0x0800bd0d
 800bcec:	0800bd0d 	.word	0x0800bd0d
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd0d 	.word	0x0800bd0d
 800bcf8:	0800bd0d 	.word	0x0800bd0d
 800bcfc:	0800bd0d 	.word	0x0800bd0d
 800bd00:	0800bd0d 	.word	0x0800bd0d
 800bd04:	0800bd0d 	.word	0x0800bd0d
        case RX_SINGLE:
            break;
        case CAD:
            break;
        default:
            return RFM95_ERR_INVALID_INPUT;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e01c      	b.n	800bd46 <RFM95_LoRa_setOpMode+0x8e>
            break;
 800bd0c:	bf00      	nop
    }
    readVal = (readVal & 0xF8) | mode;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	b25b      	sxtb	r3, r3
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	b25a      	sxtb	r2, r3
 800bd18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	b25b      	sxtb	r3, r3
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	73fb      	strb	r3, [r7, #15]
    if(rfm95_writeReg(rfm95, REG_OP_MODE, &readVal))
 800bd24:	f107 030f 	add.w	r3, r7, #15
 800bd28:	461a      	mov	r2, r3
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 ff21 	bl	800cb74 <rfm95_writeReg>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <RFM95_LoRa_setOpMode+0x84>
        return RFM95_ERR_WRITE_REG;
 800bd38:	230b      	movs	r3, #11
 800bd3a:	e004      	b.n	800bd46 <RFM95_LoRa_setOpMode+0x8e>
    rfm95->Settings.LoraState = mode;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	78fa      	ldrb	r2, [r7, #3]
 800bd40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return RFM95_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop

0800bd50 <RFM95_setModem>:

uint8_t RFM95_setModem(RFM95_t* rfm95, radio_modem modem)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_OP_MODE, &readVal))
 800bd5c:	f107 030f 	add.w	r3, r7, #15
 800bd60:	461a      	mov	r2, r3
 800bd62:	2101      	movs	r1, #1
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fed7 	bl	800cb18 <rfm95_readReg>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <RFM95_setModem+0x24>
        return RFM95_ERR_READ_REG;
 800bd70:	230a      	movs	r3, #10
 800bd72:	e023      	b.n	800bdbc <RFM95_setModem+0x6c>
    switch (modem)
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d007      	beq.n	800bd8a <RFM95_setModem+0x3a>
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d10b      	bne.n	800bd96 <RFM95_setModem+0x46>
    {
    case MODEM_LORA:
        readVal = (readVal & 0x7F) | (MODEM_LORA << 7);
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	73fb      	strb	r3, [r7, #15]
        break;
 800bd88:	e007      	b.n	800bd9a <RFM95_setModem+0x4a>
    case MODEM_FSK:
        readVal = (readVal & 0x7F) | (MODEM_FSK << 7);
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	73fb      	strb	r3, [r7, #15]
        break;
 800bd94:	e001      	b.n	800bd9a <RFM95_setModem+0x4a>
    default:
        return RFM95_ERR_INVALID_INPUT;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e010      	b.n	800bdbc <RFM95_setModem+0x6c>
    }
    if(rfm95_writeReg(rfm95, REG_OP_MODE, &readVal) )
 800bd9a:	f107 030f 	add.w	r3, r7, #15
 800bd9e:	461a      	mov	r2, r3
 800bda0:	2101      	movs	r1, #1
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fee6 	bl	800cb74 <rfm95_writeReg>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <RFM95_setModem+0x62>
        return RFM95_ERR_WRITE_REG;
 800bdae:	230b      	movs	r3, #11
 800bdb0:	e004      	b.n	800bdbc <RFM95_setModem+0x6c>
    rfm95->Settings.Modem = modem;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	78fa      	ldrb	r2, [r7, #3]
 800bdb6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    return RFM95_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <RFM95_setFrequency>:

uint8_t RFM95_setFrequency(RFM95_t* rfm95, uint32_t freq)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
    uint8_t writeVal[3];
    uint32_t fr = (uint32_t)(freq * 0.016384f);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	ee07 3a90 	vmov	s15, r3
 800bdd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800be28 <RFM95_setFrequency+0x64>
 800bddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bde0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde4:	ee17 3a90 	vmov	r3, s15
 800bde8:	60fb      	str	r3, [r7, #12]
    writeVal[0] = (uint8_t)((fr >> 16) & 0xFF);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	0c1b      	lsrs	r3, r3, #16
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	723b      	strb	r3, [r7, #8]
    writeVal[1] = (uint8_t)((fr >> 8) & 0xFF);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	0a1b      	lsrs	r3, r3, #8
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	727b      	strb	r3, [r7, #9]
    writeVal[2] = (uint8_t)(fr & 0xFF);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	72bb      	strb	r3, [r7, #10]
    if(rfm95_burst_writeReg(rfm95, REG_FREQ_MSB, &writeVal[0], 3))
 800be00:	f107 0208 	add.w	r2, r7, #8
 800be04:	2303      	movs	r3, #3
 800be06:	2106      	movs	r1, #6
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 ff24 	bl	800cc56 <rfm95_burst_writeReg>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <RFM95_setFrequency+0x54>
        return RFM95_ERR_WRITE_REG;
 800be14:	230b      	movs	r3, #11
 800be16:	e003      	b.n	800be20 <RFM95_setFrequency+0x5c>
    rfm95->Settings.LoRa.frequency = freq;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	645a      	str	r2, [r3, #68]	; 0x44
    return RFM95_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	3c8637bd 	.word	0x3c8637bd

0800be2c <RFM95_getFrequency>:

uint32_t RFM95_getFrequency(RFM95_t* rfm95)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
	uint32_t readFreq;
	uint8_t readVal[3];
	rfm95_burst_readReg(rfm95, REG_FREQ_MSB, &readVal[0], 3);
 800be34:	f107 0208 	add.w	r2, r7, #8
 800be38:	2303      	movs	r3, #3
 800be3a:	2106      	movs	r1, #6
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fec9 	bl	800cbd4 <rfm95_burst_readReg>
	readFreq = (uint32_t)((readVal[0] << 16) | (readVal[1] << 8) | (readVal[0]));
 800be42:	7a3b      	ldrb	r3, [r7, #8]
 800be44:	041a      	lsls	r2, r3, #16
 800be46:	7a7b      	ldrb	r3, [r7, #9]
 800be48:	021b      	lsls	r3, r3, #8
 800be4a:	4313      	orrs	r3, r2
 800be4c:	7a3a      	ldrb	r2, [r7, #8]
 800be4e:	4313      	orrs	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]
	readFreq = (uint32_t)(readFreq/0.016384f);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	ee07 3a90 	vmov	s15, r3
 800be58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800be5c:	eddf 6a10 	vldr	s13, [pc, #64]	; 800bea0 <RFM95_getFrequency+0x74>
 800be60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be68:	ee17 3a90 	vmov	r3, s15
 800be6c:	60fb      	str	r3, [r7, #12]
	if((rfm95->Settings.LoRa.frequency - 100000) < readFreq &&
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be72:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 800be76:	3ba0      	subs	r3, #160	; 0xa0
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d90a      	bls.n	800be94 <RFM95_getFrequency+0x68>
			(rfm95->Settings.LoRa.frequency + 100000) > readFreq)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be82:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 800be86:	33a0      	adds	r3, #160	; 0xa0
	if((rfm95->Settings.LoRa.frequency - 100000) < readFreq &&
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d202      	bcs.n	800be94 <RFM95_getFrequency+0x68>
	{
		return rfm95->Settings.LoRa.frequency;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be92:	e000      	b.n	800be96 <RFM95_getFrequency+0x6a>
	}
	else
	{
		return RFM95_ERR_FREQUENCY;
 800be94:	2332      	movs	r3, #50	; 0x32
	}
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	3c8637bd 	.word	0x3c8637bd

0800bea4 <RFM95_setTXPower>:

uint8_t RFM95_setTXPower(RFM95_t* rfm95, uint8_t power)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	70fb      	strb	r3, [r7, #3]
    uint8_t writeVal[2];
    uint8_t readVal[2];
    if(power < 2 || power > 20) return RFM95_ERR_INVALID_INPUT;
 800beb0:	78fb      	ldrb	r3, [r7, #3]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d902      	bls.n	800bebc <RFM95_setTXPower+0x18>
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	2b14      	cmp	r3, #20
 800beba:	d901      	bls.n	800bec0 <RFM95_setTXPower+0x1c>
 800bebc:	2301      	movs	r3, #1
 800bebe:	e0b6      	b.n	800c02e <RFM95_setTXPower+0x18a>
    else if(power <= 20)
 800bec0:	78fb      	ldrb	r3, [r7, #3]
 800bec2:	2b14      	cmp	r3, #20
 800bec4:	d82c      	bhi.n	800bf20 <RFM95_setTXPower+0x7c>
    {
        writeVal[0] = (uint8_t)(0xFF);
 800bec6:	23ff      	movs	r3, #255	; 0xff
 800bec8:	733b      	strb	r3, [r7, #12]
        if(rfm95_readReg(rfm95, REG_PA_DAC, &readVal[0]))
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	461a      	mov	r2, r3
 800bed0:	214d      	movs	r1, #77	; 0x4d
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fe20 	bl	800cb18 <rfm95_readReg>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <RFM95_setTXPower+0x3e>
            return RFM95_ERR_READ_REG;
 800bede:	230a      	movs	r3, #10
 800bee0:	e0a5      	b.n	800c02e <RFM95_setTXPower+0x18a>
        // 0xF8: RegPaDac PaDac mask
        writeVal[1] = (uint8_t)((readVal[0] & 0xF8) | PA_20DBM_ON);
 800bee2:	7a3b      	ldrb	r3, [r7, #8]
 800bee4:	b25b      	sxtb	r3, r3
 800bee6:	f043 0307 	orr.w	r3, r3, #7
 800beea:	b25b      	sxtb	r3, r3
 800beec:	b2db      	uxtb	r3, r3
 800beee:	737b      	strb	r3, [r7, #13]
        // Raise the output power to maximum
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800bef0:	f107 030c 	add.w	r3, r7, #12
 800bef4:	461a      	mov	r2, r3
 800bef6:	2109      	movs	r1, #9
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fe3b 	bl	800cb74 <rfm95_writeReg>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10b      	bne.n	800bf1c <RFM95_setTXPower+0x78>
        rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800bf04:	f107 030c 	add.w	r3, r7, #12
 800bf08:	3301      	adds	r3, #1
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	214d      	movs	r1, #77	; 0x4d
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fe30 	bl	800cb74 <rfm95_writeReg>
 800bf14:	4603      	mov	r3, r0
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8084 	beq.w	800c024 <RFM95_setTXPower+0x180>
            return RFM95_ERR_WRITE_REG;
 800bf1c:	230b      	movs	r3, #11
 800bf1e:	e086      	b.n	800c02e <RFM95_setTXPower+0x18a>
    }
    else if(power <= 17)
 800bf20:	78fb      	ldrb	r3, [r7, #3]
 800bf22:	2b11      	cmp	r3, #17
 800bf24:	d844      	bhi.n	800bfb0 <RFM95_setTXPower+0x10c>
    {
        // Control output power
        if(rfm95_readReg(rfm95, REG_PA_CONFIG, &readVal[0]) ||
 800bf26:	f107 0308 	add.w	r3, r7, #8
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	2109      	movs	r1, #9
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fdf2 	bl	800cb18 <rfm95_readReg>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d10a      	bne.n	800bf50 <RFM95_setTXPower+0xac>
        rfm95_readReg(rfm95, REG_PA_DAC, &readVal[1]))
 800bf3a:	f107 0308 	add.w	r3, r7, #8
 800bf3e:	3301      	adds	r3, #1
 800bf40:	461a      	mov	r2, r3
 800bf42:	214d      	movs	r1, #77	; 0x4d
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fde7 	bl	800cb18 <rfm95_readReg>
 800bf4a:	4603      	mov	r3, r0
        if(rfm95_readReg(rfm95, REG_PA_CONFIG, &readVal[0]) ||
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <RFM95_setTXPower+0xb0>
            return RFM95_ERR_READ_REG;
 800bf50:	230a      	movs	r3, #10
 800bf52:	e06c      	b.n	800c02e <RFM95_setTXPower+0x18a>
        // Calculate PA_CONFIG and PA_DAC register value
        writeVal[0] = (uint8_t)((readVal[0] & 0x70) | (1 << 7) | (power - 2));
 800bf54:	7a3b      	ldrb	r3, [r7, #8]
 800bf56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	3b02      	subs	r3, #2
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	4313      	orrs	r3, r2
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	733b      	strb	r3, [r7, #12]
        writeVal[1] = (uint8_t)((readVal[1] & 0xF8) | PA_20DBM_OFF);
 800bf6e:	7a7b      	ldrb	r3, [r7, #9]
 800bf70:	b25b      	sxtb	r3, r3
 800bf72:	f023 0307 	bic.w	r3, r3, #7
 800bf76:	b25b      	sxtb	r3, r3
 800bf78:	f043 0304 	orr.w	r3, r3, #4
 800bf7c:	b25b      	sxtb	r3, r3
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	737b      	strb	r3, [r7, #13]
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800bf82:	f107 030c 	add.w	r3, r7, #12
 800bf86:	461a      	mov	r2, r3
 800bf88:	2109      	movs	r1, #9
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fdf2 	bl	800cb74 <rfm95_writeReg>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10a      	bne.n	800bfac <RFM95_setTXPower+0x108>
        rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800bf96:	f107 030c 	add.w	r3, r7, #12
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	214d      	movs	r1, #77	; 0x4d
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fde7 	bl	800cb74 <rfm95_writeReg>
 800bfa6:	4603      	mov	r3, r0
        if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d03b      	beq.n	800c024 <RFM95_setTXPower+0x180>
            return RFM95_ERR_WRITE_REG;
 800bfac:	230b      	movs	r3, #11
 800bfae:	e03e      	b.n	800c02e <RFM95_setTXPower+0x18a>
    }
    else if(power <= 14)
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	2b0e      	cmp	r3, #14
 800bfb4:	d836      	bhi.n	800c024 <RFM95_setTXPower+0x180>
    {
    	// Control output power
		if(rfm95_readReg(rfm95, REG_PA_DAC, &readVal[1]))
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	3301      	adds	r3, #1
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	214d      	movs	r1, #77	; 0x4d
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 fda9 	bl	800cb18 <rfm95_readReg>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d001      	beq.n	800bfd0 <RFM95_setTXPower+0x12c>
			return RFM95_ERR_READ_REG;
 800bfcc:	230a      	movs	r3, #10
 800bfce:	e02e      	b.n	800c02e <RFM95_setTXPower+0x18a>
		// Calculate value for high efficiency PA
		writeVal[0] = (uint8_t)(0x70 | (0 << 7) | (power - 1));
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	b25b      	sxtb	r3, r3
 800bfd8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	733b      	strb	r3, [r7, #12]
		writeVal[1] = (uint8_t)((readVal[1] & 0xF8) | PA_20DBM_OFF);
 800bfe2:	7a7b      	ldrb	r3, [r7, #9]
 800bfe4:	b25b      	sxtb	r3, r3
 800bfe6:	f023 0307 	bic.w	r3, r3, #7
 800bfea:	b25b      	sxtb	r3, r3
 800bfec:	f043 0304 	orr.w	r3, r3, #4
 800bff0:	b25b      	sxtb	r3, r3
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	737b      	strb	r3, [r7, #13]
		if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800bff6:	f107 030c 	add.w	r3, r7, #12
 800bffa:	461a      	mov	r2, r3
 800bffc:	2109      	movs	r1, #9
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fdb8 	bl	800cb74 <rfm95_writeReg>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10a      	bne.n	800c020 <RFM95_setTXPower+0x17c>
		rfm95_writeReg(rfm95, REG_PA_DAC, &writeVal[1]))
 800c00a:	f107 030c 	add.w	r3, r7, #12
 800c00e:	3301      	adds	r3, #1
 800c010:	461a      	mov	r2, r3
 800c012:	214d      	movs	r1, #77	; 0x4d
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fdad 	bl	800cb74 <rfm95_writeReg>
 800c01a:	4603      	mov	r3, r0
		if(rfm95_writeReg(rfm95, REG_PA_CONFIG, &writeVal[0]) ||
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d001      	beq.n	800c024 <RFM95_setTXPower+0x180>
			return RFM95_ERR_WRITE_REG;
 800c020:	230b      	movs	r3, #11
 800c022:	e004      	b.n	800c02e <RFM95_setTXPower+0x18a>
    }

    rfm95->Settings.LoRa.txPower = power;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    return RFM95_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <RFM95_setOCP>:

uint8_t RFM95_setOCP(RFM95_t* rfm95, uint8_t current)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
    uint8_t writeVal;
    // Trimming of OCP current: mA
    if(current < 45 || current > 240) return RFM95_ERR_INVALID_INPUT;
 800c044:	78fb      	ldrb	r3, [r7, #3]
 800c046:	2b2c      	cmp	r3, #44	; 0x2c
 800c048:	d902      	bls.n	800c050 <RFM95_setOCP+0x18>
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	2bf0      	cmp	r3, #240	; 0xf0
 800c04e:	d901      	bls.n	800c054 <RFM95_setOCP+0x1c>
 800c050:	2301      	movs	r3, #1
 800c052:	e033      	b.n	800c0bc <RFM95_setOCP+0x84>
    else if(current <= 120)
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	2b78      	cmp	r3, #120	; 0x78
 800c058:	d80e      	bhi.n	800c078 <RFM95_setOCP+0x40>
    {
        writeVal = (uint8_t)(((current - 45) / 5) | (1 << 5));
 800c05a:	78fb      	ldrb	r3, [r7, #3]
 800c05c:	3b2d      	subs	r3, #45	; 0x2d
 800c05e:	4a19      	ldr	r2, [pc, #100]	; (800c0c4 <RFM95_setOCP+0x8c>)
 800c060:	fb82 1203 	smull	r1, r2, r2, r3
 800c064:	1052      	asrs	r2, r2, #1
 800c066:	17db      	asrs	r3, r3, #31
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	b25b      	sxtb	r3, r3
 800c06c:	f043 0320 	orr.w	r3, r3, #32
 800c070:	b25b      	sxtb	r3, r3
 800c072:	b2db      	uxtb	r3, r3
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	e010      	b.n	800c09a <RFM95_setOCP+0x62>
    }
    else if(current <= 240)
 800c078:	78fb      	ldrb	r3, [r7, #3]
 800c07a:	2bf0      	cmp	r3, #240	; 0xf0
 800c07c:	d80d      	bhi.n	800c09a <RFM95_setOCP+0x62>
    {
        writeVal = (uint8_t)(((current - 30) / 10) | (1 << 5));
 800c07e:	78fb      	ldrb	r3, [r7, #3]
 800c080:	3b1e      	subs	r3, #30
 800c082:	4a10      	ldr	r2, [pc, #64]	; (800c0c4 <RFM95_setOCP+0x8c>)
 800c084:	fb82 1203 	smull	r1, r2, r2, r3
 800c088:	1092      	asrs	r2, r2, #2
 800c08a:	17db      	asrs	r3, r3, #31
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	b25b      	sxtb	r3, r3
 800c090:	f043 0320 	orr.w	r3, r3, #32
 800c094:	b25b      	sxtb	r3, r3
 800c096:	b2db      	uxtb	r3, r3
 800c098:	73fb      	strb	r3, [r7, #15]
    }
    if(rfm95_writeReg(rfm95, REG_OCP, &writeVal))
 800c09a:	f107 030f 	add.w	r3, r7, #15
 800c09e:	461a      	mov	r2, r3
 800c0a0:	210b      	movs	r1, #11
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fd66 	bl	800cb74 <rfm95_writeReg>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <RFM95_setOCP+0x7a>
        return RFM95_ERR_WRITE_REG;
 800c0ae:	230b      	movs	r3, #11
 800c0b0:	e004      	b.n	800c0bc <RFM95_setOCP+0x84>
    rfm95->Settings.LoRa.overCurrentProtection = current;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	78fa      	ldrb	r2, [r7, #3]
 800c0b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return RFM95_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	66666667 	.word	0x66666667

0800c0c8 <RFM95_setLNAGain>:

uint8_t RFM95_setLNAGain(RFM95_t* rfm95, lna_gain_setting gain)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
    switch(gain)
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	2bc0      	cmp	r3, #192	; 0xc0
 800c0d8:	d013      	beq.n	800c102 <RFM95_setLNAGain+0x3a>
 800c0da:	2bc0      	cmp	r3, #192	; 0xc0
 800c0dc:	dc0f      	bgt.n	800c0fe <RFM95_setLNAGain+0x36>
 800c0de:	2ba0      	cmp	r3, #160	; 0xa0
 800c0e0:	d011      	beq.n	800c106 <RFM95_setLNAGain+0x3e>
 800c0e2:	2ba0      	cmp	r3, #160	; 0xa0
 800c0e4:	dc0b      	bgt.n	800c0fe <RFM95_setLNAGain+0x36>
 800c0e6:	2b80      	cmp	r3, #128	; 0x80
 800c0e8:	d00f      	beq.n	800c10a <RFM95_setLNAGain+0x42>
 800c0ea:	2b80      	cmp	r3, #128	; 0x80
 800c0ec:	dc07      	bgt.n	800c0fe <RFM95_setLNAGain+0x36>
 800c0ee:	2b60      	cmp	r3, #96	; 0x60
 800c0f0:	d00d      	beq.n	800c10e <RFM95_setLNAGain+0x46>
 800c0f2:	2b60      	cmp	r3, #96	; 0x60
 800c0f4:	dc03      	bgt.n	800c0fe <RFM95_setLNAGain+0x36>
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	d00b      	beq.n	800c112 <RFM95_setLNAGain+0x4a>
 800c0fa:	2b40      	cmp	r3, #64	; 0x40
 800c0fc:	d00b      	beq.n	800c116 <RFM95_setLNAGain+0x4e>
        case LNA_G5:
            break;
        case LNA_G6:
            break;
        default:
            return RFM95_ERR_INVALID_INPUT;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e035      	b.n	800c16e <RFM95_setLNAGain+0xa6>
            break;
 800c102:	bf00      	nop
 800c104:	e008      	b.n	800c118 <RFM95_setLNAGain+0x50>
            break;
 800c106:	bf00      	nop
 800c108:	e006      	b.n	800c118 <RFM95_setLNAGain+0x50>
            break;
 800c10a:	bf00      	nop
 800c10c:	e004      	b.n	800c118 <RFM95_setLNAGain+0x50>
            break;
 800c10e:	bf00      	nop
 800c110:	e002      	b.n	800c118 <RFM95_setLNAGain+0x50>
        	break;
 800c112:	bf00      	nop
 800c114:	e000      	b.n	800c118 <RFM95_setLNAGain+0x50>
            break;
 800c116:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_LNA, &readVal))
 800c118:	f107 030f 	add.w	r3, r7, #15
 800c11c:	461a      	mov	r2, r3
 800c11e:	210c      	movs	r1, #12
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fcf9 	bl	800cb18 <rfm95_readReg>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <RFM95_setLNAGain+0x68>
        return RFM95_ERR_READ_REG;
 800c12c:	230a      	movs	r3, #10
 800c12e:	e01e      	b.n	800c16e <RFM95_setLNAGain+0xa6>
    // LnaGain + LnaBoostHf boostOn (0x3). Their Mask: 0x1C
    writeVal = (uint8_t)((readVal & 0x1C) | gain | 0x3);
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	f003 031c 	and.w	r3, r3, #28
 800c138:	b25a      	sxtb	r2, r3
 800c13a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c13e:	4313      	orrs	r3, r2
 800c140:	b25b      	sxtb	r3, r3
 800c142:	f043 0303 	orr.w	r3, r3, #3
 800c146:	b25b      	sxtb	r3, r3
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_LNA, &writeVal))
 800c14c:	f107 030e 	add.w	r3, r7, #14
 800c150:	461a      	mov	r2, r3
 800c152:	210c      	movs	r1, #12
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fd0d 	bl	800cb74 <rfm95_writeReg>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <RFM95_setLNAGain+0x9c>
        return RFM95_ERR_WRITE_REG;
 800c160:	230b      	movs	r3, #11
 800c162:	e004      	b.n	800c16e <RFM95_setLNAGain+0xa6>

    rfm95->Settings.LNA = gain;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    return RFM95_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <RFM95_LoRa_setSpreadingFactor>:

uint8_t RFM95_LoRa_setSpreadingFactor(RFM95_t* rfm95, uint8_t sf)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	70fb      	strb	r3, [r7, #3]
    if(sf > 12 || sf < 6) return RFM95_ERR_INVALID_INPUT;
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	2b0c      	cmp	r3, #12
 800c186:	d802      	bhi.n	800c18e <RFM95_LoRa_setSpreadingFactor+0x18>
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	d801      	bhi.n	800c192 <RFM95_LoRa_setSpreadingFactor+0x1c>
 800c18e:	2301      	movs	r3, #1
 800c190:	e029      	b.n	800c1e6 <RFM95_LoRa_setSpreadingFactor+0x70>

    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c192:	f107 030f 	add.w	r3, r7, #15
 800c196:	461a      	mov	r2, r3
 800c198:	211e      	movs	r1, #30
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fcbc 	bl	800cb18 <rfm95_readReg>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <RFM95_LoRa_setSpreadingFactor+0x34>
        return RFM95_ERR_READ_REG;
 800c1a6:	230a      	movs	r3, #10
 800c1a8:	e01d      	b.n	800c1e6 <RFM95_LoRa_setSpreadingFactor+0x70>
    // Spreadinf Factor Mask: 0xF0
    writeVal = (uint8_t)((readVal & 0x0F) | (uint8_t)(sf << 4));
 800c1aa:	7bfb      	ldrb	r3, [r7, #15]
 800c1ac:	b25b      	sxtb	r3, r3
 800c1ae:	f003 030f 	and.w	r3, r3, #15
 800c1b2:	b25a      	sxtb	r2, r3
 800c1b4:	78fb      	ldrb	r3, [r7, #3]
 800c1b6:	011b      	lsls	r3, r3, #4
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	b25b      	sxtb	r3, r3
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal))
 800c1c4:	f107 030e 	add.w	r3, r7, #14
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	211e      	movs	r1, #30
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fcd1 	bl	800cb74 <rfm95_writeReg>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <RFM95_LoRa_setSpreadingFactor+0x66>
        return RFM95_ERR_WRITE_REG;
 800c1d8:	230b      	movs	r3, #11
 800c1da:	e004      	b.n	800c1e6 <RFM95_LoRa_setSpreadingFactor+0x70>

    rfm95->Settings.LoRa.spreadingFactor = sf;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	78fa      	ldrb	r2, [r7, #3]
 800c1e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    return RFM95_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <RFM95_LoRa_setRxPayloadCrcOn>:

uint8_t RFM95_LoRa_setRxPayloadCrcOn(RFM95_t* rfm95, bool val)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c1fa:	f107 030f 	add.w	r3, r7, #15
 800c1fe:	461a      	mov	r2, r3
 800c200:	211e      	movs	r1, #30
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fc88 	bl	800cb18 <rfm95_readReg>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <RFM95_LoRa_setRxPayloadCrcOn+0x24>
        return RFM95_ERR_READ_REG;
 800c20e:	230a      	movs	r3, #10
 800c210:	e01d      	b.n	800c24e <RFM95_LoRa_setRxPayloadCrcOn+0x60>
    // Rx Payload CrcOn Mask: 0xFB
    writeVal = (uint8_t)((readVal & 0xFB) | (uint8_t)(val << 2));
 800c212:	7bfb      	ldrb	r3, [r7, #15]
 800c214:	b25b      	sxtb	r3, r3
 800c216:	f023 0304 	bic.w	r3, r3, #4
 800c21a:	b25a      	sxtb	r2, r3
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	b2db      	uxtb	r3, r3
 800c222:	b25b      	sxtb	r3, r3
 800c224:	4313      	orrs	r3, r2
 800c226:	b25b      	sxtb	r3, r3
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal))
 800c22c:	f107 030e 	add.w	r3, r7, #14
 800c230:	461a      	mov	r2, r3
 800c232:	211e      	movs	r1, #30
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fc9d 	bl	800cb74 <rfm95_writeReg>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <RFM95_LoRa_setRxPayloadCrcOn+0x56>
        return RFM95_ERR_WRITE_REG;
 800c240:	230b      	movs	r3, #11
 800c242:	e004      	b.n	800c24e <RFM95_LoRa_setRxPayloadCrcOn+0x60>
    
    rfm95->Settings.LoRaPcktHandler.rxCrcOn = val;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	78fa      	ldrb	r2, [r7, #3]
 800c248:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    return RFM95_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <rfm95_lora_symb_timout>:

uint8_t rfm95_lora_symb_timout(RFM95_t* rfm95, uint16_t value)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	460b      	mov	r3, r1
 800c260:	807b      	strh	r3, [r7, #2]
    if(value > 0x03FF) value = 0x03FF;
 800c262:	887b      	ldrh	r3, [r7, #2]
 800c264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c268:	d302      	bcc.n	800c270 <rfm95_lora_symb_timout+0x1a>
 800c26a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c26e:	807b      	strh	r3, [r7, #2]
    uint8_t readVal;
    uint8_t writeVal[2];
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_2, &readVal))
 800c270:	f107 030f 	add.w	r3, r7, #15
 800c274:	461a      	mov	r2, r3
 800c276:	211e      	movs	r1, #30
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fc4d 	bl	800cb18 <rfm95_readReg>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <rfm95_lora_symb_timout+0x32>
        return RFM95_ERR_READ_REG;
 800c284:	230a      	movs	r3, #10
 800c286:	e02b      	b.n	800c2e0 <rfm95_lora_symb_timout+0x8a>

    // SymbTimeout MSB
    writeVal[0] = (uint8_t)((readVal & 0xFC) | (uint8_t)(value >> 8));
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	b25b      	sxtb	r3, r3
 800c28c:	f023 0303 	bic.w	r3, r3, #3
 800c290:	b25a      	sxtb	r2, r3
 800c292:	887b      	ldrh	r3, [r7, #2]
 800c294:	0a1b      	lsrs	r3, r3, #8
 800c296:	b29b      	uxth	r3, r3
 800c298:	b25b      	sxtb	r3, r3
 800c29a:	4313      	orrs	r3, r2
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	733b      	strb	r3, [r7, #12]
    // SymbTimeout LSB
    writeVal[1] = (uint8_t)(value & 0x00FF);
 800c2a2:	887b      	ldrh	r3, [r7, #2]
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	737b      	strb	r3, [r7, #13]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal[0]) ||
 800c2a8:	f107 030c 	add.w	r3, r7, #12
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	211e      	movs	r1, #30
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fc5f 	bl	800cb74 <rfm95_writeReg>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10a      	bne.n	800c2d2 <rfm95_lora_symb_timout+0x7c>
    rfm95_writeReg(rfm95, REG_SYMB_TIMEOUT_LSB, &writeVal[1]))
 800c2bc:	f107 030c 	add.w	r3, r7, #12
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	211f      	movs	r1, #31
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fc54 	bl	800cb74 <rfm95_writeReg>
 800c2cc:	4603      	mov	r3, r0
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_2, &writeVal[0]) ||
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <rfm95_lora_symb_timout+0x80>
        return RFM95_ERR_WRITE_REG;
 800c2d2:	230b      	movs	r3, #11
 800c2d4:	e004      	b.n	800c2e0 <rfm95_lora_symb_timout+0x8a>
    
    rfm95->Settings.LoRaPcktHandler.rxSymbTimeout = value;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	887a      	ldrh	r2, [r7, #2]
 800c2da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    return RFM95_OK;
 800c2de:	2300      	movs	r3, #0
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <RFM95_LoRa_setBandwidth>:

uint8_t RFM95_LoRa_setBandwidth(RFM95_t* rfm95, lora_bw bw)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
    switch(bw)
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	2b90      	cmp	r3, #144	; 0x90
 800c2f8:	d023      	beq.n	800c342 <RFM95_LoRa_setBandwidth+0x5a>
 800c2fa:	2b90      	cmp	r3, #144	; 0x90
 800c2fc:	dc1f      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c2fe:	2b80      	cmp	r3, #128	; 0x80
 800c300:	d021      	beq.n	800c346 <RFM95_LoRa_setBandwidth+0x5e>
 800c302:	2b80      	cmp	r3, #128	; 0x80
 800c304:	dc1b      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c306:	2b70      	cmp	r3, #112	; 0x70
 800c308:	d01f      	beq.n	800c34a <RFM95_LoRa_setBandwidth+0x62>
 800c30a:	2b70      	cmp	r3, #112	; 0x70
 800c30c:	dc17      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c30e:	2b60      	cmp	r3, #96	; 0x60
 800c310:	d01d      	beq.n	800c34e <RFM95_LoRa_setBandwidth+0x66>
 800c312:	2b60      	cmp	r3, #96	; 0x60
 800c314:	dc13      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c316:	2b50      	cmp	r3, #80	; 0x50
 800c318:	d01b      	beq.n	800c352 <RFM95_LoRa_setBandwidth+0x6a>
 800c31a:	2b50      	cmp	r3, #80	; 0x50
 800c31c:	dc0f      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	d019      	beq.n	800c356 <RFM95_LoRa_setBandwidth+0x6e>
 800c322:	2b40      	cmp	r3, #64	; 0x40
 800c324:	dc0b      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c326:	2b30      	cmp	r3, #48	; 0x30
 800c328:	d017      	beq.n	800c35a <RFM95_LoRa_setBandwidth+0x72>
 800c32a:	2b30      	cmp	r3, #48	; 0x30
 800c32c:	dc07      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c32e:	2b20      	cmp	r3, #32
 800c330:	d015      	beq.n	800c35e <RFM95_LoRa_setBandwidth+0x76>
 800c332:	2b20      	cmp	r3, #32
 800c334:	dc03      	bgt.n	800c33e <RFM95_LoRa_setBandwidth+0x56>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d013      	beq.n	800c362 <RFM95_LoRa_setBandwidth+0x7a>
 800c33a:	2b10      	cmp	r3, #16
 800c33c:	d013      	beq.n	800c366 <RFM95_LoRa_setBandwidth+0x7e>
    case BW_250_kHz:
        break;
    case BW_500_kHz:
        break;
    default:
        return RFM95_ERR_INVALID_INPUT;
 800c33e:	2301      	movs	r3, #1
 800c340:	e03a      	b.n	800c3b8 <RFM95_LoRa_setBandwidth+0xd0>
        break;
 800c342:	bf00      	nop
 800c344:	e010      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c346:	bf00      	nop
 800c348:	e00e      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c34a:	bf00      	nop
 800c34c:	e00c      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c34e:	bf00      	nop
 800c350:	e00a      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c352:	bf00      	nop
 800c354:	e008      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c356:	bf00      	nop
 800c358:	e006      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c35a:	bf00      	nop
 800c35c:	e004      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c35e:	bf00      	nop
 800c360:	e002      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c362:	bf00      	nop
 800c364:	e000      	b.n	800c368 <RFM95_LoRa_setBandwidth+0x80>
        break;
 800c366:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c368:	f107 030f 	add.w	r3, r7, #15
 800c36c:	461a      	mov	r2, r3
 800c36e:	211d      	movs	r1, #29
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fbd1 	bl	800cb18 <rfm95_readReg>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <RFM95_LoRa_setBandwidth+0x98>
        return RFM95_ERR_READ_REG;
 800c37c:	230a      	movs	r3, #10
 800c37e:	e01b      	b.n	800c3b8 <RFM95_LoRa_setBandwidth+0xd0>
    // Bandwidth register value location
    writeVal = (uint8_t)((readVal & 0x0F) | bw);
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	b25b      	sxtb	r3, r3
 800c384:	f003 030f 	and.w	r3, r3, #15
 800c388:	b25a      	sxtb	r2, r3
 800c38a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c38e:	4313      	orrs	r3, r2
 800c390:	b25b      	sxtb	r3, r3
 800c392:	b2db      	uxtb	r3, r3
 800c394:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c396:	f107 030e 	add.w	r3, r7, #14
 800c39a:	461a      	mov	r2, r3
 800c39c:	211d      	movs	r1, #29
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fbe8 	bl	800cb74 <rfm95_writeReg>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <RFM95_LoRa_setBandwidth+0xc6>
        return RFM95_ERR_WRITE_REG;
 800c3aa:	230b      	movs	r3, #11
 800c3ac:	e004      	b.n	800c3b8 <RFM95_LoRa_setBandwidth+0xd0>
    
    rfm95->Settings.LoRa.bandWidth = bw;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	78fa      	ldrb	r2, [r7, #3]
 800c3b2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    return RFM95_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <RFM95_LoRa_setCodingRate>:

uint8_t RFM95_LoRa_setCodingRate(RFM95_t* rfm95, lora_coding_rate cr)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
    switch (cr)
 800c3cc:	78fb      	ldrb	r3, [r7, #3]
 800c3ce:	3b02      	subs	r3, #2
 800c3d0:	2b06      	cmp	r3, #6
 800c3d2:	d811      	bhi.n	800c3f8 <RFM95_LoRa_setCodingRate+0x38>
 800c3d4:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <RFM95_LoRa_setCodingRate+0x1c>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3fd 	.word	0x0800c3fd
 800c3e0:	0800c3f9 	.word	0x0800c3f9
 800c3e4:	0800c3fd 	.word	0x0800c3fd
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c3fd 	.word	0x0800c3fd
 800c3f0:	0800c3f9 	.word	0x0800c3f9
 800c3f4:	0800c3fd 	.word	0x0800c3fd
    case CR_4_7:
        break;
    case CR_4_8:
        break;            
    default:
        return RFM95_ERR_INVALID_INPUT;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e028      	b.n	800c44e <RFM95_LoRa_setCodingRate+0x8e>
        break;
 800c3fc:	bf00      	nop
    }
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c3fe:	f107 030f 	add.w	r3, r7, #15
 800c402:	461a      	mov	r2, r3
 800c404:	211d      	movs	r1, #29
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fb86 	bl	800cb18 <rfm95_readReg>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <RFM95_LoRa_setCodingRate+0x56>
        return RFM95_ERR_READ_REG;
 800c412:	230a      	movs	r3, #10
 800c414:	e01b      	b.n	800c44e <RFM95_LoRa_setCodingRate+0x8e>
    // Coding Rate register location
    writeVal = (uint8_t)((readVal & 0xF1) | cr);
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	b25b      	sxtb	r3, r3
 800c41a:	f023 030e 	bic.w	r3, r3, #14
 800c41e:	b25a      	sxtb	r2, r3
 800c420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c424:	4313      	orrs	r3, r2
 800c426:	b25b      	sxtb	r3, r3
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c42c:	f107 030e 	add.w	r3, r7, #14
 800c430:	461a      	mov	r2, r3
 800c432:	211d      	movs	r1, #29
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fb9d 	bl	800cb74 <rfm95_writeReg>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <RFM95_LoRa_setCodingRate+0x84>
        return RFM95_ERR_WRITE_REG;
 800c440:	230b      	movs	r3, #11
 800c442:	e004      	b.n	800c44e <RFM95_LoRa_setCodingRate+0x8e>

    rfm95->Settings.LoRa.codingRate = cr;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	78fa      	ldrb	r2, [r7, #3]
 800c448:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    return RFM95_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop

0800c458 <RFM95_LoRa_setHeaderMode>:

uint8_t RFM95_LoRa_setHeaderMode(RFM95_t* rfm95, bool val)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	460b      	mov	r3, r1
 800c462:	70fb      	strb	r3, [r7, #3]
    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, REG_MODEM_CONFIG_1, &readVal))
 800c464:	f107 030f 	add.w	r3, r7, #15
 800c468:	461a      	mov	r2, r3
 800c46a:	211d      	movs	r1, #29
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fb53 	bl	800cb18 <rfm95_readReg>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <RFM95_LoRa_setHeaderMode+0x24>
        return RFM95_ERR_READ_REG;
 800c478:	230a      	movs	r3, #10
 800c47a:	e01b      	b.n	800c4b4 <RFM95_LoRa_setHeaderMode+0x5c>
    // Header Mode Mask: 0xFE
    writeVal = (uint8_t)((readVal & 0xFE) | val);
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	f023 0301 	bic.w	r3, r3, #1
 800c484:	b25a      	sxtb	r2, r3
 800c486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	b25b      	sxtb	r3, r3
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	73bb      	strb	r3, [r7, #14]
    if(rfm95_writeReg(rfm95, REG_MODEM_CONFIG_1, &writeVal))
 800c492:	f107 030e 	add.w	r3, r7, #14
 800c496:	461a      	mov	r2, r3
 800c498:	211d      	movs	r1, #29
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fb6a 	bl	800cb74 <rfm95_writeReg>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <RFM95_LoRa_setHeaderMode+0x52>
        return RFM95_ERR_WRITE_REG;
 800c4a6:	230b      	movs	r3, #11
 800c4a8:	e004      	b.n	800c4b4 <RFM95_LoRa_setHeaderMode+0x5c>

    rfm95->Settings.LoRaPcktHandler.implicitHeaderModeOn = val;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	78fa      	ldrb	r2, [r7, #3]
 800c4ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return RFM95_OK;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <RFM95_LoRa_setPreamble>:

uint8_t RFM95_LoRa_setPreamble(RFM95_t* rfm95, uint16_t preamblelen)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	807b      	strh	r3, [r7, #2]
    uint8_t writeVal[2];
    writeVal[0] = (uint8_t)(preamblelen >> 8);
 800c4c8:	887b      	ldrh	r3, [r7, #2]
 800c4ca:	0a1b      	lsrs	r3, r3, #8
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	733b      	strb	r3, [r7, #12]
    writeVal[1] = (uint8_t)(preamblelen & 0x00FF);
 800c4d2:	887b      	ldrh	r3, [r7, #2]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	737b      	strb	r3, [r7, #13]
    if(rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_MSB, &writeVal[0]) ||
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	461a      	mov	r2, r3
 800c4de:	2120      	movs	r1, #32
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 fb47 	bl	800cb74 <rfm95_writeReg>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <RFM95_LoRa_setPreamble+0x46>
    rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_LSB, &writeVal[1]))
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	2121      	movs	r1, #33	; 0x21
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fb3c 	bl	800cb74 <rfm95_writeReg>
 800c4fc:	4603      	mov	r3, r0
    if(rfm95_writeReg(rfm95, REG_LORA_PREAMBLE_MSB, &writeVal[0]) ||
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d001      	beq.n	800c506 <RFM95_LoRa_setPreamble+0x4a>
        return RFM95_ERR_WRITE_REG;
 800c502:	230b      	movs	r3, #11
 800c504:	e004      	b.n	800c510 <RFM95_LoRa_setPreamble+0x54>

    rfm95->Settings.LoRaPcktHandler.preamble = preamblelen;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	887a      	ldrh	r2, [r7, #2]
 800c50a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    return RFM95_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <rfm95_lora_dio_mapping>:

uint8_t rfm95_lora_dio_mapping(RFM95_t* rfm95, uint8_t dioNB, uint8_t dioStatus)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	460b      	mov	r3, r1
 800c522:	70fb      	strb	r3, [r7, #3]
 800c524:	4613      	mov	r3, r2
 800c526:	70bb      	strb	r3, [r7, #2]
    uint8_t reg, dio_mapping_mask, dio_mapping_status;
    if(dioStatus > 3) return RFM95_ERR_INVALID_INPUT;
 800c528:	78bb      	ldrb	r3, [r7, #2]
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d901      	bls.n	800c532 <rfm95_lora_dio_mapping+0x1a>
 800c52e:	2301      	movs	r3, #1
 800c530:	e05c      	b.n	800c5ec <rfm95_lora_dio_mapping+0xd4>
    switch(dioNB)
 800c532:	78fb      	ldrb	r3, [r7, #3]
 800c534:	2b03      	cmp	r3, #3
 800c536:	dc02      	bgt.n	800c53e <rfm95_lora_dio_mapping+0x26>
 800c538:	2b00      	cmp	r3, #0
 800c53a:	da04      	bge.n	800c546 <rfm95_lora_dio_mapping+0x2e>
 800c53c:	e02d      	b.n	800c59a <rfm95_lora_dio_mapping+0x82>
 800c53e:	3b04      	subs	r3, #4
 800c540:	2b01      	cmp	r3, #1
 800c542:	d82a      	bhi.n	800c59a <rfm95_lora_dio_mapping+0x82>
 800c544:	e014      	b.n	800c570 <rfm95_lora_dio_mapping+0x58>
    {
        case 0:
        case 1:
        case 2:
        case 3:
            reg = REG_DIO_MAPPING_1;
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	73fb      	strb	r3, [r7, #15]
            dio_mapping_mask = (uint8_t)(~(0x3 << (6 - 2 * dioNB)));
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	f1c3 0303 	rsb	r3, r3, #3
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	2203      	movs	r2, #3
 800c554:	fa02 f303 	lsl.w	r3, r2, r3
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	43db      	mvns	r3, r3
 800c55c:	73bb      	strb	r3, [r7, #14]
            dio_mapping_status = dioStatus << (6 - 2 * dioNB);
 800c55e:	78ba      	ldrb	r2, [r7, #2]
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	f1c3 0303 	rsb	r3, r3, #3
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	fa02 f303 	lsl.w	r3, r2, r3
 800c56c:	737b      	strb	r3, [r7, #13]
            break;
 800c56e:	e016      	b.n	800c59e <rfm95_lora_dio_mapping+0x86>
        case 4:
        case 5:
            reg = REG_DIO_MAPPING_2;
 800c570:	2341      	movs	r3, #65	; 0x41
 800c572:	73fb      	strb	r3, [r7, #15]
            dio_mapping_mask = (uint8_t)(~(0x3 << (6 - 2 * (dioNB - 4))));
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	f1c3 0307 	rsb	r3, r3, #7
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	2203      	movs	r2, #3
 800c57e:	fa02 f303 	lsl.w	r3, r2, r3
 800c582:	b2db      	uxtb	r3, r3
 800c584:	43db      	mvns	r3, r3
 800c586:	73bb      	strb	r3, [r7, #14]
            dio_mapping_status = dioStatus << (6 - 2 * (dioNB - 4));
 800c588:	78ba      	ldrb	r2, [r7, #2]
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	f1c3 0307 	rsb	r3, r3, #7
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	737b      	strb	r3, [r7, #13]
            break;
 800c598:	e001      	b.n	800c59e <rfm95_lora_dio_mapping+0x86>
        default:
            return RFM95_ERR_INVALID_INPUT;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e026      	b.n	800c5ec <rfm95_lora_dio_mapping+0xd4>
    }

    uint8_t readVal, writeVal;
    if(rfm95_readReg(rfm95, reg, &readVal))
 800c59e:	f107 020c 	add.w	r2, r7, #12
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fab6 	bl	800cb18 <rfm95_readReg>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <rfm95_lora_dio_mapping+0x9e>
        return RFM95_ERR_READ_REG;
 800c5b2:	230a      	movs	r3, #10
 800c5b4:	e01a      	b.n	800c5ec <rfm95_lora_dio_mapping+0xd4>
    // ex. LoRa DIO0 set RxDone(0x00), other pins are set to default
    writeVal = (uint8_t)((readVal & dio_mapping_mask) | dio_mapping_status);
 800c5b6:	7b3a      	ldrb	r2, [r7, #12]
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	7b7b      	ldrb	r3, [r7, #13]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	72fb      	strb	r3, [r7, #11]
    if(rfm95_writeReg(rfm95, reg, &writeVal))
 800c5c6:	f107 020b 	add.w	r2, r7, #11
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fad0 	bl	800cb74 <rfm95_writeReg>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d001      	beq.n	800c5de <rfm95_lora_dio_mapping+0xc6>
        return RFM95_ERR_WRITE_REG;
 800c5da:	230b      	movs	r3, #11
 800c5dc:	e006      	b.n	800c5ec <rfm95_lora_dio_mapping+0xd4>

    rfm95->DIO.DioStatus[dioNB] = dioStatus;
 800c5de:	78fb      	ldrb	r3, [r7, #3]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	78ba      	ldrb	r2, [r7, #2]
 800c5e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return RFM95_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <RFM95_checkVersion>:

uint8_t RFM95_checkVersion(RFM95_t* rfm95)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
    uint8_t readVal;
    if(rfm95_readReg(rfm95, REG_VERSION, &readVal))
 800c5fc:	f107 030f 	add.w	r3, r7, #15
 800c600:	461a      	mov	r2, r3
 800c602:	2142      	movs	r1, #66	; 0x42
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fa87 	bl	800cb18 <rfm95_readReg>
 800c60a:	4603      	mov	r3, r0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <RFM95_checkVersion+0x20>
        return RFM95_ERR_READ_REG;
 800c610:	230a      	movs	r3, #10
 800c612:	e005      	b.n	800c620 <RFM95_checkVersion+0x2c>
    if(readVal != 0x12) 
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b12      	cmp	r3, #18
 800c618:	d001      	beq.n	800c61e <RFM95_checkVersion+0x2a>
        return RFM95_ERR_CHIP_VERSION;
 800c61a:	23ff      	movs	r3, #255	; 0xff
 800c61c:	e000      	b.n	800c620 <RFM95_checkVersion+0x2c>
    
    return RFM95_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <RFM95_LoRa_prepareReceive>:
    RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
    return RFM95_ERR_TX_TIMEOUT;
}

uint8_t RFM95_LoRa_prepareReceive(RFM95_t* rfm95, bool isRxContinous)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	460b      	mov	r3, r1
 800c632:	70fb      	strb	r3, [r7, #3]
    uint8_t ret;
    if(isRxContinous)
 800c634:	78fb      	ldrb	r3, [r7, #3]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d053      	beq.n	800c6e2 <RFM95_LoRa_prepareReceive+0xba>
    {
    	uint8_t irq = Irq_RxDone & Irq_PayloadCrcError & Irq_ValidHeader;
 800c63a:	238f      	movs	r3, #143	; 0x8f
 800c63c:	73bb      	strb	r3, [r7, #14]
    	uint8_t fifoptr = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	737b      	strb	r3, [r7, #13]
        // set RegIrqFlagsMask: RxDoneMask, PayloadCrcErrorMask and ValidHeaderMask are activated.
        ret = rfm95_writeReg(rfm95, REG_IRQ_FLAGS_MASK, &irq);
 800c642:	f107 030e 	add.w	r3, r7, #14
 800c646:	461a      	mov	r2, r3
 800c648:	2111      	movs	r1, #17
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa92 	bl	800cb74 <rfm95_writeReg>
 800c650:	4603      	mov	r3, r0
 800c652:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <RFM95_LoRa_prepareReceive+0x36>
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
 800c65c:	e042      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>
        // set DIO0 Rx_Done IRQ: 0b00
        ret = rfm95_lora_dio_mapping(rfm95, 0, DIOx_MAPPING_00);
 800c65e:	2200      	movs	r2, #0
 800c660:	2100      	movs	r1, #0
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7ff ff58 	bl	800c518 <rfm95_lora_dio_mapping>
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d001      	beq.n	800c676 <RFM95_LoRa_prepareReceive+0x4e>
 800c672:	7bfb      	ldrb	r3, [r7, #15]
 800c674:	e036      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>
        // set standby mode
        ret = RFM95_LoRa_setOpMode(rfm95, STDBY_MODE);
 800c676:	2101      	movs	r1, #1
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fb1d 	bl	800bcb8 <RFM95_LoRa_setOpMode>
 800c67e:	4603      	mov	r3, r0
 800c680:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <RFM95_LoRa_prepareReceive+0x64>
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	e02b      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>
        // set FifoAddrPtr to FifoRxBaseAddr
        ret = rfm95_writeReg(rfm95, REG_FIFO_ADDR_PTR, &fifoptr);
 800c68c:	f107 030d 	add.w	r3, r7, #13
 800c690:	461a      	mov	r2, r3
 800c692:	210d      	movs	r1, #13
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 fa6d 	bl	800cb74 <rfm95_writeReg>
 800c69a:	4603      	mov	r3, r0
 800c69c:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d001      	beq.n	800c6a8 <RFM95_LoRa_prepareReceive+0x80>
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	e01d      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>
        ret = rfm95_writeReg(rfm95, REG_FIFO_RX_BASE_ADDR, &fifoptr);
 800c6a8:	f107 030d 	add.w	r3, r7, #13
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	210f      	movs	r1, #15
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa5f 	bl	800cb74 <rfm95_writeReg>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	73fb      	strb	r3, [r7, #15]
        if(ret) return ret;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <RFM95_LoRa_prepareReceive+0x9c>
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	e00f      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>

        // set Rx Mode
		ret = RFM95_LoRa_setOpMode(rfm95, RX_CONTINUOUS);
 800c6c4:	2105      	movs	r1, #5
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff faf6 	bl	800bcb8 <RFM95_LoRa_setOpMode>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
		if(ret) return ret;
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d001      	beq.n	800c6da <RFM95_LoRa_prepareReceive+0xb2>
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	e004      	b.n	800c6e4 <RFM95_LoRa_prepareReceive+0xbc>
        rfm95->Settings.LoRa.isRxContinous = true;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    else
    {
        // TODO
    }

    return RFM95_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <RFM95_LoRa_receive>:

uint8_t RFM95_LoRa_receive(RFM95_t* rfm95, uint8_t* buffer, uint8_t bufferlen)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	4613      	mov	r3, r2
 800c6f8:	71fb      	strb	r3, [r7, #7]
    uint8_t ret, readIrqFlag, rxNbBytes, rxCurrentAddr, minLen, irq_rxFlags;
    // check current IRQ flags.
    ret = rfm95_readReg(rfm95, REG_IRQ_FLAGS, &readIrqFlag);
 800c6fa:	f107 0315 	add.w	r3, r7, #21
 800c6fe:	461a      	mov	r2, r3
 800c700:	2112      	movs	r1, #18
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 fa08 	bl	800cb18 <rfm95_readReg>
 800c708:	4603      	mov	r3, r0
 800c70a:	75fb      	strb	r3, [r7, #23]
    if(ret) return ret;
 800c70c:	7dfb      	ldrb	r3, [r7, #23]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d001      	beq.n	800c716 <RFM95_LoRa_receive+0x2a>
 800c712:	7dfb      	ldrb	r3, [r7, #23]
 800c714:	e04e      	b.n	800c7b4 <RFM95_LoRa_receive+0xc8>
    // RxDone
    if((readIrqFlag & (uint8_t)(~Irq_RxDone | ~Irq_ValidHeader)) != 0x00)
 800c716:	7d7b      	ldrb	r3, [r7, #21]
 800c718:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d042      	beq.n	800c7a6 <RFM95_LoRa_receive+0xba>
    {
        // Set RegFifoAddrPtr to RegFifoRxCurrentAddr
        rfm95_readReg(rfm95, REG_RX_NB_BYTES, &rxNbBytes);
 800c720:	f107 0314 	add.w	r3, r7, #20
 800c724:	461a      	mov	r2, r3
 800c726:	2113      	movs	r1, #19
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 f9f5 	bl	800cb18 <rfm95_readReg>
        rfm95_readReg(rfm95, REG_FIFO_RX_CURRENT_ADDR, &rxCurrentAddr);
 800c72e:	f107 0313 	add.w	r3, r7, #19
 800c732:	461a      	mov	r2, r3
 800c734:	2110      	movs	r1, #16
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f000 f9ee 	bl	800cb18 <rfm95_readReg>
        rfm95_writeReg(rfm95, REG_FIFO_ADDR_PTR, &rxCurrentAddr);
 800c73c:	f107 0313 	add.w	r3, r7, #19
 800c740:	461a      	mov	r2, r3
 800c742:	210d      	movs	r1, #13
 800c744:	68f8      	ldr	r0, [r7, #12]
 800c746:	f000 fa15 	bl	800cb74 <rfm95_writeReg>
        minLen = (bufferlen >= rxNbBytes) ? rxNbBytes : bufferlen;
 800c74a:	7d3b      	ldrb	r3, [r7, #20]
 800c74c:	79fa      	ldrb	r2, [r7, #7]
 800c74e:	4293      	cmp	r3, r2
 800c750:	bf28      	it	cs
 800c752:	4613      	movcs	r3, r2
 800c754:	75bb      	strb	r3, [r7, #22]
        
        ret = rfm95_fifo_readReg(rfm95, buffer, minLen);
 800c756:	7dbb      	ldrb	r3, [r7, #22]
 800c758:	461a      	mov	r2, r3
 800c75a:	68b9      	ldr	r1, [r7, #8]
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 fac9 	bl	800ccf4 <rfm95_fifo_readReg>
 800c762:	4603      	mov	r3, r0
 800c764:	75fb      	strb	r3, [r7, #23]
        if(ret) return ret;
 800c766:	7dfb      	ldrb	r3, [r7, #23]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <RFM95_LoRa_receive+0x84>
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
 800c76e:	e021      	b.n	800c7b4 <RFM95_LoRa_receive+0xc8>
        // CRC Error
        if((readIrqFlag & (uint8_t)(~Irq_PayloadCrcError)) != 0x00)
 800c770:	7d7b      	ldrb	r3, [r7, #21]
 800c772:	f003 0320 	and.w	r3, r3, #32
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <RFM95_LoRa_receive+0xa4>
        {
        	// clear the RxFlags interrupt
        	irq_rxFlags = (uint8_t)(~Irq_RxDone | ~Irq_PayloadCrcError | Irq_ValidHeader);
 800c77a:	23ef      	movs	r3, #239	; 0xef
 800c77c:	74bb      	strb	r3, [r7, #18]
			rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800c77e:	f107 0312 	add.w	r3, r7, #18
 800c782:	461a      	mov	r2, r3
 800c784:	2112      	movs	r1, #18
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 f9f4 	bl	800cb74 <rfm95_writeReg>
            return RFM95_ERR_RX_PAYLOAD_CRC;
 800c78c:	2329      	movs	r3, #41	; 0x29
 800c78e:	e011      	b.n	800c7b4 <RFM95_LoRa_receive+0xc8>
        }
        else
        {
        	// clear the RxFlags interrupt
			irq_rxFlags = (uint8_t)(~Irq_RxDone | Irq_ValidHeader);
 800c790:	23ef      	movs	r3, #239	; 0xef
 800c792:	74bb      	strb	r3, [r7, #18]
			rfm95_writeReg(rfm95, REG_IRQ_FLAGS, &irq_rxFlags);
 800c794:	f107 0312 	add.w	r3, r7, #18
 800c798:	461a      	mov	r2, r3
 800c79a:	2112      	movs	r1, #18
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 f9e9 	bl	800cb74 <rfm95_writeReg>
	        return RFM95_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e006      	b.n	800c7b4 <RFM95_LoRa_receive+0xc8>
    }
    // fail to receive signal
    else
    {
    	// clear the RxFlags interrupt
		irq_rxFlags = (uint8_t)(~Irq_RxDone);
 800c7a6:	2340      	movs	r3, #64	; 0x40
 800c7a8:	74bb      	strb	r3, [r7, #18]
        RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff fa83 	bl	800bcb8 <RFM95_LoRa_setOpMode>
        return RFM95_ERR_RX_FAIL;
 800c7b2:	232b      	movs	r3, #43	; 0x2b
    }
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <RFM95_LoRa_setSyncWord>:

uint8_t RFM95_LoRa_setSyncWord(RFM95_t* rfm95 ,uint8_t syncword)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
	if(rfm95_writeReg(rfm95, REG_SYNCWORD, &syncword))
 800c7c8:	1cfb      	adds	r3, r7, #3
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	2139      	movs	r1, #57	; 0x39
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f9d0 	bl	800cb74 <rfm95_writeReg>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <RFM95_LoRa_setSyncWord+0x22>
		return RFM95_ERR_WRITE_REG;
 800c7da:	230b      	movs	r3, #11
 800c7dc:	e000      	b.n	800c7e0 <RFM95_LoRa_setSyncWord+0x24>
	else
		return RFM95_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <RFM95_getPcktSNR>:

float RFM95_getPcktSNR(RFM95_t* rfm95)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	uint8_t readVal;
	rfm95_readReg(rfm95, REG_PCKT_SNR_VAL, &readVal);
 800c7f0:	f107 030f 	add.w	r3, r7, #15
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	2119      	movs	r1, #25
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f98d 	bl	800cb18 <rfm95_readReg>
	rfm95->Settings.LoRaPcktHandler.SNR = (float)((int8_t)readVal * 0.25);
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	b25b      	sxtb	r3, r3
 800c802:	4618      	mov	r0, r3
 800c804:	f7f3 fe96 	bl	8000534 <__aeabi_i2d>
 800c808:	f04f 0200 	mov.w	r2, #0
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <RFM95_getPcktSNR+0x50>)
 800c80e:	f7f3 fefb 	bl	8000608 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4610      	mov	r0, r2
 800c818:	4619      	mov	r1, r3
 800c81a:	f7f4 f9ed 	bl	8000bf8 <__aeabi_d2f>
 800c81e:	4602      	mov	r2, r0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	659a      	str	r2, [r3, #88]	; 0x58
	return rfm95->Settings.LoRaPcktHandler.SNR;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c828:	ee07 3a90 	vmov	s15, r3
}
 800c82c:	eeb0 0a67 	vmov.f32	s0, s15
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	3fd00000 	.word	0x3fd00000

0800c83c <RFM95_getPcktRSSI>:

int16_t RFM95_getPcktRSSI(RFM95_t* rfm95)
{
 800c83c:	b5b0      	push	{r4, r5, r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]

	uint8_t pcktRSSI;
	if(rfm95_readReg(rfm95, REG_PCKT_RSSI_VAL, &pcktRSSI))
 800c844:	f107 030b 	add.w	r3, r7, #11
 800c848:	461a      	mov	r2, r3
 800c84a:	211a      	movs	r1, #26
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f963 	bl	800cb18 <rfm95_readReg>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <RFM95_getPcktRSSI+0x20>
				return RFM95_ERR_READ_REG;
 800c858:	230a      	movs	r3, #10
 800c85a:	e081      	b.n	800c960 <RFM95_getPcktRSSI+0x124>
	float pcktSNR = RFM95_getPcktSNR(rfm95);;
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f7ff ffc3 	bl	800c7e8 <RFM95_getPcktSNR>
 800c862:	ed87 0a03 	vstr	s0, [r7, #12]
	// high frequency
	if(rfm95->Settings.LoRa.frequency <= 1020000000 &&
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c86a:	4a3f      	ldr	r2, [pc, #252]	; (800c968 <RFM95_getPcktRSSI+0x12c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d838      	bhi.n	800c8e2 <RFM95_getPcktRSSI+0xa6>
			rfm95->Settings.LoRa.frequency >= 862000000)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	if(rfm95->Settings.LoRa.frequency <= 1020000000 &&
 800c874:	4a3d      	ldr	r2, [pc, #244]	; (800c96c <RFM95_getPcktRSSI+0x130>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d333      	bcc.n	800c8e2 <RFM95_getPcktRSSI+0xa6>
	{
		if((pcktSNR >= 0.0f))
 800c87a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c87e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c886:	db08      	blt.n	800c89a <RFM95_getPcktRSSI+0x5e>
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-157 + pcktRSSI);
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	3b9d      	subs	r3, #157	; 0x9d
 800c88e:	b29b      	uxth	r3, r3
 800c890:	b21a      	sxth	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c898:	e01f      	b.n	800c8da <RFM95_getPcktRSSI+0x9e>
		else
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-157 + pcktRSSI + pcktSNR * 0.25);
 800c89a:	7afb      	ldrb	r3, [r7, #11]
 800c89c:	3b9d      	subs	r3, #157	; 0x9d
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7f3 fe48 	bl	8000534 <__aeabi_i2d>
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7f3 fe55 	bl	8000558 <__aeabi_f2d>
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	4b2f      	ldr	r3, [pc, #188]	; (800c970 <RFM95_getPcktRSSI+0x134>)
 800c8b4:	f7f3 fea8 	bl	8000608 <__aeabi_dmul>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4620      	mov	r0, r4
 800c8be:	4629      	mov	r1, r5
 800c8c0:	f7f3 fcec 	bl	800029c <__adddf3>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f7f4 f94c 	bl	8000b68 <__aeabi_d2iz>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	b21a      	sxth	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		return rfm95->Settings.LoRaPcktHandler.pcktRSSI;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800c8e0:	e03e      	b.n	800c960 <RFM95_getPcktRSSI+0x124>
	}
	// low frequency
	else if(rfm95->Settings.LoRa.frequency <= 525000000 &&
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8e6:	4a23      	ldr	r2, [pc, #140]	; (800c974 <RFM95_getPcktRSSI+0x138>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d838      	bhi.n	800c95e <RFM95_getPcktRSSI+0x122>
			rfm95->Settings.LoRa.frequency >= 137000000)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	else if(rfm95->Settings.LoRa.frequency <= 525000000 &&
 800c8f0:	4a21      	ldr	r2, [pc, #132]	; (800c978 <RFM95_getPcktRSSI+0x13c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d933      	bls.n	800c95e <RFM95_getPcktRSSI+0x122>
	{
		if(pcktSNR >= 0.0f)
 800c8f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800c8fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c902:	db08      	blt.n	800c916 <RFM95_getPcktRSSI+0xda>
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-164 + pcktRSSI);
 800c904:	7afb      	ldrb	r3, [r7, #11]
 800c906:	b29b      	uxth	r3, r3
 800c908:	3ba4      	subs	r3, #164	; 0xa4
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	b21a      	sxth	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c914:	e01f      	b.n	800c956 <RFM95_getPcktRSSI+0x11a>
		else
			rfm95->Settings.LoRaPcktHandler.pcktRSSI = (int16_t)(-164 + pcktRSSI + pcktSNR * 0.25);
 800c916:	7afb      	ldrb	r3, [r7, #11]
 800c918:	3ba4      	subs	r3, #164	; 0xa4
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f3 fe0a 	bl	8000534 <__aeabi_i2d>
 800c920:	4604      	mov	r4, r0
 800c922:	460d      	mov	r5, r1
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7f3 fe17 	bl	8000558 <__aeabi_f2d>
 800c92a:	f04f 0200 	mov.w	r2, #0
 800c92e:	4b10      	ldr	r3, [pc, #64]	; (800c970 <RFM95_getPcktRSSI+0x134>)
 800c930:	f7f3 fe6a 	bl	8000608 <__aeabi_dmul>
 800c934:	4602      	mov	r2, r0
 800c936:	460b      	mov	r3, r1
 800c938:	4620      	mov	r0, r4
 800c93a:	4629      	mov	r1, r5
 800c93c:	f7f3 fcae 	bl	800029c <__adddf3>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4610      	mov	r0, r2
 800c946:	4619      	mov	r1, r3
 800c948:	f7f4 f90e 	bl	8000b68 <__aeabi_d2iz>
 800c94c:	4603      	mov	r3, r0
 800c94e:	b21a      	sxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		return rfm95->Settings.LoRaPcktHandler.pcktRSSI;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800c95c:	e000      	b.n	800c960 <RFM95_getPcktRSSI+0x124>
	}
	else
	{
		return RFM95_ERR_FREQUENCY;
 800c95e:	2332      	movs	r3, #50	; 0x32
	}
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bdb0      	pop	{r4, r5, r7, pc}
 800c968:	3ccbf700 	.word	0x3ccbf700
 800c96c:	33611380 	.word	0x33611380
 800c970:	3fd00000 	.word	0x3fd00000
 800c974:	1f4add40 	.word	0x1f4add40
 800c978:	082a743f 	.word	0x082a743f

0800c97c <RFM95_LoRa_Init>:
	rfm95_writeReg(rfm95, REG_IRQ_FLAGS_MASK, &currentIRQ);
	return randomNB;
}

uint8_t RFM95_LoRa_Init(RFM95_t* rfm95)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
    uint8_t ret;
    // reset
    RFM95_Reset(rfm95);
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7ff f97d 	bl	800bc84 <RFM95_Reset>
    // enter sleep mode, regs should be written only in Sleep and Standby modes.
	ret = RFM95_LoRa_setOpMode(rfm95, SLEEP_MODE);
 800c98a:	2100      	movs	r1, #0
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff f993 	bl	800bcb8 <RFM95_LoRa_setOpMode>
 800c992:	4603      	mov	r3, r0
 800c994:	73fb      	strb	r3, [r7, #15]
	if(ret) return ret;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <RFM95_LoRa_Init+0x24>
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	e0b1      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//	printf("RFM95_LoRa_setOpMode ..ok\r\n");
    // set lora mode
    ret = RFM95_setModem(rfm95, MODEM_LORA);
 800c9a0:	2101      	movs	r1, #1
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff f9d4 	bl	800bd50 <RFM95_setModem>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <RFM95_LoRa_Init+0x3a>
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	e0a6      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_setModem ..ok\r\n");
    // set frequency
    ret = RFM95_setFrequency(rfm95, 923400000);
 800c9b6:	4955      	ldr	r1, [pc, #340]	; (800cb0c <RFM95_LoRa_Init+0x190>)
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff fa03 	bl	800bdc4 <RFM95_setFrequency>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <RFM95_LoRa_Init+0x50>
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	e09b      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
    printf("Freq: %lu \r\n", RFM95_getFrequency(rfm95));
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff fa2d 	bl	800be2c <RFM95_getFrequency>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	484e      	ldr	r0, [pc, #312]	; (800cb10 <RFM95_LoRa_Init+0x194>)
 800c9d8:	f001 fa24 	bl	800de24 <iprintf>
    // set output power gain
    ret = RFM95_setTXPower(rfm95, 20);
 800c9dc:	2114      	movs	r1, #20
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff fa60 	bl	800bea4 <RFM95_setTXPower>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <RFM95_LoRa_Init+0x76>
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	e088      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_setTXPower ..ok\r\n");
    // set over current protection
    ret = RFM95_setOCP(rfm95, 200);
 800c9f2:	21c8      	movs	r1, #200	; 0xc8
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7ff fb1f 	bl	800c038 <RFM95_setOCP>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <RFM95_LoRa_Init+0x8c>
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	e07d      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_setOCP ..ok\r\n");
    // set LNA gain
    ret = RFM95_setLNAGain(rfm95, LNA_G1);
 800ca08:	2120      	movs	r1, #32
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f7ff fb5c 	bl	800c0c8 <RFM95_setLNAGain>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <RFM95_LoRa_Init+0xa2>
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	e072      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_setLNAGain ..ok\r\n");
    // set spreading factor
    ret = RFM95_LoRa_setSpreadingFactor(rfm95, 10);
 800ca1e:	210a      	movs	r1, #10
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff fba8 	bl	800c176 <RFM95_LoRa_setSpreadingFactor>
 800ca26:	4603      	mov	r3, r0
 800ca28:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <RFM95_LoRa_Init+0xb8>
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
 800ca32:	e067      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setSpreadingFactor ..ok\r\n");
    // set rx crc on
    ret = RFM95_LoRa_setRxPayloadCrcOn(rfm95, true);
 800ca34:	2101      	movs	r1, #1
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7ff fbd9 	bl	800c1ee <RFM95_LoRa_setRxPayloadCrcOn>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca40:	7bfb      	ldrb	r3, [r7, #15]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <RFM95_LoRa_Init+0xce>
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	e05c      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setRxPayloadCrcOn ..ok\r\n");
    // set timeout
    ret = rfm95_lora_symb_timout(rfm95, 0x3FF);
 800ca4a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f7ff fc01 	bl	800c256 <rfm95_lora_symb_timout>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <RFM95_LoRa_Init+0xe6>
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	e050      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("rfm95_lora_symb_timout ..ok\r\n");
    // set bandwidth
    ret = RFM95_LoRa_setBandwidth(rfm95, BW_125_kHz);
 800ca62:	2170      	movs	r1, #112	; 0x70
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff fc3f 	bl	800c2e8 <RFM95_LoRa_setBandwidth>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <RFM95_LoRa_Init+0xfc>
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	e045      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setBandwidth ..ok\r\n");
    // set coding rate
    ret = RFM95_LoRa_setCodingRate(rfm95, CR_4_5);
 800ca78:	2102      	movs	r1, #2
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff fca0 	bl	800c3c0 <RFM95_LoRa_setCodingRate>
 800ca80:	4603      	mov	r3, r0
 800ca82:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <RFM95_LoRa_Init+0x112>
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	e03a      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setCodingRate ..ok\r\n");
    // set explicit mode
    ret = RFM95_LoRa_setHeaderMode(rfm95, EXPLICIT_HEADER_MODE);
 800ca8e:	2100      	movs	r1, #0
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7ff fce1 	bl	800c458 <RFM95_LoRa_setHeaderMode>
 800ca96:	4603      	mov	r3, r0
 800ca98:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <RFM95_LoRa_Init+0x128>
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	e02f      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setHeaderMode ..ok\r\n");
    // By default the packet is configured with a 12 symbol long sequence
    // If it exceeds over 19, SLGv1 won't be able to receive packet successfully.
    ret = RFM95_LoRa_setPreamble(rfm95, 6);
 800caa4:	2106      	movs	r1, #6
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7ff fd08 	bl	800c4bc <RFM95_LoRa_setPreamble>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <RFM95_LoRa_Init+0x13e>
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
 800cab8:	e024      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setPreamble ..ok\r\n");
    // set DIO0 Rx_Done IRQ: 0b00
    ret = rfm95_lora_dio_mapping(rfm95, 0, DIOx_MAPPING_00);
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff fd2a 	bl	800c518 <rfm95_lora_dio_mapping>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <RFM95_LoRa_Init+0x156>
 800cace:	7bfb      	ldrb	r3, [r7, #15]
 800cad0:	e018      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("PLL HOP: %02x\r\n", pllHop);
//    pllHop = (pllHop & 0x7F) | 0x80;
//    rfm95_writeReg(rfm95, REG_PILL_HOP, &pllHop);
//    rfm95_writeReg(rfm95, REG_HOP_PERIOD, &hop);
    // enter standby mode
    ret = RFM95_LoRa_setOpMode(rfm95, STDBY_MODE);
 800cad2:	2101      	movs	r1, #1
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff f8ef 	bl	800bcb8 <RFM95_LoRa_setOpMode>
 800cada:	4603      	mov	r3, r0
 800cadc:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800cade:	7bfb      	ldrb	r3, [r7, #15]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d001      	beq.n	800cae8 <RFM95_LoRa_Init+0x16c>
 800cae4:	7bfb      	ldrb	r3, [r7, #15]
 800cae6:	e00d      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
//    printf("RFM95_LoRa_setOpMode ..ok\r\n");
    // check version
    ret = RFM95_checkVersion(rfm95);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fd83 	bl	800c5f4 <RFM95_checkVersion>
 800caee:	4603      	mov	r3, r0
 800caf0:	73fb      	strb	r3, [r7, #15]
    if(ret) return ret;
 800caf2:	7bfb      	ldrb	r3, [r7, #15]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <RFM95_LoRa_Init+0x180>
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	e003      	b.n	800cb04 <RFM95_LoRa_Init+0x188>
    printf("RFM95_checkVersion ..ok\r\n");
 800cafc:	4805      	ldr	r0, [pc, #20]	; (800cb14 <RFM95_LoRa_Init+0x198>)
 800cafe:	f001 f9ff 	bl	800df00 <puts>

    return RFM95_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	3709f740 	.word	0x3709f740
 800cb10:	08011d10 	.word	0x08011d10
 800cb14:	08011d20 	.word	0x08011d20

0800cb18 <rfm95_readReg>:

uint8_t rfm95_readReg(RFM95_t* rfm95, uint8_t reg, uint8_t* readVal)
{
 800cb18:	b590      	push	{r4, r7, lr}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	460b      	mov	r3, r1
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	72fb      	strb	r3, [r7, #11]
    uint8_t ret;
    uint8_t writeVal = reg & 0x7f;
 800cb26:	7afb      	ldrb	r3, [r7, #11]
 800cb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	75bb      	strb	r3, [r7, #22]
    rfm95->NSEL(0);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	699b      	ldr	r3, [r3, #24]
 800cb34:	2000      	movs	r0, #0
 800cb36:	4798      	blx	r3
    rfm95->SPI_WriteRead(&writeVal, readVal, 2, SPI_TIMEOUT);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	689c      	ldr	r4, [r3, #8]
 800cb3c:	f107 0016 	add.w	r0, r7, #22
 800cb40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cb44:	2202      	movs	r2, #2
 800cb46:	6879      	ldr	r1, [r7, #4]
 800cb48:	47a0      	blx	r4
    rfm95->NSEL(1);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	2001      	movs	r0, #1
 800cb50:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	4798      	blx	r3
 800cb58:	4603      	mov	r3, r0
 800cb5a:	75fb      	strb	r3, [r7, #23]
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	7c1b      	ldrb	r3, [r3, #16]
 800cb60:	7dfa      	ldrb	r2, [r7, #23]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d101      	bne.n	800cb6a <rfm95_readReg+0x52>
 800cb66:	2300      	movs	r3, #0
 800cb68:	e000      	b.n	800cb6c <rfm95_readReg+0x54>
    else return RFM95_ERR_READ_REG;
 800cb6a:	230a      	movs	r3, #10
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	371c      	adds	r7, #28
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd90      	pop	{r4, r7, pc}

0800cb74 <rfm95_writeReg>:

uint8_t rfm95_writeReg(RFM95_t* rfm95, uint8_t reg, uint8_t* writeVal)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b086      	sub	sp, #24
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	72fb      	strb	r3, [r7, #11]
    uint8_t ret;
    uint8_t buff[] = {(reg | 0x80), *writeVal};
 800cb82:	7afb      	ldrb	r3, [r7, #11]
 800cb84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	753b      	strb	r3, [r7, #20]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	757b      	strb	r3, [r7, #21]
    rfm95->NSEL(0);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	699b      	ldr	r3, [r3, #24]
 800cb96:	2000      	movs	r0, #0
 800cb98:	4798      	blx	r3
    rfm95->SPI_Write(buff, 2, SPI_TIMEOUT);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f107 0014 	add.w	r0, r7, #20
 800cba2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cba6:	2102      	movs	r1, #2
 800cba8:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	4798      	blx	r3
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	75fb      	strb	r3, [r7, #23]
    rfm95->NSEL(1);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2001      	movs	r0, #1
 800cbba:	4798      	blx	r3
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	7dfa      	ldrb	r2, [r7, #23]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d101      	bne.n	800cbca <rfm95_writeReg+0x56>
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e000      	b.n	800cbcc <rfm95_writeReg+0x58>
    else return RFM95_ERR_WRITE_REG;
 800cbca:	230b      	movs	r3, #11
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3718      	adds	r7, #24
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <rfm95_burst_readReg>:

uint8_t rfm95_burst_readReg(RFM95_t* rfm95, uint8_t reg, uint8_t* readVal, uint8_t length)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b086      	sub	sp, #24
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	607a      	str	r2, [r7, #4]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	72fb      	strb	r3, [r7, #11]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	72bb      	strb	r3, [r7, #10]
    uint8_t ret[2];
    uint8_t buff = reg & 0x7f;
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
 800cbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	74fb      	strb	r3, [r7, #19]
    rfm95->NSEL(0);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	699b      	ldr	r3, [r3, #24]
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	4798      	blx	r3
    rfm95->SPI_Write(&buff, 1, SPI_TIMEOUT);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f107 0013 	add.w	r0, r7, #19
 800cc02:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cc06:	2101      	movs	r1, #1
 800cc08:	4798      	blx	r3
    ret[0] = rfm95->SPI_CheckState();
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	4798      	blx	r3
 800cc10:	4603      	mov	r3, r0
 800cc12:	753b      	strb	r3, [r7, #20]
    rfm95->SPI_Read(readVal, length, SPI_TIMEOUT);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	7ab9      	ldrb	r1, [r7, #10]
 800cc1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
    ret[1] = rfm95->SPI_CheckState();
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	4798      	blx	r3
 800cc28:	4603      	mov	r3, r0
 800cc2a:	757b      	strb	r3, [r7, #21]
    rfm95->NSEL(1);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	699b      	ldr	r3, [r3, #24]
 800cc30:	2001      	movs	r0, #1
 800cc32:	4798      	blx	r3
    if((ret[0] == rfm95->spi_ok) && (ret[1] == rfm95->spi_ok)) return RFM95_OK;
 800cc34:	7d3a      	ldrb	r2, [r7, #20]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	7c1b      	ldrb	r3, [r3, #16]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d106      	bne.n	800cc4c <rfm95_burst_readReg+0x78>
 800cc3e:	7d7a      	ldrb	r2, [r7, #21]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	7c1b      	ldrb	r3, [r3, #16]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d101      	bne.n	800cc4c <rfm95_burst_readReg+0x78>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e000      	b.n	800cc4e <rfm95_burst_readReg+0x7a>
    else return RFM95_ERR_BURST_READ_REG;
 800cc4c:	2314      	movs	r3, #20
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <rfm95_burst_writeReg>:

uint8_t rfm95_burst_writeReg(RFM95_t* rfm95, uint8_t reg, uint8_t* writeVal, uint8_t length)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b088      	sub	sp, #32
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60f8      	str	r0, [r7, #12]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	461a      	mov	r2, r3
 800cc62:	460b      	mov	r3, r1
 800cc64:	72fb      	strb	r3, [r7, #11]
 800cc66:	4613      	mov	r3, r2
 800cc68:	72bb      	strb	r3, [r7, #10]
    uint8_t ret;
    uint8_t *buff = (uint8_t*)malloc((length + 1) * sizeof(uint8_t));
 800cc6a:	7abb      	ldrb	r3, [r7, #10]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f856 	bl	800cd20 <malloc>
 800cc74:	4603      	mov	r3, r0
 800cc76:	61bb      	str	r3, [r7, #24]
    buff[0] = reg | 0x80;
 800cc78:	7afb      	ldrb	r3, [r7, #11]
 800cc7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < (length + 1); i++)
 800cc84:	2301      	movs	r3, #1
 800cc86:	61fb      	str	r3, [r7, #28]
 800cc88:	e00b      	b.n	800cca2 <rfm95_burst_writeReg+0x4c>
        buff[i] = writeVal[i-1];
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	441a      	add	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	69b9      	ldr	r1, [r7, #24]
 800cc96:	440b      	add	r3, r1
 800cc98:	7812      	ldrb	r2, [r2, #0]
 800cc9a:	701a      	strb	r2, [r3, #0]
    for(int i = 1; i < (length + 1); i++)
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	7abb      	ldrb	r3, [r7, #10]
 800cca4:	69fa      	ldr	r2, [r7, #28]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	ddef      	ble.n	800cc8a <rfm95_burst_writeReg+0x34>
    rfm95->NSEL(0);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	2000      	movs	r0, #0
 800ccb0:	4798      	blx	r3
    rfm95->SPI_Write(buff, length + 1, SPI_TIMEOUT);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	7aba      	ldrb	r2, [r7, #10]
 800ccb8:	3201      	adds	r2, #1
 800ccba:	b2d1      	uxtb	r1, r2
 800ccbc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ccc0:	69b8      	ldr	r0, [r7, #24]
 800ccc2:	4798      	blx	r3
    ret = rfm95->SPI_CheckState();
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	4798      	blx	r3
 800ccca:	4603      	mov	r3, r0
 800cccc:	75fb      	strb	r3, [r7, #23]
    rfm95->NSEL(1);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	699b      	ldr	r3, [r3, #24]
 800ccd2:	2001      	movs	r0, #1
 800ccd4:	4798      	blx	r3
    free(buff);
 800ccd6:	69b8      	ldr	r0, [r7, #24]
 800ccd8:	f000 f82a 	bl	800cd30 <free>
    if(ret == rfm95->spi_ok) return RFM95_OK;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	7c1b      	ldrb	r3, [r3, #16]
 800cce0:	7dfa      	ldrb	r2, [r7, #23]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d101      	bne.n	800ccea <rfm95_burst_writeReg+0x94>
 800cce6:	2300      	movs	r3, #0
 800cce8:	e000      	b.n	800ccec <rfm95_burst_writeReg+0x96>
    else return RFM95_ERR_BURST_WRITE_REG;
 800ccea:	2315      	movs	r3, #21
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <rfm95_fifo_readReg>:

uint8_t rfm95_fifo_readReg(RFM95_t* rfm95, uint8_t* readVal, uint8_t length)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	71fb      	strb	r3, [r7, #7]
    return rfm95_burst_readReg(rfm95, REG_FIFO, readVal, length);
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	68ba      	ldr	r2, [r7, #8]
 800cd06:	2100      	movs	r1, #0
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff ff63 	bl	800cbd4 <rfm95_burst_readReg>
 800cd0e:	4603      	mov	r3, r0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <atoi>:
 800cd18:	220a      	movs	r2, #10
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	f000 b940 	b.w	800cfa0 <strtol>

0800cd20 <malloc>:
 800cd20:	4b02      	ldr	r3, [pc, #8]	; (800cd2c <malloc+0xc>)
 800cd22:	4601      	mov	r1, r0
 800cd24:	6818      	ldr	r0, [r3, #0]
 800cd26:	f000 b82b 	b.w	800cd80 <_malloc_r>
 800cd2a:	bf00      	nop
 800cd2c:	200000bc 	.word	0x200000bc

0800cd30 <free>:
 800cd30:	4b02      	ldr	r3, [pc, #8]	; (800cd3c <free+0xc>)
 800cd32:	4601      	mov	r1, r0
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	f002 b915 	b.w	800ef64 <_free_r>
 800cd3a:	bf00      	nop
 800cd3c:	200000bc 	.word	0x200000bc

0800cd40 <sbrk_aligned>:
 800cd40:	b570      	push	{r4, r5, r6, lr}
 800cd42:	4e0e      	ldr	r6, [pc, #56]	; (800cd7c <sbrk_aligned+0x3c>)
 800cd44:	460c      	mov	r4, r1
 800cd46:	6831      	ldr	r1, [r6, #0]
 800cd48:	4605      	mov	r5, r0
 800cd4a:	b911      	cbnz	r1, 800cd52 <sbrk_aligned+0x12>
 800cd4c:	f001 fa2a 	bl	800e1a4 <_sbrk_r>
 800cd50:	6030      	str	r0, [r6, #0]
 800cd52:	4621      	mov	r1, r4
 800cd54:	4628      	mov	r0, r5
 800cd56:	f001 fa25 	bl	800e1a4 <_sbrk_r>
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	d00a      	beq.n	800cd74 <sbrk_aligned+0x34>
 800cd5e:	1cc4      	adds	r4, r0, #3
 800cd60:	f024 0403 	bic.w	r4, r4, #3
 800cd64:	42a0      	cmp	r0, r4
 800cd66:	d007      	beq.n	800cd78 <sbrk_aligned+0x38>
 800cd68:	1a21      	subs	r1, r4, r0
 800cd6a:	4628      	mov	r0, r5
 800cd6c:	f001 fa1a 	bl	800e1a4 <_sbrk_r>
 800cd70:	3001      	adds	r0, #1
 800cd72:	d101      	bne.n	800cd78 <sbrk_aligned+0x38>
 800cd74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd78:	4620      	mov	r0, r4
 800cd7a:	bd70      	pop	{r4, r5, r6, pc}
 800cd7c:	20002ce8 	.word	0x20002ce8

0800cd80 <_malloc_r>:
 800cd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	1ccd      	adds	r5, r1, #3
 800cd86:	f025 0503 	bic.w	r5, r5, #3
 800cd8a:	3508      	adds	r5, #8
 800cd8c:	2d0c      	cmp	r5, #12
 800cd8e:	bf38      	it	cc
 800cd90:	250c      	movcc	r5, #12
 800cd92:	2d00      	cmp	r5, #0
 800cd94:	4607      	mov	r7, r0
 800cd96:	db01      	blt.n	800cd9c <_malloc_r+0x1c>
 800cd98:	42a9      	cmp	r1, r5
 800cd9a:	d905      	bls.n	800cda8 <_malloc_r+0x28>
 800cd9c:	230c      	movs	r3, #12
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	2600      	movs	r6, #0
 800cda2:	4630      	mov	r0, r6
 800cda4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce7c <_malloc_r+0xfc>
 800cdac:	f000 f868 	bl	800ce80 <__malloc_lock>
 800cdb0:	f8d8 3000 	ldr.w	r3, [r8]
 800cdb4:	461c      	mov	r4, r3
 800cdb6:	bb5c      	cbnz	r4, 800ce10 <_malloc_r+0x90>
 800cdb8:	4629      	mov	r1, r5
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f7ff ffc0 	bl	800cd40 <sbrk_aligned>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	d155      	bne.n	800ce72 <_malloc_r+0xf2>
 800cdc6:	f8d8 4000 	ldr.w	r4, [r8]
 800cdca:	4626      	mov	r6, r4
 800cdcc:	2e00      	cmp	r6, #0
 800cdce:	d145      	bne.n	800ce5c <_malloc_r+0xdc>
 800cdd0:	2c00      	cmp	r4, #0
 800cdd2:	d048      	beq.n	800ce66 <_malloc_r+0xe6>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4638      	mov	r0, r7
 800cdda:	eb04 0903 	add.w	r9, r4, r3
 800cdde:	f001 f9e1 	bl	800e1a4 <_sbrk_r>
 800cde2:	4581      	cmp	r9, r0
 800cde4:	d13f      	bne.n	800ce66 <_malloc_r+0xe6>
 800cde6:	6821      	ldr	r1, [r4, #0]
 800cde8:	1a6d      	subs	r5, r5, r1
 800cdea:	4629      	mov	r1, r5
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7ff ffa7 	bl	800cd40 <sbrk_aligned>
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	d037      	beq.n	800ce66 <_malloc_r+0xe6>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	442b      	add	r3, r5
 800cdfa:	6023      	str	r3, [r4, #0]
 800cdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d038      	beq.n	800ce76 <_malloc_r+0xf6>
 800ce04:	685a      	ldr	r2, [r3, #4]
 800ce06:	42a2      	cmp	r2, r4
 800ce08:	d12b      	bne.n	800ce62 <_malloc_r+0xe2>
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	605a      	str	r2, [r3, #4]
 800ce0e:	e00f      	b.n	800ce30 <_malloc_r+0xb0>
 800ce10:	6822      	ldr	r2, [r4, #0]
 800ce12:	1b52      	subs	r2, r2, r5
 800ce14:	d41f      	bmi.n	800ce56 <_malloc_r+0xd6>
 800ce16:	2a0b      	cmp	r2, #11
 800ce18:	d917      	bls.n	800ce4a <_malloc_r+0xca>
 800ce1a:	1961      	adds	r1, r4, r5
 800ce1c:	42a3      	cmp	r3, r4
 800ce1e:	6025      	str	r5, [r4, #0]
 800ce20:	bf18      	it	ne
 800ce22:	6059      	strne	r1, [r3, #4]
 800ce24:	6863      	ldr	r3, [r4, #4]
 800ce26:	bf08      	it	eq
 800ce28:	f8c8 1000 	streq.w	r1, [r8]
 800ce2c:	5162      	str	r2, [r4, r5]
 800ce2e:	604b      	str	r3, [r1, #4]
 800ce30:	4638      	mov	r0, r7
 800ce32:	f104 060b 	add.w	r6, r4, #11
 800ce36:	f000 f829 	bl	800ce8c <__malloc_unlock>
 800ce3a:	f026 0607 	bic.w	r6, r6, #7
 800ce3e:	1d23      	adds	r3, r4, #4
 800ce40:	1af2      	subs	r2, r6, r3
 800ce42:	d0ae      	beq.n	800cda2 <_malloc_r+0x22>
 800ce44:	1b9b      	subs	r3, r3, r6
 800ce46:	50a3      	str	r3, [r4, r2]
 800ce48:	e7ab      	b.n	800cda2 <_malloc_r+0x22>
 800ce4a:	42a3      	cmp	r3, r4
 800ce4c:	6862      	ldr	r2, [r4, #4]
 800ce4e:	d1dd      	bne.n	800ce0c <_malloc_r+0x8c>
 800ce50:	f8c8 2000 	str.w	r2, [r8]
 800ce54:	e7ec      	b.n	800ce30 <_malloc_r+0xb0>
 800ce56:	4623      	mov	r3, r4
 800ce58:	6864      	ldr	r4, [r4, #4]
 800ce5a:	e7ac      	b.n	800cdb6 <_malloc_r+0x36>
 800ce5c:	4634      	mov	r4, r6
 800ce5e:	6876      	ldr	r6, [r6, #4]
 800ce60:	e7b4      	b.n	800cdcc <_malloc_r+0x4c>
 800ce62:	4613      	mov	r3, r2
 800ce64:	e7cc      	b.n	800ce00 <_malloc_r+0x80>
 800ce66:	230c      	movs	r3, #12
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	f000 f80e 	bl	800ce8c <__malloc_unlock>
 800ce70:	e797      	b.n	800cda2 <_malloc_r+0x22>
 800ce72:	6025      	str	r5, [r4, #0]
 800ce74:	e7dc      	b.n	800ce30 <_malloc_r+0xb0>
 800ce76:	605b      	str	r3, [r3, #4]
 800ce78:	deff      	udf	#255	; 0xff
 800ce7a:	bf00      	nop
 800ce7c:	20002ce4 	.word	0x20002ce4

0800ce80 <__malloc_lock>:
 800ce80:	4801      	ldr	r0, [pc, #4]	; (800ce88 <__malloc_lock+0x8>)
 800ce82:	f001 b9dc 	b.w	800e23e <__retarget_lock_acquire_recursive>
 800ce86:	bf00      	nop
 800ce88:	20002e2c 	.word	0x20002e2c

0800ce8c <__malloc_unlock>:
 800ce8c:	4801      	ldr	r0, [pc, #4]	; (800ce94 <__malloc_unlock+0x8>)
 800ce8e:	f001 b9d7 	b.w	800e240 <__retarget_lock_release_recursive>
 800ce92:	bf00      	nop
 800ce94:	20002e2c 	.word	0x20002e2c

0800ce98 <_strtol_l.constprop.0>:
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9e:	d001      	beq.n	800cea4 <_strtol_l.constprop.0+0xc>
 800cea0:	2b24      	cmp	r3, #36	; 0x24
 800cea2:	d906      	bls.n	800ceb2 <_strtol_l.constprop.0+0x1a>
 800cea4:	f001 f9a0 	bl	800e1e8 <__errno>
 800cea8:	2316      	movs	r3, #22
 800ceaa:	6003      	str	r3, [r0, #0]
 800ceac:	2000      	movs	r0, #0
 800ceae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf98 <_strtol_l.constprop.0+0x100>
 800ceb6:	460d      	mov	r5, r1
 800ceb8:	462e      	mov	r6, r5
 800ceba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cebe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cec2:	f017 0708 	ands.w	r7, r7, #8
 800cec6:	d1f7      	bne.n	800ceb8 <_strtol_l.constprop.0+0x20>
 800cec8:	2c2d      	cmp	r4, #45	; 0x2d
 800ceca:	d132      	bne.n	800cf32 <_strtol_l.constprop.0+0x9a>
 800cecc:	782c      	ldrb	r4, [r5, #0]
 800cece:	2701      	movs	r7, #1
 800ced0:	1cb5      	adds	r5, r6, #2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d05b      	beq.n	800cf8e <_strtol_l.constprop.0+0xf6>
 800ced6:	2b10      	cmp	r3, #16
 800ced8:	d109      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800ceda:	2c30      	cmp	r4, #48	; 0x30
 800cedc:	d107      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800cede:	782c      	ldrb	r4, [r5, #0]
 800cee0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cee4:	2c58      	cmp	r4, #88	; 0x58
 800cee6:	d14d      	bne.n	800cf84 <_strtol_l.constprop.0+0xec>
 800cee8:	786c      	ldrb	r4, [r5, #1]
 800ceea:	2310      	movs	r3, #16
 800ceec:	3502      	adds	r5, #2
 800ceee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cef6:	f04f 0e00 	mov.w	lr, #0
 800cefa:	fbb8 f9f3 	udiv	r9, r8, r3
 800cefe:	4676      	mov	r6, lr
 800cf00:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf04:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf08:	f1bc 0f09 	cmp.w	ip, #9
 800cf0c:	d816      	bhi.n	800cf3c <_strtol_l.constprop.0+0xa4>
 800cf0e:	4664      	mov	r4, ip
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	dd24      	ble.n	800cf5e <_strtol_l.constprop.0+0xc6>
 800cf14:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800cf18:	d008      	beq.n	800cf2c <_strtol_l.constprop.0+0x94>
 800cf1a:	45b1      	cmp	r9, r6
 800cf1c:	d31c      	bcc.n	800cf58 <_strtol_l.constprop.0+0xc0>
 800cf1e:	d101      	bne.n	800cf24 <_strtol_l.constprop.0+0x8c>
 800cf20:	45a2      	cmp	sl, r4
 800cf22:	db19      	blt.n	800cf58 <_strtol_l.constprop.0+0xc0>
 800cf24:	fb06 4603 	mla	r6, r6, r3, r4
 800cf28:	f04f 0e01 	mov.w	lr, #1
 800cf2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf30:	e7e8      	b.n	800cf04 <_strtol_l.constprop.0+0x6c>
 800cf32:	2c2b      	cmp	r4, #43	; 0x2b
 800cf34:	bf04      	itt	eq
 800cf36:	782c      	ldrbeq	r4, [r5, #0]
 800cf38:	1cb5      	addeq	r5, r6, #2
 800cf3a:	e7ca      	b.n	800ced2 <_strtol_l.constprop.0+0x3a>
 800cf3c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf40:	f1bc 0f19 	cmp.w	ip, #25
 800cf44:	d801      	bhi.n	800cf4a <_strtol_l.constprop.0+0xb2>
 800cf46:	3c37      	subs	r4, #55	; 0x37
 800cf48:	e7e2      	b.n	800cf10 <_strtol_l.constprop.0+0x78>
 800cf4a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf4e:	f1bc 0f19 	cmp.w	ip, #25
 800cf52:	d804      	bhi.n	800cf5e <_strtol_l.constprop.0+0xc6>
 800cf54:	3c57      	subs	r4, #87	; 0x57
 800cf56:	e7db      	b.n	800cf10 <_strtol_l.constprop.0+0x78>
 800cf58:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800cf5c:	e7e6      	b.n	800cf2c <_strtol_l.constprop.0+0x94>
 800cf5e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800cf62:	d105      	bne.n	800cf70 <_strtol_l.constprop.0+0xd8>
 800cf64:	2322      	movs	r3, #34	; 0x22
 800cf66:	6003      	str	r3, [r0, #0]
 800cf68:	4646      	mov	r6, r8
 800cf6a:	b942      	cbnz	r2, 800cf7e <_strtol_l.constprop.0+0xe6>
 800cf6c:	4630      	mov	r0, r6
 800cf6e:	e79e      	b.n	800ceae <_strtol_l.constprop.0+0x16>
 800cf70:	b107      	cbz	r7, 800cf74 <_strtol_l.constprop.0+0xdc>
 800cf72:	4276      	negs	r6, r6
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	d0f9      	beq.n	800cf6c <_strtol_l.constprop.0+0xd4>
 800cf78:	f1be 0f00 	cmp.w	lr, #0
 800cf7c:	d000      	beq.n	800cf80 <_strtol_l.constprop.0+0xe8>
 800cf7e:	1e69      	subs	r1, r5, #1
 800cf80:	6011      	str	r1, [r2, #0]
 800cf82:	e7f3      	b.n	800cf6c <_strtol_l.constprop.0+0xd4>
 800cf84:	2430      	movs	r4, #48	; 0x30
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1b1      	bne.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	e7af      	b.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf8e:	2c30      	cmp	r4, #48	; 0x30
 800cf90:	d0a5      	beq.n	800cede <_strtol_l.constprop.0+0x46>
 800cf92:	230a      	movs	r3, #10
 800cf94:	e7ab      	b.n	800ceee <_strtol_l.constprop.0+0x56>
 800cf96:	bf00      	nop
 800cf98:	08012195 	.word	0x08012195

0800cf9c <_strtol_r>:
 800cf9c:	f7ff bf7c 	b.w	800ce98 <_strtol_l.constprop.0>

0800cfa0 <strtol>:
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	460a      	mov	r2, r1
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	4802      	ldr	r0, [pc, #8]	; (800cfb0 <strtol+0x10>)
 800cfa8:	6800      	ldr	r0, [r0, #0]
 800cfaa:	f7ff bf75 	b.w	800ce98 <_strtol_l.constprop.0>
 800cfae:	bf00      	nop
 800cfb0:	200000bc 	.word	0x200000bc

0800cfb4 <__cvt>:
 800cfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	ec55 4b10 	vmov	r4, r5, d0
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	460e      	mov	r6, r1
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	bfbb      	ittet	lt
 800cfc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cfca:	461d      	movlt	r5, r3
 800cfcc:	2300      	movge	r3, #0
 800cfce:	232d      	movlt	r3, #45	; 0x2d
 800cfd0:	700b      	strb	r3, [r1, #0]
 800cfd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cfd8:	4691      	mov	r9, r2
 800cfda:	f023 0820 	bic.w	r8, r3, #32
 800cfde:	bfbc      	itt	lt
 800cfe0:	4622      	movlt	r2, r4
 800cfe2:	4614      	movlt	r4, r2
 800cfe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cfe8:	d005      	beq.n	800cff6 <__cvt+0x42>
 800cfea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cfee:	d100      	bne.n	800cff2 <__cvt+0x3e>
 800cff0:	3601      	adds	r6, #1
 800cff2:	2102      	movs	r1, #2
 800cff4:	e000      	b.n	800cff8 <__cvt+0x44>
 800cff6:	2103      	movs	r1, #3
 800cff8:	ab03      	add	r3, sp, #12
 800cffa:	9301      	str	r3, [sp, #4]
 800cffc:	ab02      	add	r3, sp, #8
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	ec45 4b10 	vmov	d0, r4, r5
 800d004:	4653      	mov	r3, sl
 800d006:	4632      	mov	r2, r6
 800d008:	f001 f9ba 	bl	800e380 <_dtoa_r>
 800d00c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d010:	4607      	mov	r7, r0
 800d012:	d102      	bne.n	800d01a <__cvt+0x66>
 800d014:	f019 0f01 	tst.w	r9, #1
 800d018:	d022      	beq.n	800d060 <__cvt+0xac>
 800d01a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d01e:	eb07 0906 	add.w	r9, r7, r6
 800d022:	d110      	bne.n	800d046 <__cvt+0x92>
 800d024:	783b      	ldrb	r3, [r7, #0]
 800d026:	2b30      	cmp	r3, #48	; 0x30
 800d028:	d10a      	bne.n	800d040 <__cvt+0x8c>
 800d02a:	2200      	movs	r2, #0
 800d02c:	2300      	movs	r3, #0
 800d02e:	4620      	mov	r0, r4
 800d030:	4629      	mov	r1, r5
 800d032:	f7f3 fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 800d036:	b918      	cbnz	r0, 800d040 <__cvt+0x8c>
 800d038:	f1c6 0601 	rsb	r6, r6, #1
 800d03c:	f8ca 6000 	str.w	r6, [sl]
 800d040:	f8da 3000 	ldr.w	r3, [sl]
 800d044:	4499      	add	r9, r3
 800d046:	2200      	movs	r2, #0
 800d048:	2300      	movs	r3, #0
 800d04a:	4620      	mov	r0, r4
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7f3 fd43 	bl	8000ad8 <__aeabi_dcmpeq>
 800d052:	b108      	cbz	r0, 800d058 <__cvt+0xa4>
 800d054:	f8cd 900c 	str.w	r9, [sp, #12]
 800d058:	2230      	movs	r2, #48	; 0x30
 800d05a:	9b03      	ldr	r3, [sp, #12]
 800d05c:	454b      	cmp	r3, r9
 800d05e:	d307      	bcc.n	800d070 <__cvt+0xbc>
 800d060:	9b03      	ldr	r3, [sp, #12]
 800d062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d064:	1bdb      	subs	r3, r3, r7
 800d066:	4638      	mov	r0, r7
 800d068:	6013      	str	r3, [r2, #0]
 800d06a:	b004      	add	sp, #16
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d070:	1c59      	adds	r1, r3, #1
 800d072:	9103      	str	r1, [sp, #12]
 800d074:	701a      	strb	r2, [r3, #0]
 800d076:	e7f0      	b.n	800d05a <__cvt+0xa6>

0800d078 <__exponent>:
 800d078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d07a:	4603      	mov	r3, r0
 800d07c:	2900      	cmp	r1, #0
 800d07e:	bfb8      	it	lt
 800d080:	4249      	neglt	r1, r1
 800d082:	f803 2b02 	strb.w	r2, [r3], #2
 800d086:	bfb4      	ite	lt
 800d088:	222d      	movlt	r2, #45	; 0x2d
 800d08a:	222b      	movge	r2, #43	; 0x2b
 800d08c:	2909      	cmp	r1, #9
 800d08e:	7042      	strb	r2, [r0, #1]
 800d090:	dd2a      	ble.n	800d0e8 <__exponent+0x70>
 800d092:	f10d 0207 	add.w	r2, sp, #7
 800d096:	4617      	mov	r7, r2
 800d098:	260a      	movs	r6, #10
 800d09a:	4694      	mov	ip, r2
 800d09c:	fb91 f5f6 	sdiv	r5, r1, r6
 800d0a0:	fb06 1415 	mls	r4, r6, r5, r1
 800d0a4:	3430      	adds	r4, #48	; 0x30
 800d0a6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	2c63      	cmp	r4, #99	; 0x63
 800d0ae:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	dcf1      	bgt.n	800d09a <__exponent+0x22>
 800d0b6:	3130      	adds	r1, #48	; 0x30
 800d0b8:	f1ac 0402 	sub.w	r4, ip, #2
 800d0bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d0c0:	1c41      	adds	r1, r0, #1
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	42ba      	cmp	r2, r7
 800d0c6:	d30a      	bcc.n	800d0de <__exponent+0x66>
 800d0c8:	f10d 0209 	add.w	r2, sp, #9
 800d0cc:	eba2 020c 	sub.w	r2, r2, ip
 800d0d0:	42bc      	cmp	r4, r7
 800d0d2:	bf88      	it	hi
 800d0d4:	2200      	movhi	r2, #0
 800d0d6:	4413      	add	r3, r2
 800d0d8:	1a18      	subs	r0, r3, r0
 800d0da:	b003      	add	sp, #12
 800d0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0de:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d0e2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d0e6:	e7ed      	b.n	800d0c4 <__exponent+0x4c>
 800d0e8:	2330      	movs	r3, #48	; 0x30
 800d0ea:	3130      	adds	r1, #48	; 0x30
 800d0ec:	7083      	strb	r3, [r0, #2]
 800d0ee:	70c1      	strb	r1, [r0, #3]
 800d0f0:	1d03      	adds	r3, r0, #4
 800d0f2:	e7f1      	b.n	800d0d8 <__exponent+0x60>

0800d0f4 <_printf_float>:
 800d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	ed2d 8b02 	vpush	{d8}
 800d0fc:	b08d      	sub	sp, #52	; 0x34
 800d0fe:	460c      	mov	r4, r1
 800d100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d104:	4616      	mov	r6, r2
 800d106:	461f      	mov	r7, r3
 800d108:	4605      	mov	r5, r0
 800d10a:	f001 f813 	bl	800e134 <_localeconv_r>
 800d10e:	f8d0 a000 	ldr.w	sl, [r0]
 800d112:	4650      	mov	r0, sl
 800d114:	f7f3 f8b4 	bl	8000280 <strlen>
 800d118:	2300      	movs	r3, #0
 800d11a:	930a      	str	r3, [sp, #40]	; 0x28
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	f8d8 3000 	ldr.w	r3, [r8]
 800d124:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d128:	3307      	adds	r3, #7
 800d12a:	f023 0307 	bic.w	r3, r3, #7
 800d12e:	f103 0208 	add.w	r2, r3, #8
 800d132:	f8c8 2000 	str.w	r2, [r8]
 800d136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d13a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d13e:	9307      	str	r3, [sp, #28]
 800d140:	f8cd 8018 	str.w	r8, [sp, #24]
 800d144:	ee08 0a10 	vmov	s16, r0
 800d148:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d14c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d150:	4b9e      	ldr	r3, [pc, #632]	; (800d3cc <_printf_float+0x2d8>)
 800d152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d156:	f7f3 fcf1 	bl	8000b3c <__aeabi_dcmpun>
 800d15a:	bb88      	cbnz	r0, 800d1c0 <_printf_float+0xcc>
 800d15c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d160:	4b9a      	ldr	r3, [pc, #616]	; (800d3cc <_printf_float+0x2d8>)
 800d162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d166:	f7f3 fccb 	bl	8000b00 <__aeabi_dcmple>
 800d16a:	bb48      	cbnz	r0, 800d1c0 <_printf_float+0xcc>
 800d16c:	2200      	movs	r2, #0
 800d16e:	2300      	movs	r3, #0
 800d170:	4640      	mov	r0, r8
 800d172:	4649      	mov	r1, r9
 800d174:	f7f3 fcba 	bl	8000aec <__aeabi_dcmplt>
 800d178:	b110      	cbz	r0, 800d180 <_printf_float+0x8c>
 800d17a:	232d      	movs	r3, #45	; 0x2d
 800d17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d180:	4a93      	ldr	r2, [pc, #588]	; (800d3d0 <_printf_float+0x2dc>)
 800d182:	4b94      	ldr	r3, [pc, #592]	; (800d3d4 <_printf_float+0x2e0>)
 800d184:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d188:	bf94      	ite	ls
 800d18a:	4690      	movls	r8, r2
 800d18c:	4698      	movhi	r8, r3
 800d18e:	2303      	movs	r3, #3
 800d190:	6123      	str	r3, [r4, #16]
 800d192:	9b05      	ldr	r3, [sp, #20]
 800d194:	f023 0304 	bic.w	r3, r3, #4
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	f04f 0900 	mov.w	r9, #0
 800d19e:	9700      	str	r7, [sp, #0]
 800d1a0:	4633      	mov	r3, r6
 800d1a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	f000 f9da 	bl	800d560 <_printf_common>
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	f040 8090 	bne.w	800d2d2 <_printf_float+0x1de>
 800d1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1b6:	b00d      	add	sp, #52	; 0x34
 800d1b8:	ecbd 8b02 	vpop	{d8}
 800d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	f7f3 fcb8 	bl	8000b3c <__aeabi_dcmpun>
 800d1cc:	b140      	cbz	r0, 800d1e0 <_printf_float+0xec>
 800d1ce:	464b      	mov	r3, r9
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	bfbc      	itt	lt
 800d1d4:	232d      	movlt	r3, #45	; 0x2d
 800d1d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d1da:	4a7f      	ldr	r2, [pc, #508]	; (800d3d8 <_printf_float+0x2e4>)
 800d1dc:	4b7f      	ldr	r3, [pc, #508]	; (800d3dc <_printf_float+0x2e8>)
 800d1de:	e7d1      	b.n	800d184 <_printf_float+0x90>
 800d1e0:	6863      	ldr	r3, [r4, #4]
 800d1e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d1e6:	9206      	str	r2, [sp, #24]
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	d13f      	bne.n	800d26c <_printf_float+0x178>
 800d1ec:	2306      	movs	r3, #6
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	9b05      	ldr	r3, [sp, #20]
 800d1f2:	6861      	ldr	r1, [r4, #4]
 800d1f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9303      	str	r3, [sp, #12]
 800d1fc:	ab0a      	add	r3, sp, #40	; 0x28
 800d1fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d202:	ab09      	add	r3, sp, #36	; 0x24
 800d204:	ec49 8b10 	vmov	d0, r8, r9
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	6022      	str	r2, [r4, #0]
 800d20c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d210:	4628      	mov	r0, r5
 800d212:	f7ff fecf 	bl	800cfb4 <__cvt>
 800d216:	9b06      	ldr	r3, [sp, #24]
 800d218:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d21a:	2b47      	cmp	r3, #71	; 0x47
 800d21c:	4680      	mov	r8, r0
 800d21e:	d108      	bne.n	800d232 <_printf_float+0x13e>
 800d220:	1cc8      	adds	r0, r1, #3
 800d222:	db02      	blt.n	800d22a <_printf_float+0x136>
 800d224:	6863      	ldr	r3, [r4, #4]
 800d226:	4299      	cmp	r1, r3
 800d228:	dd41      	ble.n	800d2ae <_printf_float+0x1ba>
 800d22a:	f1ab 0302 	sub.w	r3, fp, #2
 800d22e:	fa5f fb83 	uxtb.w	fp, r3
 800d232:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d236:	d820      	bhi.n	800d27a <_printf_float+0x186>
 800d238:	3901      	subs	r1, #1
 800d23a:	465a      	mov	r2, fp
 800d23c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d240:	9109      	str	r1, [sp, #36]	; 0x24
 800d242:	f7ff ff19 	bl	800d078 <__exponent>
 800d246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d248:	1813      	adds	r3, r2, r0
 800d24a:	2a01      	cmp	r2, #1
 800d24c:	4681      	mov	r9, r0
 800d24e:	6123      	str	r3, [r4, #16]
 800d250:	dc02      	bgt.n	800d258 <_printf_float+0x164>
 800d252:	6822      	ldr	r2, [r4, #0]
 800d254:	07d2      	lsls	r2, r2, #31
 800d256:	d501      	bpl.n	800d25c <_printf_float+0x168>
 800d258:	3301      	adds	r3, #1
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d260:	2b00      	cmp	r3, #0
 800d262:	d09c      	beq.n	800d19e <_printf_float+0xaa>
 800d264:	232d      	movs	r3, #45	; 0x2d
 800d266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d26a:	e798      	b.n	800d19e <_printf_float+0xaa>
 800d26c:	9a06      	ldr	r2, [sp, #24]
 800d26e:	2a47      	cmp	r2, #71	; 0x47
 800d270:	d1be      	bne.n	800d1f0 <_printf_float+0xfc>
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1bc      	bne.n	800d1f0 <_printf_float+0xfc>
 800d276:	2301      	movs	r3, #1
 800d278:	e7b9      	b.n	800d1ee <_printf_float+0xfa>
 800d27a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d27e:	d118      	bne.n	800d2b2 <_printf_float+0x1be>
 800d280:	2900      	cmp	r1, #0
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	dd0b      	ble.n	800d29e <_printf_float+0x1aa>
 800d286:	6121      	str	r1, [r4, #16]
 800d288:	b913      	cbnz	r3, 800d290 <_printf_float+0x19c>
 800d28a:	6822      	ldr	r2, [r4, #0]
 800d28c:	07d0      	lsls	r0, r2, #31
 800d28e:	d502      	bpl.n	800d296 <_printf_float+0x1a2>
 800d290:	3301      	adds	r3, #1
 800d292:	440b      	add	r3, r1
 800d294:	6123      	str	r3, [r4, #16]
 800d296:	65a1      	str	r1, [r4, #88]	; 0x58
 800d298:	f04f 0900 	mov.w	r9, #0
 800d29c:	e7de      	b.n	800d25c <_printf_float+0x168>
 800d29e:	b913      	cbnz	r3, 800d2a6 <_printf_float+0x1b2>
 800d2a0:	6822      	ldr	r2, [r4, #0]
 800d2a2:	07d2      	lsls	r2, r2, #31
 800d2a4:	d501      	bpl.n	800d2aa <_printf_float+0x1b6>
 800d2a6:	3302      	adds	r3, #2
 800d2a8:	e7f4      	b.n	800d294 <_printf_float+0x1a0>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e7f2      	b.n	800d294 <_printf_float+0x1a0>
 800d2ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b4:	4299      	cmp	r1, r3
 800d2b6:	db05      	blt.n	800d2c4 <_printf_float+0x1d0>
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	6121      	str	r1, [r4, #16]
 800d2bc:	07d8      	lsls	r0, r3, #31
 800d2be:	d5ea      	bpl.n	800d296 <_printf_float+0x1a2>
 800d2c0:	1c4b      	adds	r3, r1, #1
 800d2c2:	e7e7      	b.n	800d294 <_printf_float+0x1a0>
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	bfd4      	ite	le
 800d2c8:	f1c1 0202 	rsble	r2, r1, #2
 800d2cc:	2201      	movgt	r2, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	e7e0      	b.n	800d294 <_printf_float+0x1a0>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	055a      	lsls	r2, r3, #21
 800d2d6:	d407      	bmi.n	800d2e8 <_printf_float+0x1f4>
 800d2d8:	6923      	ldr	r3, [r4, #16]
 800d2da:	4642      	mov	r2, r8
 800d2dc:	4631      	mov	r1, r6
 800d2de:	4628      	mov	r0, r5
 800d2e0:	47b8      	blx	r7
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d12c      	bne.n	800d340 <_printf_float+0x24c>
 800d2e6:	e764      	b.n	800d1b2 <_printf_float+0xbe>
 800d2e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d2ec:	f240 80e0 	bls.w	800d4b0 <_printf_float+0x3bc>
 800d2f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f7f3 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d034      	beq.n	800d36a <_printf_float+0x276>
 800d300:	4a37      	ldr	r2, [pc, #220]	; (800d3e0 <_printf_float+0x2ec>)
 800d302:	2301      	movs	r3, #1
 800d304:	4631      	mov	r1, r6
 800d306:	4628      	mov	r0, r5
 800d308:	47b8      	blx	r7
 800d30a:	3001      	adds	r0, #1
 800d30c:	f43f af51 	beq.w	800d1b2 <_printf_float+0xbe>
 800d310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d314:	429a      	cmp	r2, r3
 800d316:	db02      	blt.n	800d31e <_printf_float+0x22a>
 800d318:	6823      	ldr	r3, [r4, #0]
 800d31a:	07d8      	lsls	r0, r3, #31
 800d31c:	d510      	bpl.n	800d340 <_printf_float+0x24c>
 800d31e:	ee18 3a10 	vmov	r3, s16
 800d322:	4652      	mov	r2, sl
 800d324:	4631      	mov	r1, r6
 800d326:	4628      	mov	r0, r5
 800d328:	47b8      	blx	r7
 800d32a:	3001      	adds	r0, #1
 800d32c:	f43f af41 	beq.w	800d1b2 <_printf_float+0xbe>
 800d330:	f04f 0800 	mov.w	r8, #0
 800d334:	f104 091a 	add.w	r9, r4, #26
 800d338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d33a:	3b01      	subs	r3, #1
 800d33c:	4543      	cmp	r3, r8
 800d33e:	dc09      	bgt.n	800d354 <_printf_float+0x260>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	079b      	lsls	r3, r3, #30
 800d344:	f100 8107 	bmi.w	800d556 <_printf_float+0x462>
 800d348:	68e0      	ldr	r0, [r4, #12]
 800d34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d34c:	4298      	cmp	r0, r3
 800d34e:	bfb8      	it	lt
 800d350:	4618      	movlt	r0, r3
 800d352:	e730      	b.n	800d1b6 <_printf_float+0xc2>
 800d354:	2301      	movs	r3, #1
 800d356:	464a      	mov	r2, r9
 800d358:	4631      	mov	r1, r6
 800d35a:	4628      	mov	r0, r5
 800d35c:	47b8      	blx	r7
 800d35e:	3001      	adds	r0, #1
 800d360:	f43f af27 	beq.w	800d1b2 <_printf_float+0xbe>
 800d364:	f108 0801 	add.w	r8, r8, #1
 800d368:	e7e6      	b.n	800d338 <_printf_float+0x244>
 800d36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	dc39      	bgt.n	800d3e4 <_printf_float+0x2f0>
 800d370:	4a1b      	ldr	r2, [pc, #108]	; (800d3e0 <_printf_float+0x2ec>)
 800d372:	2301      	movs	r3, #1
 800d374:	4631      	mov	r1, r6
 800d376:	4628      	mov	r0, r5
 800d378:	47b8      	blx	r7
 800d37a:	3001      	adds	r0, #1
 800d37c:	f43f af19 	beq.w	800d1b2 <_printf_float+0xbe>
 800d380:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d384:	4313      	orrs	r3, r2
 800d386:	d102      	bne.n	800d38e <_printf_float+0x29a>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	07d9      	lsls	r1, r3, #31
 800d38c:	d5d8      	bpl.n	800d340 <_printf_float+0x24c>
 800d38e:	ee18 3a10 	vmov	r3, s16
 800d392:	4652      	mov	r2, sl
 800d394:	4631      	mov	r1, r6
 800d396:	4628      	mov	r0, r5
 800d398:	47b8      	blx	r7
 800d39a:	3001      	adds	r0, #1
 800d39c:	f43f af09 	beq.w	800d1b2 <_printf_float+0xbe>
 800d3a0:	f04f 0900 	mov.w	r9, #0
 800d3a4:	f104 0a1a 	add.w	sl, r4, #26
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	425b      	negs	r3, r3
 800d3ac:	454b      	cmp	r3, r9
 800d3ae:	dc01      	bgt.n	800d3b4 <_printf_float+0x2c0>
 800d3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b2:	e792      	b.n	800d2da <_printf_float+0x1e6>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4652      	mov	r2, sl
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f aef7 	beq.w	800d1b2 <_printf_float+0xbe>
 800d3c4:	f109 0901 	add.w	r9, r9, #1
 800d3c8:	e7ee      	b.n	800d3a8 <_printf_float+0x2b4>
 800d3ca:	bf00      	nop
 800d3cc:	7fefffff 	.word	0x7fefffff
 800d3d0:	08012295 	.word	0x08012295
 800d3d4:	08012299 	.word	0x08012299
 800d3d8:	0801229d 	.word	0x0801229d
 800d3dc:	080122a1 	.word	0x080122a1
 800d3e0:	080122a5 	.word	0x080122a5
 800d3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	bfa8      	it	ge
 800d3ec:	461a      	movge	r2, r3
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	4691      	mov	r9, r2
 800d3f2:	dc37      	bgt.n	800d464 <_printf_float+0x370>
 800d3f4:	f04f 0b00 	mov.w	fp, #0
 800d3f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3fc:	f104 021a 	add.w	r2, r4, #26
 800d400:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	eba3 0309 	sub.w	r3, r3, r9
 800d408:	455b      	cmp	r3, fp
 800d40a:	dc33      	bgt.n	800d474 <_printf_float+0x380>
 800d40c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d410:	429a      	cmp	r2, r3
 800d412:	db3b      	blt.n	800d48c <_printf_float+0x398>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	07da      	lsls	r2, r3, #31
 800d418:	d438      	bmi.n	800d48c <_printf_float+0x398>
 800d41a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d41e:	eba2 0903 	sub.w	r9, r2, r3
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	1ad2      	subs	r2, r2, r3
 800d426:	4591      	cmp	r9, r2
 800d428:	bfa8      	it	ge
 800d42a:	4691      	movge	r9, r2
 800d42c:	f1b9 0f00 	cmp.w	r9, #0
 800d430:	dc35      	bgt.n	800d49e <_printf_float+0x3aa>
 800d432:	f04f 0800 	mov.w	r8, #0
 800d436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d43a:	f104 0a1a 	add.w	sl, r4, #26
 800d43e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d442:	1a9b      	subs	r3, r3, r2
 800d444:	eba3 0309 	sub.w	r3, r3, r9
 800d448:	4543      	cmp	r3, r8
 800d44a:	f77f af79 	ble.w	800d340 <_printf_float+0x24c>
 800d44e:	2301      	movs	r3, #1
 800d450:	4652      	mov	r2, sl
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	f43f aeaa 	beq.w	800d1b2 <_printf_float+0xbe>
 800d45e:	f108 0801 	add.w	r8, r8, #1
 800d462:	e7ec      	b.n	800d43e <_printf_float+0x34a>
 800d464:	4613      	mov	r3, r2
 800d466:	4631      	mov	r1, r6
 800d468:	4642      	mov	r2, r8
 800d46a:	4628      	mov	r0, r5
 800d46c:	47b8      	blx	r7
 800d46e:	3001      	adds	r0, #1
 800d470:	d1c0      	bne.n	800d3f4 <_printf_float+0x300>
 800d472:	e69e      	b.n	800d1b2 <_printf_float+0xbe>
 800d474:	2301      	movs	r3, #1
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	9205      	str	r2, [sp, #20]
 800d47c:	47b8      	blx	r7
 800d47e:	3001      	adds	r0, #1
 800d480:	f43f ae97 	beq.w	800d1b2 <_printf_float+0xbe>
 800d484:	9a05      	ldr	r2, [sp, #20]
 800d486:	f10b 0b01 	add.w	fp, fp, #1
 800d48a:	e7b9      	b.n	800d400 <_printf_float+0x30c>
 800d48c:	ee18 3a10 	vmov	r3, s16
 800d490:	4652      	mov	r2, sl
 800d492:	4631      	mov	r1, r6
 800d494:	4628      	mov	r0, r5
 800d496:	47b8      	blx	r7
 800d498:	3001      	adds	r0, #1
 800d49a:	d1be      	bne.n	800d41a <_printf_float+0x326>
 800d49c:	e689      	b.n	800d1b2 <_printf_float+0xbe>
 800d49e:	9a05      	ldr	r2, [sp, #20]
 800d4a0:	464b      	mov	r3, r9
 800d4a2:	4442      	add	r2, r8
 800d4a4:	4631      	mov	r1, r6
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	47b8      	blx	r7
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	d1c1      	bne.n	800d432 <_printf_float+0x33e>
 800d4ae:	e680      	b.n	800d1b2 <_printf_float+0xbe>
 800d4b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4b2:	2a01      	cmp	r2, #1
 800d4b4:	dc01      	bgt.n	800d4ba <_printf_float+0x3c6>
 800d4b6:	07db      	lsls	r3, r3, #31
 800d4b8:	d53a      	bpl.n	800d530 <_printf_float+0x43c>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4642      	mov	r2, r8
 800d4be:	4631      	mov	r1, r6
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	47b8      	blx	r7
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	f43f ae74 	beq.w	800d1b2 <_printf_float+0xbe>
 800d4ca:	ee18 3a10 	vmov	r3, s16
 800d4ce:	4652      	mov	r2, sl
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	47b8      	blx	r7
 800d4d6:	3001      	adds	r0, #1
 800d4d8:	f43f ae6b 	beq.w	800d1b2 <_printf_float+0xbe>
 800d4dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d4e8:	f7f3 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d4ec:	b9d8      	cbnz	r0, 800d526 <_printf_float+0x432>
 800d4ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d4f2:	f108 0201 	add.w	r2, r8, #1
 800d4f6:	4631      	mov	r1, r6
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	47b8      	blx	r7
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	d10e      	bne.n	800d51e <_printf_float+0x42a>
 800d500:	e657      	b.n	800d1b2 <_printf_float+0xbe>
 800d502:	2301      	movs	r3, #1
 800d504:	4652      	mov	r2, sl
 800d506:	4631      	mov	r1, r6
 800d508:	4628      	mov	r0, r5
 800d50a:	47b8      	blx	r7
 800d50c:	3001      	adds	r0, #1
 800d50e:	f43f ae50 	beq.w	800d1b2 <_printf_float+0xbe>
 800d512:	f108 0801 	add.w	r8, r8, #1
 800d516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d518:	3b01      	subs	r3, #1
 800d51a:	4543      	cmp	r3, r8
 800d51c:	dcf1      	bgt.n	800d502 <_printf_float+0x40e>
 800d51e:	464b      	mov	r3, r9
 800d520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d524:	e6da      	b.n	800d2dc <_printf_float+0x1e8>
 800d526:	f04f 0800 	mov.w	r8, #0
 800d52a:	f104 0a1a 	add.w	sl, r4, #26
 800d52e:	e7f2      	b.n	800d516 <_printf_float+0x422>
 800d530:	2301      	movs	r3, #1
 800d532:	4642      	mov	r2, r8
 800d534:	e7df      	b.n	800d4f6 <_printf_float+0x402>
 800d536:	2301      	movs	r3, #1
 800d538:	464a      	mov	r2, r9
 800d53a:	4631      	mov	r1, r6
 800d53c:	4628      	mov	r0, r5
 800d53e:	47b8      	blx	r7
 800d540:	3001      	adds	r0, #1
 800d542:	f43f ae36 	beq.w	800d1b2 <_printf_float+0xbe>
 800d546:	f108 0801 	add.w	r8, r8, #1
 800d54a:	68e3      	ldr	r3, [r4, #12]
 800d54c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d54e:	1a5b      	subs	r3, r3, r1
 800d550:	4543      	cmp	r3, r8
 800d552:	dcf0      	bgt.n	800d536 <_printf_float+0x442>
 800d554:	e6f8      	b.n	800d348 <_printf_float+0x254>
 800d556:	f04f 0800 	mov.w	r8, #0
 800d55a:	f104 0919 	add.w	r9, r4, #25
 800d55e:	e7f4      	b.n	800d54a <_printf_float+0x456>

0800d560 <_printf_common>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	4616      	mov	r6, r2
 800d566:	4699      	mov	r9, r3
 800d568:	688a      	ldr	r2, [r1, #8]
 800d56a:	690b      	ldr	r3, [r1, #16]
 800d56c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d570:	4293      	cmp	r3, r2
 800d572:	bfb8      	it	lt
 800d574:	4613      	movlt	r3, r2
 800d576:	6033      	str	r3, [r6, #0]
 800d578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d57c:	4607      	mov	r7, r0
 800d57e:	460c      	mov	r4, r1
 800d580:	b10a      	cbz	r2, 800d586 <_printf_common+0x26>
 800d582:	3301      	adds	r3, #1
 800d584:	6033      	str	r3, [r6, #0]
 800d586:	6823      	ldr	r3, [r4, #0]
 800d588:	0699      	lsls	r1, r3, #26
 800d58a:	bf42      	ittt	mi
 800d58c:	6833      	ldrmi	r3, [r6, #0]
 800d58e:	3302      	addmi	r3, #2
 800d590:	6033      	strmi	r3, [r6, #0]
 800d592:	6825      	ldr	r5, [r4, #0]
 800d594:	f015 0506 	ands.w	r5, r5, #6
 800d598:	d106      	bne.n	800d5a8 <_printf_common+0x48>
 800d59a:	f104 0a19 	add.w	sl, r4, #25
 800d59e:	68e3      	ldr	r3, [r4, #12]
 800d5a0:	6832      	ldr	r2, [r6, #0]
 800d5a2:	1a9b      	subs	r3, r3, r2
 800d5a4:	42ab      	cmp	r3, r5
 800d5a6:	dc26      	bgt.n	800d5f6 <_printf_common+0x96>
 800d5a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5ac:	1e13      	subs	r3, r2, #0
 800d5ae:	6822      	ldr	r2, [r4, #0]
 800d5b0:	bf18      	it	ne
 800d5b2:	2301      	movne	r3, #1
 800d5b4:	0692      	lsls	r2, r2, #26
 800d5b6:	d42b      	bmi.n	800d610 <_printf_common+0xb0>
 800d5b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5bc:	4649      	mov	r1, r9
 800d5be:	4638      	mov	r0, r7
 800d5c0:	47c0      	blx	r8
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d01e      	beq.n	800d604 <_printf_common+0xa4>
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	6922      	ldr	r2, [r4, #16]
 800d5ca:	f003 0306 	and.w	r3, r3, #6
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	bf02      	ittt	eq
 800d5d2:	68e5      	ldreq	r5, [r4, #12]
 800d5d4:	6833      	ldreq	r3, [r6, #0]
 800d5d6:	1aed      	subeq	r5, r5, r3
 800d5d8:	68a3      	ldr	r3, [r4, #8]
 800d5da:	bf0c      	ite	eq
 800d5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5e0:	2500      	movne	r5, #0
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	bfc4      	itt	gt
 800d5e6:	1a9b      	subgt	r3, r3, r2
 800d5e8:	18ed      	addgt	r5, r5, r3
 800d5ea:	2600      	movs	r6, #0
 800d5ec:	341a      	adds	r4, #26
 800d5ee:	42b5      	cmp	r5, r6
 800d5f0:	d11a      	bne.n	800d628 <_printf_common+0xc8>
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	e008      	b.n	800d608 <_printf_common+0xa8>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	4638      	mov	r0, r7
 800d5fe:	47c0      	blx	r8
 800d600:	3001      	adds	r0, #1
 800d602:	d103      	bne.n	800d60c <_printf_common+0xac>
 800d604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60c:	3501      	adds	r5, #1
 800d60e:	e7c6      	b.n	800d59e <_printf_common+0x3e>
 800d610:	18e1      	adds	r1, r4, r3
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	2030      	movs	r0, #48	; 0x30
 800d616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d61a:	4422      	add	r2, r4
 800d61c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d624:	3302      	adds	r3, #2
 800d626:	e7c7      	b.n	800d5b8 <_printf_common+0x58>
 800d628:	2301      	movs	r3, #1
 800d62a:	4622      	mov	r2, r4
 800d62c:	4649      	mov	r1, r9
 800d62e:	4638      	mov	r0, r7
 800d630:	47c0      	blx	r8
 800d632:	3001      	adds	r0, #1
 800d634:	d0e6      	beq.n	800d604 <_printf_common+0xa4>
 800d636:	3601      	adds	r6, #1
 800d638:	e7d9      	b.n	800d5ee <_printf_common+0x8e>
	...

0800d63c <_printf_i>:
 800d63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d640:	7e0f      	ldrb	r7, [r1, #24]
 800d642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d644:	2f78      	cmp	r7, #120	; 0x78
 800d646:	4691      	mov	r9, r2
 800d648:	4680      	mov	r8, r0
 800d64a:	460c      	mov	r4, r1
 800d64c:	469a      	mov	sl, r3
 800d64e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d652:	d807      	bhi.n	800d664 <_printf_i+0x28>
 800d654:	2f62      	cmp	r7, #98	; 0x62
 800d656:	d80a      	bhi.n	800d66e <_printf_i+0x32>
 800d658:	2f00      	cmp	r7, #0
 800d65a:	f000 80d4 	beq.w	800d806 <_printf_i+0x1ca>
 800d65e:	2f58      	cmp	r7, #88	; 0x58
 800d660:	f000 80c0 	beq.w	800d7e4 <_printf_i+0x1a8>
 800d664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d66c:	e03a      	b.n	800d6e4 <_printf_i+0xa8>
 800d66e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d672:	2b15      	cmp	r3, #21
 800d674:	d8f6      	bhi.n	800d664 <_printf_i+0x28>
 800d676:	a101      	add	r1, pc, #4	; (adr r1, 800d67c <_printf_i+0x40>)
 800d678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d67c:	0800d6d5 	.word	0x0800d6d5
 800d680:	0800d6e9 	.word	0x0800d6e9
 800d684:	0800d665 	.word	0x0800d665
 800d688:	0800d665 	.word	0x0800d665
 800d68c:	0800d665 	.word	0x0800d665
 800d690:	0800d665 	.word	0x0800d665
 800d694:	0800d6e9 	.word	0x0800d6e9
 800d698:	0800d665 	.word	0x0800d665
 800d69c:	0800d665 	.word	0x0800d665
 800d6a0:	0800d665 	.word	0x0800d665
 800d6a4:	0800d665 	.word	0x0800d665
 800d6a8:	0800d7ed 	.word	0x0800d7ed
 800d6ac:	0800d715 	.word	0x0800d715
 800d6b0:	0800d7a7 	.word	0x0800d7a7
 800d6b4:	0800d665 	.word	0x0800d665
 800d6b8:	0800d665 	.word	0x0800d665
 800d6bc:	0800d80f 	.word	0x0800d80f
 800d6c0:	0800d665 	.word	0x0800d665
 800d6c4:	0800d715 	.word	0x0800d715
 800d6c8:	0800d665 	.word	0x0800d665
 800d6cc:	0800d665 	.word	0x0800d665
 800d6d0:	0800d7af 	.word	0x0800d7af
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	1d1a      	adds	r2, r3, #4
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	602a      	str	r2, [r5, #0]
 800d6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e09f      	b.n	800d828 <_printf_i+0x1ec>
 800d6e8:	6820      	ldr	r0, [r4, #0]
 800d6ea:	682b      	ldr	r3, [r5, #0]
 800d6ec:	0607      	lsls	r7, r0, #24
 800d6ee:	f103 0104 	add.w	r1, r3, #4
 800d6f2:	6029      	str	r1, [r5, #0]
 800d6f4:	d501      	bpl.n	800d6fa <_printf_i+0xbe>
 800d6f6:	681e      	ldr	r6, [r3, #0]
 800d6f8:	e003      	b.n	800d702 <_printf_i+0xc6>
 800d6fa:	0646      	lsls	r6, r0, #25
 800d6fc:	d5fb      	bpl.n	800d6f6 <_printf_i+0xba>
 800d6fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d702:	2e00      	cmp	r6, #0
 800d704:	da03      	bge.n	800d70e <_printf_i+0xd2>
 800d706:	232d      	movs	r3, #45	; 0x2d
 800d708:	4276      	negs	r6, r6
 800d70a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d70e:	485a      	ldr	r0, [pc, #360]	; (800d878 <_printf_i+0x23c>)
 800d710:	230a      	movs	r3, #10
 800d712:	e012      	b.n	800d73a <_printf_i+0xfe>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	6820      	ldr	r0, [r4, #0]
 800d718:	1d19      	adds	r1, r3, #4
 800d71a:	6029      	str	r1, [r5, #0]
 800d71c:	0605      	lsls	r5, r0, #24
 800d71e:	d501      	bpl.n	800d724 <_printf_i+0xe8>
 800d720:	681e      	ldr	r6, [r3, #0]
 800d722:	e002      	b.n	800d72a <_printf_i+0xee>
 800d724:	0641      	lsls	r1, r0, #25
 800d726:	d5fb      	bpl.n	800d720 <_printf_i+0xe4>
 800d728:	881e      	ldrh	r6, [r3, #0]
 800d72a:	4853      	ldr	r0, [pc, #332]	; (800d878 <_printf_i+0x23c>)
 800d72c:	2f6f      	cmp	r7, #111	; 0x6f
 800d72e:	bf0c      	ite	eq
 800d730:	2308      	moveq	r3, #8
 800d732:	230a      	movne	r3, #10
 800d734:	2100      	movs	r1, #0
 800d736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d73a:	6865      	ldr	r5, [r4, #4]
 800d73c:	60a5      	str	r5, [r4, #8]
 800d73e:	2d00      	cmp	r5, #0
 800d740:	bfa2      	ittt	ge
 800d742:	6821      	ldrge	r1, [r4, #0]
 800d744:	f021 0104 	bicge.w	r1, r1, #4
 800d748:	6021      	strge	r1, [r4, #0]
 800d74a:	b90e      	cbnz	r6, 800d750 <_printf_i+0x114>
 800d74c:	2d00      	cmp	r5, #0
 800d74e:	d04b      	beq.n	800d7e8 <_printf_i+0x1ac>
 800d750:	4615      	mov	r5, r2
 800d752:	fbb6 f1f3 	udiv	r1, r6, r3
 800d756:	fb03 6711 	mls	r7, r3, r1, r6
 800d75a:	5dc7      	ldrb	r7, [r0, r7]
 800d75c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d760:	4637      	mov	r7, r6
 800d762:	42bb      	cmp	r3, r7
 800d764:	460e      	mov	r6, r1
 800d766:	d9f4      	bls.n	800d752 <_printf_i+0x116>
 800d768:	2b08      	cmp	r3, #8
 800d76a:	d10b      	bne.n	800d784 <_printf_i+0x148>
 800d76c:	6823      	ldr	r3, [r4, #0]
 800d76e:	07de      	lsls	r6, r3, #31
 800d770:	d508      	bpl.n	800d784 <_printf_i+0x148>
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	6861      	ldr	r1, [r4, #4]
 800d776:	4299      	cmp	r1, r3
 800d778:	bfde      	ittt	le
 800d77a:	2330      	movle	r3, #48	; 0x30
 800d77c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d780:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d784:	1b52      	subs	r2, r2, r5
 800d786:	6122      	str	r2, [r4, #16]
 800d788:	f8cd a000 	str.w	sl, [sp]
 800d78c:	464b      	mov	r3, r9
 800d78e:	aa03      	add	r2, sp, #12
 800d790:	4621      	mov	r1, r4
 800d792:	4640      	mov	r0, r8
 800d794:	f7ff fee4 	bl	800d560 <_printf_common>
 800d798:	3001      	adds	r0, #1
 800d79a:	d14a      	bne.n	800d832 <_printf_i+0x1f6>
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7a0:	b004      	add	sp, #16
 800d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	f043 0320 	orr.w	r3, r3, #32
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	4833      	ldr	r0, [pc, #204]	; (800d87c <_printf_i+0x240>)
 800d7b0:	2778      	movs	r7, #120	; 0x78
 800d7b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	6829      	ldr	r1, [r5, #0]
 800d7ba:	061f      	lsls	r7, r3, #24
 800d7bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7c0:	d402      	bmi.n	800d7c8 <_printf_i+0x18c>
 800d7c2:	065f      	lsls	r7, r3, #25
 800d7c4:	bf48      	it	mi
 800d7c6:	b2b6      	uxthmi	r6, r6
 800d7c8:	07df      	lsls	r7, r3, #31
 800d7ca:	bf48      	it	mi
 800d7cc:	f043 0320 	orrmi.w	r3, r3, #32
 800d7d0:	6029      	str	r1, [r5, #0]
 800d7d2:	bf48      	it	mi
 800d7d4:	6023      	strmi	r3, [r4, #0]
 800d7d6:	b91e      	cbnz	r6, 800d7e0 <_printf_i+0x1a4>
 800d7d8:	6823      	ldr	r3, [r4, #0]
 800d7da:	f023 0320 	bic.w	r3, r3, #32
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	e7a7      	b.n	800d734 <_printf_i+0xf8>
 800d7e4:	4824      	ldr	r0, [pc, #144]	; (800d878 <_printf_i+0x23c>)
 800d7e6:	e7e4      	b.n	800d7b2 <_printf_i+0x176>
 800d7e8:	4615      	mov	r5, r2
 800d7ea:	e7bd      	b.n	800d768 <_printf_i+0x12c>
 800d7ec:	682b      	ldr	r3, [r5, #0]
 800d7ee:	6826      	ldr	r6, [r4, #0]
 800d7f0:	6961      	ldr	r1, [r4, #20]
 800d7f2:	1d18      	adds	r0, r3, #4
 800d7f4:	6028      	str	r0, [r5, #0]
 800d7f6:	0635      	lsls	r5, r6, #24
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	d501      	bpl.n	800d800 <_printf_i+0x1c4>
 800d7fc:	6019      	str	r1, [r3, #0]
 800d7fe:	e002      	b.n	800d806 <_printf_i+0x1ca>
 800d800:	0670      	lsls	r0, r6, #25
 800d802:	d5fb      	bpl.n	800d7fc <_printf_i+0x1c0>
 800d804:	8019      	strh	r1, [r3, #0]
 800d806:	2300      	movs	r3, #0
 800d808:	6123      	str	r3, [r4, #16]
 800d80a:	4615      	mov	r5, r2
 800d80c:	e7bc      	b.n	800d788 <_printf_i+0x14c>
 800d80e:	682b      	ldr	r3, [r5, #0]
 800d810:	1d1a      	adds	r2, r3, #4
 800d812:	602a      	str	r2, [r5, #0]
 800d814:	681d      	ldr	r5, [r3, #0]
 800d816:	6862      	ldr	r2, [r4, #4]
 800d818:	2100      	movs	r1, #0
 800d81a:	4628      	mov	r0, r5
 800d81c:	f7f2 fce0 	bl	80001e0 <memchr>
 800d820:	b108      	cbz	r0, 800d826 <_printf_i+0x1ea>
 800d822:	1b40      	subs	r0, r0, r5
 800d824:	6060      	str	r0, [r4, #4]
 800d826:	6863      	ldr	r3, [r4, #4]
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	2300      	movs	r3, #0
 800d82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d830:	e7aa      	b.n	800d788 <_printf_i+0x14c>
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	462a      	mov	r2, r5
 800d836:	4649      	mov	r1, r9
 800d838:	4640      	mov	r0, r8
 800d83a:	47d0      	blx	sl
 800d83c:	3001      	adds	r0, #1
 800d83e:	d0ad      	beq.n	800d79c <_printf_i+0x160>
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	079b      	lsls	r3, r3, #30
 800d844:	d413      	bmi.n	800d86e <_printf_i+0x232>
 800d846:	68e0      	ldr	r0, [r4, #12]
 800d848:	9b03      	ldr	r3, [sp, #12]
 800d84a:	4298      	cmp	r0, r3
 800d84c:	bfb8      	it	lt
 800d84e:	4618      	movlt	r0, r3
 800d850:	e7a6      	b.n	800d7a0 <_printf_i+0x164>
 800d852:	2301      	movs	r3, #1
 800d854:	4632      	mov	r2, r6
 800d856:	4649      	mov	r1, r9
 800d858:	4640      	mov	r0, r8
 800d85a:	47d0      	blx	sl
 800d85c:	3001      	adds	r0, #1
 800d85e:	d09d      	beq.n	800d79c <_printf_i+0x160>
 800d860:	3501      	adds	r5, #1
 800d862:	68e3      	ldr	r3, [r4, #12]
 800d864:	9903      	ldr	r1, [sp, #12]
 800d866:	1a5b      	subs	r3, r3, r1
 800d868:	42ab      	cmp	r3, r5
 800d86a:	dcf2      	bgt.n	800d852 <_printf_i+0x216>
 800d86c:	e7eb      	b.n	800d846 <_printf_i+0x20a>
 800d86e:	2500      	movs	r5, #0
 800d870:	f104 0619 	add.w	r6, r4, #25
 800d874:	e7f5      	b.n	800d862 <_printf_i+0x226>
 800d876:	bf00      	nop
 800d878:	080122a7 	.word	0x080122a7
 800d87c:	080122b8 	.word	0x080122b8

0800d880 <_scanf_float>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	b087      	sub	sp, #28
 800d886:	4617      	mov	r7, r2
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	688b      	ldr	r3, [r1, #8]
 800d88c:	1e5a      	subs	r2, r3, #1
 800d88e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d892:	bf83      	ittte	hi
 800d894:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d898:	195b      	addhi	r3, r3, r5
 800d89a:	9302      	strhi	r3, [sp, #8]
 800d89c:	2300      	movls	r3, #0
 800d89e:	bf86      	itte	hi
 800d8a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d8a4:	608b      	strhi	r3, [r1, #8]
 800d8a6:	9302      	strls	r3, [sp, #8]
 800d8a8:	680b      	ldr	r3, [r1, #0]
 800d8aa:	468b      	mov	fp, r1
 800d8ac:	2500      	movs	r5, #0
 800d8ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d8b2:	f84b 3b1c 	str.w	r3, [fp], #28
 800d8b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d8ba:	4680      	mov	r8, r0
 800d8bc:	460c      	mov	r4, r1
 800d8be:	465e      	mov	r6, fp
 800d8c0:	46aa      	mov	sl, r5
 800d8c2:	46a9      	mov	r9, r5
 800d8c4:	9501      	str	r5, [sp, #4]
 800d8c6:	68a2      	ldr	r2, [r4, #8]
 800d8c8:	b152      	cbz	r2, 800d8e0 <_scanf_float+0x60>
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b4e      	cmp	r3, #78	; 0x4e
 800d8d0:	d864      	bhi.n	800d99c <_scanf_float+0x11c>
 800d8d2:	2b40      	cmp	r3, #64	; 0x40
 800d8d4:	d83c      	bhi.n	800d950 <_scanf_float+0xd0>
 800d8d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d8da:	b2c8      	uxtb	r0, r1
 800d8dc:	280e      	cmp	r0, #14
 800d8de:	d93a      	bls.n	800d956 <_scanf_float+0xd6>
 800d8e0:	f1b9 0f00 	cmp.w	r9, #0
 800d8e4:	d003      	beq.n	800d8ee <_scanf_float+0x6e>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d8f2:	f1ba 0f01 	cmp.w	sl, #1
 800d8f6:	f200 8113 	bhi.w	800db20 <_scanf_float+0x2a0>
 800d8fa:	455e      	cmp	r6, fp
 800d8fc:	f200 8105 	bhi.w	800db0a <_scanf_float+0x28a>
 800d900:	2501      	movs	r5, #1
 800d902:	4628      	mov	r0, r5
 800d904:	b007      	add	sp, #28
 800d906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d90a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d90e:	2a0d      	cmp	r2, #13
 800d910:	d8e6      	bhi.n	800d8e0 <_scanf_float+0x60>
 800d912:	a101      	add	r1, pc, #4	; (adr r1, 800d918 <_scanf_float+0x98>)
 800d914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d918:	0800da57 	.word	0x0800da57
 800d91c:	0800d8e1 	.word	0x0800d8e1
 800d920:	0800d8e1 	.word	0x0800d8e1
 800d924:	0800d8e1 	.word	0x0800d8e1
 800d928:	0800dab7 	.word	0x0800dab7
 800d92c:	0800da8f 	.word	0x0800da8f
 800d930:	0800d8e1 	.word	0x0800d8e1
 800d934:	0800d8e1 	.word	0x0800d8e1
 800d938:	0800da65 	.word	0x0800da65
 800d93c:	0800d8e1 	.word	0x0800d8e1
 800d940:	0800d8e1 	.word	0x0800d8e1
 800d944:	0800d8e1 	.word	0x0800d8e1
 800d948:	0800d8e1 	.word	0x0800d8e1
 800d94c:	0800da1d 	.word	0x0800da1d
 800d950:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d954:	e7db      	b.n	800d90e <_scanf_float+0x8e>
 800d956:	290e      	cmp	r1, #14
 800d958:	d8c2      	bhi.n	800d8e0 <_scanf_float+0x60>
 800d95a:	a001      	add	r0, pc, #4	; (adr r0, 800d960 <_scanf_float+0xe0>)
 800d95c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d960:	0800da0f 	.word	0x0800da0f
 800d964:	0800d8e1 	.word	0x0800d8e1
 800d968:	0800da0f 	.word	0x0800da0f
 800d96c:	0800daa3 	.word	0x0800daa3
 800d970:	0800d8e1 	.word	0x0800d8e1
 800d974:	0800d9bd 	.word	0x0800d9bd
 800d978:	0800d9f9 	.word	0x0800d9f9
 800d97c:	0800d9f9 	.word	0x0800d9f9
 800d980:	0800d9f9 	.word	0x0800d9f9
 800d984:	0800d9f9 	.word	0x0800d9f9
 800d988:	0800d9f9 	.word	0x0800d9f9
 800d98c:	0800d9f9 	.word	0x0800d9f9
 800d990:	0800d9f9 	.word	0x0800d9f9
 800d994:	0800d9f9 	.word	0x0800d9f9
 800d998:	0800d9f9 	.word	0x0800d9f9
 800d99c:	2b6e      	cmp	r3, #110	; 0x6e
 800d99e:	d809      	bhi.n	800d9b4 <_scanf_float+0x134>
 800d9a0:	2b60      	cmp	r3, #96	; 0x60
 800d9a2:	d8b2      	bhi.n	800d90a <_scanf_float+0x8a>
 800d9a4:	2b54      	cmp	r3, #84	; 0x54
 800d9a6:	d077      	beq.n	800da98 <_scanf_float+0x218>
 800d9a8:	2b59      	cmp	r3, #89	; 0x59
 800d9aa:	d199      	bne.n	800d8e0 <_scanf_float+0x60>
 800d9ac:	2d07      	cmp	r5, #7
 800d9ae:	d197      	bne.n	800d8e0 <_scanf_float+0x60>
 800d9b0:	2508      	movs	r5, #8
 800d9b2:	e029      	b.n	800da08 <_scanf_float+0x188>
 800d9b4:	2b74      	cmp	r3, #116	; 0x74
 800d9b6:	d06f      	beq.n	800da98 <_scanf_float+0x218>
 800d9b8:	2b79      	cmp	r3, #121	; 0x79
 800d9ba:	e7f6      	b.n	800d9aa <_scanf_float+0x12a>
 800d9bc:	6821      	ldr	r1, [r4, #0]
 800d9be:	05c8      	lsls	r0, r1, #23
 800d9c0:	d51a      	bpl.n	800d9f8 <_scanf_float+0x178>
 800d9c2:	9b02      	ldr	r3, [sp, #8]
 800d9c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d9c8:	6021      	str	r1, [r4, #0]
 800d9ca:	f109 0901 	add.w	r9, r9, #1
 800d9ce:	b11b      	cbz	r3, 800d9d8 <_scanf_float+0x158>
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	3201      	adds	r2, #1
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	60a2      	str	r2, [r4, #8]
 800d9d8:	68a3      	ldr	r3, [r4, #8]
 800d9da:	3b01      	subs	r3, #1
 800d9dc:	60a3      	str	r3, [r4, #8]
 800d9de:	6923      	ldr	r3, [r4, #16]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	6123      	str	r3, [r4, #16]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	607b      	str	r3, [r7, #4]
 800d9ec:	f340 8084 	ble.w	800daf8 <_scanf_float+0x278>
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	603b      	str	r3, [r7, #0]
 800d9f6:	e766      	b.n	800d8c6 <_scanf_float+0x46>
 800d9f8:	eb1a 0f05 	cmn.w	sl, r5
 800d9fc:	f47f af70 	bne.w	800d8e0 <_scanf_float+0x60>
 800da00:	6822      	ldr	r2, [r4, #0]
 800da02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800da06:	6022      	str	r2, [r4, #0]
 800da08:	f806 3b01 	strb.w	r3, [r6], #1
 800da0c:	e7e4      	b.n	800d9d8 <_scanf_float+0x158>
 800da0e:	6822      	ldr	r2, [r4, #0]
 800da10:	0610      	lsls	r0, r2, #24
 800da12:	f57f af65 	bpl.w	800d8e0 <_scanf_float+0x60>
 800da16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da1a:	e7f4      	b.n	800da06 <_scanf_float+0x186>
 800da1c:	f1ba 0f00 	cmp.w	sl, #0
 800da20:	d10e      	bne.n	800da40 <_scanf_float+0x1c0>
 800da22:	f1b9 0f00 	cmp.w	r9, #0
 800da26:	d10e      	bne.n	800da46 <_scanf_float+0x1c6>
 800da28:	6822      	ldr	r2, [r4, #0]
 800da2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da32:	d108      	bne.n	800da46 <_scanf_float+0x1c6>
 800da34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da38:	6022      	str	r2, [r4, #0]
 800da3a:	f04f 0a01 	mov.w	sl, #1
 800da3e:	e7e3      	b.n	800da08 <_scanf_float+0x188>
 800da40:	f1ba 0f02 	cmp.w	sl, #2
 800da44:	d055      	beq.n	800daf2 <_scanf_float+0x272>
 800da46:	2d01      	cmp	r5, #1
 800da48:	d002      	beq.n	800da50 <_scanf_float+0x1d0>
 800da4a:	2d04      	cmp	r5, #4
 800da4c:	f47f af48 	bne.w	800d8e0 <_scanf_float+0x60>
 800da50:	3501      	adds	r5, #1
 800da52:	b2ed      	uxtb	r5, r5
 800da54:	e7d8      	b.n	800da08 <_scanf_float+0x188>
 800da56:	f1ba 0f01 	cmp.w	sl, #1
 800da5a:	f47f af41 	bne.w	800d8e0 <_scanf_float+0x60>
 800da5e:	f04f 0a02 	mov.w	sl, #2
 800da62:	e7d1      	b.n	800da08 <_scanf_float+0x188>
 800da64:	b97d      	cbnz	r5, 800da86 <_scanf_float+0x206>
 800da66:	f1b9 0f00 	cmp.w	r9, #0
 800da6a:	f47f af3c 	bne.w	800d8e6 <_scanf_float+0x66>
 800da6e:	6822      	ldr	r2, [r4, #0]
 800da70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800da74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800da78:	f47f af39 	bne.w	800d8ee <_scanf_float+0x6e>
 800da7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800da80:	6022      	str	r2, [r4, #0]
 800da82:	2501      	movs	r5, #1
 800da84:	e7c0      	b.n	800da08 <_scanf_float+0x188>
 800da86:	2d03      	cmp	r5, #3
 800da88:	d0e2      	beq.n	800da50 <_scanf_float+0x1d0>
 800da8a:	2d05      	cmp	r5, #5
 800da8c:	e7de      	b.n	800da4c <_scanf_float+0x1cc>
 800da8e:	2d02      	cmp	r5, #2
 800da90:	f47f af26 	bne.w	800d8e0 <_scanf_float+0x60>
 800da94:	2503      	movs	r5, #3
 800da96:	e7b7      	b.n	800da08 <_scanf_float+0x188>
 800da98:	2d06      	cmp	r5, #6
 800da9a:	f47f af21 	bne.w	800d8e0 <_scanf_float+0x60>
 800da9e:	2507      	movs	r5, #7
 800daa0:	e7b2      	b.n	800da08 <_scanf_float+0x188>
 800daa2:	6822      	ldr	r2, [r4, #0]
 800daa4:	0591      	lsls	r1, r2, #22
 800daa6:	f57f af1b 	bpl.w	800d8e0 <_scanf_float+0x60>
 800daaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800daae:	6022      	str	r2, [r4, #0]
 800dab0:	f8cd 9004 	str.w	r9, [sp, #4]
 800dab4:	e7a8      	b.n	800da08 <_scanf_float+0x188>
 800dab6:	6822      	ldr	r2, [r4, #0]
 800dab8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dabc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dac0:	d006      	beq.n	800dad0 <_scanf_float+0x250>
 800dac2:	0550      	lsls	r0, r2, #21
 800dac4:	f57f af0c 	bpl.w	800d8e0 <_scanf_float+0x60>
 800dac8:	f1b9 0f00 	cmp.w	r9, #0
 800dacc:	f43f af0f 	beq.w	800d8ee <_scanf_float+0x6e>
 800dad0:	0591      	lsls	r1, r2, #22
 800dad2:	bf58      	it	pl
 800dad4:	9901      	ldrpl	r1, [sp, #4]
 800dad6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dada:	bf58      	it	pl
 800dadc:	eba9 0101 	subpl.w	r1, r9, r1
 800dae0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dae4:	bf58      	it	pl
 800dae6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800daea:	6022      	str	r2, [r4, #0]
 800daec:	f04f 0900 	mov.w	r9, #0
 800daf0:	e78a      	b.n	800da08 <_scanf_float+0x188>
 800daf2:	f04f 0a03 	mov.w	sl, #3
 800daf6:	e787      	b.n	800da08 <_scanf_float+0x188>
 800daf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dafc:	4639      	mov	r1, r7
 800dafe:	4640      	mov	r0, r8
 800db00:	4798      	blx	r3
 800db02:	2800      	cmp	r0, #0
 800db04:	f43f aedf 	beq.w	800d8c6 <_scanf_float+0x46>
 800db08:	e6ea      	b.n	800d8e0 <_scanf_float+0x60>
 800db0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db12:	463a      	mov	r2, r7
 800db14:	4640      	mov	r0, r8
 800db16:	4798      	blx	r3
 800db18:	6923      	ldr	r3, [r4, #16]
 800db1a:	3b01      	subs	r3, #1
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	e6ec      	b.n	800d8fa <_scanf_float+0x7a>
 800db20:	1e6b      	subs	r3, r5, #1
 800db22:	2b06      	cmp	r3, #6
 800db24:	d825      	bhi.n	800db72 <_scanf_float+0x2f2>
 800db26:	2d02      	cmp	r5, #2
 800db28:	d836      	bhi.n	800db98 <_scanf_float+0x318>
 800db2a:	455e      	cmp	r6, fp
 800db2c:	f67f aee8 	bls.w	800d900 <_scanf_float+0x80>
 800db30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db38:	463a      	mov	r2, r7
 800db3a:	4640      	mov	r0, r8
 800db3c:	4798      	blx	r3
 800db3e:	6923      	ldr	r3, [r4, #16]
 800db40:	3b01      	subs	r3, #1
 800db42:	6123      	str	r3, [r4, #16]
 800db44:	e7f1      	b.n	800db2a <_scanf_float+0x2aa>
 800db46:	9802      	ldr	r0, [sp, #8]
 800db48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800db50:	9002      	str	r0, [sp, #8]
 800db52:	463a      	mov	r2, r7
 800db54:	4640      	mov	r0, r8
 800db56:	4798      	blx	r3
 800db58:	6923      	ldr	r3, [r4, #16]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	6123      	str	r3, [r4, #16]
 800db5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800db62:	fa5f fa8a 	uxtb.w	sl, sl
 800db66:	f1ba 0f02 	cmp.w	sl, #2
 800db6a:	d1ec      	bne.n	800db46 <_scanf_float+0x2c6>
 800db6c:	3d03      	subs	r5, #3
 800db6e:	b2ed      	uxtb	r5, r5
 800db70:	1b76      	subs	r6, r6, r5
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	05da      	lsls	r2, r3, #23
 800db76:	d52f      	bpl.n	800dbd8 <_scanf_float+0x358>
 800db78:	055b      	lsls	r3, r3, #21
 800db7a:	d510      	bpl.n	800db9e <_scanf_float+0x31e>
 800db7c:	455e      	cmp	r6, fp
 800db7e:	f67f aebf 	bls.w	800d900 <_scanf_float+0x80>
 800db82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800db86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800db8a:	463a      	mov	r2, r7
 800db8c:	4640      	mov	r0, r8
 800db8e:	4798      	blx	r3
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	3b01      	subs	r3, #1
 800db94:	6123      	str	r3, [r4, #16]
 800db96:	e7f1      	b.n	800db7c <_scanf_float+0x2fc>
 800db98:	46aa      	mov	sl, r5
 800db9a:	9602      	str	r6, [sp, #8]
 800db9c:	e7df      	b.n	800db5e <_scanf_float+0x2de>
 800db9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dba2:	6923      	ldr	r3, [r4, #16]
 800dba4:	2965      	cmp	r1, #101	; 0x65
 800dba6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dbaa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800dbae:	6123      	str	r3, [r4, #16]
 800dbb0:	d00c      	beq.n	800dbcc <_scanf_float+0x34c>
 800dbb2:	2945      	cmp	r1, #69	; 0x45
 800dbb4:	d00a      	beq.n	800dbcc <_scanf_float+0x34c>
 800dbb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbba:	463a      	mov	r2, r7
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	4798      	blx	r3
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	1eb5      	subs	r5, r6, #2
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dbd0:	463a      	mov	r2, r7
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4798      	blx	r3
 800dbd6:	462e      	mov	r6, r5
 800dbd8:	6825      	ldr	r5, [r4, #0]
 800dbda:	f015 0510 	ands.w	r5, r5, #16
 800dbde:	d158      	bne.n	800dc92 <_scanf_float+0x412>
 800dbe0:	7035      	strb	r5, [r6, #0]
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dbe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbec:	d11c      	bne.n	800dc28 <_scanf_float+0x3a8>
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	454b      	cmp	r3, r9
 800dbf2:	eba3 0209 	sub.w	r2, r3, r9
 800dbf6:	d124      	bne.n	800dc42 <_scanf_float+0x3c2>
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	4659      	mov	r1, fp
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	f002 fcb7 	bl	8010570 <_strtod_r>
 800dc02:	9b03      	ldr	r3, [sp, #12]
 800dc04:	6821      	ldr	r1, [r4, #0]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f011 0f02 	tst.w	r1, #2
 800dc0c:	ec57 6b10 	vmov	r6, r7, d0
 800dc10:	f103 0204 	add.w	r2, r3, #4
 800dc14:	d020      	beq.n	800dc58 <_scanf_float+0x3d8>
 800dc16:	9903      	ldr	r1, [sp, #12]
 800dc18:	600a      	str	r2, [r1, #0]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	e9c3 6700 	strd	r6, r7, [r3]
 800dc20:	68e3      	ldr	r3, [r4, #12]
 800dc22:	3301      	adds	r3, #1
 800dc24:	60e3      	str	r3, [r4, #12]
 800dc26:	e66c      	b.n	800d902 <_scanf_float+0x82>
 800dc28:	9b04      	ldr	r3, [sp, #16]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0e4      	beq.n	800dbf8 <_scanf_float+0x378>
 800dc2e:	9905      	ldr	r1, [sp, #20]
 800dc30:	230a      	movs	r3, #10
 800dc32:	462a      	mov	r2, r5
 800dc34:	3101      	adds	r1, #1
 800dc36:	4640      	mov	r0, r8
 800dc38:	f7ff f9b0 	bl	800cf9c <_strtol_r>
 800dc3c:	9b04      	ldr	r3, [sp, #16]
 800dc3e:	9e05      	ldr	r6, [sp, #20]
 800dc40:	1ac2      	subs	r2, r0, r3
 800dc42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800dc46:	429e      	cmp	r6, r3
 800dc48:	bf28      	it	cs
 800dc4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800dc4e:	4912      	ldr	r1, [pc, #72]	; (800dc98 <_scanf_float+0x418>)
 800dc50:	4630      	mov	r0, r6
 800dc52:	f000 f95d 	bl	800df10 <siprintf>
 800dc56:	e7cf      	b.n	800dbf8 <_scanf_float+0x378>
 800dc58:	f011 0f04 	tst.w	r1, #4
 800dc5c:	9903      	ldr	r1, [sp, #12]
 800dc5e:	600a      	str	r2, [r1, #0]
 800dc60:	d1db      	bne.n	800dc1a <_scanf_float+0x39a>
 800dc62:	f8d3 8000 	ldr.w	r8, [r3]
 800dc66:	ee10 2a10 	vmov	r2, s0
 800dc6a:	ee10 0a10 	vmov	r0, s0
 800dc6e:	463b      	mov	r3, r7
 800dc70:	4639      	mov	r1, r7
 800dc72:	f7f2 ff63 	bl	8000b3c <__aeabi_dcmpun>
 800dc76:	b128      	cbz	r0, 800dc84 <_scanf_float+0x404>
 800dc78:	4808      	ldr	r0, [pc, #32]	; (800dc9c <_scanf_float+0x41c>)
 800dc7a:	f000 faf1 	bl	800e260 <nanf>
 800dc7e:	ed88 0a00 	vstr	s0, [r8]
 800dc82:	e7cd      	b.n	800dc20 <_scanf_float+0x3a0>
 800dc84:	4630      	mov	r0, r6
 800dc86:	4639      	mov	r1, r7
 800dc88:	f7f2 ffb6 	bl	8000bf8 <__aeabi_d2f>
 800dc8c:	f8c8 0000 	str.w	r0, [r8]
 800dc90:	e7c6      	b.n	800dc20 <_scanf_float+0x3a0>
 800dc92:	2500      	movs	r5, #0
 800dc94:	e635      	b.n	800d902 <_scanf_float+0x82>
 800dc96:	bf00      	nop
 800dc98:	080122c9 	.word	0x080122c9
 800dc9c:	0801255c 	.word	0x0801255c

0800dca0 <std>:
 800dca0:	2300      	movs	r3, #0
 800dca2:	b510      	push	{r4, lr}
 800dca4:	4604      	mov	r4, r0
 800dca6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcae:	6083      	str	r3, [r0, #8]
 800dcb0:	8181      	strh	r1, [r0, #12]
 800dcb2:	6643      	str	r3, [r0, #100]	; 0x64
 800dcb4:	81c2      	strh	r2, [r0, #14]
 800dcb6:	6183      	str	r3, [r0, #24]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	2208      	movs	r2, #8
 800dcbc:	305c      	adds	r0, #92	; 0x5c
 800dcbe:	f000 fa1f 	bl	800e100 <memset>
 800dcc2:	4b0d      	ldr	r3, [pc, #52]	; (800dcf8 <std+0x58>)
 800dcc4:	6263      	str	r3, [r4, #36]	; 0x24
 800dcc6:	4b0d      	ldr	r3, [pc, #52]	; (800dcfc <std+0x5c>)
 800dcc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcca:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <std+0x60>)
 800dccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcce:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <std+0x64>)
 800dcd0:	6323      	str	r3, [r4, #48]	; 0x30
 800dcd2:	4b0d      	ldr	r3, [pc, #52]	; (800dd08 <std+0x68>)
 800dcd4:	6224      	str	r4, [r4, #32]
 800dcd6:	429c      	cmp	r4, r3
 800dcd8:	d006      	beq.n	800dce8 <std+0x48>
 800dcda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dcde:	4294      	cmp	r4, r2
 800dce0:	d002      	beq.n	800dce8 <std+0x48>
 800dce2:	33d0      	adds	r3, #208	; 0xd0
 800dce4:	429c      	cmp	r4, r3
 800dce6:	d105      	bne.n	800dcf4 <std+0x54>
 800dce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf0:	f000 baa4 	b.w	800e23c <__retarget_lock_init_recursive>
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	bf00      	nop
 800dcf8:	0800df51 	.word	0x0800df51
 800dcfc:	0800df73 	.word	0x0800df73
 800dd00:	0800dfab 	.word	0x0800dfab
 800dd04:	0800dfcf 	.word	0x0800dfcf
 800dd08:	20002cec 	.word	0x20002cec

0800dd0c <stdio_exit_handler>:
 800dd0c:	4a02      	ldr	r2, [pc, #8]	; (800dd18 <stdio_exit_handler+0xc>)
 800dd0e:	4903      	ldr	r1, [pc, #12]	; (800dd1c <stdio_exit_handler+0x10>)
 800dd10:	4803      	ldr	r0, [pc, #12]	; (800dd20 <stdio_exit_handler+0x14>)
 800dd12:	f000 b869 	b.w	800dde8 <_fwalk_sglue>
 800dd16:	bf00      	nop
 800dd18:	20000064 	.word	0x20000064
 800dd1c:	08010bc1 	.word	0x08010bc1
 800dd20:	20000070 	.word	0x20000070

0800dd24 <cleanup_stdio>:
 800dd24:	6841      	ldr	r1, [r0, #4]
 800dd26:	4b0c      	ldr	r3, [pc, #48]	; (800dd58 <cleanup_stdio+0x34>)
 800dd28:	4299      	cmp	r1, r3
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	d001      	beq.n	800dd34 <cleanup_stdio+0x10>
 800dd30:	f002 ff46 	bl	8010bc0 <_fflush_r>
 800dd34:	68a1      	ldr	r1, [r4, #8]
 800dd36:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <cleanup_stdio+0x38>)
 800dd38:	4299      	cmp	r1, r3
 800dd3a:	d002      	beq.n	800dd42 <cleanup_stdio+0x1e>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f002 ff3f 	bl	8010bc0 <_fflush_r>
 800dd42:	68e1      	ldr	r1, [r4, #12]
 800dd44:	4b06      	ldr	r3, [pc, #24]	; (800dd60 <cleanup_stdio+0x3c>)
 800dd46:	4299      	cmp	r1, r3
 800dd48:	d004      	beq.n	800dd54 <cleanup_stdio+0x30>
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd50:	f002 bf36 	b.w	8010bc0 <_fflush_r>
 800dd54:	bd10      	pop	{r4, pc}
 800dd56:	bf00      	nop
 800dd58:	20002cec 	.word	0x20002cec
 800dd5c:	20002d54 	.word	0x20002d54
 800dd60:	20002dbc 	.word	0x20002dbc

0800dd64 <global_stdio_init.part.0>:
 800dd64:	b510      	push	{r4, lr}
 800dd66:	4b0b      	ldr	r3, [pc, #44]	; (800dd94 <global_stdio_init.part.0+0x30>)
 800dd68:	4c0b      	ldr	r4, [pc, #44]	; (800dd98 <global_stdio_init.part.0+0x34>)
 800dd6a:	4a0c      	ldr	r2, [pc, #48]	; (800dd9c <global_stdio_init.part.0+0x38>)
 800dd6c:	601a      	str	r2, [r3, #0]
 800dd6e:	4620      	mov	r0, r4
 800dd70:	2200      	movs	r2, #0
 800dd72:	2104      	movs	r1, #4
 800dd74:	f7ff ff94 	bl	800dca0 <std>
 800dd78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	2109      	movs	r1, #9
 800dd80:	f7ff ff8e 	bl	800dca0 <std>
 800dd84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dd88:	2202      	movs	r2, #2
 800dd8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd8e:	2112      	movs	r1, #18
 800dd90:	f7ff bf86 	b.w	800dca0 <std>
 800dd94:	20002e24 	.word	0x20002e24
 800dd98:	20002cec 	.word	0x20002cec
 800dd9c:	0800dd0d 	.word	0x0800dd0d

0800dda0 <__sfp_lock_acquire>:
 800dda0:	4801      	ldr	r0, [pc, #4]	; (800dda8 <__sfp_lock_acquire+0x8>)
 800dda2:	f000 ba4c 	b.w	800e23e <__retarget_lock_acquire_recursive>
 800dda6:	bf00      	nop
 800dda8:	20002e2d 	.word	0x20002e2d

0800ddac <__sfp_lock_release>:
 800ddac:	4801      	ldr	r0, [pc, #4]	; (800ddb4 <__sfp_lock_release+0x8>)
 800ddae:	f000 ba47 	b.w	800e240 <__retarget_lock_release_recursive>
 800ddb2:	bf00      	nop
 800ddb4:	20002e2d 	.word	0x20002e2d

0800ddb8 <__sinit>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	f7ff fff0 	bl	800dda0 <__sfp_lock_acquire>
 800ddc0:	6a23      	ldr	r3, [r4, #32]
 800ddc2:	b11b      	cbz	r3, 800ddcc <__sinit+0x14>
 800ddc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddc8:	f7ff bff0 	b.w	800ddac <__sfp_lock_release>
 800ddcc:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <__sinit+0x28>)
 800ddce:	6223      	str	r3, [r4, #32]
 800ddd0:	4b04      	ldr	r3, [pc, #16]	; (800dde4 <__sinit+0x2c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f5      	bne.n	800ddc4 <__sinit+0xc>
 800ddd8:	f7ff ffc4 	bl	800dd64 <global_stdio_init.part.0>
 800dddc:	e7f2      	b.n	800ddc4 <__sinit+0xc>
 800ddde:	bf00      	nop
 800dde0:	0800dd25 	.word	0x0800dd25
 800dde4:	20002e24 	.word	0x20002e24

0800dde8 <_fwalk_sglue>:
 800dde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddec:	4607      	mov	r7, r0
 800ddee:	4688      	mov	r8, r1
 800ddf0:	4614      	mov	r4, r2
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddf8:	f1b9 0901 	subs.w	r9, r9, #1
 800ddfc:	d505      	bpl.n	800de0a <_fwalk_sglue+0x22>
 800ddfe:	6824      	ldr	r4, [r4, #0]
 800de00:	2c00      	cmp	r4, #0
 800de02:	d1f7      	bne.n	800ddf4 <_fwalk_sglue+0xc>
 800de04:	4630      	mov	r0, r6
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d907      	bls.n	800de20 <_fwalk_sglue+0x38>
 800de10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de14:	3301      	adds	r3, #1
 800de16:	d003      	beq.n	800de20 <_fwalk_sglue+0x38>
 800de18:	4629      	mov	r1, r5
 800de1a:	4638      	mov	r0, r7
 800de1c:	47c0      	blx	r8
 800de1e:	4306      	orrs	r6, r0
 800de20:	3568      	adds	r5, #104	; 0x68
 800de22:	e7e9      	b.n	800ddf8 <_fwalk_sglue+0x10>

0800de24 <iprintf>:
 800de24:	b40f      	push	{r0, r1, r2, r3}
 800de26:	b507      	push	{r0, r1, r2, lr}
 800de28:	4906      	ldr	r1, [pc, #24]	; (800de44 <iprintf+0x20>)
 800de2a:	ab04      	add	r3, sp, #16
 800de2c:	6808      	ldr	r0, [r1, #0]
 800de2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de32:	6881      	ldr	r1, [r0, #8]
 800de34:	9301      	str	r3, [sp, #4]
 800de36:	f002 fd23 	bl	8010880 <_vfiprintf_r>
 800de3a:	b003      	add	sp, #12
 800de3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de40:	b004      	add	sp, #16
 800de42:	4770      	bx	lr
 800de44:	200000bc 	.word	0x200000bc

0800de48 <putchar>:
 800de48:	4b02      	ldr	r3, [pc, #8]	; (800de54 <putchar+0xc>)
 800de4a:	4601      	mov	r1, r0
 800de4c:	6818      	ldr	r0, [r3, #0]
 800de4e:	6882      	ldr	r2, [r0, #8]
 800de50:	f002 bf40 	b.w	8010cd4 <_putc_r>
 800de54:	200000bc 	.word	0x200000bc

0800de58 <_puts_r>:
 800de58:	6a03      	ldr	r3, [r0, #32]
 800de5a:	b570      	push	{r4, r5, r6, lr}
 800de5c:	6884      	ldr	r4, [r0, #8]
 800de5e:	4605      	mov	r5, r0
 800de60:	460e      	mov	r6, r1
 800de62:	b90b      	cbnz	r3, 800de68 <_puts_r+0x10>
 800de64:	f7ff ffa8 	bl	800ddb8 <__sinit>
 800de68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de6a:	07db      	lsls	r3, r3, #31
 800de6c:	d405      	bmi.n	800de7a <_puts_r+0x22>
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	0598      	lsls	r0, r3, #22
 800de72:	d402      	bmi.n	800de7a <_puts_r+0x22>
 800de74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de76:	f000 f9e2 	bl	800e23e <__retarget_lock_acquire_recursive>
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	0719      	lsls	r1, r3, #28
 800de7e:	d513      	bpl.n	800dea8 <_puts_r+0x50>
 800de80:	6923      	ldr	r3, [r4, #16]
 800de82:	b18b      	cbz	r3, 800dea8 <_puts_r+0x50>
 800de84:	3e01      	subs	r6, #1
 800de86:	68a3      	ldr	r3, [r4, #8]
 800de88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de8c:	3b01      	subs	r3, #1
 800de8e:	60a3      	str	r3, [r4, #8]
 800de90:	b9e9      	cbnz	r1, 800dece <_puts_r+0x76>
 800de92:	2b00      	cmp	r3, #0
 800de94:	da2e      	bge.n	800def4 <_puts_r+0x9c>
 800de96:	4622      	mov	r2, r4
 800de98:	210a      	movs	r1, #10
 800de9a:	4628      	mov	r0, r5
 800de9c:	f000 f89b 	bl	800dfd6 <__swbuf_r>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d007      	beq.n	800deb4 <_puts_r+0x5c>
 800dea4:	250a      	movs	r5, #10
 800dea6:	e007      	b.n	800deb8 <_puts_r+0x60>
 800dea8:	4621      	mov	r1, r4
 800deaa:	4628      	mov	r0, r5
 800deac:	f000 f8d0 	bl	800e050 <__swsetup_r>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d0e7      	beq.n	800de84 <_puts_r+0x2c>
 800deb4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800deb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deba:	07da      	lsls	r2, r3, #31
 800debc:	d405      	bmi.n	800deca <_puts_r+0x72>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	059b      	lsls	r3, r3, #22
 800dec2:	d402      	bmi.n	800deca <_puts_r+0x72>
 800dec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dec6:	f000 f9bb 	bl	800e240 <__retarget_lock_release_recursive>
 800deca:	4628      	mov	r0, r5
 800decc:	bd70      	pop	{r4, r5, r6, pc}
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da04      	bge.n	800dedc <_puts_r+0x84>
 800ded2:	69a2      	ldr	r2, [r4, #24]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	dc06      	bgt.n	800dee6 <_puts_r+0x8e>
 800ded8:	290a      	cmp	r1, #10
 800deda:	d004      	beq.n	800dee6 <_puts_r+0x8e>
 800dedc:	6823      	ldr	r3, [r4, #0]
 800dede:	1c5a      	adds	r2, r3, #1
 800dee0:	6022      	str	r2, [r4, #0]
 800dee2:	7019      	strb	r1, [r3, #0]
 800dee4:	e7cf      	b.n	800de86 <_puts_r+0x2e>
 800dee6:	4622      	mov	r2, r4
 800dee8:	4628      	mov	r0, r5
 800deea:	f000 f874 	bl	800dfd6 <__swbuf_r>
 800deee:	3001      	adds	r0, #1
 800def0:	d1c9      	bne.n	800de86 <_puts_r+0x2e>
 800def2:	e7df      	b.n	800deb4 <_puts_r+0x5c>
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	250a      	movs	r5, #10
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	6022      	str	r2, [r4, #0]
 800defc:	701d      	strb	r5, [r3, #0]
 800defe:	e7db      	b.n	800deb8 <_puts_r+0x60>

0800df00 <puts>:
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <puts+0xc>)
 800df02:	4601      	mov	r1, r0
 800df04:	6818      	ldr	r0, [r3, #0]
 800df06:	f7ff bfa7 	b.w	800de58 <_puts_r>
 800df0a:	bf00      	nop
 800df0c:	200000bc 	.word	0x200000bc

0800df10 <siprintf>:
 800df10:	b40e      	push	{r1, r2, r3}
 800df12:	b500      	push	{lr}
 800df14:	b09c      	sub	sp, #112	; 0x70
 800df16:	ab1d      	add	r3, sp, #116	; 0x74
 800df18:	9002      	str	r0, [sp, #8]
 800df1a:	9006      	str	r0, [sp, #24]
 800df1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800df20:	4809      	ldr	r0, [pc, #36]	; (800df48 <siprintf+0x38>)
 800df22:	9107      	str	r1, [sp, #28]
 800df24:	9104      	str	r1, [sp, #16]
 800df26:	4909      	ldr	r1, [pc, #36]	; (800df4c <siprintf+0x3c>)
 800df28:	f853 2b04 	ldr.w	r2, [r3], #4
 800df2c:	9105      	str	r1, [sp, #20]
 800df2e:	6800      	ldr	r0, [r0, #0]
 800df30:	9301      	str	r3, [sp, #4]
 800df32:	a902      	add	r1, sp, #8
 800df34:	f002 fb7c 	bl	8010630 <_svfiprintf_r>
 800df38:	9b02      	ldr	r3, [sp, #8]
 800df3a:	2200      	movs	r2, #0
 800df3c:	701a      	strb	r2, [r3, #0]
 800df3e:	b01c      	add	sp, #112	; 0x70
 800df40:	f85d eb04 	ldr.w	lr, [sp], #4
 800df44:	b003      	add	sp, #12
 800df46:	4770      	bx	lr
 800df48:	200000bc 	.word	0x200000bc
 800df4c:	ffff0208 	.word	0xffff0208

0800df50 <__sread>:
 800df50:	b510      	push	{r4, lr}
 800df52:	460c      	mov	r4, r1
 800df54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df58:	f000 f912 	bl	800e180 <_read_r>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	bfab      	itete	ge
 800df60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df62:	89a3      	ldrhlt	r3, [r4, #12]
 800df64:	181b      	addge	r3, r3, r0
 800df66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df6a:	bfac      	ite	ge
 800df6c:	6563      	strge	r3, [r4, #84]	; 0x54
 800df6e:	81a3      	strhlt	r3, [r4, #12]
 800df70:	bd10      	pop	{r4, pc}

0800df72 <__swrite>:
 800df72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df76:	461f      	mov	r7, r3
 800df78:	898b      	ldrh	r3, [r1, #12]
 800df7a:	05db      	lsls	r3, r3, #23
 800df7c:	4605      	mov	r5, r0
 800df7e:	460c      	mov	r4, r1
 800df80:	4616      	mov	r6, r2
 800df82:	d505      	bpl.n	800df90 <__swrite+0x1e>
 800df84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df88:	2302      	movs	r3, #2
 800df8a:	2200      	movs	r2, #0
 800df8c:	f000 f8e6 	bl	800e15c <_lseek_r>
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	4632      	mov	r2, r6
 800df9e:	463b      	mov	r3, r7
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa6:	f000 b90d 	b.w	800e1c4 <_write_r>

0800dfaa <__sseek>:
 800dfaa:	b510      	push	{r4, lr}
 800dfac:	460c      	mov	r4, r1
 800dfae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfb2:	f000 f8d3 	bl	800e15c <_lseek_r>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	89a3      	ldrh	r3, [r4, #12]
 800dfba:	bf15      	itete	ne
 800dfbc:	6560      	strne	r0, [r4, #84]	; 0x54
 800dfbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dfc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dfc6:	81a3      	strheq	r3, [r4, #12]
 800dfc8:	bf18      	it	ne
 800dfca:	81a3      	strhne	r3, [r4, #12]
 800dfcc:	bd10      	pop	{r4, pc}

0800dfce <__sclose>:
 800dfce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd2:	f000 b8b3 	b.w	800e13c <_close_r>

0800dfd6 <__swbuf_r>:
 800dfd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd8:	460e      	mov	r6, r1
 800dfda:	4614      	mov	r4, r2
 800dfdc:	4605      	mov	r5, r0
 800dfde:	b118      	cbz	r0, 800dfe8 <__swbuf_r+0x12>
 800dfe0:	6a03      	ldr	r3, [r0, #32]
 800dfe2:	b90b      	cbnz	r3, 800dfe8 <__swbuf_r+0x12>
 800dfe4:	f7ff fee8 	bl	800ddb8 <__sinit>
 800dfe8:	69a3      	ldr	r3, [r4, #24]
 800dfea:	60a3      	str	r3, [r4, #8]
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	071a      	lsls	r2, r3, #28
 800dff0:	d525      	bpl.n	800e03e <__swbuf_r+0x68>
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	b31b      	cbz	r3, 800e03e <__swbuf_r+0x68>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	6922      	ldr	r2, [r4, #16]
 800dffa:	1a98      	subs	r0, r3, r2
 800dffc:	6963      	ldr	r3, [r4, #20]
 800dffe:	b2f6      	uxtb	r6, r6
 800e000:	4283      	cmp	r3, r0
 800e002:	4637      	mov	r7, r6
 800e004:	dc04      	bgt.n	800e010 <__swbuf_r+0x3a>
 800e006:	4621      	mov	r1, r4
 800e008:	4628      	mov	r0, r5
 800e00a:	f002 fdd9 	bl	8010bc0 <_fflush_r>
 800e00e:	b9e0      	cbnz	r0, 800e04a <__swbuf_r+0x74>
 800e010:	68a3      	ldr	r3, [r4, #8]
 800e012:	3b01      	subs	r3, #1
 800e014:	60a3      	str	r3, [r4, #8]
 800e016:	6823      	ldr	r3, [r4, #0]
 800e018:	1c5a      	adds	r2, r3, #1
 800e01a:	6022      	str	r2, [r4, #0]
 800e01c:	701e      	strb	r6, [r3, #0]
 800e01e:	6962      	ldr	r2, [r4, #20]
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	429a      	cmp	r2, r3
 800e024:	d004      	beq.n	800e030 <__swbuf_r+0x5a>
 800e026:	89a3      	ldrh	r3, [r4, #12]
 800e028:	07db      	lsls	r3, r3, #31
 800e02a:	d506      	bpl.n	800e03a <__swbuf_r+0x64>
 800e02c:	2e0a      	cmp	r6, #10
 800e02e:	d104      	bne.n	800e03a <__swbuf_r+0x64>
 800e030:	4621      	mov	r1, r4
 800e032:	4628      	mov	r0, r5
 800e034:	f002 fdc4 	bl	8010bc0 <_fflush_r>
 800e038:	b938      	cbnz	r0, 800e04a <__swbuf_r+0x74>
 800e03a:	4638      	mov	r0, r7
 800e03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e03e:	4621      	mov	r1, r4
 800e040:	4628      	mov	r0, r5
 800e042:	f000 f805 	bl	800e050 <__swsetup_r>
 800e046:	2800      	cmp	r0, #0
 800e048:	d0d5      	beq.n	800dff6 <__swbuf_r+0x20>
 800e04a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e04e:	e7f4      	b.n	800e03a <__swbuf_r+0x64>

0800e050 <__swsetup_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4b2a      	ldr	r3, [pc, #168]	; (800e0fc <__swsetup_r+0xac>)
 800e054:	4605      	mov	r5, r0
 800e056:	6818      	ldr	r0, [r3, #0]
 800e058:	460c      	mov	r4, r1
 800e05a:	b118      	cbz	r0, 800e064 <__swsetup_r+0x14>
 800e05c:	6a03      	ldr	r3, [r0, #32]
 800e05e:	b90b      	cbnz	r3, 800e064 <__swsetup_r+0x14>
 800e060:	f7ff feaa 	bl	800ddb8 <__sinit>
 800e064:	89a3      	ldrh	r3, [r4, #12]
 800e066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e06a:	0718      	lsls	r0, r3, #28
 800e06c:	d422      	bmi.n	800e0b4 <__swsetup_r+0x64>
 800e06e:	06d9      	lsls	r1, r3, #27
 800e070:	d407      	bmi.n	800e082 <__swsetup_r+0x32>
 800e072:	2309      	movs	r3, #9
 800e074:	602b      	str	r3, [r5, #0]
 800e076:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e080:	e034      	b.n	800e0ec <__swsetup_r+0x9c>
 800e082:	0758      	lsls	r0, r3, #29
 800e084:	d512      	bpl.n	800e0ac <__swsetup_r+0x5c>
 800e086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e088:	b141      	cbz	r1, 800e09c <__swsetup_r+0x4c>
 800e08a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e08e:	4299      	cmp	r1, r3
 800e090:	d002      	beq.n	800e098 <__swsetup_r+0x48>
 800e092:	4628      	mov	r0, r5
 800e094:	f000 ff66 	bl	800ef64 <_free_r>
 800e098:	2300      	movs	r3, #0
 800e09a:	6363      	str	r3, [r4, #52]	; 0x34
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	6063      	str	r3, [r4, #4]
 800e0a8:	6923      	ldr	r3, [r4, #16]
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	89a3      	ldrh	r3, [r4, #12]
 800e0ae:	f043 0308 	orr.w	r3, r3, #8
 800e0b2:	81a3      	strh	r3, [r4, #12]
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	b94b      	cbnz	r3, 800e0cc <__swsetup_r+0x7c>
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c2:	d003      	beq.n	800e0cc <__swsetup_r+0x7c>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f002 fdc8 	bl	8010c5c <__smakebuf_r>
 800e0cc:	89a0      	ldrh	r0, [r4, #12]
 800e0ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0d2:	f010 0301 	ands.w	r3, r0, #1
 800e0d6:	d00a      	beq.n	800e0ee <__swsetup_r+0x9e>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	60a3      	str	r3, [r4, #8]
 800e0dc:	6963      	ldr	r3, [r4, #20]
 800e0de:	425b      	negs	r3, r3
 800e0e0:	61a3      	str	r3, [r4, #24]
 800e0e2:	6923      	ldr	r3, [r4, #16]
 800e0e4:	b943      	cbnz	r3, 800e0f8 <__swsetup_r+0xa8>
 800e0e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0ea:	d1c4      	bne.n	800e076 <__swsetup_r+0x26>
 800e0ec:	bd38      	pop	{r3, r4, r5, pc}
 800e0ee:	0781      	lsls	r1, r0, #30
 800e0f0:	bf58      	it	pl
 800e0f2:	6963      	ldrpl	r3, [r4, #20]
 800e0f4:	60a3      	str	r3, [r4, #8]
 800e0f6:	e7f4      	b.n	800e0e2 <__swsetup_r+0x92>
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	e7f7      	b.n	800e0ec <__swsetup_r+0x9c>
 800e0fc:	200000bc 	.word	0x200000bc

0800e100 <memset>:
 800e100:	4402      	add	r2, r0
 800e102:	4603      	mov	r3, r0
 800e104:	4293      	cmp	r3, r2
 800e106:	d100      	bne.n	800e10a <memset+0xa>
 800e108:	4770      	bx	lr
 800e10a:	f803 1b01 	strb.w	r1, [r3], #1
 800e10e:	e7f9      	b.n	800e104 <memset+0x4>

0800e110 <strncmp>:
 800e110:	b510      	push	{r4, lr}
 800e112:	b16a      	cbz	r2, 800e130 <strncmp+0x20>
 800e114:	3901      	subs	r1, #1
 800e116:	1884      	adds	r4, r0, r2
 800e118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e11c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e120:	429a      	cmp	r2, r3
 800e122:	d103      	bne.n	800e12c <strncmp+0x1c>
 800e124:	42a0      	cmp	r0, r4
 800e126:	d001      	beq.n	800e12c <strncmp+0x1c>
 800e128:	2a00      	cmp	r2, #0
 800e12a:	d1f5      	bne.n	800e118 <strncmp+0x8>
 800e12c:	1ad0      	subs	r0, r2, r3
 800e12e:	bd10      	pop	{r4, pc}
 800e130:	4610      	mov	r0, r2
 800e132:	e7fc      	b.n	800e12e <strncmp+0x1e>

0800e134 <_localeconv_r>:
 800e134:	4800      	ldr	r0, [pc, #0]	; (800e138 <_localeconv_r+0x4>)
 800e136:	4770      	bx	lr
 800e138:	200001b0 	.word	0x200001b0

0800e13c <_close_r>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	4d06      	ldr	r5, [pc, #24]	; (800e158 <_close_r+0x1c>)
 800e140:	2300      	movs	r3, #0
 800e142:	4604      	mov	r4, r0
 800e144:	4608      	mov	r0, r1
 800e146:	602b      	str	r3, [r5, #0]
 800e148:	f7f5 fd5d 	bl	8003c06 <_close>
 800e14c:	1c43      	adds	r3, r0, #1
 800e14e:	d102      	bne.n	800e156 <_close_r+0x1a>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	b103      	cbz	r3, 800e156 <_close_r+0x1a>
 800e154:	6023      	str	r3, [r4, #0]
 800e156:	bd38      	pop	{r3, r4, r5, pc}
 800e158:	20002e28 	.word	0x20002e28

0800e15c <_lseek_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d07      	ldr	r5, [pc, #28]	; (800e17c <_lseek_r+0x20>)
 800e160:	4604      	mov	r4, r0
 800e162:	4608      	mov	r0, r1
 800e164:	4611      	mov	r1, r2
 800e166:	2200      	movs	r2, #0
 800e168:	602a      	str	r2, [r5, #0]
 800e16a:	461a      	mov	r2, r3
 800e16c:	f7f5 fd72 	bl	8003c54 <_lseek>
 800e170:	1c43      	adds	r3, r0, #1
 800e172:	d102      	bne.n	800e17a <_lseek_r+0x1e>
 800e174:	682b      	ldr	r3, [r5, #0]
 800e176:	b103      	cbz	r3, 800e17a <_lseek_r+0x1e>
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	bd38      	pop	{r3, r4, r5, pc}
 800e17c:	20002e28 	.word	0x20002e28

0800e180 <_read_r>:
 800e180:	b538      	push	{r3, r4, r5, lr}
 800e182:	4d07      	ldr	r5, [pc, #28]	; (800e1a0 <_read_r+0x20>)
 800e184:	4604      	mov	r4, r0
 800e186:	4608      	mov	r0, r1
 800e188:	4611      	mov	r1, r2
 800e18a:	2200      	movs	r2, #0
 800e18c:	602a      	str	r2, [r5, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	f7f5 fd00 	bl	8003b94 <_read>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_read_r+0x1e>
 800e198:	682b      	ldr	r3, [r5, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_read_r+0x1e>
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	20002e28 	.word	0x20002e28

0800e1a4 <_sbrk_r>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4d06      	ldr	r5, [pc, #24]	; (800e1c0 <_sbrk_r+0x1c>)
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	4608      	mov	r0, r1
 800e1ae:	602b      	str	r3, [r5, #0]
 800e1b0:	f7f5 fd5e 	bl	8003c70 <_sbrk>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d102      	bne.n	800e1be <_sbrk_r+0x1a>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b103      	cbz	r3, 800e1be <_sbrk_r+0x1a>
 800e1bc:	6023      	str	r3, [r4, #0]
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	20002e28 	.word	0x20002e28

0800e1c4 <_write_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d07      	ldr	r5, [pc, #28]	; (800e1e4 <_write_r+0x20>)
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	602a      	str	r2, [r5, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f7f5 fcfb 	bl	8003bce <_write>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_write_r+0x1e>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_write_r+0x1e>
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	20002e28 	.word	0x20002e28

0800e1e8 <__errno>:
 800e1e8:	4b01      	ldr	r3, [pc, #4]	; (800e1f0 <__errno+0x8>)
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	200000bc 	.word	0x200000bc

0800e1f4 <__libc_init_array>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	4d0d      	ldr	r5, [pc, #52]	; (800e22c <__libc_init_array+0x38>)
 800e1f8:	4c0d      	ldr	r4, [pc, #52]	; (800e230 <__libc_init_array+0x3c>)
 800e1fa:	1b64      	subs	r4, r4, r5
 800e1fc:	10a4      	asrs	r4, r4, #2
 800e1fe:	2600      	movs	r6, #0
 800e200:	42a6      	cmp	r6, r4
 800e202:	d109      	bne.n	800e218 <__libc_init_array+0x24>
 800e204:	4d0b      	ldr	r5, [pc, #44]	; (800e234 <__libc_init_array+0x40>)
 800e206:	4c0c      	ldr	r4, [pc, #48]	; (800e238 <__libc_init_array+0x44>)
 800e208:	f003 fa1e 	bl	8011648 <_init>
 800e20c:	1b64      	subs	r4, r4, r5
 800e20e:	10a4      	asrs	r4, r4, #2
 800e210:	2600      	movs	r6, #0
 800e212:	42a6      	cmp	r6, r4
 800e214:	d105      	bne.n	800e222 <__libc_init_array+0x2e>
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	f855 3b04 	ldr.w	r3, [r5], #4
 800e21c:	4798      	blx	r3
 800e21e:	3601      	adds	r6, #1
 800e220:	e7ee      	b.n	800e200 <__libc_init_array+0xc>
 800e222:	f855 3b04 	ldr.w	r3, [r5], #4
 800e226:	4798      	blx	r3
 800e228:	3601      	adds	r6, #1
 800e22a:	e7f2      	b.n	800e212 <__libc_init_array+0x1e>
 800e22c:	080125c8 	.word	0x080125c8
 800e230:	080125c8 	.word	0x080125c8
 800e234:	080125c8 	.word	0x080125c8
 800e238:	080125cc 	.word	0x080125cc

0800e23c <__retarget_lock_init_recursive>:
 800e23c:	4770      	bx	lr

0800e23e <__retarget_lock_acquire_recursive>:
 800e23e:	4770      	bx	lr

0800e240 <__retarget_lock_release_recursive>:
 800e240:	4770      	bx	lr

0800e242 <memcpy>:
 800e242:	440a      	add	r2, r1
 800e244:	4291      	cmp	r1, r2
 800e246:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e24a:	d100      	bne.n	800e24e <memcpy+0xc>
 800e24c:	4770      	bx	lr
 800e24e:	b510      	push	{r4, lr}
 800e250:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e258:	4291      	cmp	r1, r2
 800e25a:	d1f9      	bne.n	800e250 <memcpy+0xe>
 800e25c:	bd10      	pop	{r4, pc}
	...

0800e260 <nanf>:
 800e260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e268 <nanf+0x8>
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	7fc00000 	.word	0x7fc00000

0800e26c <quorem>:
 800e26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e270:	6903      	ldr	r3, [r0, #16]
 800e272:	690c      	ldr	r4, [r1, #16]
 800e274:	42a3      	cmp	r3, r4
 800e276:	4607      	mov	r7, r0
 800e278:	db7e      	blt.n	800e378 <quorem+0x10c>
 800e27a:	3c01      	subs	r4, #1
 800e27c:	f101 0814 	add.w	r8, r1, #20
 800e280:	f100 0514 	add.w	r5, r0, #20
 800e284:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e28e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e292:	3301      	adds	r3, #1
 800e294:	429a      	cmp	r2, r3
 800e296:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e29a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e29e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2a2:	d331      	bcc.n	800e308 <quorem+0x9c>
 800e2a4:	f04f 0e00 	mov.w	lr, #0
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	46ac      	mov	ip, r5
 800e2ac:	46f2      	mov	sl, lr
 800e2ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2b2:	b293      	uxth	r3, r2
 800e2b4:	fb06 e303 	mla	r3, r6, r3, lr
 800e2b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2bc:	0c1a      	lsrs	r2, r3, #16
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	ebaa 0303 	sub.w	r3, sl, r3
 800e2c4:	f8dc a000 	ldr.w	sl, [ip]
 800e2c8:	fa13 f38a 	uxtah	r3, r3, sl
 800e2cc:	fb06 220e 	mla	r2, r6, lr, r2
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	9b00      	ldr	r3, [sp, #0]
 800e2d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2d8:	b292      	uxth	r2, r2
 800e2da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e2de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2e2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e2e6:	4581      	cmp	r9, r0
 800e2e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ec:	f84c 3b04 	str.w	r3, [ip], #4
 800e2f0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e2f4:	d2db      	bcs.n	800e2ae <quorem+0x42>
 800e2f6:	f855 300b 	ldr.w	r3, [r5, fp]
 800e2fa:	b92b      	cbnz	r3, 800e308 <quorem+0x9c>
 800e2fc:	9b01      	ldr	r3, [sp, #4]
 800e2fe:	3b04      	subs	r3, #4
 800e300:	429d      	cmp	r5, r3
 800e302:	461a      	mov	r2, r3
 800e304:	d32c      	bcc.n	800e360 <quorem+0xf4>
 800e306:	613c      	str	r4, [r7, #16]
 800e308:	4638      	mov	r0, r7
 800e30a:	f001 f93d 	bl	800f588 <__mcmp>
 800e30e:	2800      	cmp	r0, #0
 800e310:	db22      	blt.n	800e358 <quorem+0xec>
 800e312:	3601      	adds	r6, #1
 800e314:	4629      	mov	r1, r5
 800e316:	2000      	movs	r0, #0
 800e318:	f858 2b04 	ldr.w	r2, [r8], #4
 800e31c:	f8d1 c000 	ldr.w	ip, [r1]
 800e320:	b293      	uxth	r3, r2
 800e322:	1ac3      	subs	r3, r0, r3
 800e324:	0c12      	lsrs	r2, r2, #16
 800e326:	fa13 f38c 	uxtah	r3, r3, ip
 800e32a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e32e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e332:	b29b      	uxth	r3, r3
 800e334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e338:	45c1      	cmp	r9, r8
 800e33a:	f841 3b04 	str.w	r3, [r1], #4
 800e33e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e342:	d2e9      	bcs.n	800e318 <quorem+0xac>
 800e344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e348:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e34c:	b922      	cbnz	r2, 800e358 <quorem+0xec>
 800e34e:	3b04      	subs	r3, #4
 800e350:	429d      	cmp	r5, r3
 800e352:	461a      	mov	r2, r3
 800e354:	d30a      	bcc.n	800e36c <quorem+0x100>
 800e356:	613c      	str	r4, [r7, #16]
 800e358:	4630      	mov	r0, r6
 800e35a:	b003      	add	sp, #12
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	6812      	ldr	r2, [r2, #0]
 800e362:	3b04      	subs	r3, #4
 800e364:	2a00      	cmp	r2, #0
 800e366:	d1ce      	bne.n	800e306 <quorem+0x9a>
 800e368:	3c01      	subs	r4, #1
 800e36a:	e7c9      	b.n	800e300 <quorem+0x94>
 800e36c:	6812      	ldr	r2, [r2, #0]
 800e36e:	3b04      	subs	r3, #4
 800e370:	2a00      	cmp	r2, #0
 800e372:	d1f0      	bne.n	800e356 <quorem+0xea>
 800e374:	3c01      	subs	r4, #1
 800e376:	e7eb      	b.n	800e350 <quorem+0xe4>
 800e378:	2000      	movs	r0, #0
 800e37a:	e7ee      	b.n	800e35a <quorem+0xee>
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <_dtoa_r>:
 800e380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e384:	ed2d 8b04 	vpush	{d8-d9}
 800e388:	69c5      	ldr	r5, [r0, #28]
 800e38a:	b093      	sub	sp, #76	; 0x4c
 800e38c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e390:	ec57 6b10 	vmov	r6, r7, d0
 800e394:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e398:	9107      	str	r1, [sp, #28]
 800e39a:	4604      	mov	r4, r0
 800e39c:	920a      	str	r2, [sp, #40]	; 0x28
 800e39e:	930d      	str	r3, [sp, #52]	; 0x34
 800e3a0:	b975      	cbnz	r5, 800e3c0 <_dtoa_r+0x40>
 800e3a2:	2010      	movs	r0, #16
 800e3a4:	f7fe fcbc 	bl	800cd20 <malloc>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	61e0      	str	r0, [r4, #28]
 800e3ac:	b920      	cbnz	r0, 800e3b8 <_dtoa_r+0x38>
 800e3ae:	4bae      	ldr	r3, [pc, #696]	; (800e668 <_dtoa_r+0x2e8>)
 800e3b0:	21ef      	movs	r1, #239	; 0xef
 800e3b2:	48ae      	ldr	r0, [pc, #696]	; (800e66c <_dtoa_r+0x2ec>)
 800e3b4:	f002 fd08 	bl	8010dc8 <__assert_func>
 800e3b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3bc:	6005      	str	r5, [r0, #0]
 800e3be:	60c5      	str	r5, [r0, #12]
 800e3c0:	69e3      	ldr	r3, [r4, #28]
 800e3c2:	6819      	ldr	r1, [r3, #0]
 800e3c4:	b151      	cbz	r1, 800e3dc <_dtoa_r+0x5c>
 800e3c6:	685a      	ldr	r2, [r3, #4]
 800e3c8:	604a      	str	r2, [r1, #4]
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4093      	lsls	r3, r2
 800e3ce:	608b      	str	r3, [r1, #8]
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f000 fe53 	bl	800f07c <_Bfree>
 800e3d6:	69e3      	ldr	r3, [r4, #28]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]
 800e3dc:	1e3b      	subs	r3, r7, #0
 800e3de:	bfbb      	ittet	lt
 800e3e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3e4:	9303      	strlt	r3, [sp, #12]
 800e3e6:	2300      	movge	r3, #0
 800e3e8:	2201      	movlt	r2, #1
 800e3ea:	bfac      	ite	ge
 800e3ec:	f8c8 3000 	strge.w	r3, [r8]
 800e3f0:	f8c8 2000 	strlt.w	r2, [r8]
 800e3f4:	4b9e      	ldr	r3, [pc, #632]	; (800e670 <_dtoa_r+0x2f0>)
 800e3f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e3fa:	ea33 0308 	bics.w	r3, r3, r8
 800e3fe:	d11b      	bne.n	800e438 <_dtoa_r+0xb8>
 800e400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e402:	f242 730f 	movw	r3, #9999	; 0x270f
 800e406:	6013      	str	r3, [r2, #0]
 800e408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e40c:	4333      	orrs	r3, r6
 800e40e:	f000 8593 	beq.w	800ef38 <_dtoa_r+0xbb8>
 800e412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e414:	b963      	cbnz	r3, 800e430 <_dtoa_r+0xb0>
 800e416:	4b97      	ldr	r3, [pc, #604]	; (800e674 <_dtoa_r+0x2f4>)
 800e418:	e027      	b.n	800e46a <_dtoa_r+0xea>
 800e41a:	4b97      	ldr	r3, [pc, #604]	; (800e678 <_dtoa_r+0x2f8>)
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	3308      	adds	r3, #8
 800e420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	9800      	ldr	r0, [sp, #0]
 800e426:	b013      	add	sp, #76	; 0x4c
 800e428:	ecbd 8b04 	vpop	{d8-d9}
 800e42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e430:	4b90      	ldr	r3, [pc, #576]	; (800e674 <_dtoa_r+0x2f4>)
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	3303      	adds	r3, #3
 800e436:	e7f3      	b.n	800e420 <_dtoa_r+0xa0>
 800e438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e43c:	2200      	movs	r2, #0
 800e43e:	ec51 0b17 	vmov	r0, r1, d7
 800e442:	eeb0 8a47 	vmov.f32	s16, s14
 800e446:	eef0 8a67 	vmov.f32	s17, s15
 800e44a:	2300      	movs	r3, #0
 800e44c:	f7f2 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 800e450:	4681      	mov	r9, r0
 800e452:	b160      	cbz	r0, 800e46e <_dtoa_r+0xee>
 800e454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e456:	2301      	movs	r3, #1
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 8568 	beq.w	800ef32 <_dtoa_r+0xbb2>
 800e462:	4b86      	ldr	r3, [pc, #536]	; (800e67c <_dtoa_r+0x2fc>)
 800e464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e466:	6013      	str	r3, [r2, #0]
 800e468:	3b01      	subs	r3, #1
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	e7da      	b.n	800e424 <_dtoa_r+0xa4>
 800e46e:	aa10      	add	r2, sp, #64	; 0x40
 800e470:	a911      	add	r1, sp, #68	; 0x44
 800e472:	4620      	mov	r0, r4
 800e474:	eeb0 0a48 	vmov.f32	s0, s16
 800e478:	eef0 0a68 	vmov.f32	s1, s17
 800e47c:	f001 f99a 	bl	800f7b4 <__d2b>
 800e480:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e484:	4682      	mov	sl, r0
 800e486:	2d00      	cmp	r5, #0
 800e488:	d07f      	beq.n	800e58a <_dtoa_r+0x20a>
 800e48a:	ee18 3a90 	vmov	r3, s17
 800e48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e496:	ec51 0b18 	vmov	r0, r1, d8
 800e49a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e49e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e4a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4b75      	ldr	r3, [pc, #468]	; (800e680 <_dtoa_r+0x300>)
 800e4ac:	f7f1 fef4 	bl	8000298 <__aeabi_dsub>
 800e4b0:	a367      	add	r3, pc, #412	; (adr r3, 800e650 <_dtoa_r+0x2d0>)
 800e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b6:	f7f2 f8a7 	bl	8000608 <__aeabi_dmul>
 800e4ba:	a367      	add	r3, pc, #412	; (adr r3, 800e658 <_dtoa_r+0x2d8>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f1 feec 	bl	800029c <__adddf3>
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	460f      	mov	r7, r1
 800e4ca:	f7f2 f833 	bl	8000534 <__aeabi_i2d>
 800e4ce:	a364      	add	r3, pc, #400	; (adr r3, 800e660 <_dtoa_r+0x2e0>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f2 f898 	bl	8000608 <__aeabi_dmul>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	f7f1 fedc 	bl	800029c <__adddf3>
 800e4e4:	4606      	mov	r6, r0
 800e4e6:	460f      	mov	r7, r1
 800e4e8:	f7f2 fb3e 	bl	8000b68 <__aeabi_d2iz>
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	4683      	mov	fp, r0
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	f7f2 faf9 	bl	8000aec <__aeabi_dcmplt>
 800e4fa:	b148      	cbz	r0, 800e510 <_dtoa_r+0x190>
 800e4fc:	4658      	mov	r0, fp
 800e4fe:	f7f2 f819 	bl	8000534 <__aeabi_i2d>
 800e502:	4632      	mov	r2, r6
 800e504:	463b      	mov	r3, r7
 800e506:	f7f2 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e50a:	b908      	cbnz	r0, 800e510 <_dtoa_r+0x190>
 800e50c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e510:	f1bb 0f16 	cmp.w	fp, #22
 800e514:	d857      	bhi.n	800e5c6 <_dtoa_r+0x246>
 800e516:	4b5b      	ldr	r3, [pc, #364]	; (800e684 <_dtoa_r+0x304>)
 800e518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	ec51 0b18 	vmov	r0, r1, d8
 800e524:	f7f2 fae2 	bl	8000aec <__aeabi_dcmplt>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d04e      	beq.n	800e5ca <_dtoa_r+0x24a>
 800e52c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e530:	2300      	movs	r3, #0
 800e532:	930c      	str	r3, [sp, #48]	; 0x30
 800e534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e536:	1b5b      	subs	r3, r3, r5
 800e538:	1e5a      	subs	r2, r3, #1
 800e53a:	bf45      	ittet	mi
 800e53c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e540:	9305      	strmi	r3, [sp, #20]
 800e542:	2300      	movpl	r3, #0
 800e544:	2300      	movmi	r3, #0
 800e546:	9206      	str	r2, [sp, #24]
 800e548:	bf54      	ite	pl
 800e54a:	9305      	strpl	r3, [sp, #20]
 800e54c:	9306      	strmi	r3, [sp, #24]
 800e54e:	f1bb 0f00 	cmp.w	fp, #0
 800e552:	db3c      	blt.n	800e5ce <_dtoa_r+0x24e>
 800e554:	9b06      	ldr	r3, [sp, #24]
 800e556:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e55a:	445b      	add	r3, fp
 800e55c:	9306      	str	r3, [sp, #24]
 800e55e:	2300      	movs	r3, #0
 800e560:	9308      	str	r3, [sp, #32]
 800e562:	9b07      	ldr	r3, [sp, #28]
 800e564:	2b09      	cmp	r3, #9
 800e566:	d868      	bhi.n	800e63a <_dtoa_r+0x2ba>
 800e568:	2b05      	cmp	r3, #5
 800e56a:	bfc4      	itt	gt
 800e56c:	3b04      	subgt	r3, #4
 800e56e:	9307      	strgt	r3, [sp, #28]
 800e570:	9b07      	ldr	r3, [sp, #28]
 800e572:	f1a3 0302 	sub.w	r3, r3, #2
 800e576:	bfcc      	ite	gt
 800e578:	2500      	movgt	r5, #0
 800e57a:	2501      	movle	r5, #1
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	f200 8085 	bhi.w	800e68c <_dtoa_r+0x30c>
 800e582:	e8df f003 	tbb	[pc, r3]
 800e586:	3b2e      	.short	0x3b2e
 800e588:	5839      	.short	0x5839
 800e58a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e58e:	441d      	add	r5, r3
 800e590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e594:	2b20      	cmp	r3, #32
 800e596:	bfc1      	itttt	gt
 800e598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e59c:	fa08 f803 	lslgt.w	r8, r8, r3
 800e5a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e5a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e5a8:	bfd6      	itet	le
 800e5aa:	f1c3 0320 	rsble	r3, r3, #32
 800e5ae:	ea48 0003 	orrgt.w	r0, r8, r3
 800e5b2:	fa06 f003 	lslle.w	r0, r6, r3
 800e5b6:	f7f1 ffad 	bl	8000514 <__aeabi_ui2d>
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e5c0:	3d01      	subs	r5, #1
 800e5c2:	920e      	str	r2, [sp, #56]	; 0x38
 800e5c4:	e76f      	b.n	800e4a6 <_dtoa_r+0x126>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e7b3      	b.n	800e532 <_dtoa_r+0x1b2>
 800e5ca:	900c      	str	r0, [sp, #48]	; 0x30
 800e5cc:	e7b2      	b.n	800e534 <_dtoa_r+0x1b4>
 800e5ce:	9b05      	ldr	r3, [sp, #20]
 800e5d0:	eba3 030b 	sub.w	r3, r3, fp
 800e5d4:	9305      	str	r3, [sp, #20]
 800e5d6:	f1cb 0300 	rsb	r3, fp, #0
 800e5da:	9308      	str	r3, [sp, #32]
 800e5dc:	2300      	movs	r3, #0
 800e5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5e0:	e7bf      	b.n	800e562 <_dtoa_r+0x1e2>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	dc52      	bgt.n	800e692 <_dtoa_r+0x312>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	9301      	str	r3, [sp, #4]
 800e5f0:	9304      	str	r3, [sp, #16]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	920a      	str	r2, [sp, #40]	; 0x28
 800e5f6:	e00b      	b.n	800e610 <_dtoa_r+0x290>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e7f3      	b.n	800e5e4 <_dtoa_r+0x264>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e602:	445b      	add	r3, fp
 800e604:	9301      	str	r3, [sp, #4]
 800e606:	3301      	adds	r3, #1
 800e608:	2b01      	cmp	r3, #1
 800e60a:	9304      	str	r3, [sp, #16]
 800e60c:	bfb8      	it	lt
 800e60e:	2301      	movlt	r3, #1
 800e610:	69e0      	ldr	r0, [r4, #28]
 800e612:	2100      	movs	r1, #0
 800e614:	2204      	movs	r2, #4
 800e616:	f102 0614 	add.w	r6, r2, #20
 800e61a:	429e      	cmp	r6, r3
 800e61c:	d93d      	bls.n	800e69a <_dtoa_r+0x31a>
 800e61e:	6041      	str	r1, [r0, #4]
 800e620:	4620      	mov	r0, r4
 800e622:	f000 fceb 	bl	800effc <_Balloc>
 800e626:	9000      	str	r0, [sp, #0]
 800e628:	2800      	cmp	r0, #0
 800e62a:	d139      	bne.n	800e6a0 <_dtoa_r+0x320>
 800e62c:	4b16      	ldr	r3, [pc, #88]	; (800e688 <_dtoa_r+0x308>)
 800e62e:	4602      	mov	r2, r0
 800e630:	f240 11af 	movw	r1, #431	; 0x1af
 800e634:	e6bd      	b.n	800e3b2 <_dtoa_r+0x32>
 800e636:	2301      	movs	r3, #1
 800e638:	e7e1      	b.n	800e5fe <_dtoa_r+0x27e>
 800e63a:	2501      	movs	r5, #1
 800e63c:	2300      	movs	r3, #0
 800e63e:	9307      	str	r3, [sp, #28]
 800e640:	9509      	str	r5, [sp, #36]	; 0x24
 800e642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	9304      	str	r3, [sp, #16]
 800e64a:	2200      	movs	r2, #0
 800e64c:	2312      	movs	r3, #18
 800e64e:	e7d1      	b.n	800e5f4 <_dtoa_r+0x274>
 800e650:	636f4361 	.word	0x636f4361
 800e654:	3fd287a7 	.word	0x3fd287a7
 800e658:	8b60c8b3 	.word	0x8b60c8b3
 800e65c:	3fc68a28 	.word	0x3fc68a28
 800e660:	509f79fb 	.word	0x509f79fb
 800e664:	3fd34413 	.word	0x3fd34413
 800e668:	080122db 	.word	0x080122db
 800e66c:	080122f2 	.word	0x080122f2
 800e670:	7ff00000 	.word	0x7ff00000
 800e674:	080122d7 	.word	0x080122d7
 800e678:	080122ce 	.word	0x080122ce
 800e67c:	080122a6 	.word	0x080122a6
 800e680:	3ff80000 	.word	0x3ff80000
 800e684:	080123e0 	.word	0x080123e0
 800e688:	0801234a 	.word	0x0801234a
 800e68c:	2301      	movs	r3, #1
 800e68e:	9309      	str	r3, [sp, #36]	; 0x24
 800e690:	e7d7      	b.n	800e642 <_dtoa_r+0x2c2>
 800e692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	9304      	str	r3, [sp, #16]
 800e698:	e7ba      	b.n	800e610 <_dtoa_r+0x290>
 800e69a:	3101      	adds	r1, #1
 800e69c:	0052      	lsls	r2, r2, #1
 800e69e:	e7ba      	b.n	800e616 <_dtoa_r+0x296>
 800e6a0:	69e3      	ldr	r3, [r4, #28]
 800e6a2:	9a00      	ldr	r2, [sp, #0]
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	9b04      	ldr	r3, [sp, #16]
 800e6a8:	2b0e      	cmp	r3, #14
 800e6aa:	f200 80a8 	bhi.w	800e7fe <_dtoa_r+0x47e>
 800e6ae:	2d00      	cmp	r5, #0
 800e6b0:	f000 80a5 	beq.w	800e7fe <_dtoa_r+0x47e>
 800e6b4:	f1bb 0f00 	cmp.w	fp, #0
 800e6b8:	dd38      	ble.n	800e72c <_dtoa_r+0x3ac>
 800e6ba:	4bc0      	ldr	r3, [pc, #768]	; (800e9bc <_dtoa_r+0x63c>)
 800e6bc:	f00b 020f 	and.w	r2, fp, #15
 800e6c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e6c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e6cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e6d0:	d019      	beq.n	800e706 <_dtoa_r+0x386>
 800e6d2:	4bbb      	ldr	r3, [pc, #748]	; (800e9c0 <_dtoa_r+0x640>)
 800e6d4:	ec51 0b18 	vmov	r0, r1, d8
 800e6d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e6dc:	f7f2 f8be 	bl	800085c <__aeabi_ddiv>
 800e6e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6e4:	f008 080f 	and.w	r8, r8, #15
 800e6e8:	2503      	movs	r5, #3
 800e6ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e9c0 <_dtoa_r+0x640>
 800e6ee:	f1b8 0f00 	cmp.w	r8, #0
 800e6f2:	d10a      	bne.n	800e70a <_dtoa_r+0x38a>
 800e6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6f8:	4632      	mov	r2, r6
 800e6fa:	463b      	mov	r3, r7
 800e6fc:	f7f2 f8ae 	bl	800085c <__aeabi_ddiv>
 800e700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e704:	e02b      	b.n	800e75e <_dtoa_r+0x3de>
 800e706:	2502      	movs	r5, #2
 800e708:	e7ef      	b.n	800e6ea <_dtoa_r+0x36a>
 800e70a:	f018 0f01 	tst.w	r8, #1
 800e70e:	d008      	beq.n	800e722 <_dtoa_r+0x3a2>
 800e710:	4630      	mov	r0, r6
 800e712:	4639      	mov	r1, r7
 800e714:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e718:	f7f1 ff76 	bl	8000608 <__aeabi_dmul>
 800e71c:	3501      	adds	r5, #1
 800e71e:	4606      	mov	r6, r0
 800e720:	460f      	mov	r7, r1
 800e722:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e726:	f109 0908 	add.w	r9, r9, #8
 800e72a:	e7e0      	b.n	800e6ee <_dtoa_r+0x36e>
 800e72c:	f000 809f 	beq.w	800e86e <_dtoa_r+0x4ee>
 800e730:	f1cb 0600 	rsb	r6, fp, #0
 800e734:	4ba1      	ldr	r3, [pc, #644]	; (800e9bc <_dtoa_r+0x63c>)
 800e736:	4fa2      	ldr	r7, [pc, #648]	; (800e9c0 <_dtoa_r+0x640>)
 800e738:	f006 020f 	and.w	r2, r6, #15
 800e73c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	ec51 0b18 	vmov	r0, r1, d8
 800e748:	f7f1 ff5e 	bl	8000608 <__aeabi_dmul>
 800e74c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e750:	1136      	asrs	r6, r6, #4
 800e752:	2300      	movs	r3, #0
 800e754:	2502      	movs	r5, #2
 800e756:	2e00      	cmp	r6, #0
 800e758:	d17e      	bne.n	800e858 <_dtoa_r+0x4d8>
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1d0      	bne.n	800e700 <_dtoa_r+0x380>
 800e75e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e760:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e764:	2b00      	cmp	r3, #0
 800e766:	f000 8084 	beq.w	800e872 <_dtoa_r+0x4f2>
 800e76a:	4b96      	ldr	r3, [pc, #600]	; (800e9c4 <_dtoa_r+0x644>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	4640      	mov	r0, r8
 800e770:	4649      	mov	r1, r9
 800e772:	f7f2 f9bb 	bl	8000aec <__aeabi_dcmplt>
 800e776:	2800      	cmp	r0, #0
 800e778:	d07b      	beq.n	800e872 <_dtoa_r+0x4f2>
 800e77a:	9b04      	ldr	r3, [sp, #16]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d078      	beq.n	800e872 <_dtoa_r+0x4f2>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	dd39      	ble.n	800e7fa <_dtoa_r+0x47a>
 800e786:	4b90      	ldr	r3, [pc, #576]	; (800e9c8 <_dtoa_r+0x648>)
 800e788:	2200      	movs	r2, #0
 800e78a:	4640      	mov	r0, r8
 800e78c:	4649      	mov	r1, r9
 800e78e:	f7f1 ff3b 	bl	8000608 <__aeabi_dmul>
 800e792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e796:	9e01      	ldr	r6, [sp, #4]
 800e798:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e79c:	3501      	adds	r5, #1
 800e79e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 fec6 	bl	8000534 <__aeabi_i2d>
 800e7a8:	4642      	mov	r2, r8
 800e7aa:	464b      	mov	r3, r9
 800e7ac:	f7f1 ff2c 	bl	8000608 <__aeabi_dmul>
 800e7b0:	4b86      	ldr	r3, [pc, #536]	; (800e9cc <_dtoa_r+0x64c>)
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f7f1 fd72 	bl	800029c <__adddf3>
 800e7b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7c0:	9303      	str	r3, [sp, #12]
 800e7c2:	2e00      	cmp	r6, #0
 800e7c4:	d158      	bne.n	800e878 <_dtoa_r+0x4f8>
 800e7c6:	4b82      	ldr	r3, [pc, #520]	; (800e9d0 <_dtoa_r+0x650>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	4649      	mov	r1, r9
 800e7ce:	f7f1 fd63 	bl	8000298 <__aeabi_dsub>
 800e7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7d6:	4680      	mov	r8, r0
 800e7d8:	4689      	mov	r9, r1
 800e7da:	f7f2 f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 800e7de:	2800      	cmp	r0, #0
 800e7e0:	f040 8296 	bne.w	800ed10 <_dtoa_r+0x990>
 800e7e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e7e8:	4640      	mov	r0, r8
 800e7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7ee:	4649      	mov	r1, r9
 800e7f0:	f7f2 f97c 	bl	8000aec <__aeabi_dcmplt>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	f040 8289 	bne.w	800ed0c <_dtoa_r+0x98c>
 800e7fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e7fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e800:	2b00      	cmp	r3, #0
 800e802:	f2c0 814e 	blt.w	800eaa2 <_dtoa_r+0x722>
 800e806:	f1bb 0f0e 	cmp.w	fp, #14
 800e80a:	f300 814a 	bgt.w	800eaa2 <_dtoa_r+0x722>
 800e80e:	4b6b      	ldr	r3, [pc, #428]	; (800e9bc <_dtoa_r+0x63c>)
 800e810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e814:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f280 80dc 	bge.w	800e9d8 <_dtoa_r+0x658>
 800e820:	9b04      	ldr	r3, [sp, #16]
 800e822:	2b00      	cmp	r3, #0
 800e824:	f300 80d8 	bgt.w	800e9d8 <_dtoa_r+0x658>
 800e828:	f040 826f 	bne.w	800ed0a <_dtoa_r+0x98a>
 800e82c:	4b68      	ldr	r3, [pc, #416]	; (800e9d0 <_dtoa_r+0x650>)
 800e82e:	2200      	movs	r2, #0
 800e830:	4640      	mov	r0, r8
 800e832:	4649      	mov	r1, r9
 800e834:	f7f1 fee8 	bl	8000608 <__aeabi_dmul>
 800e838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e83c:	f7f2 f96a 	bl	8000b14 <__aeabi_dcmpge>
 800e840:	9e04      	ldr	r6, [sp, #16]
 800e842:	4637      	mov	r7, r6
 800e844:	2800      	cmp	r0, #0
 800e846:	f040 8245 	bne.w	800ecd4 <_dtoa_r+0x954>
 800e84a:	9d00      	ldr	r5, [sp, #0]
 800e84c:	2331      	movs	r3, #49	; 0x31
 800e84e:	f805 3b01 	strb.w	r3, [r5], #1
 800e852:	f10b 0b01 	add.w	fp, fp, #1
 800e856:	e241      	b.n	800ecdc <_dtoa_r+0x95c>
 800e858:	07f2      	lsls	r2, r6, #31
 800e85a:	d505      	bpl.n	800e868 <_dtoa_r+0x4e8>
 800e85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e860:	f7f1 fed2 	bl	8000608 <__aeabi_dmul>
 800e864:	3501      	adds	r5, #1
 800e866:	2301      	movs	r3, #1
 800e868:	1076      	asrs	r6, r6, #1
 800e86a:	3708      	adds	r7, #8
 800e86c:	e773      	b.n	800e756 <_dtoa_r+0x3d6>
 800e86e:	2502      	movs	r5, #2
 800e870:	e775      	b.n	800e75e <_dtoa_r+0x3de>
 800e872:	9e04      	ldr	r6, [sp, #16]
 800e874:	465f      	mov	r7, fp
 800e876:	e792      	b.n	800e79e <_dtoa_r+0x41e>
 800e878:	9900      	ldr	r1, [sp, #0]
 800e87a:	4b50      	ldr	r3, [pc, #320]	; (800e9bc <_dtoa_r+0x63c>)
 800e87c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e880:	4431      	add	r1, r6
 800e882:	9102      	str	r1, [sp, #8]
 800e884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e886:	eeb0 9a47 	vmov.f32	s18, s14
 800e88a:	eef0 9a67 	vmov.f32	s19, s15
 800e88e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e896:	2900      	cmp	r1, #0
 800e898:	d044      	beq.n	800e924 <_dtoa_r+0x5a4>
 800e89a:	494e      	ldr	r1, [pc, #312]	; (800e9d4 <_dtoa_r+0x654>)
 800e89c:	2000      	movs	r0, #0
 800e89e:	f7f1 ffdd 	bl	800085c <__aeabi_ddiv>
 800e8a2:	ec53 2b19 	vmov	r2, r3, d9
 800e8a6:	f7f1 fcf7 	bl	8000298 <__aeabi_dsub>
 800e8aa:	9d00      	ldr	r5, [sp, #0]
 800e8ac:	ec41 0b19 	vmov	d9, r0, r1
 800e8b0:	4649      	mov	r1, r9
 800e8b2:	4640      	mov	r0, r8
 800e8b4:	f7f2 f958 	bl	8000b68 <__aeabi_d2iz>
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	f7f1 fe3b 	bl	8000534 <__aeabi_i2d>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	4649      	mov	r1, r9
 800e8c6:	f7f1 fce7 	bl	8000298 <__aeabi_dsub>
 800e8ca:	3630      	adds	r6, #48	; 0x30
 800e8cc:	f805 6b01 	strb.w	r6, [r5], #1
 800e8d0:	ec53 2b19 	vmov	r2, r3, d9
 800e8d4:	4680      	mov	r8, r0
 800e8d6:	4689      	mov	r9, r1
 800e8d8:	f7f2 f908 	bl	8000aec <__aeabi_dcmplt>
 800e8dc:	2800      	cmp	r0, #0
 800e8de:	d164      	bne.n	800e9aa <_dtoa_r+0x62a>
 800e8e0:	4642      	mov	r2, r8
 800e8e2:	464b      	mov	r3, r9
 800e8e4:	4937      	ldr	r1, [pc, #220]	; (800e9c4 <_dtoa_r+0x644>)
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	f7f1 fcd6 	bl	8000298 <__aeabi_dsub>
 800e8ec:	ec53 2b19 	vmov	r2, r3, d9
 800e8f0:	f7f2 f8fc 	bl	8000aec <__aeabi_dcmplt>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	f040 80b6 	bne.w	800ea66 <_dtoa_r+0x6e6>
 800e8fa:	9b02      	ldr	r3, [sp, #8]
 800e8fc:	429d      	cmp	r5, r3
 800e8fe:	f43f af7c 	beq.w	800e7fa <_dtoa_r+0x47a>
 800e902:	4b31      	ldr	r3, [pc, #196]	; (800e9c8 <_dtoa_r+0x648>)
 800e904:	ec51 0b19 	vmov	r0, r1, d9
 800e908:	2200      	movs	r2, #0
 800e90a:	f7f1 fe7d 	bl	8000608 <__aeabi_dmul>
 800e90e:	4b2e      	ldr	r3, [pc, #184]	; (800e9c8 <_dtoa_r+0x648>)
 800e910:	ec41 0b19 	vmov	d9, r0, r1
 800e914:	2200      	movs	r2, #0
 800e916:	4640      	mov	r0, r8
 800e918:	4649      	mov	r1, r9
 800e91a:	f7f1 fe75 	bl	8000608 <__aeabi_dmul>
 800e91e:	4680      	mov	r8, r0
 800e920:	4689      	mov	r9, r1
 800e922:	e7c5      	b.n	800e8b0 <_dtoa_r+0x530>
 800e924:	ec51 0b17 	vmov	r0, r1, d7
 800e928:	f7f1 fe6e 	bl	8000608 <__aeabi_dmul>
 800e92c:	9b02      	ldr	r3, [sp, #8]
 800e92e:	9d00      	ldr	r5, [sp, #0]
 800e930:	930f      	str	r3, [sp, #60]	; 0x3c
 800e932:	ec41 0b19 	vmov	d9, r0, r1
 800e936:	4649      	mov	r1, r9
 800e938:	4640      	mov	r0, r8
 800e93a:	f7f2 f915 	bl	8000b68 <__aeabi_d2iz>
 800e93e:	4606      	mov	r6, r0
 800e940:	f7f1 fdf8 	bl	8000534 <__aeabi_i2d>
 800e944:	3630      	adds	r6, #48	; 0x30
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4640      	mov	r0, r8
 800e94c:	4649      	mov	r1, r9
 800e94e:	f7f1 fca3 	bl	8000298 <__aeabi_dsub>
 800e952:	f805 6b01 	strb.w	r6, [r5], #1
 800e956:	9b02      	ldr	r3, [sp, #8]
 800e958:	429d      	cmp	r5, r3
 800e95a:	4680      	mov	r8, r0
 800e95c:	4689      	mov	r9, r1
 800e95e:	f04f 0200 	mov.w	r2, #0
 800e962:	d124      	bne.n	800e9ae <_dtoa_r+0x62e>
 800e964:	4b1b      	ldr	r3, [pc, #108]	; (800e9d4 <_dtoa_r+0x654>)
 800e966:	ec51 0b19 	vmov	r0, r1, d9
 800e96a:	f7f1 fc97 	bl	800029c <__adddf3>
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	4640      	mov	r0, r8
 800e974:	4649      	mov	r1, r9
 800e976:	f7f2 f8d7 	bl	8000b28 <__aeabi_dcmpgt>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d173      	bne.n	800ea66 <_dtoa_r+0x6e6>
 800e97e:	ec53 2b19 	vmov	r2, r3, d9
 800e982:	4914      	ldr	r1, [pc, #80]	; (800e9d4 <_dtoa_r+0x654>)
 800e984:	2000      	movs	r0, #0
 800e986:	f7f1 fc87 	bl	8000298 <__aeabi_dsub>
 800e98a:	4602      	mov	r2, r0
 800e98c:	460b      	mov	r3, r1
 800e98e:	4640      	mov	r0, r8
 800e990:	4649      	mov	r1, r9
 800e992:	f7f2 f8ab 	bl	8000aec <__aeabi_dcmplt>
 800e996:	2800      	cmp	r0, #0
 800e998:	f43f af2f 	beq.w	800e7fa <_dtoa_r+0x47a>
 800e99c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e99e:	1e6b      	subs	r3, r5, #1
 800e9a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9a6:	2b30      	cmp	r3, #48	; 0x30
 800e9a8:	d0f8      	beq.n	800e99c <_dtoa_r+0x61c>
 800e9aa:	46bb      	mov	fp, r7
 800e9ac:	e04a      	b.n	800ea44 <_dtoa_r+0x6c4>
 800e9ae:	4b06      	ldr	r3, [pc, #24]	; (800e9c8 <_dtoa_r+0x648>)
 800e9b0:	f7f1 fe2a 	bl	8000608 <__aeabi_dmul>
 800e9b4:	4680      	mov	r8, r0
 800e9b6:	4689      	mov	r9, r1
 800e9b8:	e7bd      	b.n	800e936 <_dtoa_r+0x5b6>
 800e9ba:	bf00      	nop
 800e9bc:	080123e0 	.word	0x080123e0
 800e9c0:	080123b8 	.word	0x080123b8
 800e9c4:	3ff00000 	.word	0x3ff00000
 800e9c8:	40240000 	.word	0x40240000
 800e9cc:	401c0000 	.word	0x401c0000
 800e9d0:	40140000 	.word	0x40140000
 800e9d4:	3fe00000 	.word	0x3fe00000
 800e9d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e9dc:	9d00      	ldr	r5, [sp, #0]
 800e9de:	4642      	mov	r2, r8
 800e9e0:	464b      	mov	r3, r9
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	f7f1 ff39 	bl	800085c <__aeabi_ddiv>
 800e9ea:	f7f2 f8bd 	bl	8000b68 <__aeabi_d2iz>
 800e9ee:	9001      	str	r0, [sp, #4]
 800e9f0:	f7f1 fda0 	bl	8000534 <__aeabi_i2d>
 800e9f4:	4642      	mov	r2, r8
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	f7f1 fe06 	bl	8000608 <__aeabi_dmul>
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	460b      	mov	r3, r1
 800ea00:	4630      	mov	r0, r6
 800ea02:	4639      	mov	r1, r7
 800ea04:	f7f1 fc48 	bl	8000298 <__aeabi_dsub>
 800ea08:	9e01      	ldr	r6, [sp, #4]
 800ea0a:	9f04      	ldr	r7, [sp, #16]
 800ea0c:	3630      	adds	r6, #48	; 0x30
 800ea0e:	f805 6b01 	strb.w	r6, [r5], #1
 800ea12:	9e00      	ldr	r6, [sp, #0]
 800ea14:	1bae      	subs	r6, r5, r6
 800ea16:	42b7      	cmp	r7, r6
 800ea18:	4602      	mov	r2, r0
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	d134      	bne.n	800ea88 <_dtoa_r+0x708>
 800ea1e:	f7f1 fc3d 	bl	800029c <__adddf3>
 800ea22:	4642      	mov	r2, r8
 800ea24:	464b      	mov	r3, r9
 800ea26:	4606      	mov	r6, r0
 800ea28:	460f      	mov	r7, r1
 800ea2a:	f7f2 f87d 	bl	8000b28 <__aeabi_dcmpgt>
 800ea2e:	b9c8      	cbnz	r0, 800ea64 <_dtoa_r+0x6e4>
 800ea30:	4642      	mov	r2, r8
 800ea32:	464b      	mov	r3, r9
 800ea34:	4630      	mov	r0, r6
 800ea36:	4639      	mov	r1, r7
 800ea38:	f7f2 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea3c:	b110      	cbz	r0, 800ea44 <_dtoa_r+0x6c4>
 800ea3e:	9b01      	ldr	r3, [sp, #4]
 800ea40:	07db      	lsls	r3, r3, #31
 800ea42:	d40f      	bmi.n	800ea64 <_dtoa_r+0x6e4>
 800ea44:	4651      	mov	r1, sl
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fb18 	bl	800f07c <_Bfree>
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea50:	702b      	strb	r3, [r5, #0]
 800ea52:	f10b 0301 	add.w	r3, fp, #1
 800ea56:	6013      	str	r3, [r2, #0]
 800ea58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	f43f ace2 	beq.w	800e424 <_dtoa_r+0xa4>
 800ea60:	601d      	str	r5, [r3, #0]
 800ea62:	e4df      	b.n	800e424 <_dtoa_r+0xa4>
 800ea64:	465f      	mov	r7, fp
 800ea66:	462b      	mov	r3, r5
 800ea68:	461d      	mov	r5, r3
 800ea6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea6e:	2a39      	cmp	r2, #57	; 0x39
 800ea70:	d106      	bne.n	800ea80 <_dtoa_r+0x700>
 800ea72:	9a00      	ldr	r2, [sp, #0]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d1f7      	bne.n	800ea68 <_dtoa_r+0x6e8>
 800ea78:	9900      	ldr	r1, [sp, #0]
 800ea7a:	2230      	movs	r2, #48	; 0x30
 800ea7c:	3701      	adds	r7, #1
 800ea7e:	700a      	strb	r2, [r1, #0]
 800ea80:	781a      	ldrb	r2, [r3, #0]
 800ea82:	3201      	adds	r2, #1
 800ea84:	701a      	strb	r2, [r3, #0]
 800ea86:	e790      	b.n	800e9aa <_dtoa_r+0x62a>
 800ea88:	4ba3      	ldr	r3, [pc, #652]	; (800ed18 <_dtoa_r+0x998>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f7f1 fdbc 	bl	8000608 <__aeabi_dmul>
 800ea90:	2200      	movs	r2, #0
 800ea92:	2300      	movs	r3, #0
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	f7f2 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	d09e      	beq.n	800e9de <_dtoa_r+0x65e>
 800eaa0:	e7d0      	b.n	800ea44 <_dtoa_r+0x6c4>
 800eaa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	f000 80ca 	beq.w	800ec3e <_dtoa_r+0x8be>
 800eaaa:	9a07      	ldr	r2, [sp, #28]
 800eaac:	2a01      	cmp	r2, #1
 800eaae:	f300 80ad 	bgt.w	800ec0c <_dtoa_r+0x88c>
 800eab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	f000 80a5 	beq.w	800ec04 <_dtoa_r+0x884>
 800eaba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eabe:	9e08      	ldr	r6, [sp, #32]
 800eac0:	9d05      	ldr	r5, [sp, #20]
 800eac2:	9a05      	ldr	r2, [sp, #20]
 800eac4:	441a      	add	r2, r3
 800eac6:	9205      	str	r2, [sp, #20]
 800eac8:	9a06      	ldr	r2, [sp, #24]
 800eaca:	2101      	movs	r1, #1
 800eacc:	441a      	add	r2, r3
 800eace:	4620      	mov	r0, r4
 800ead0:	9206      	str	r2, [sp, #24]
 800ead2:	f000 fbd3 	bl	800f27c <__i2b>
 800ead6:	4607      	mov	r7, r0
 800ead8:	b165      	cbz	r5, 800eaf4 <_dtoa_r+0x774>
 800eada:	9b06      	ldr	r3, [sp, #24]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	dd09      	ble.n	800eaf4 <_dtoa_r+0x774>
 800eae0:	42ab      	cmp	r3, r5
 800eae2:	9a05      	ldr	r2, [sp, #20]
 800eae4:	bfa8      	it	ge
 800eae6:	462b      	movge	r3, r5
 800eae8:	1ad2      	subs	r2, r2, r3
 800eaea:	9205      	str	r2, [sp, #20]
 800eaec:	9a06      	ldr	r2, [sp, #24]
 800eaee:	1aed      	subs	r5, r5, r3
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	9306      	str	r3, [sp, #24]
 800eaf4:	9b08      	ldr	r3, [sp, #32]
 800eaf6:	b1f3      	cbz	r3, 800eb36 <_dtoa_r+0x7b6>
 800eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 80a3 	beq.w	800ec46 <_dtoa_r+0x8c6>
 800eb00:	2e00      	cmp	r6, #0
 800eb02:	dd10      	ble.n	800eb26 <_dtoa_r+0x7a6>
 800eb04:	4639      	mov	r1, r7
 800eb06:	4632      	mov	r2, r6
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f000 fc77 	bl	800f3fc <__pow5mult>
 800eb0e:	4652      	mov	r2, sl
 800eb10:	4601      	mov	r1, r0
 800eb12:	4607      	mov	r7, r0
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fbc7 	bl	800f2a8 <__multiply>
 800eb1a:	4651      	mov	r1, sl
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f000 faac 	bl	800f07c <_Bfree>
 800eb24:	46c2      	mov	sl, r8
 800eb26:	9b08      	ldr	r3, [sp, #32]
 800eb28:	1b9a      	subs	r2, r3, r6
 800eb2a:	d004      	beq.n	800eb36 <_dtoa_r+0x7b6>
 800eb2c:	4651      	mov	r1, sl
 800eb2e:	4620      	mov	r0, r4
 800eb30:	f000 fc64 	bl	800f3fc <__pow5mult>
 800eb34:	4682      	mov	sl, r0
 800eb36:	2101      	movs	r1, #1
 800eb38:	4620      	mov	r0, r4
 800eb3a:	f000 fb9f 	bl	800f27c <__i2b>
 800eb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	4606      	mov	r6, r0
 800eb44:	f340 8081 	ble.w	800ec4a <_dtoa_r+0x8ca>
 800eb48:	461a      	mov	r2, r3
 800eb4a:	4601      	mov	r1, r0
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fc55 	bl	800f3fc <__pow5mult>
 800eb52:	9b07      	ldr	r3, [sp, #28]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	4606      	mov	r6, r0
 800eb58:	dd7a      	ble.n	800ec50 <_dtoa_r+0x8d0>
 800eb5a:	f04f 0800 	mov.w	r8, #0
 800eb5e:	6933      	ldr	r3, [r6, #16]
 800eb60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eb64:	6918      	ldr	r0, [r3, #16]
 800eb66:	f000 fb3b 	bl	800f1e0 <__hi0bits>
 800eb6a:	f1c0 0020 	rsb	r0, r0, #32
 800eb6e:	9b06      	ldr	r3, [sp, #24]
 800eb70:	4418      	add	r0, r3
 800eb72:	f010 001f 	ands.w	r0, r0, #31
 800eb76:	f000 8094 	beq.w	800eca2 <_dtoa_r+0x922>
 800eb7a:	f1c0 0320 	rsb	r3, r0, #32
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	f340 8085 	ble.w	800ec8e <_dtoa_r+0x90e>
 800eb84:	9b05      	ldr	r3, [sp, #20]
 800eb86:	f1c0 001c 	rsb	r0, r0, #28
 800eb8a:	4403      	add	r3, r0
 800eb8c:	9305      	str	r3, [sp, #20]
 800eb8e:	9b06      	ldr	r3, [sp, #24]
 800eb90:	4403      	add	r3, r0
 800eb92:	4405      	add	r5, r0
 800eb94:	9306      	str	r3, [sp, #24]
 800eb96:	9b05      	ldr	r3, [sp, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dd05      	ble.n	800eba8 <_dtoa_r+0x828>
 800eb9c:	4651      	mov	r1, sl
 800eb9e:	461a      	mov	r2, r3
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 fc85 	bl	800f4b0 <__lshift>
 800eba6:	4682      	mov	sl, r0
 800eba8:	9b06      	ldr	r3, [sp, #24]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	dd05      	ble.n	800ebba <_dtoa_r+0x83a>
 800ebae:	4631      	mov	r1, r6
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f000 fc7c 	bl	800f4b0 <__lshift>
 800ebb8:	4606      	mov	r6, r0
 800ebba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d072      	beq.n	800eca6 <_dtoa_r+0x926>
 800ebc0:	4631      	mov	r1, r6
 800ebc2:	4650      	mov	r0, sl
 800ebc4:	f000 fce0 	bl	800f588 <__mcmp>
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	da6c      	bge.n	800eca6 <_dtoa_r+0x926>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4651      	mov	r1, sl
 800ebd0:	220a      	movs	r2, #10
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	f000 fa74 	bl	800f0c0 <__multadd>
 800ebd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ebde:	4682      	mov	sl, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 81b0 	beq.w	800ef46 <_dtoa_r+0xbc6>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	4639      	mov	r1, r7
 800ebea:	220a      	movs	r2, #10
 800ebec:	4620      	mov	r0, r4
 800ebee:	f000 fa67 	bl	800f0c0 <__multadd>
 800ebf2:	9b01      	ldr	r3, [sp, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	4607      	mov	r7, r0
 800ebf8:	f300 8096 	bgt.w	800ed28 <_dtoa_r+0x9a8>
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	dc59      	bgt.n	800ecb6 <_dtoa_r+0x936>
 800ec02:	e091      	b.n	800ed28 <_dtoa_r+0x9a8>
 800ec04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ec0a:	e758      	b.n	800eabe <_dtoa_r+0x73e>
 800ec0c:	9b04      	ldr	r3, [sp, #16]
 800ec0e:	1e5e      	subs	r6, r3, #1
 800ec10:	9b08      	ldr	r3, [sp, #32]
 800ec12:	42b3      	cmp	r3, r6
 800ec14:	bfbf      	itttt	lt
 800ec16:	9b08      	ldrlt	r3, [sp, #32]
 800ec18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ec1a:	9608      	strlt	r6, [sp, #32]
 800ec1c:	1af3      	sublt	r3, r6, r3
 800ec1e:	bfb4      	ite	lt
 800ec20:	18d2      	addlt	r2, r2, r3
 800ec22:	1b9e      	subge	r6, r3, r6
 800ec24:	9b04      	ldr	r3, [sp, #16]
 800ec26:	bfbc      	itt	lt
 800ec28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ec2a:	2600      	movlt	r6, #0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	bfb7      	itett	lt
 800ec30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ec34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ec38:	1a9d      	sublt	r5, r3, r2
 800ec3a:	2300      	movlt	r3, #0
 800ec3c:	e741      	b.n	800eac2 <_dtoa_r+0x742>
 800ec3e:	9e08      	ldr	r6, [sp, #32]
 800ec40:	9d05      	ldr	r5, [sp, #20]
 800ec42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ec44:	e748      	b.n	800ead8 <_dtoa_r+0x758>
 800ec46:	9a08      	ldr	r2, [sp, #32]
 800ec48:	e770      	b.n	800eb2c <_dtoa_r+0x7ac>
 800ec4a:	9b07      	ldr	r3, [sp, #28]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	dc19      	bgt.n	800ec84 <_dtoa_r+0x904>
 800ec50:	9b02      	ldr	r3, [sp, #8]
 800ec52:	b9bb      	cbnz	r3, 800ec84 <_dtoa_r+0x904>
 800ec54:	9b03      	ldr	r3, [sp, #12]
 800ec56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec5a:	b99b      	cbnz	r3, 800ec84 <_dtoa_r+0x904>
 800ec5c:	9b03      	ldr	r3, [sp, #12]
 800ec5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec62:	0d1b      	lsrs	r3, r3, #20
 800ec64:	051b      	lsls	r3, r3, #20
 800ec66:	b183      	cbz	r3, 800ec8a <_dtoa_r+0x90a>
 800ec68:	9b05      	ldr	r3, [sp, #20]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	9305      	str	r3, [sp, #20]
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	3301      	adds	r3, #1
 800ec72:	9306      	str	r3, [sp, #24]
 800ec74:	f04f 0801 	mov.w	r8, #1
 800ec78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f47f af6f 	bne.w	800eb5e <_dtoa_r+0x7de>
 800ec80:	2001      	movs	r0, #1
 800ec82:	e774      	b.n	800eb6e <_dtoa_r+0x7ee>
 800ec84:	f04f 0800 	mov.w	r8, #0
 800ec88:	e7f6      	b.n	800ec78 <_dtoa_r+0x8f8>
 800ec8a:	4698      	mov	r8, r3
 800ec8c:	e7f4      	b.n	800ec78 <_dtoa_r+0x8f8>
 800ec8e:	d082      	beq.n	800eb96 <_dtoa_r+0x816>
 800ec90:	9a05      	ldr	r2, [sp, #20]
 800ec92:	331c      	adds	r3, #28
 800ec94:	441a      	add	r2, r3
 800ec96:	9205      	str	r2, [sp, #20]
 800ec98:	9a06      	ldr	r2, [sp, #24]
 800ec9a:	441a      	add	r2, r3
 800ec9c:	441d      	add	r5, r3
 800ec9e:	9206      	str	r2, [sp, #24]
 800eca0:	e779      	b.n	800eb96 <_dtoa_r+0x816>
 800eca2:	4603      	mov	r3, r0
 800eca4:	e7f4      	b.n	800ec90 <_dtoa_r+0x910>
 800eca6:	9b04      	ldr	r3, [sp, #16]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	dc37      	bgt.n	800ed1c <_dtoa_r+0x99c>
 800ecac:	9b07      	ldr	r3, [sp, #28]
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	dd34      	ble.n	800ed1c <_dtoa_r+0x99c>
 800ecb2:	9b04      	ldr	r3, [sp, #16]
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	9b01      	ldr	r3, [sp, #4]
 800ecb8:	b963      	cbnz	r3, 800ecd4 <_dtoa_r+0x954>
 800ecba:	4631      	mov	r1, r6
 800ecbc:	2205      	movs	r2, #5
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 f9fe 	bl	800f0c0 <__multadd>
 800ecc4:	4601      	mov	r1, r0
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	4650      	mov	r0, sl
 800ecca:	f000 fc5d 	bl	800f588 <__mcmp>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	f73f adbb 	bgt.w	800e84a <_dtoa_r+0x4ca>
 800ecd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecd6:	9d00      	ldr	r5, [sp, #0]
 800ecd8:	ea6f 0b03 	mvn.w	fp, r3
 800ecdc:	f04f 0800 	mov.w	r8, #0
 800ece0:	4631      	mov	r1, r6
 800ece2:	4620      	mov	r0, r4
 800ece4:	f000 f9ca 	bl	800f07c <_Bfree>
 800ece8:	2f00      	cmp	r7, #0
 800ecea:	f43f aeab 	beq.w	800ea44 <_dtoa_r+0x6c4>
 800ecee:	f1b8 0f00 	cmp.w	r8, #0
 800ecf2:	d005      	beq.n	800ed00 <_dtoa_r+0x980>
 800ecf4:	45b8      	cmp	r8, r7
 800ecf6:	d003      	beq.n	800ed00 <_dtoa_r+0x980>
 800ecf8:	4641      	mov	r1, r8
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f000 f9be 	bl	800f07c <_Bfree>
 800ed00:	4639      	mov	r1, r7
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 f9ba 	bl	800f07c <_Bfree>
 800ed08:	e69c      	b.n	800ea44 <_dtoa_r+0x6c4>
 800ed0a:	2600      	movs	r6, #0
 800ed0c:	4637      	mov	r7, r6
 800ed0e:	e7e1      	b.n	800ecd4 <_dtoa_r+0x954>
 800ed10:	46bb      	mov	fp, r7
 800ed12:	4637      	mov	r7, r6
 800ed14:	e599      	b.n	800e84a <_dtoa_r+0x4ca>
 800ed16:	bf00      	nop
 800ed18:	40240000 	.word	0x40240000
 800ed1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 80c8 	beq.w	800eeb4 <_dtoa_r+0xb34>
 800ed24:	9b04      	ldr	r3, [sp, #16]
 800ed26:	9301      	str	r3, [sp, #4]
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	dd05      	ble.n	800ed38 <_dtoa_r+0x9b8>
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	462a      	mov	r2, r5
 800ed30:	4620      	mov	r0, r4
 800ed32:	f000 fbbd 	bl	800f4b0 <__lshift>
 800ed36:	4607      	mov	r7, r0
 800ed38:	f1b8 0f00 	cmp.w	r8, #0
 800ed3c:	d05b      	beq.n	800edf6 <_dtoa_r+0xa76>
 800ed3e:	6879      	ldr	r1, [r7, #4]
 800ed40:	4620      	mov	r0, r4
 800ed42:	f000 f95b 	bl	800effc <_Balloc>
 800ed46:	4605      	mov	r5, r0
 800ed48:	b928      	cbnz	r0, 800ed56 <_dtoa_r+0x9d6>
 800ed4a:	4b83      	ldr	r3, [pc, #524]	; (800ef58 <_dtoa_r+0xbd8>)
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ed52:	f7ff bb2e 	b.w	800e3b2 <_dtoa_r+0x32>
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	3202      	adds	r2, #2
 800ed5a:	0092      	lsls	r2, r2, #2
 800ed5c:	f107 010c 	add.w	r1, r7, #12
 800ed60:	300c      	adds	r0, #12
 800ed62:	f7ff fa6e 	bl	800e242 <memcpy>
 800ed66:	2201      	movs	r2, #1
 800ed68:	4629      	mov	r1, r5
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 fba0 	bl	800f4b0 <__lshift>
 800ed70:	9b00      	ldr	r3, [sp, #0]
 800ed72:	3301      	adds	r3, #1
 800ed74:	9304      	str	r3, [sp, #16]
 800ed76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	9308      	str	r3, [sp, #32]
 800ed7e:	9b02      	ldr	r3, [sp, #8]
 800ed80:	f003 0301 	and.w	r3, r3, #1
 800ed84:	46b8      	mov	r8, r7
 800ed86:	9306      	str	r3, [sp, #24]
 800ed88:	4607      	mov	r7, r0
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	4631      	mov	r1, r6
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	4650      	mov	r0, sl
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	f7ff fa6a 	bl	800e26c <quorem>
 800ed98:	4641      	mov	r1, r8
 800ed9a:	9002      	str	r0, [sp, #8]
 800ed9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eda0:	4650      	mov	r0, sl
 800eda2:	f000 fbf1 	bl	800f588 <__mcmp>
 800eda6:	463a      	mov	r2, r7
 800eda8:	9005      	str	r0, [sp, #20]
 800edaa:	4631      	mov	r1, r6
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fc07 	bl	800f5c0 <__mdiff>
 800edb2:	68c2      	ldr	r2, [r0, #12]
 800edb4:	4605      	mov	r5, r0
 800edb6:	bb02      	cbnz	r2, 800edfa <_dtoa_r+0xa7a>
 800edb8:	4601      	mov	r1, r0
 800edba:	4650      	mov	r0, sl
 800edbc:	f000 fbe4 	bl	800f588 <__mcmp>
 800edc0:	4602      	mov	r2, r0
 800edc2:	4629      	mov	r1, r5
 800edc4:	4620      	mov	r0, r4
 800edc6:	9209      	str	r2, [sp, #36]	; 0x24
 800edc8:	f000 f958 	bl	800f07c <_Bfree>
 800edcc:	9b07      	ldr	r3, [sp, #28]
 800edce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edd0:	9d04      	ldr	r5, [sp, #16]
 800edd2:	ea43 0102 	orr.w	r1, r3, r2
 800edd6:	9b06      	ldr	r3, [sp, #24]
 800edd8:	4319      	orrs	r1, r3
 800edda:	d110      	bne.n	800edfe <_dtoa_r+0xa7e>
 800eddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ede0:	d029      	beq.n	800ee36 <_dtoa_r+0xab6>
 800ede2:	9b05      	ldr	r3, [sp, #20]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dd02      	ble.n	800edee <_dtoa_r+0xa6e>
 800ede8:	9b02      	ldr	r3, [sp, #8]
 800edea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	f883 9000 	strb.w	r9, [r3]
 800edf4:	e774      	b.n	800ece0 <_dtoa_r+0x960>
 800edf6:	4638      	mov	r0, r7
 800edf8:	e7ba      	b.n	800ed70 <_dtoa_r+0x9f0>
 800edfa:	2201      	movs	r2, #1
 800edfc:	e7e1      	b.n	800edc2 <_dtoa_r+0xa42>
 800edfe:	9b05      	ldr	r3, [sp, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	db04      	blt.n	800ee0e <_dtoa_r+0xa8e>
 800ee04:	9907      	ldr	r1, [sp, #28]
 800ee06:	430b      	orrs	r3, r1
 800ee08:	9906      	ldr	r1, [sp, #24]
 800ee0a:	430b      	orrs	r3, r1
 800ee0c:	d120      	bne.n	800ee50 <_dtoa_r+0xad0>
 800ee0e:	2a00      	cmp	r2, #0
 800ee10:	dded      	ble.n	800edee <_dtoa_r+0xa6e>
 800ee12:	4651      	mov	r1, sl
 800ee14:	2201      	movs	r2, #1
 800ee16:	4620      	mov	r0, r4
 800ee18:	f000 fb4a 	bl	800f4b0 <__lshift>
 800ee1c:	4631      	mov	r1, r6
 800ee1e:	4682      	mov	sl, r0
 800ee20:	f000 fbb2 	bl	800f588 <__mcmp>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	dc03      	bgt.n	800ee30 <_dtoa_r+0xab0>
 800ee28:	d1e1      	bne.n	800edee <_dtoa_r+0xa6e>
 800ee2a:	f019 0f01 	tst.w	r9, #1
 800ee2e:	d0de      	beq.n	800edee <_dtoa_r+0xa6e>
 800ee30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee34:	d1d8      	bne.n	800ede8 <_dtoa_r+0xa68>
 800ee36:	9a01      	ldr	r2, [sp, #4]
 800ee38:	2339      	movs	r3, #57	; 0x39
 800ee3a:	7013      	strb	r3, [r2, #0]
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	461d      	mov	r5, r3
 800ee40:	3b01      	subs	r3, #1
 800ee42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee46:	2a39      	cmp	r2, #57	; 0x39
 800ee48:	d06c      	beq.n	800ef24 <_dtoa_r+0xba4>
 800ee4a:	3201      	adds	r2, #1
 800ee4c:	701a      	strb	r2, [r3, #0]
 800ee4e:	e747      	b.n	800ece0 <_dtoa_r+0x960>
 800ee50:	2a00      	cmp	r2, #0
 800ee52:	dd07      	ble.n	800ee64 <_dtoa_r+0xae4>
 800ee54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ee58:	d0ed      	beq.n	800ee36 <_dtoa_r+0xab6>
 800ee5a:	9a01      	ldr	r2, [sp, #4]
 800ee5c:	f109 0301 	add.w	r3, r9, #1
 800ee60:	7013      	strb	r3, [r2, #0]
 800ee62:	e73d      	b.n	800ece0 <_dtoa_r+0x960>
 800ee64:	9b04      	ldr	r3, [sp, #16]
 800ee66:	9a08      	ldr	r2, [sp, #32]
 800ee68:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d043      	beq.n	800eef8 <_dtoa_r+0xb78>
 800ee70:	4651      	mov	r1, sl
 800ee72:	2300      	movs	r3, #0
 800ee74:	220a      	movs	r2, #10
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 f922 	bl	800f0c0 <__multadd>
 800ee7c:	45b8      	cmp	r8, r7
 800ee7e:	4682      	mov	sl, r0
 800ee80:	f04f 0300 	mov.w	r3, #0
 800ee84:	f04f 020a 	mov.w	r2, #10
 800ee88:	4641      	mov	r1, r8
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	d107      	bne.n	800ee9e <_dtoa_r+0xb1e>
 800ee8e:	f000 f917 	bl	800f0c0 <__multadd>
 800ee92:	4680      	mov	r8, r0
 800ee94:	4607      	mov	r7, r0
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	9304      	str	r3, [sp, #16]
 800ee9c:	e775      	b.n	800ed8a <_dtoa_r+0xa0a>
 800ee9e:	f000 f90f 	bl	800f0c0 <__multadd>
 800eea2:	4639      	mov	r1, r7
 800eea4:	4680      	mov	r8, r0
 800eea6:	2300      	movs	r3, #0
 800eea8:	220a      	movs	r2, #10
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f908 	bl	800f0c0 <__multadd>
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	e7f0      	b.n	800ee96 <_dtoa_r+0xb16>
 800eeb4:	9b04      	ldr	r3, [sp, #16]
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	9d00      	ldr	r5, [sp, #0]
 800eeba:	4631      	mov	r1, r6
 800eebc:	4650      	mov	r0, sl
 800eebe:	f7ff f9d5 	bl	800e26c <quorem>
 800eec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eec6:	9b00      	ldr	r3, [sp, #0]
 800eec8:	f805 9b01 	strb.w	r9, [r5], #1
 800eecc:	1aea      	subs	r2, r5, r3
 800eece:	9b01      	ldr	r3, [sp, #4]
 800eed0:	4293      	cmp	r3, r2
 800eed2:	dd07      	ble.n	800eee4 <_dtoa_r+0xb64>
 800eed4:	4651      	mov	r1, sl
 800eed6:	2300      	movs	r3, #0
 800eed8:	220a      	movs	r2, #10
 800eeda:	4620      	mov	r0, r4
 800eedc:	f000 f8f0 	bl	800f0c0 <__multadd>
 800eee0:	4682      	mov	sl, r0
 800eee2:	e7ea      	b.n	800eeba <_dtoa_r+0xb3a>
 800eee4:	9b01      	ldr	r3, [sp, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	bfc8      	it	gt
 800eeea:	461d      	movgt	r5, r3
 800eeec:	9b00      	ldr	r3, [sp, #0]
 800eeee:	bfd8      	it	le
 800eef0:	2501      	movle	r5, #1
 800eef2:	441d      	add	r5, r3
 800eef4:	f04f 0800 	mov.w	r8, #0
 800eef8:	4651      	mov	r1, sl
 800eefa:	2201      	movs	r2, #1
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 fad7 	bl	800f4b0 <__lshift>
 800ef02:	4631      	mov	r1, r6
 800ef04:	4682      	mov	sl, r0
 800ef06:	f000 fb3f 	bl	800f588 <__mcmp>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	dc96      	bgt.n	800ee3c <_dtoa_r+0xabc>
 800ef0e:	d102      	bne.n	800ef16 <_dtoa_r+0xb96>
 800ef10:	f019 0f01 	tst.w	r9, #1
 800ef14:	d192      	bne.n	800ee3c <_dtoa_r+0xabc>
 800ef16:	462b      	mov	r3, r5
 800ef18:	461d      	mov	r5, r3
 800ef1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef1e:	2a30      	cmp	r2, #48	; 0x30
 800ef20:	d0fa      	beq.n	800ef18 <_dtoa_r+0xb98>
 800ef22:	e6dd      	b.n	800ece0 <_dtoa_r+0x960>
 800ef24:	9a00      	ldr	r2, [sp, #0]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d189      	bne.n	800ee3e <_dtoa_r+0xabe>
 800ef2a:	f10b 0b01 	add.w	fp, fp, #1
 800ef2e:	2331      	movs	r3, #49	; 0x31
 800ef30:	e796      	b.n	800ee60 <_dtoa_r+0xae0>
 800ef32:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <_dtoa_r+0xbdc>)
 800ef34:	f7ff ba99 	b.w	800e46a <_dtoa_r+0xea>
 800ef38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f47f aa6d 	bne.w	800e41a <_dtoa_r+0x9a>
 800ef40:	4b07      	ldr	r3, [pc, #28]	; (800ef60 <_dtoa_r+0xbe0>)
 800ef42:	f7ff ba92 	b.w	800e46a <_dtoa_r+0xea>
 800ef46:	9b01      	ldr	r3, [sp, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	dcb5      	bgt.n	800eeb8 <_dtoa_r+0xb38>
 800ef4c:	9b07      	ldr	r3, [sp, #28]
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	f73f aeb1 	bgt.w	800ecb6 <_dtoa_r+0x936>
 800ef54:	e7b0      	b.n	800eeb8 <_dtoa_r+0xb38>
 800ef56:	bf00      	nop
 800ef58:	0801234a 	.word	0x0801234a
 800ef5c:	080122a5 	.word	0x080122a5
 800ef60:	080122ce 	.word	0x080122ce

0800ef64 <_free_r>:
 800ef64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef66:	2900      	cmp	r1, #0
 800ef68:	d044      	beq.n	800eff4 <_free_r+0x90>
 800ef6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef6e:	9001      	str	r0, [sp, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f1a1 0404 	sub.w	r4, r1, #4
 800ef76:	bfb8      	it	lt
 800ef78:	18e4      	addlt	r4, r4, r3
 800ef7a:	f7fd ff81 	bl	800ce80 <__malloc_lock>
 800ef7e:	4a1e      	ldr	r2, [pc, #120]	; (800eff8 <_free_r+0x94>)
 800ef80:	9801      	ldr	r0, [sp, #4]
 800ef82:	6813      	ldr	r3, [r2, #0]
 800ef84:	b933      	cbnz	r3, 800ef94 <_free_r+0x30>
 800ef86:	6063      	str	r3, [r4, #4]
 800ef88:	6014      	str	r4, [r2, #0]
 800ef8a:	b003      	add	sp, #12
 800ef8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef90:	f7fd bf7c 	b.w	800ce8c <__malloc_unlock>
 800ef94:	42a3      	cmp	r3, r4
 800ef96:	d908      	bls.n	800efaa <_free_r+0x46>
 800ef98:	6825      	ldr	r5, [r4, #0]
 800ef9a:	1961      	adds	r1, r4, r5
 800ef9c:	428b      	cmp	r3, r1
 800ef9e:	bf01      	itttt	eq
 800efa0:	6819      	ldreq	r1, [r3, #0]
 800efa2:	685b      	ldreq	r3, [r3, #4]
 800efa4:	1949      	addeq	r1, r1, r5
 800efa6:	6021      	streq	r1, [r4, #0]
 800efa8:	e7ed      	b.n	800ef86 <_free_r+0x22>
 800efaa:	461a      	mov	r2, r3
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	b10b      	cbz	r3, 800efb4 <_free_r+0x50>
 800efb0:	42a3      	cmp	r3, r4
 800efb2:	d9fa      	bls.n	800efaa <_free_r+0x46>
 800efb4:	6811      	ldr	r1, [r2, #0]
 800efb6:	1855      	adds	r5, r2, r1
 800efb8:	42a5      	cmp	r5, r4
 800efba:	d10b      	bne.n	800efd4 <_free_r+0x70>
 800efbc:	6824      	ldr	r4, [r4, #0]
 800efbe:	4421      	add	r1, r4
 800efc0:	1854      	adds	r4, r2, r1
 800efc2:	42a3      	cmp	r3, r4
 800efc4:	6011      	str	r1, [r2, #0]
 800efc6:	d1e0      	bne.n	800ef8a <_free_r+0x26>
 800efc8:	681c      	ldr	r4, [r3, #0]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	6053      	str	r3, [r2, #4]
 800efce:	440c      	add	r4, r1
 800efd0:	6014      	str	r4, [r2, #0]
 800efd2:	e7da      	b.n	800ef8a <_free_r+0x26>
 800efd4:	d902      	bls.n	800efdc <_free_r+0x78>
 800efd6:	230c      	movs	r3, #12
 800efd8:	6003      	str	r3, [r0, #0]
 800efda:	e7d6      	b.n	800ef8a <_free_r+0x26>
 800efdc:	6825      	ldr	r5, [r4, #0]
 800efde:	1961      	adds	r1, r4, r5
 800efe0:	428b      	cmp	r3, r1
 800efe2:	bf04      	itt	eq
 800efe4:	6819      	ldreq	r1, [r3, #0]
 800efe6:	685b      	ldreq	r3, [r3, #4]
 800efe8:	6063      	str	r3, [r4, #4]
 800efea:	bf04      	itt	eq
 800efec:	1949      	addeq	r1, r1, r5
 800efee:	6021      	streq	r1, [r4, #0]
 800eff0:	6054      	str	r4, [r2, #4]
 800eff2:	e7ca      	b.n	800ef8a <_free_r+0x26>
 800eff4:	b003      	add	sp, #12
 800eff6:	bd30      	pop	{r4, r5, pc}
 800eff8:	20002ce4 	.word	0x20002ce4

0800effc <_Balloc>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	69c6      	ldr	r6, [r0, #28]
 800f000:	4604      	mov	r4, r0
 800f002:	460d      	mov	r5, r1
 800f004:	b976      	cbnz	r6, 800f024 <_Balloc+0x28>
 800f006:	2010      	movs	r0, #16
 800f008:	f7fd fe8a 	bl	800cd20 <malloc>
 800f00c:	4602      	mov	r2, r0
 800f00e:	61e0      	str	r0, [r4, #28]
 800f010:	b920      	cbnz	r0, 800f01c <_Balloc+0x20>
 800f012:	4b18      	ldr	r3, [pc, #96]	; (800f074 <_Balloc+0x78>)
 800f014:	4818      	ldr	r0, [pc, #96]	; (800f078 <_Balloc+0x7c>)
 800f016:	216b      	movs	r1, #107	; 0x6b
 800f018:	f001 fed6 	bl	8010dc8 <__assert_func>
 800f01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f020:	6006      	str	r6, [r0, #0]
 800f022:	60c6      	str	r6, [r0, #12]
 800f024:	69e6      	ldr	r6, [r4, #28]
 800f026:	68f3      	ldr	r3, [r6, #12]
 800f028:	b183      	cbz	r3, 800f04c <_Balloc+0x50>
 800f02a:	69e3      	ldr	r3, [r4, #28]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f032:	b9b8      	cbnz	r0, 800f064 <_Balloc+0x68>
 800f034:	2101      	movs	r1, #1
 800f036:	fa01 f605 	lsl.w	r6, r1, r5
 800f03a:	1d72      	adds	r2, r6, #5
 800f03c:	0092      	lsls	r2, r2, #2
 800f03e:	4620      	mov	r0, r4
 800f040:	f001 fee0 	bl	8010e04 <_calloc_r>
 800f044:	b160      	cbz	r0, 800f060 <_Balloc+0x64>
 800f046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f04a:	e00e      	b.n	800f06a <_Balloc+0x6e>
 800f04c:	2221      	movs	r2, #33	; 0x21
 800f04e:	2104      	movs	r1, #4
 800f050:	4620      	mov	r0, r4
 800f052:	f001 fed7 	bl	8010e04 <_calloc_r>
 800f056:	69e3      	ldr	r3, [r4, #28]
 800f058:	60f0      	str	r0, [r6, #12]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1e4      	bne.n	800f02a <_Balloc+0x2e>
 800f060:	2000      	movs	r0, #0
 800f062:	bd70      	pop	{r4, r5, r6, pc}
 800f064:	6802      	ldr	r2, [r0, #0]
 800f066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f06a:	2300      	movs	r3, #0
 800f06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f070:	e7f7      	b.n	800f062 <_Balloc+0x66>
 800f072:	bf00      	nop
 800f074:	080122db 	.word	0x080122db
 800f078:	0801235b 	.word	0x0801235b

0800f07c <_Bfree>:
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	69c6      	ldr	r6, [r0, #28]
 800f080:	4605      	mov	r5, r0
 800f082:	460c      	mov	r4, r1
 800f084:	b976      	cbnz	r6, 800f0a4 <_Bfree+0x28>
 800f086:	2010      	movs	r0, #16
 800f088:	f7fd fe4a 	bl	800cd20 <malloc>
 800f08c:	4602      	mov	r2, r0
 800f08e:	61e8      	str	r0, [r5, #28]
 800f090:	b920      	cbnz	r0, 800f09c <_Bfree+0x20>
 800f092:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <_Bfree+0x3c>)
 800f094:	4809      	ldr	r0, [pc, #36]	; (800f0bc <_Bfree+0x40>)
 800f096:	218f      	movs	r1, #143	; 0x8f
 800f098:	f001 fe96 	bl	8010dc8 <__assert_func>
 800f09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0a0:	6006      	str	r6, [r0, #0]
 800f0a2:	60c6      	str	r6, [r0, #12]
 800f0a4:	b13c      	cbz	r4, 800f0b6 <_Bfree+0x3a>
 800f0a6:	69eb      	ldr	r3, [r5, #28]
 800f0a8:	6862      	ldr	r2, [r4, #4]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0b0:	6021      	str	r1, [r4, #0]
 800f0b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}
 800f0b8:	080122db 	.word	0x080122db
 800f0bc:	0801235b 	.word	0x0801235b

0800f0c0 <__multadd>:
 800f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c4:	690d      	ldr	r5, [r1, #16]
 800f0c6:	4607      	mov	r7, r0
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	461e      	mov	r6, r3
 800f0cc:	f101 0c14 	add.w	ip, r1, #20
 800f0d0:	2000      	movs	r0, #0
 800f0d2:	f8dc 3000 	ldr.w	r3, [ip]
 800f0d6:	b299      	uxth	r1, r3
 800f0d8:	fb02 6101 	mla	r1, r2, r1, r6
 800f0dc:	0c1e      	lsrs	r6, r3, #16
 800f0de:	0c0b      	lsrs	r3, r1, #16
 800f0e0:	fb02 3306 	mla	r3, r2, r6, r3
 800f0e4:	b289      	uxth	r1, r1
 800f0e6:	3001      	adds	r0, #1
 800f0e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f0ec:	4285      	cmp	r5, r0
 800f0ee:	f84c 1b04 	str.w	r1, [ip], #4
 800f0f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f0f6:	dcec      	bgt.n	800f0d2 <__multadd+0x12>
 800f0f8:	b30e      	cbz	r6, 800f13e <__multadd+0x7e>
 800f0fa:	68a3      	ldr	r3, [r4, #8]
 800f0fc:	42ab      	cmp	r3, r5
 800f0fe:	dc19      	bgt.n	800f134 <__multadd+0x74>
 800f100:	6861      	ldr	r1, [r4, #4]
 800f102:	4638      	mov	r0, r7
 800f104:	3101      	adds	r1, #1
 800f106:	f7ff ff79 	bl	800effc <_Balloc>
 800f10a:	4680      	mov	r8, r0
 800f10c:	b928      	cbnz	r0, 800f11a <__multadd+0x5a>
 800f10e:	4602      	mov	r2, r0
 800f110:	4b0c      	ldr	r3, [pc, #48]	; (800f144 <__multadd+0x84>)
 800f112:	480d      	ldr	r0, [pc, #52]	; (800f148 <__multadd+0x88>)
 800f114:	21ba      	movs	r1, #186	; 0xba
 800f116:	f001 fe57 	bl	8010dc8 <__assert_func>
 800f11a:	6922      	ldr	r2, [r4, #16]
 800f11c:	3202      	adds	r2, #2
 800f11e:	f104 010c 	add.w	r1, r4, #12
 800f122:	0092      	lsls	r2, r2, #2
 800f124:	300c      	adds	r0, #12
 800f126:	f7ff f88c 	bl	800e242 <memcpy>
 800f12a:	4621      	mov	r1, r4
 800f12c:	4638      	mov	r0, r7
 800f12e:	f7ff ffa5 	bl	800f07c <_Bfree>
 800f132:	4644      	mov	r4, r8
 800f134:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f138:	3501      	adds	r5, #1
 800f13a:	615e      	str	r6, [r3, #20]
 800f13c:	6125      	str	r5, [r4, #16]
 800f13e:	4620      	mov	r0, r4
 800f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f144:	0801234a 	.word	0x0801234a
 800f148:	0801235b 	.word	0x0801235b

0800f14c <__s2b>:
 800f14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f150:	460c      	mov	r4, r1
 800f152:	4615      	mov	r5, r2
 800f154:	461f      	mov	r7, r3
 800f156:	2209      	movs	r2, #9
 800f158:	3308      	adds	r3, #8
 800f15a:	4606      	mov	r6, r0
 800f15c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f160:	2100      	movs	r1, #0
 800f162:	2201      	movs	r2, #1
 800f164:	429a      	cmp	r2, r3
 800f166:	db09      	blt.n	800f17c <__s2b+0x30>
 800f168:	4630      	mov	r0, r6
 800f16a:	f7ff ff47 	bl	800effc <_Balloc>
 800f16e:	b940      	cbnz	r0, 800f182 <__s2b+0x36>
 800f170:	4602      	mov	r2, r0
 800f172:	4b19      	ldr	r3, [pc, #100]	; (800f1d8 <__s2b+0x8c>)
 800f174:	4819      	ldr	r0, [pc, #100]	; (800f1dc <__s2b+0x90>)
 800f176:	21d3      	movs	r1, #211	; 0xd3
 800f178:	f001 fe26 	bl	8010dc8 <__assert_func>
 800f17c:	0052      	lsls	r2, r2, #1
 800f17e:	3101      	adds	r1, #1
 800f180:	e7f0      	b.n	800f164 <__s2b+0x18>
 800f182:	9b08      	ldr	r3, [sp, #32]
 800f184:	6143      	str	r3, [r0, #20]
 800f186:	2d09      	cmp	r5, #9
 800f188:	f04f 0301 	mov.w	r3, #1
 800f18c:	6103      	str	r3, [r0, #16]
 800f18e:	dd16      	ble.n	800f1be <__s2b+0x72>
 800f190:	f104 0909 	add.w	r9, r4, #9
 800f194:	46c8      	mov	r8, r9
 800f196:	442c      	add	r4, r5
 800f198:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f19c:	4601      	mov	r1, r0
 800f19e:	3b30      	subs	r3, #48	; 0x30
 800f1a0:	220a      	movs	r2, #10
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	f7ff ff8c 	bl	800f0c0 <__multadd>
 800f1a8:	45a0      	cmp	r8, r4
 800f1aa:	d1f5      	bne.n	800f198 <__s2b+0x4c>
 800f1ac:	f1a5 0408 	sub.w	r4, r5, #8
 800f1b0:	444c      	add	r4, r9
 800f1b2:	1b2d      	subs	r5, r5, r4
 800f1b4:	1963      	adds	r3, r4, r5
 800f1b6:	42bb      	cmp	r3, r7
 800f1b8:	db04      	blt.n	800f1c4 <__s2b+0x78>
 800f1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1be:	340a      	adds	r4, #10
 800f1c0:	2509      	movs	r5, #9
 800f1c2:	e7f6      	b.n	800f1b2 <__s2b+0x66>
 800f1c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f1c8:	4601      	mov	r1, r0
 800f1ca:	3b30      	subs	r3, #48	; 0x30
 800f1cc:	220a      	movs	r2, #10
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	f7ff ff76 	bl	800f0c0 <__multadd>
 800f1d4:	e7ee      	b.n	800f1b4 <__s2b+0x68>
 800f1d6:	bf00      	nop
 800f1d8:	0801234a 	.word	0x0801234a
 800f1dc:	0801235b 	.word	0x0801235b

0800f1e0 <__hi0bits>:
 800f1e0:	0c03      	lsrs	r3, r0, #16
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	b9d3      	cbnz	r3, 800f21c <__hi0bits+0x3c>
 800f1e6:	0400      	lsls	r0, r0, #16
 800f1e8:	2310      	movs	r3, #16
 800f1ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f1ee:	bf04      	itt	eq
 800f1f0:	0200      	lsleq	r0, r0, #8
 800f1f2:	3308      	addeq	r3, #8
 800f1f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f1f8:	bf04      	itt	eq
 800f1fa:	0100      	lsleq	r0, r0, #4
 800f1fc:	3304      	addeq	r3, #4
 800f1fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f202:	bf04      	itt	eq
 800f204:	0080      	lsleq	r0, r0, #2
 800f206:	3302      	addeq	r3, #2
 800f208:	2800      	cmp	r0, #0
 800f20a:	db05      	blt.n	800f218 <__hi0bits+0x38>
 800f20c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f210:	f103 0301 	add.w	r3, r3, #1
 800f214:	bf08      	it	eq
 800f216:	2320      	moveq	r3, #32
 800f218:	4618      	mov	r0, r3
 800f21a:	4770      	bx	lr
 800f21c:	2300      	movs	r3, #0
 800f21e:	e7e4      	b.n	800f1ea <__hi0bits+0xa>

0800f220 <__lo0bits>:
 800f220:	6803      	ldr	r3, [r0, #0]
 800f222:	f013 0207 	ands.w	r2, r3, #7
 800f226:	d00c      	beq.n	800f242 <__lo0bits+0x22>
 800f228:	07d9      	lsls	r1, r3, #31
 800f22a:	d422      	bmi.n	800f272 <__lo0bits+0x52>
 800f22c:	079a      	lsls	r2, r3, #30
 800f22e:	bf49      	itett	mi
 800f230:	085b      	lsrmi	r3, r3, #1
 800f232:	089b      	lsrpl	r3, r3, #2
 800f234:	6003      	strmi	r3, [r0, #0]
 800f236:	2201      	movmi	r2, #1
 800f238:	bf5c      	itt	pl
 800f23a:	6003      	strpl	r3, [r0, #0]
 800f23c:	2202      	movpl	r2, #2
 800f23e:	4610      	mov	r0, r2
 800f240:	4770      	bx	lr
 800f242:	b299      	uxth	r1, r3
 800f244:	b909      	cbnz	r1, 800f24a <__lo0bits+0x2a>
 800f246:	0c1b      	lsrs	r3, r3, #16
 800f248:	2210      	movs	r2, #16
 800f24a:	b2d9      	uxtb	r1, r3
 800f24c:	b909      	cbnz	r1, 800f252 <__lo0bits+0x32>
 800f24e:	3208      	adds	r2, #8
 800f250:	0a1b      	lsrs	r3, r3, #8
 800f252:	0719      	lsls	r1, r3, #28
 800f254:	bf04      	itt	eq
 800f256:	091b      	lsreq	r3, r3, #4
 800f258:	3204      	addeq	r2, #4
 800f25a:	0799      	lsls	r1, r3, #30
 800f25c:	bf04      	itt	eq
 800f25e:	089b      	lsreq	r3, r3, #2
 800f260:	3202      	addeq	r2, #2
 800f262:	07d9      	lsls	r1, r3, #31
 800f264:	d403      	bmi.n	800f26e <__lo0bits+0x4e>
 800f266:	085b      	lsrs	r3, r3, #1
 800f268:	f102 0201 	add.w	r2, r2, #1
 800f26c:	d003      	beq.n	800f276 <__lo0bits+0x56>
 800f26e:	6003      	str	r3, [r0, #0]
 800f270:	e7e5      	b.n	800f23e <__lo0bits+0x1e>
 800f272:	2200      	movs	r2, #0
 800f274:	e7e3      	b.n	800f23e <__lo0bits+0x1e>
 800f276:	2220      	movs	r2, #32
 800f278:	e7e1      	b.n	800f23e <__lo0bits+0x1e>
	...

0800f27c <__i2b>:
 800f27c:	b510      	push	{r4, lr}
 800f27e:	460c      	mov	r4, r1
 800f280:	2101      	movs	r1, #1
 800f282:	f7ff febb 	bl	800effc <_Balloc>
 800f286:	4602      	mov	r2, r0
 800f288:	b928      	cbnz	r0, 800f296 <__i2b+0x1a>
 800f28a:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <__i2b+0x24>)
 800f28c:	4805      	ldr	r0, [pc, #20]	; (800f2a4 <__i2b+0x28>)
 800f28e:	f240 1145 	movw	r1, #325	; 0x145
 800f292:	f001 fd99 	bl	8010dc8 <__assert_func>
 800f296:	2301      	movs	r3, #1
 800f298:	6144      	str	r4, [r0, #20]
 800f29a:	6103      	str	r3, [r0, #16]
 800f29c:	bd10      	pop	{r4, pc}
 800f29e:	bf00      	nop
 800f2a0:	0801234a 	.word	0x0801234a
 800f2a4:	0801235b 	.word	0x0801235b

0800f2a8 <__multiply>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	4691      	mov	r9, r2
 800f2ae:	690a      	ldr	r2, [r1, #16]
 800f2b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	bfb8      	it	lt
 800f2b8:	460b      	movlt	r3, r1
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	bfbc      	itt	lt
 800f2be:	464c      	movlt	r4, r9
 800f2c0:	4699      	movlt	r9, r3
 800f2c2:	6927      	ldr	r7, [r4, #16]
 800f2c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2c8:	68a3      	ldr	r3, [r4, #8]
 800f2ca:	6861      	ldr	r1, [r4, #4]
 800f2cc:	eb07 060a 	add.w	r6, r7, sl
 800f2d0:	42b3      	cmp	r3, r6
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	bfb8      	it	lt
 800f2d6:	3101      	addlt	r1, #1
 800f2d8:	f7ff fe90 	bl	800effc <_Balloc>
 800f2dc:	b930      	cbnz	r0, 800f2ec <__multiply+0x44>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	4b44      	ldr	r3, [pc, #272]	; (800f3f4 <__multiply+0x14c>)
 800f2e2:	4845      	ldr	r0, [pc, #276]	; (800f3f8 <__multiply+0x150>)
 800f2e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f2e8:	f001 fd6e 	bl	8010dc8 <__assert_func>
 800f2ec:	f100 0514 	add.w	r5, r0, #20
 800f2f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2f4:	462b      	mov	r3, r5
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	4543      	cmp	r3, r8
 800f2fa:	d321      	bcc.n	800f340 <__multiply+0x98>
 800f2fc:	f104 0314 	add.w	r3, r4, #20
 800f300:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f304:	f109 0314 	add.w	r3, r9, #20
 800f308:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f30c:	9202      	str	r2, [sp, #8]
 800f30e:	1b3a      	subs	r2, r7, r4
 800f310:	3a15      	subs	r2, #21
 800f312:	f022 0203 	bic.w	r2, r2, #3
 800f316:	3204      	adds	r2, #4
 800f318:	f104 0115 	add.w	r1, r4, #21
 800f31c:	428f      	cmp	r7, r1
 800f31e:	bf38      	it	cc
 800f320:	2204      	movcc	r2, #4
 800f322:	9201      	str	r2, [sp, #4]
 800f324:	9a02      	ldr	r2, [sp, #8]
 800f326:	9303      	str	r3, [sp, #12]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d80c      	bhi.n	800f346 <__multiply+0x9e>
 800f32c:	2e00      	cmp	r6, #0
 800f32e:	dd03      	ble.n	800f338 <__multiply+0x90>
 800f330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f334:	2b00      	cmp	r3, #0
 800f336:	d05b      	beq.n	800f3f0 <__multiply+0x148>
 800f338:	6106      	str	r6, [r0, #16]
 800f33a:	b005      	add	sp, #20
 800f33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f340:	f843 2b04 	str.w	r2, [r3], #4
 800f344:	e7d8      	b.n	800f2f8 <__multiply+0x50>
 800f346:	f8b3 a000 	ldrh.w	sl, [r3]
 800f34a:	f1ba 0f00 	cmp.w	sl, #0
 800f34e:	d024      	beq.n	800f39a <__multiply+0xf2>
 800f350:	f104 0e14 	add.w	lr, r4, #20
 800f354:	46a9      	mov	r9, r5
 800f356:	f04f 0c00 	mov.w	ip, #0
 800f35a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f35e:	f8d9 1000 	ldr.w	r1, [r9]
 800f362:	fa1f fb82 	uxth.w	fp, r2
 800f366:	b289      	uxth	r1, r1
 800f368:	fb0a 110b 	mla	r1, sl, fp, r1
 800f36c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f370:	f8d9 2000 	ldr.w	r2, [r9]
 800f374:	4461      	add	r1, ip
 800f376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f37a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f37e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f382:	b289      	uxth	r1, r1
 800f384:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f388:	4577      	cmp	r7, lr
 800f38a:	f849 1b04 	str.w	r1, [r9], #4
 800f38e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f392:	d8e2      	bhi.n	800f35a <__multiply+0xb2>
 800f394:	9a01      	ldr	r2, [sp, #4]
 800f396:	f845 c002 	str.w	ip, [r5, r2]
 800f39a:	9a03      	ldr	r2, [sp, #12]
 800f39c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	f1b9 0f00 	cmp.w	r9, #0
 800f3a6:	d021      	beq.n	800f3ec <__multiply+0x144>
 800f3a8:	6829      	ldr	r1, [r5, #0]
 800f3aa:	f104 0c14 	add.w	ip, r4, #20
 800f3ae:	46ae      	mov	lr, r5
 800f3b0:	f04f 0a00 	mov.w	sl, #0
 800f3b4:	f8bc b000 	ldrh.w	fp, [ip]
 800f3b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f3bc:	fb09 220b 	mla	r2, r9, fp, r2
 800f3c0:	4452      	add	r2, sl
 800f3c2:	b289      	uxth	r1, r1
 800f3c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3c8:	f84e 1b04 	str.w	r1, [lr], #4
 800f3cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3d4:	f8be 1000 	ldrh.w	r1, [lr]
 800f3d8:	fb09 110a 	mla	r1, r9, sl, r1
 800f3dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f3e0:	4567      	cmp	r7, ip
 800f3e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3e6:	d8e5      	bhi.n	800f3b4 <__multiply+0x10c>
 800f3e8:	9a01      	ldr	r2, [sp, #4]
 800f3ea:	50a9      	str	r1, [r5, r2]
 800f3ec:	3504      	adds	r5, #4
 800f3ee:	e799      	b.n	800f324 <__multiply+0x7c>
 800f3f0:	3e01      	subs	r6, #1
 800f3f2:	e79b      	b.n	800f32c <__multiply+0x84>
 800f3f4:	0801234a 	.word	0x0801234a
 800f3f8:	0801235b 	.word	0x0801235b

0800f3fc <__pow5mult>:
 800f3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f400:	4615      	mov	r5, r2
 800f402:	f012 0203 	ands.w	r2, r2, #3
 800f406:	4606      	mov	r6, r0
 800f408:	460f      	mov	r7, r1
 800f40a:	d007      	beq.n	800f41c <__pow5mult+0x20>
 800f40c:	4c25      	ldr	r4, [pc, #148]	; (800f4a4 <__pow5mult+0xa8>)
 800f40e:	3a01      	subs	r2, #1
 800f410:	2300      	movs	r3, #0
 800f412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f416:	f7ff fe53 	bl	800f0c0 <__multadd>
 800f41a:	4607      	mov	r7, r0
 800f41c:	10ad      	asrs	r5, r5, #2
 800f41e:	d03d      	beq.n	800f49c <__pow5mult+0xa0>
 800f420:	69f4      	ldr	r4, [r6, #28]
 800f422:	b97c      	cbnz	r4, 800f444 <__pow5mult+0x48>
 800f424:	2010      	movs	r0, #16
 800f426:	f7fd fc7b 	bl	800cd20 <malloc>
 800f42a:	4602      	mov	r2, r0
 800f42c:	61f0      	str	r0, [r6, #28]
 800f42e:	b928      	cbnz	r0, 800f43c <__pow5mult+0x40>
 800f430:	4b1d      	ldr	r3, [pc, #116]	; (800f4a8 <__pow5mult+0xac>)
 800f432:	481e      	ldr	r0, [pc, #120]	; (800f4ac <__pow5mult+0xb0>)
 800f434:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f438:	f001 fcc6 	bl	8010dc8 <__assert_func>
 800f43c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f440:	6004      	str	r4, [r0, #0]
 800f442:	60c4      	str	r4, [r0, #12]
 800f444:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f44c:	b94c      	cbnz	r4, 800f462 <__pow5mult+0x66>
 800f44e:	f240 2171 	movw	r1, #625	; 0x271
 800f452:	4630      	mov	r0, r6
 800f454:	f7ff ff12 	bl	800f27c <__i2b>
 800f458:	2300      	movs	r3, #0
 800f45a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f45e:	4604      	mov	r4, r0
 800f460:	6003      	str	r3, [r0, #0]
 800f462:	f04f 0900 	mov.w	r9, #0
 800f466:	07eb      	lsls	r3, r5, #31
 800f468:	d50a      	bpl.n	800f480 <__pow5mult+0x84>
 800f46a:	4639      	mov	r1, r7
 800f46c:	4622      	mov	r2, r4
 800f46e:	4630      	mov	r0, r6
 800f470:	f7ff ff1a 	bl	800f2a8 <__multiply>
 800f474:	4639      	mov	r1, r7
 800f476:	4680      	mov	r8, r0
 800f478:	4630      	mov	r0, r6
 800f47a:	f7ff fdff 	bl	800f07c <_Bfree>
 800f47e:	4647      	mov	r7, r8
 800f480:	106d      	asrs	r5, r5, #1
 800f482:	d00b      	beq.n	800f49c <__pow5mult+0xa0>
 800f484:	6820      	ldr	r0, [r4, #0]
 800f486:	b938      	cbnz	r0, 800f498 <__pow5mult+0x9c>
 800f488:	4622      	mov	r2, r4
 800f48a:	4621      	mov	r1, r4
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff ff0b 	bl	800f2a8 <__multiply>
 800f492:	6020      	str	r0, [r4, #0]
 800f494:	f8c0 9000 	str.w	r9, [r0]
 800f498:	4604      	mov	r4, r0
 800f49a:	e7e4      	b.n	800f466 <__pow5mult+0x6a>
 800f49c:	4638      	mov	r0, r7
 800f49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4a2:	bf00      	nop
 800f4a4:	080124a8 	.word	0x080124a8
 800f4a8:	080122db 	.word	0x080122db
 800f4ac:	0801235b 	.word	0x0801235b

0800f4b0 <__lshift>:
 800f4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b4:	460c      	mov	r4, r1
 800f4b6:	6849      	ldr	r1, [r1, #4]
 800f4b8:	6923      	ldr	r3, [r4, #16]
 800f4ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4be:	68a3      	ldr	r3, [r4, #8]
 800f4c0:	4607      	mov	r7, r0
 800f4c2:	4691      	mov	r9, r2
 800f4c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4c8:	f108 0601 	add.w	r6, r8, #1
 800f4cc:	42b3      	cmp	r3, r6
 800f4ce:	db0b      	blt.n	800f4e8 <__lshift+0x38>
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	f7ff fd93 	bl	800effc <_Balloc>
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	b948      	cbnz	r0, 800f4ee <__lshift+0x3e>
 800f4da:	4602      	mov	r2, r0
 800f4dc:	4b28      	ldr	r3, [pc, #160]	; (800f580 <__lshift+0xd0>)
 800f4de:	4829      	ldr	r0, [pc, #164]	; (800f584 <__lshift+0xd4>)
 800f4e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f4e4:	f001 fc70 	bl	8010dc8 <__assert_func>
 800f4e8:	3101      	adds	r1, #1
 800f4ea:	005b      	lsls	r3, r3, #1
 800f4ec:	e7ee      	b.n	800f4cc <__lshift+0x1c>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	f100 0114 	add.w	r1, r0, #20
 800f4f4:	f100 0210 	add.w	r2, r0, #16
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	4553      	cmp	r3, sl
 800f4fc:	db33      	blt.n	800f566 <__lshift+0xb6>
 800f4fe:	6920      	ldr	r0, [r4, #16]
 800f500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f504:	f104 0314 	add.w	r3, r4, #20
 800f508:	f019 091f 	ands.w	r9, r9, #31
 800f50c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f514:	d02b      	beq.n	800f56e <__lshift+0xbe>
 800f516:	f1c9 0e20 	rsb	lr, r9, #32
 800f51a:	468a      	mov	sl, r1
 800f51c:	2200      	movs	r2, #0
 800f51e:	6818      	ldr	r0, [r3, #0]
 800f520:	fa00 f009 	lsl.w	r0, r0, r9
 800f524:	4310      	orrs	r0, r2
 800f526:	f84a 0b04 	str.w	r0, [sl], #4
 800f52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f52e:	459c      	cmp	ip, r3
 800f530:	fa22 f20e 	lsr.w	r2, r2, lr
 800f534:	d8f3      	bhi.n	800f51e <__lshift+0x6e>
 800f536:	ebac 0304 	sub.w	r3, ip, r4
 800f53a:	3b15      	subs	r3, #21
 800f53c:	f023 0303 	bic.w	r3, r3, #3
 800f540:	3304      	adds	r3, #4
 800f542:	f104 0015 	add.w	r0, r4, #21
 800f546:	4584      	cmp	ip, r0
 800f548:	bf38      	it	cc
 800f54a:	2304      	movcc	r3, #4
 800f54c:	50ca      	str	r2, [r1, r3]
 800f54e:	b10a      	cbz	r2, 800f554 <__lshift+0xa4>
 800f550:	f108 0602 	add.w	r6, r8, #2
 800f554:	3e01      	subs	r6, #1
 800f556:	4638      	mov	r0, r7
 800f558:	612e      	str	r6, [r5, #16]
 800f55a:	4621      	mov	r1, r4
 800f55c:	f7ff fd8e 	bl	800f07c <_Bfree>
 800f560:	4628      	mov	r0, r5
 800f562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f566:	f842 0f04 	str.w	r0, [r2, #4]!
 800f56a:	3301      	adds	r3, #1
 800f56c:	e7c5      	b.n	800f4fa <__lshift+0x4a>
 800f56e:	3904      	subs	r1, #4
 800f570:	f853 2b04 	ldr.w	r2, [r3], #4
 800f574:	f841 2f04 	str.w	r2, [r1, #4]!
 800f578:	459c      	cmp	ip, r3
 800f57a:	d8f9      	bhi.n	800f570 <__lshift+0xc0>
 800f57c:	e7ea      	b.n	800f554 <__lshift+0xa4>
 800f57e:	bf00      	nop
 800f580:	0801234a 	.word	0x0801234a
 800f584:	0801235b 	.word	0x0801235b

0800f588 <__mcmp>:
 800f588:	b530      	push	{r4, r5, lr}
 800f58a:	6902      	ldr	r2, [r0, #16]
 800f58c:	690c      	ldr	r4, [r1, #16]
 800f58e:	1b12      	subs	r2, r2, r4
 800f590:	d10e      	bne.n	800f5b0 <__mcmp+0x28>
 800f592:	f100 0314 	add.w	r3, r0, #20
 800f596:	3114      	adds	r1, #20
 800f598:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f59c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5a8:	42a5      	cmp	r5, r4
 800f5aa:	d003      	beq.n	800f5b4 <__mcmp+0x2c>
 800f5ac:	d305      	bcc.n	800f5ba <__mcmp+0x32>
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	bd30      	pop	{r4, r5, pc}
 800f5b4:	4283      	cmp	r3, r0
 800f5b6:	d3f3      	bcc.n	800f5a0 <__mcmp+0x18>
 800f5b8:	e7fa      	b.n	800f5b0 <__mcmp+0x28>
 800f5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5be:	e7f7      	b.n	800f5b0 <__mcmp+0x28>

0800f5c0 <__mdiff>:
 800f5c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	4606      	mov	r6, r0
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	4690      	mov	r8, r2
 800f5ce:	f7ff ffdb 	bl	800f588 <__mcmp>
 800f5d2:	1e05      	subs	r5, r0, #0
 800f5d4:	d110      	bne.n	800f5f8 <__mdiff+0x38>
 800f5d6:	4629      	mov	r1, r5
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f7ff fd0f 	bl	800effc <_Balloc>
 800f5de:	b930      	cbnz	r0, 800f5ee <__mdiff+0x2e>
 800f5e0:	4b3a      	ldr	r3, [pc, #232]	; (800f6cc <__mdiff+0x10c>)
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	f240 2137 	movw	r1, #567	; 0x237
 800f5e8:	4839      	ldr	r0, [pc, #228]	; (800f6d0 <__mdiff+0x110>)
 800f5ea:	f001 fbed 	bl	8010dc8 <__assert_func>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f8:	bfa4      	itt	ge
 800f5fa:	4643      	movge	r3, r8
 800f5fc:	46a0      	movge	r8, r4
 800f5fe:	4630      	mov	r0, r6
 800f600:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f604:	bfa6      	itte	ge
 800f606:	461c      	movge	r4, r3
 800f608:	2500      	movge	r5, #0
 800f60a:	2501      	movlt	r5, #1
 800f60c:	f7ff fcf6 	bl	800effc <_Balloc>
 800f610:	b920      	cbnz	r0, 800f61c <__mdiff+0x5c>
 800f612:	4b2e      	ldr	r3, [pc, #184]	; (800f6cc <__mdiff+0x10c>)
 800f614:	4602      	mov	r2, r0
 800f616:	f240 2145 	movw	r1, #581	; 0x245
 800f61a:	e7e5      	b.n	800f5e8 <__mdiff+0x28>
 800f61c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f620:	6926      	ldr	r6, [r4, #16]
 800f622:	60c5      	str	r5, [r0, #12]
 800f624:	f104 0914 	add.w	r9, r4, #20
 800f628:	f108 0514 	add.w	r5, r8, #20
 800f62c:	f100 0e14 	add.w	lr, r0, #20
 800f630:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f634:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f638:	f108 0210 	add.w	r2, r8, #16
 800f63c:	46f2      	mov	sl, lr
 800f63e:	2100      	movs	r1, #0
 800f640:	f859 3b04 	ldr.w	r3, [r9], #4
 800f644:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f648:	fa11 f88b 	uxtah	r8, r1, fp
 800f64c:	b299      	uxth	r1, r3
 800f64e:	0c1b      	lsrs	r3, r3, #16
 800f650:	eba8 0801 	sub.w	r8, r8, r1
 800f654:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f658:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f65c:	fa1f f888 	uxth.w	r8, r8
 800f660:	1419      	asrs	r1, r3, #16
 800f662:	454e      	cmp	r6, r9
 800f664:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f668:	f84a 3b04 	str.w	r3, [sl], #4
 800f66c:	d8e8      	bhi.n	800f640 <__mdiff+0x80>
 800f66e:	1b33      	subs	r3, r6, r4
 800f670:	3b15      	subs	r3, #21
 800f672:	f023 0303 	bic.w	r3, r3, #3
 800f676:	3304      	adds	r3, #4
 800f678:	3415      	adds	r4, #21
 800f67a:	42a6      	cmp	r6, r4
 800f67c:	bf38      	it	cc
 800f67e:	2304      	movcc	r3, #4
 800f680:	441d      	add	r5, r3
 800f682:	4473      	add	r3, lr
 800f684:	469e      	mov	lr, r3
 800f686:	462e      	mov	r6, r5
 800f688:	4566      	cmp	r6, ip
 800f68a:	d30e      	bcc.n	800f6aa <__mdiff+0xea>
 800f68c:	f10c 0203 	add.w	r2, ip, #3
 800f690:	1b52      	subs	r2, r2, r5
 800f692:	f022 0203 	bic.w	r2, r2, #3
 800f696:	3d03      	subs	r5, #3
 800f698:	45ac      	cmp	ip, r5
 800f69a:	bf38      	it	cc
 800f69c:	2200      	movcc	r2, #0
 800f69e:	4413      	add	r3, r2
 800f6a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6a4:	b17a      	cbz	r2, 800f6c6 <__mdiff+0x106>
 800f6a6:	6107      	str	r7, [r0, #16]
 800f6a8:	e7a4      	b.n	800f5f4 <__mdiff+0x34>
 800f6aa:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6ae:	fa11 f288 	uxtah	r2, r1, r8
 800f6b2:	1414      	asrs	r4, r2, #16
 800f6b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6b8:	b292      	uxth	r2, r2
 800f6ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f6be:	f84e 2b04 	str.w	r2, [lr], #4
 800f6c2:	1421      	asrs	r1, r4, #16
 800f6c4:	e7e0      	b.n	800f688 <__mdiff+0xc8>
 800f6c6:	3f01      	subs	r7, #1
 800f6c8:	e7ea      	b.n	800f6a0 <__mdiff+0xe0>
 800f6ca:	bf00      	nop
 800f6cc:	0801234a 	.word	0x0801234a
 800f6d0:	0801235b 	.word	0x0801235b

0800f6d4 <__ulp>:
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	ed8d 0b00 	vstr	d0, [sp]
 800f6da:	9a01      	ldr	r2, [sp, #4]
 800f6dc:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <__ulp+0x48>)
 800f6de:	4013      	ands	r3, r2
 800f6e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	dc08      	bgt.n	800f6fa <__ulp+0x26>
 800f6e8:	425b      	negs	r3, r3
 800f6ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f6ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6f2:	da04      	bge.n	800f6fe <__ulp+0x2a>
 800f6f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f6f8:	4113      	asrs	r3, r2
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	e008      	b.n	800f710 <__ulp+0x3c>
 800f6fe:	f1a2 0314 	sub.w	r3, r2, #20
 800f702:	2b1e      	cmp	r3, #30
 800f704:	bfda      	itte	le
 800f706:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f70a:	40da      	lsrle	r2, r3
 800f70c:	2201      	movgt	r2, #1
 800f70e:	2300      	movs	r3, #0
 800f710:	4619      	mov	r1, r3
 800f712:	4610      	mov	r0, r2
 800f714:	ec41 0b10 	vmov	d0, r0, r1
 800f718:	b002      	add	sp, #8
 800f71a:	4770      	bx	lr
 800f71c:	7ff00000 	.word	0x7ff00000

0800f720 <__b2d>:
 800f720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f724:	6906      	ldr	r6, [r0, #16]
 800f726:	f100 0814 	add.w	r8, r0, #20
 800f72a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f72e:	1f37      	subs	r7, r6, #4
 800f730:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f734:	4610      	mov	r0, r2
 800f736:	f7ff fd53 	bl	800f1e0 <__hi0bits>
 800f73a:	f1c0 0320 	rsb	r3, r0, #32
 800f73e:	280a      	cmp	r0, #10
 800f740:	600b      	str	r3, [r1, #0]
 800f742:	491b      	ldr	r1, [pc, #108]	; (800f7b0 <__b2d+0x90>)
 800f744:	dc15      	bgt.n	800f772 <__b2d+0x52>
 800f746:	f1c0 0c0b 	rsb	ip, r0, #11
 800f74a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f74e:	45b8      	cmp	r8, r7
 800f750:	ea43 0501 	orr.w	r5, r3, r1
 800f754:	bf34      	ite	cc
 800f756:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f75a:	2300      	movcs	r3, #0
 800f75c:	3015      	adds	r0, #21
 800f75e:	fa02 f000 	lsl.w	r0, r2, r0
 800f762:	fa23 f30c 	lsr.w	r3, r3, ip
 800f766:	4303      	orrs	r3, r0
 800f768:	461c      	mov	r4, r3
 800f76a:	ec45 4b10 	vmov	d0, r4, r5
 800f76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f772:	45b8      	cmp	r8, r7
 800f774:	bf3a      	itte	cc
 800f776:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f77a:	f1a6 0708 	subcc.w	r7, r6, #8
 800f77e:	2300      	movcs	r3, #0
 800f780:	380b      	subs	r0, #11
 800f782:	d012      	beq.n	800f7aa <__b2d+0x8a>
 800f784:	f1c0 0120 	rsb	r1, r0, #32
 800f788:	fa23 f401 	lsr.w	r4, r3, r1
 800f78c:	4082      	lsls	r2, r0
 800f78e:	4322      	orrs	r2, r4
 800f790:	4547      	cmp	r7, r8
 800f792:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f796:	bf8c      	ite	hi
 800f798:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f79c:	2200      	movls	r2, #0
 800f79e:	4083      	lsls	r3, r0
 800f7a0:	40ca      	lsrs	r2, r1
 800f7a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	e7de      	b.n	800f768 <__b2d+0x48>
 800f7aa:	ea42 0501 	orr.w	r5, r2, r1
 800f7ae:	e7db      	b.n	800f768 <__b2d+0x48>
 800f7b0:	3ff00000 	.word	0x3ff00000

0800f7b4 <__d2b>:
 800f7b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	460f      	mov	r7, r1
 800f7ba:	2101      	movs	r1, #1
 800f7bc:	ec59 8b10 	vmov	r8, r9, d0
 800f7c0:	4616      	mov	r6, r2
 800f7c2:	f7ff fc1b 	bl	800effc <_Balloc>
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	b930      	cbnz	r0, 800f7d8 <__d2b+0x24>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	4b24      	ldr	r3, [pc, #144]	; (800f860 <__d2b+0xac>)
 800f7ce:	4825      	ldr	r0, [pc, #148]	; (800f864 <__d2b+0xb0>)
 800f7d0:	f240 310f 	movw	r1, #783	; 0x30f
 800f7d4:	f001 faf8 	bl	8010dc8 <__assert_func>
 800f7d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f7dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7e0:	bb2d      	cbnz	r5, 800f82e <__d2b+0x7a>
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	f1b8 0300 	subs.w	r3, r8, #0
 800f7e8:	d026      	beq.n	800f838 <__d2b+0x84>
 800f7ea:	4668      	mov	r0, sp
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	f7ff fd17 	bl	800f220 <__lo0bits>
 800f7f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f7f6:	b1e8      	cbz	r0, 800f834 <__d2b+0x80>
 800f7f8:	f1c0 0320 	rsb	r3, r0, #32
 800f7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f800:	430b      	orrs	r3, r1
 800f802:	40c2      	lsrs	r2, r0
 800f804:	6163      	str	r3, [r4, #20]
 800f806:	9201      	str	r2, [sp, #4]
 800f808:	9b01      	ldr	r3, [sp, #4]
 800f80a:	61a3      	str	r3, [r4, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bf14      	ite	ne
 800f810:	2202      	movne	r2, #2
 800f812:	2201      	moveq	r2, #1
 800f814:	6122      	str	r2, [r4, #16]
 800f816:	b1bd      	cbz	r5, 800f848 <__d2b+0x94>
 800f818:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f81c:	4405      	add	r5, r0
 800f81e:	603d      	str	r5, [r7, #0]
 800f820:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f824:	6030      	str	r0, [r6, #0]
 800f826:	4620      	mov	r0, r4
 800f828:	b003      	add	sp, #12
 800f82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f82e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f832:	e7d6      	b.n	800f7e2 <__d2b+0x2e>
 800f834:	6161      	str	r1, [r4, #20]
 800f836:	e7e7      	b.n	800f808 <__d2b+0x54>
 800f838:	a801      	add	r0, sp, #4
 800f83a:	f7ff fcf1 	bl	800f220 <__lo0bits>
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	6163      	str	r3, [r4, #20]
 800f842:	3020      	adds	r0, #32
 800f844:	2201      	movs	r2, #1
 800f846:	e7e5      	b.n	800f814 <__d2b+0x60>
 800f848:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f84c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f850:	6038      	str	r0, [r7, #0]
 800f852:	6918      	ldr	r0, [r3, #16]
 800f854:	f7ff fcc4 	bl	800f1e0 <__hi0bits>
 800f858:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f85c:	e7e2      	b.n	800f824 <__d2b+0x70>
 800f85e:	bf00      	nop
 800f860:	0801234a 	.word	0x0801234a
 800f864:	0801235b 	.word	0x0801235b

0800f868 <__ratio>:
 800f868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	4688      	mov	r8, r1
 800f86e:	4669      	mov	r1, sp
 800f870:	4681      	mov	r9, r0
 800f872:	f7ff ff55 	bl	800f720 <__b2d>
 800f876:	a901      	add	r1, sp, #4
 800f878:	4640      	mov	r0, r8
 800f87a:	ec55 4b10 	vmov	r4, r5, d0
 800f87e:	f7ff ff4f 	bl	800f720 <__b2d>
 800f882:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f886:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f88a:	eba3 0c02 	sub.w	ip, r3, r2
 800f88e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f892:	1a9b      	subs	r3, r3, r2
 800f894:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f898:	ec51 0b10 	vmov	r0, r1, d0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	bfd6      	itet	le
 800f8a0:	460a      	movle	r2, r1
 800f8a2:	462a      	movgt	r2, r5
 800f8a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f8a8:	468b      	mov	fp, r1
 800f8aa:	462f      	mov	r7, r5
 800f8ac:	bfd4      	ite	le
 800f8ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f8b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	ee10 2a10 	vmov	r2, s0
 800f8bc:	465b      	mov	r3, fp
 800f8be:	4639      	mov	r1, r7
 800f8c0:	f7f0 ffcc 	bl	800085c <__aeabi_ddiv>
 800f8c4:	ec41 0b10 	vmov	d0, r0, r1
 800f8c8:	b003      	add	sp, #12
 800f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8ce <__copybits>:
 800f8ce:	3901      	subs	r1, #1
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	1149      	asrs	r1, r1, #5
 800f8d4:	6914      	ldr	r4, [r2, #16]
 800f8d6:	3101      	adds	r1, #1
 800f8d8:	f102 0314 	add.w	r3, r2, #20
 800f8dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f8e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8e4:	1f05      	subs	r5, r0, #4
 800f8e6:	42a3      	cmp	r3, r4
 800f8e8:	d30c      	bcc.n	800f904 <__copybits+0x36>
 800f8ea:	1aa3      	subs	r3, r4, r2
 800f8ec:	3b11      	subs	r3, #17
 800f8ee:	f023 0303 	bic.w	r3, r3, #3
 800f8f2:	3211      	adds	r2, #17
 800f8f4:	42a2      	cmp	r2, r4
 800f8f6:	bf88      	it	hi
 800f8f8:	2300      	movhi	r3, #0
 800f8fa:	4418      	add	r0, r3
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4288      	cmp	r0, r1
 800f900:	d305      	bcc.n	800f90e <__copybits+0x40>
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	f853 6b04 	ldr.w	r6, [r3], #4
 800f908:	f845 6f04 	str.w	r6, [r5, #4]!
 800f90c:	e7eb      	b.n	800f8e6 <__copybits+0x18>
 800f90e:	f840 3b04 	str.w	r3, [r0], #4
 800f912:	e7f4      	b.n	800f8fe <__copybits+0x30>

0800f914 <__any_on>:
 800f914:	f100 0214 	add.w	r2, r0, #20
 800f918:	6900      	ldr	r0, [r0, #16]
 800f91a:	114b      	asrs	r3, r1, #5
 800f91c:	4298      	cmp	r0, r3
 800f91e:	b510      	push	{r4, lr}
 800f920:	db11      	blt.n	800f946 <__any_on+0x32>
 800f922:	dd0a      	ble.n	800f93a <__any_on+0x26>
 800f924:	f011 011f 	ands.w	r1, r1, #31
 800f928:	d007      	beq.n	800f93a <__any_on+0x26>
 800f92a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f92e:	fa24 f001 	lsr.w	r0, r4, r1
 800f932:	fa00 f101 	lsl.w	r1, r0, r1
 800f936:	428c      	cmp	r4, r1
 800f938:	d10b      	bne.n	800f952 <__any_on+0x3e>
 800f93a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f93e:	4293      	cmp	r3, r2
 800f940:	d803      	bhi.n	800f94a <__any_on+0x36>
 800f942:	2000      	movs	r0, #0
 800f944:	bd10      	pop	{r4, pc}
 800f946:	4603      	mov	r3, r0
 800f948:	e7f7      	b.n	800f93a <__any_on+0x26>
 800f94a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f94e:	2900      	cmp	r1, #0
 800f950:	d0f5      	beq.n	800f93e <__any_on+0x2a>
 800f952:	2001      	movs	r0, #1
 800f954:	e7f6      	b.n	800f944 <__any_on+0x30>

0800f956 <sulp>:
 800f956:	b570      	push	{r4, r5, r6, lr}
 800f958:	4604      	mov	r4, r0
 800f95a:	460d      	mov	r5, r1
 800f95c:	ec45 4b10 	vmov	d0, r4, r5
 800f960:	4616      	mov	r6, r2
 800f962:	f7ff feb7 	bl	800f6d4 <__ulp>
 800f966:	ec51 0b10 	vmov	r0, r1, d0
 800f96a:	b17e      	cbz	r6, 800f98c <sulp+0x36>
 800f96c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f974:	2b00      	cmp	r3, #0
 800f976:	dd09      	ble.n	800f98c <sulp+0x36>
 800f978:	051b      	lsls	r3, r3, #20
 800f97a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f97e:	2400      	movs	r4, #0
 800f980:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f984:	4622      	mov	r2, r4
 800f986:	462b      	mov	r3, r5
 800f988:	f7f0 fe3e 	bl	8000608 <__aeabi_dmul>
 800f98c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f990 <_strtod_l>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	ed2d 8b02 	vpush	{d8}
 800f998:	b09b      	sub	sp, #108	; 0x6c
 800f99a:	4604      	mov	r4, r0
 800f99c:	9213      	str	r2, [sp, #76]	; 0x4c
 800f99e:	2200      	movs	r2, #0
 800f9a0:	9216      	str	r2, [sp, #88]	; 0x58
 800f9a2:	460d      	mov	r5, r1
 800f9a4:	f04f 0800 	mov.w	r8, #0
 800f9a8:	f04f 0900 	mov.w	r9, #0
 800f9ac:	460a      	mov	r2, r1
 800f9ae:	9215      	str	r2, [sp, #84]	; 0x54
 800f9b0:	7811      	ldrb	r1, [r2, #0]
 800f9b2:	292b      	cmp	r1, #43	; 0x2b
 800f9b4:	d04c      	beq.n	800fa50 <_strtod_l+0xc0>
 800f9b6:	d83a      	bhi.n	800fa2e <_strtod_l+0x9e>
 800f9b8:	290d      	cmp	r1, #13
 800f9ba:	d834      	bhi.n	800fa26 <_strtod_l+0x96>
 800f9bc:	2908      	cmp	r1, #8
 800f9be:	d834      	bhi.n	800fa2a <_strtod_l+0x9a>
 800f9c0:	2900      	cmp	r1, #0
 800f9c2:	d03d      	beq.n	800fa40 <_strtod_l+0xb0>
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	920a      	str	r2, [sp, #40]	; 0x28
 800f9c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f9ca:	7832      	ldrb	r2, [r6, #0]
 800f9cc:	2a30      	cmp	r2, #48	; 0x30
 800f9ce:	f040 80b4 	bne.w	800fb3a <_strtod_l+0x1aa>
 800f9d2:	7872      	ldrb	r2, [r6, #1]
 800f9d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f9d8:	2a58      	cmp	r2, #88	; 0x58
 800f9da:	d170      	bne.n	800fabe <_strtod_l+0x12e>
 800f9dc:	9302      	str	r3, [sp, #8]
 800f9de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	ab16      	add	r3, sp, #88	; 0x58
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	4a8e      	ldr	r2, [pc, #568]	; (800fc20 <_strtod_l+0x290>)
 800f9e8:	ab17      	add	r3, sp, #92	; 0x5c
 800f9ea:	a915      	add	r1, sp, #84	; 0x54
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	f001 fa87 	bl	8010f00 <__gethex>
 800f9f2:	f010 070f 	ands.w	r7, r0, #15
 800f9f6:	4605      	mov	r5, r0
 800f9f8:	d005      	beq.n	800fa06 <_strtod_l+0x76>
 800f9fa:	2f06      	cmp	r7, #6
 800f9fc:	d12a      	bne.n	800fa54 <_strtod_l+0xc4>
 800f9fe:	3601      	adds	r6, #1
 800fa00:	2300      	movs	r3, #0
 800fa02:	9615      	str	r6, [sp, #84]	; 0x54
 800fa04:	930a      	str	r3, [sp, #40]	; 0x28
 800fa06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	f040 857f 	bne.w	801050c <_strtod_l+0xb7c>
 800fa0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa10:	b1db      	cbz	r3, 800fa4a <_strtod_l+0xba>
 800fa12:	4642      	mov	r2, r8
 800fa14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa18:	ec43 2b10 	vmov	d0, r2, r3
 800fa1c:	b01b      	add	sp, #108	; 0x6c
 800fa1e:	ecbd 8b02 	vpop	{d8}
 800fa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa26:	2920      	cmp	r1, #32
 800fa28:	d1cc      	bne.n	800f9c4 <_strtod_l+0x34>
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	e7bf      	b.n	800f9ae <_strtod_l+0x1e>
 800fa2e:	292d      	cmp	r1, #45	; 0x2d
 800fa30:	d1c8      	bne.n	800f9c4 <_strtod_l+0x34>
 800fa32:	2101      	movs	r1, #1
 800fa34:	910a      	str	r1, [sp, #40]	; 0x28
 800fa36:	1c51      	adds	r1, r2, #1
 800fa38:	9115      	str	r1, [sp, #84]	; 0x54
 800fa3a:	7852      	ldrb	r2, [r2, #1]
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	d1c3      	bne.n	800f9c8 <_strtod_l+0x38>
 800fa40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa42:	9515      	str	r5, [sp, #84]	; 0x54
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 855f 	bne.w	8010508 <_strtod_l+0xb78>
 800fa4a:	4642      	mov	r2, r8
 800fa4c:	464b      	mov	r3, r9
 800fa4e:	e7e3      	b.n	800fa18 <_strtod_l+0x88>
 800fa50:	2100      	movs	r1, #0
 800fa52:	e7ef      	b.n	800fa34 <_strtod_l+0xa4>
 800fa54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fa56:	b13a      	cbz	r2, 800fa68 <_strtod_l+0xd8>
 800fa58:	2135      	movs	r1, #53	; 0x35
 800fa5a:	a818      	add	r0, sp, #96	; 0x60
 800fa5c:	f7ff ff37 	bl	800f8ce <__copybits>
 800fa60:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fa62:	4620      	mov	r0, r4
 800fa64:	f7ff fb0a 	bl	800f07c <_Bfree>
 800fa68:	3f01      	subs	r7, #1
 800fa6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa6c:	2f04      	cmp	r7, #4
 800fa6e:	d806      	bhi.n	800fa7e <_strtod_l+0xee>
 800fa70:	e8df f007 	tbb	[pc, r7]
 800fa74:	201d0314 	.word	0x201d0314
 800fa78:	14          	.byte	0x14
 800fa79:	00          	.byte	0x00
 800fa7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800fa7e:	05e9      	lsls	r1, r5, #23
 800fa80:	bf48      	it	mi
 800fa82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800fa86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fa8a:	0d1b      	lsrs	r3, r3, #20
 800fa8c:	051b      	lsls	r3, r3, #20
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1b9      	bne.n	800fa06 <_strtod_l+0x76>
 800fa92:	f7fe fba9 	bl	800e1e8 <__errno>
 800fa96:	2322      	movs	r3, #34	; 0x22
 800fa98:	6003      	str	r3, [r0, #0]
 800fa9a:	e7b4      	b.n	800fa06 <_strtod_l+0x76>
 800fa9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800faa0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800faa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800faa8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800faac:	e7e7      	b.n	800fa7e <_strtod_l+0xee>
 800faae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fc28 <_strtod_l+0x298>
 800fab2:	e7e4      	b.n	800fa7e <_strtod_l+0xee>
 800fab4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800fab8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800fabc:	e7df      	b.n	800fa7e <_strtod_l+0xee>
 800fabe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	9215      	str	r2, [sp, #84]	; 0x54
 800fac4:	785b      	ldrb	r3, [r3, #1]
 800fac6:	2b30      	cmp	r3, #48	; 0x30
 800fac8:	d0f9      	beq.n	800fabe <_strtod_l+0x12e>
 800faca:	2b00      	cmp	r3, #0
 800facc:	d09b      	beq.n	800fa06 <_strtod_l+0x76>
 800face:	2301      	movs	r3, #1
 800fad0:	f04f 0a00 	mov.w	sl, #0
 800fad4:	9304      	str	r3, [sp, #16]
 800fad6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fad8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fada:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800fade:	46d3      	mov	fp, sl
 800fae0:	220a      	movs	r2, #10
 800fae2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800fae4:	7806      	ldrb	r6, [r0, #0]
 800fae6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800faea:	b2d9      	uxtb	r1, r3
 800faec:	2909      	cmp	r1, #9
 800faee:	d926      	bls.n	800fb3e <_strtod_l+0x1ae>
 800faf0:	494c      	ldr	r1, [pc, #304]	; (800fc24 <_strtod_l+0x294>)
 800faf2:	2201      	movs	r2, #1
 800faf4:	f7fe fb0c 	bl	800e110 <strncmp>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d030      	beq.n	800fb5e <_strtod_l+0x1ce>
 800fafc:	2000      	movs	r0, #0
 800fafe:	4632      	mov	r2, r6
 800fb00:	9005      	str	r0, [sp, #20]
 800fb02:	465e      	mov	r6, fp
 800fb04:	4603      	mov	r3, r0
 800fb06:	2a65      	cmp	r2, #101	; 0x65
 800fb08:	d001      	beq.n	800fb0e <_strtod_l+0x17e>
 800fb0a:	2a45      	cmp	r2, #69	; 0x45
 800fb0c:	d113      	bne.n	800fb36 <_strtod_l+0x1a6>
 800fb0e:	b91e      	cbnz	r6, 800fb18 <_strtod_l+0x188>
 800fb10:	9a04      	ldr	r2, [sp, #16]
 800fb12:	4302      	orrs	r2, r0
 800fb14:	d094      	beq.n	800fa40 <_strtod_l+0xb0>
 800fb16:	2600      	movs	r6, #0
 800fb18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800fb1a:	1c6a      	adds	r2, r5, #1
 800fb1c:	9215      	str	r2, [sp, #84]	; 0x54
 800fb1e:	786a      	ldrb	r2, [r5, #1]
 800fb20:	2a2b      	cmp	r2, #43	; 0x2b
 800fb22:	d074      	beq.n	800fc0e <_strtod_l+0x27e>
 800fb24:	2a2d      	cmp	r2, #45	; 0x2d
 800fb26:	d078      	beq.n	800fc1a <_strtod_l+0x28a>
 800fb28:	f04f 0c00 	mov.w	ip, #0
 800fb2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fb30:	2909      	cmp	r1, #9
 800fb32:	d97f      	bls.n	800fc34 <_strtod_l+0x2a4>
 800fb34:	9515      	str	r5, [sp, #84]	; 0x54
 800fb36:	2700      	movs	r7, #0
 800fb38:	e09e      	b.n	800fc78 <_strtod_l+0x2e8>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	e7c8      	b.n	800fad0 <_strtod_l+0x140>
 800fb3e:	f1bb 0f08 	cmp.w	fp, #8
 800fb42:	bfd8      	it	le
 800fb44:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fb46:	f100 0001 	add.w	r0, r0, #1
 800fb4a:	bfda      	itte	le
 800fb4c:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb50:	9309      	strle	r3, [sp, #36]	; 0x24
 800fb52:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800fb56:	f10b 0b01 	add.w	fp, fp, #1
 800fb5a:	9015      	str	r0, [sp, #84]	; 0x54
 800fb5c:	e7c1      	b.n	800fae2 <_strtod_l+0x152>
 800fb5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb60:	1c5a      	adds	r2, r3, #1
 800fb62:	9215      	str	r2, [sp, #84]	; 0x54
 800fb64:	785a      	ldrb	r2, [r3, #1]
 800fb66:	f1bb 0f00 	cmp.w	fp, #0
 800fb6a:	d037      	beq.n	800fbdc <_strtod_l+0x24c>
 800fb6c:	9005      	str	r0, [sp, #20]
 800fb6e:	465e      	mov	r6, fp
 800fb70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fb74:	2b09      	cmp	r3, #9
 800fb76:	d912      	bls.n	800fb9e <_strtod_l+0x20e>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	e7c4      	b.n	800fb06 <_strtod_l+0x176>
 800fb7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	9215      	str	r2, [sp, #84]	; 0x54
 800fb82:	785a      	ldrb	r2, [r3, #1]
 800fb84:	3001      	adds	r0, #1
 800fb86:	2a30      	cmp	r2, #48	; 0x30
 800fb88:	d0f8      	beq.n	800fb7c <_strtod_l+0x1ec>
 800fb8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fb8e:	2b08      	cmp	r3, #8
 800fb90:	f200 84c1 	bhi.w	8010516 <_strtod_l+0xb86>
 800fb94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb96:	9005      	str	r0, [sp, #20]
 800fb98:	2000      	movs	r0, #0
 800fb9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb9c:	4606      	mov	r6, r0
 800fb9e:	3a30      	subs	r2, #48	; 0x30
 800fba0:	f100 0301 	add.w	r3, r0, #1
 800fba4:	d014      	beq.n	800fbd0 <_strtod_l+0x240>
 800fba6:	9905      	ldr	r1, [sp, #20]
 800fba8:	4419      	add	r1, r3
 800fbaa:	9105      	str	r1, [sp, #20]
 800fbac:	4633      	mov	r3, r6
 800fbae:	eb00 0c06 	add.w	ip, r0, r6
 800fbb2:	210a      	movs	r1, #10
 800fbb4:	4563      	cmp	r3, ip
 800fbb6:	d113      	bne.n	800fbe0 <_strtod_l+0x250>
 800fbb8:	1833      	adds	r3, r6, r0
 800fbba:	2b08      	cmp	r3, #8
 800fbbc:	f106 0601 	add.w	r6, r6, #1
 800fbc0:	4406      	add	r6, r0
 800fbc2:	dc1a      	bgt.n	800fbfa <_strtod_l+0x26a>
 800fbc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbc6:	230a      	movs	r3, #10
 800fbc8:	fb03 2301 	mla	r3, r3, r1, r2
 800fbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbce:	2300      	movs	r3, #0
 800fbd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fbd2:	1c51      	adds	r1, r2, #1
 800fbd4:	9115      	str	r1, [sp, #84]	; 0x54
 800fbd6:	7852      	ldrb	r2, [r2, #1]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	e7c9      	b.n	800fb70 <_strtod_l+0x1e0>
 800fbdc:	4658      	mov	r0, fp
 800fbde:	e7d2      	b.n	800fb86 <_strtod_l+0x1f6>
 800fbe0:	2b08      	cmp	r3, #8
 800fbe2:	f103 0301 	add.w	r3, r3, #1
 800fbe6:	dc03      	bgt.n	800fbf0 <_strtod_l+0x260>
 800fbe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fbea:	434f      	muls	r7, r1
 800fbec:	9709      	str	r7, [sp, #36]	; 0x24
 800fbee:	e7e1      	b.n	800fbb4 <_strtod_l+0x224>
 800fbf0:	2b10      	cmp	r3, #16
 800fbf2:	bfd8      	it	le
 800fbf4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fbf8:	e7dc      	b.n	800fbb4 <_strtod_l+0x224>
 800fbfa:	2e10      	cmp	r6, #16
 800fbfc:	bfdc      	itt	le
 800fbfe:	230a      	movle	r3, #10
 800fc00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fc04:	e7e3      	b.n	800fbce <_strtod_l+0x23e>
 800fc06:	2300      	movs	r3, #0
 800fc08:	9305      	str	r3, [sp, #20]
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e780      	b.n	800fb10 <_strtod_l+0x180>
 800fc0e:	f04f 0c00 	mov.w	ip, #0
 800fc12:	1caa      	adds	r2, r5, #2
 800fc14:	9215      	str	r2, [sp, #84]	; 0x54
 800fc16:	78aa      	ldrb	r2, [r5, #2]
 800fc18:	e788      	b.n	800fb2c <_strtod_l+0x19c>
 800fc1a:	f04f 0c01 	mov.w	ip, #1
 800fc1e:	e7f8      	b.n	800fc12 <_strtod_l+0x282>
 800fc20:	080124b8 	.word	0x080124b8
 800fc24:	080124b4 	.word	0x080124b4
 800fc28:	7ff00000 	.word	0x7ff00000
 800fc2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc2e:	1c51      	adds	r1, r2, #1
 800fc30:	9115      	str	r1, [sp, #84]	; 0x54
 800fc32:	7852      	ldrb	r2, [r2, #1]
 800fc34:	2a30      	cmp	r2, #48	; 0x30
 800fc36:	d0f9      	beq.n	800fc2c <_strtod_l+0x29c>
 800fc38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fc3c:	2908      	cmp	r1, #8
 800fc3e:	f63f af7a 	bhi.w	800fb36 <_strtod_l+0x1a6>
 800fc42:	3a30      	subs	r2, #48	; 0x30
 800fc44:	9208      	str	r2, [sp, #32]
 800fc46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc48:	920c      	str	r2, [sp, #48]	; 0x30
 800fc4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fc4c:	1c57      	adds	r7, r2, #1
 800fc4e:	9715      	str	r7, [sp, #84]	; 0x54
 800fc50:	7852      	ldrb	r2, [r2, #1]
 800fc52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800fc56:	f1be 0f09 	cmp.w	lr, #9
 800fc5a:	d938      	bls.n	800fcce <_strtod_l+0x33e>
 800fc5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc5e:	1a7f      	subs	r7, r7, r1
 800fc60:	2f08      	cmp	r7, #8
 800fc62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fc66:	dc03      	bgt.n	800fc70 <_strtod_l+0x2e0>
 800fc68:	9908      	ldr	r1, [sp, #32]
 800fc6a:	428f      	cmp	r7, r1
 800fc6c:	bfa8      	it	ge
 800fc6e:	460f      	movge	r7, r1
 800fc70:	f1bc 0f00 	cmp.w	ip, #0
 800fc74:	d000      	beq.n	800fc78 <_strtod_l+0x2e8>
 800fc76:	427f      	negs	r7, r7
 800fc78:	2e00      	cmp	r6, #0
 800fc7a:	d14f      	bne.n	800fd1c <_strtod_l+0x38c>
 800fc7c:	9904      	ldr	r1, [sp, #16]
 800fc7e:	4301      	orrs	r1, r0
 800fc80:	f47f aec1 	bne.w	800fa06 <_strtod_l+0x76>
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f47f aedb 	bne.w	800fa40 <_strtod_l+0xb0>
 800fc8a:	2a69      	cmp	r2, #105	; 0x69
 800fc8c:	d029      	beq.n	800fce2 <_strtod_l+0x352>
 800fc8e:	dc26      	bgt.n	800fcde <_strtod_l+0x34e>
 800fc90:	2a49      	cmp	r2, #73	; 0x49
 800fc92:	d026      	beq.n	800fce2 <_strtod_l+0x352>
 800fc94:	2a4e      	cmp	r2, #78	; 0x4e
 800fc96:	f47f aed3 	bne.w	800fa40 <_strtod_l+0xb0>
 800fc9a:	499b      	ldr	r1, [pc, #620]	; (800ff08 <_strtod_l+0x578>)
 800fc9c:	a815      	add	r0, sp, #84	; 0x54
 800fc9e:	f001 fb6f 	bl	8011380 <__match>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	f43f aecc 	beq.w	800fa40 <_strtod_l+0xb0>
 800fca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	2b28      	cmp	r3, #40	; 0x28
 800fcae:	d12f      	bne.n	800fd10 <_strtod_l+0x380>
 800fcb0:	4996      	ldr	r1, [pc, #600]	; (800ff0c <_strtod_l+0x57c>)
 800fcb2:	aa18      	add	r2, sp, #96	; 0x60
 800fcb4:	a815      	add	r0, sp, #84	; 0x54
 800fcb6:	f001 fb77 	bl	80113a8 <__hexnan>
 800fcba:	2805      	cmp	r0, #5
 800fcbc:	d128      	bne.n	800fd10 <_strtod_l+0x380>
 800fcbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fcc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fcc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fcc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fccc:	e69b      	b.n	800fa06 <_strtod_l+0x76>
 800fcce:	9f08      	ldr	r7, [sp, #32]
 800fcd0:	210a      	movs	r1, #10
 800fcd2:	fb01 2107 	mla	r1, r1, r7, r2
 800fcd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fcda:	9208      	str	r2, [sp, #32]
 800fcdc:	e7b5      	b.n	800fc4a <_strtod_l+0x2ba>
 800fcde:	2a6e      	cmp	r2, #110	; 0x6e
 800fce0:	e7d9      	b.n	800fc96 <_strtod_l+0x306>
 800fce2:	498b      	ldr	r1, [pc, #556]	; (800ff10 <_strtod_l+0x580>)
 800fce4:	a815      	add	r0, sp, #84	; 0x54
 800fce6:	f001 fb4b 	bl	8011380 <__match>
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f43f aea8 	beq.w	800fa40 <_strtod_l+0xb0>
 800fcf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcf2:	4988      	ldr	r1, [pc, #544]	; (800ff14 <_strtod_l+0x584>)
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	a815      	add	r0, sp, #84	; 0x54
 800fcf8:	9315      	str	r3, [sp, #84]	; 0x54
 800fcfa:	f001 fb41 	bl	8011380 <__match>
 800fcfe:	b910      	cbnz	r0, 800fd06 <_strtod_l+0x376>
 800fd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd02:	3301      	adds	r3, #1
 800fd04:	9315      	str	r3, [sp, #84]	; 0x54
 800fd06:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ff24 <_strtod_l+0x594>
 800fd0a:	f04f 0800 	mov.w	r8, #0
 800fd0e:	e67a      	b.n	800fa06 <_strtod_l+0x76>
 800fd10:	4881      	ldr	r0, [pc, #516]	; (800ff18 <_strtod_l+0x588>)
 800fd12:	f001 f851 	bl	8010db8 <nan>
 800fd16:	ec59 8b10 	vmov	r8, r9, d0
 800fd1a:	e674      	b.n	800fa06 <_strtod_l+0x76>
 800fd1c:	9b05      	ldr	r3, [sp, #20]
 800fd1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd20:	1afb      	subs	r3, r7, r3
 800fd22:	f1bb 0f00 	cmp.w	fp, #0
 800fd26:	bf08      	it	eq
 800fd28:	46b3      	moveq	fp, r6
 800fd2a:	2e10      	cmp	r6, #16
 800fd2c:	9308      	str	r3, [sp, #32]
 800fd2e:	4635      	mov	r5, r6
 800fd30:	bfa8      	it	ge
 800fd32:	2510      	movge	r5, #16
 800fd34:	f7f0 fbee 	bl	8000514 <__aeabi_ui2d>
 800fd38:	2e09      	cmp	r6, #9
 800fd3a:	4680      	mov	r8, r0
 800fd3c:	4689      	mov	r9, r1
 800fd3e:	dd13      	ble.n	800fd68 <_strtod_l+0x3d8>
 800fd40:	4b76      	ldr	r3, [pc, #472]	; (800ff1c <_strtod_l+0x58c>)
 800fd42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fd46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd4a:	f7f0 fc5d 	bl	8000608 <__aeabi_dmul>
 800fd4e:	4680      	mov	r8, r0
 800fd50:	4650      	mov	r0, sl
 800fd52:	4689      	mov	r9, r1
 800fd54:	f7f0 fbde 	bl	8000514 <__aeabi_ui2d>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	4649      	mov	r1, r9
 800fd60:	f7f0 fa9c 	bl	800029c <__adddf3>
 800fd64:	4680      	mov	r8, r0
 800fd66:	4689      	mov	r9, r1
 800fd68:	2e0f      	cmp	r6, #15
 800fd6a:	dc38      	bgt.n	800fdde <_strtod_l+0x44e>
 800fd6c:	9b08      	ldr	r3, [sp, #32]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f43f ae49 	beq.w	800fa06 <_strtod_l+0x76>
 800fd74:	dd24      	ble.n	800fdc0 <_strtod_l+0x430>
 800fd76:	2b16      	cmp	r3, #22
 800fd78:	dc0b      	bgt.n	800fd92 <_strtod_l+0x402>
 800fd7a:	4968      	ldr	r1, [pc, #416]	; (800ff1c <_strtod_l+0x58c>)
 800fd7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd84:	4642      	mov	r2, r8
 800fd86:	464b      	mov	r3, r9
 800fd88:	f7f0 fc3e 	bl	8000608 <__aeabi_dmul>
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	4689      	mov	r9, r1
 800fd90:	e639      	b.n	800fa06 <_strtod_l+0x76>
 800fd92:	9a08      	ldr	r2, [sp, #32]
 800fd94:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	db20      	blt.n	800fdde <_strtod_l+0x44e>
 800fd9c:	4c5f      	ldr	r4, [pc, #380]	; (800ff1c <_strtod_l+0x58c>)
 800fd9e:	f1c6 060f 	rsb	r6, r6, #15
 800fda2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fda6:	4642      	mov	r2, r8
 800fda8:	464b      	mov	r3, r9
 800fdaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdae:	f7f0 fc2b 	bl	8000608 <__aeabi_dmul>
 800fdb2:	9b08      	ldr	r3, [sp, #32]
 800fdb4:	1b9e      	subs	r6, r3, r6
 800fdb6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fdba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fdbe:	e7e3      	b.n	800fd88 <_strtod_l+0x3f8>
 800fdc0:	9b08      	ldr	r3, [sp, #32]
 800fdc2:	3316      	adds	r3, #22
 800fdc4:	db0b      	blt.n	800fdde <_strtod_l+0x44e>
 800fdc6:	9b05      	ldr	r3, [sp, #20]
 800fdc8:	1bdf      	subs	r7, r3, r7
 800fdca:	4b54      	ldr	r3, [pc, #336]	; (800ff1c <_strtod_l+0x58c>)
 800fdcc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fdd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdd4:	4640      	mov	r0, r8
 800fdd6:	4649      	mov	r1, r9
 800fdd8:	f7f0 fd40 	bl	800085c <__aeabi_ddiv>
 800fddc:	e7d6      	b.n	800fd8c <_strtod_l+0x3fc>
 800fdde:	9b08      	ldr	r3, [sp, #32]
 800fde0:	1b75      	subs	r5, r6, r5
 800fde2:	441d      	add	r5, r3
 800fde4:	2d00      	cmp	r5, #0
 800fde6:	dd70      	ble.n	800feca <_strtod_l+0x53a>
 800fde8:	f015 030f 	ands.w	r3, r5, #15
 800fdec:	d00a      	beq.n	800fe04 <_strtod_l+0x474>
 800fdee:	494b      	ldr	r1, [pc, #300]	; (800ff1c <_strtod_l+0x58c>)
 800fdf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fdf4:	4642      	mov	r2, r8
 800fdf6:	464b      	mov	r3, r9
 800fdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdfc:	f7f0 fc04 	bl	8000608 <__aeabi_dmul>
 800fe00:	4680      	mov	r8, r0
 800fe02:	4689      	mov	r9, r1
 800fe04:	f035 050f 	bics.w	r5, r5, #15
 800fe08:	d04d      	beq.n	800fea6 <_strtod_l+0x516>
 800fe0a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fe0e:	dd22      	ble.n	800fe56 <_strtod_l+0x4c6>
 800fe10:	2500      	movs	r5, #0
 800fe12:	46ab      	mov	fp, r5
 800fe14:	9509      	str	r5, [sp, #36]	; 0x24
 800fe16:	9505      	str	r5, [sp, #20]
 800fe18:	2322      	movs	r3, #34	; 0x22
 800fe1a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ff24 <_strtod_l+0x594>
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	f04f 0800 	mov.w	r8, #0
 800fe24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f43f aded 	beq.w	800fa06 <_strtod_l+0x76>
 800fe2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fe2e:	4620      	mov	r0, r4
 800fe30:	f7ff f924 	bl	800f07c <_Bfree>
 800fe34:	9905      	ldr	r1, [sp, #20]
 800fe36:	4620      	mov	r0, r4
 800fe38:	f7ff f920 	bl	800f07c <_Bfree>
 800fe3c:	4659      	mov	r1, fp
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f7ff f91c 	bl	800f07c <_Bfree>
 800fe44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe46:	4620      	mov	r0, r4
 800fe48:	f7ff f918 	bl	800f07c <_Bfree>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f7ff f914 	bl	800f07c <_Bfree>
 800fe54:	e5d7      	b.n	800fa06 <_strtod_l+0x76>
 800fe56:	4b32      	ldr	r3, [pc, #200]	; (800ff20 <_strtod_l+0x590>)
 800fe58:	9304      	str	r3, [sp, #16]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	112d      	asrs	r5, r5, #4
 800fe5e:	4640      	mov	r0, r8
 800fe60:	4649      	mov	r1, r9
 800fe62:	469a      	mov	sl, r3
 800fe64:	2d01      	cmp	r5, #1
 800fe66:	dc21      	bgt.n	800feac <_strtod_l+0x51c>
 800fe68:	b10b      	cbz	r3, 800fe6e <_strtod_l+0x4de>
 800fe6a:	4680      	mov	r8, r0
 800fe6c:	4689      	mov	r9, r1
 800fe6e:	492c      	ldr	r1, [pc, #176]	; (800ff20 <_strtod_l+0x590>)
 800fe70:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fe74:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fe78:	4642      	mov	r2, r8
 800fe7a:	464b      	mov	r3, r9
 800fe7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe80:	f7f0 fbc2 	bl	8000608 <__aeabi_dmul>
 800fe84:	4b27      	ldr	r3, [pc, #156]	; (800ff24 <_strtod_l+0x594>)
 800fe86:	460a      	mov	r2, r1
 800fe88:	400b      	ands	r3, r1
 800fe8a:	4927      	ldr	r1, [pc, #156]	; (800ff28 <_strtod_l+0x598>)
 800fe8c:	428b      	cmp	r3, r1
 800fe8e:	4680      	mov	r8, r0
 800fe90:	d8be      	bhi.n	800fe10 <_strtod_l+0x480>
 800fe92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fe96:	428b      	cmp	r3, r1
 800fe98:	bf86      	itte	hi
 800fe9a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ff2c <_strtod_l+0x59c>
 800fe9e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800fea2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fea6:	2300      	movs	r3, #0
 800fea8:	9304      	str	r3, [sp, #16]
 800feaa:	e07b      	b.n	800ffa4 <_strtod_l+0x614>
 800feac:	07ea      	lsls	r2, r5, #31
 800feae:	d505      	bpl.n	800febc <_strtod_l+0x52c>
 800feb0:	9b04      	ldr	r3, [sp, #16]
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	f7f0 fba7 	bl	8000608 <__aeabi_dmul>
 800feba:	2301      	movs	r3, #1
 800febc:	9a04      	ldr	r2, [sp, #16]
 800febe:	3208      	adds	r2, #8
 800fec0:	f10a 0a01 	add.w	sl, sl, #1
 800fec4:	106d      	asrs	r5, r5, #1
 800fec6:	9204      	str	r2, [sp, #16]
 800fec8:	e7cc      	b.n	800fe64 <_strtod_l+0x4d4>
 800feca:	d0ec      	beq.n	800fea6 <_strtod_l+0x516>
 800fecc:	426d      	negs	r5, r5
 800fece:	f015 020f 	ands.w	r2, r5, #15
 800fed2:	d00a      	beq.n	800feea <_strtod_l+0x55a>
 800fed4:	4b11      	ldr	r3, [pc, #68]	; (800ff1c <_strtod_l+0x58c>)
 800fed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feda:	4640      	mov	r0, r8
 800fedc:	4649      	mov	r1, r9
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	f7f0 fcbb 	bl	800085c <__aeabi_ddiv>
 800fee6:	4680      	mov	r8, r0
 800fee8:	4689      	mov	r9, r1
 800feea:	112d      	asrs	r5, r5, #4
 800feec:	d0db      	beq.n	800fea6 <_strtod_l+0x516>
 800feee:	2d1f      	cmp	r5, #31
 800fef0:	dd1e      	ble.n	800ff30 <_strtod_l+0x5a0>
 800fef2:	2500      	movs	r5, #0
 800fef4:	46ab      	mov	fp, r5
 800fef6:	9509      	str	r5, [sp, #36]	; 0x24
 800fef8:	9505      	str	r5, [sp, #20]
 800fefa:	2322      	movs	r3, #34	; 0x22
 800fefc:	f04f 0800 	mov.w	r8, #0
 800ff00:	f04f 0900 	mov.w	r9, #0
 800ff04:	6023      	str	r3, [r4, #0]
 800ff06:	e78d      	b.n	800fe24 <_strtod_l+0x494>
 800ff08:	080122a2 	.word	0x080122a2
 800ff0c:	080124cc 	.word	0x080124cc
 800ff10:	0801229a 	.word	0x0801229a
 800ff14:	080122d1 	.word	0x080122d1
 800ff18:	0801255c 	.word	0x0801255c
 800ff1c:	080123e0 	.word	0x080123e0
 800ff20:	080123b8 	.word	0x080123b8
 800ff24:	7ff00000 	.word	0x7ff00000
 800ff28:	7ca00000 	.word	0x7ca00000
 800ff2c:	7fefffff 	.word	0x7fefffff
 800ff30:	f015 0310 	ands.w	r3, r5, #16
 800ff34:	bf18      	it	ne
 800ff36:	236a      	movne	r3, #106	; 0x6a
 800ff38:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80102dc <_strtod_l+0x94c>
 800ff3c:	9304      	str	r3, [sp, #16]
 800ff3e:	4640      	mov	r0, r8
 800ff40:	4649      	mov	r1, r9
 800ff42:	2300      	movs	r3, #0
 800ff44:	07ea      	lsls	r2, r5, #31
 800ff46:	d504      	bpl.n	800ff52 <_strtod_l+0x5c2>
 800ff48:	e9da 2300 	ldrd	r2, r3, [sl]
 800ff4c:	f7f0 fb5c 	bl	8000608 <__aeabi_dmul>
 800ff50:	2301      	movs	r3, #1
 800ff52:	106d      	asrs	r5, r5, #1
 800ff54:	f10a 0a08 	add.w	sl, sl, #8
 800ff58:	d1f4      	bne.n	800ff44 <_strtod_l+0x5b4>
 800ff5a:	b10b      	cbz	r3, 800ff60 <_strtod_l+0x5d0>
 800ff5c:	4680      	mov	r8, r0
 800ff5e:	4689      	mov	r9, r1
 800ff60:	9b04      	ldr	r3, [sp, #16]
 800ff62:	b1bb      	cbz	r3, 800ff94 <_strtod_l+0x604>
 800ff64:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ff68:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	4649      	mov	r1, r9
 800ff70:	dd10      	ble.n	800ff94 <_strtod_l+0x604>
 800ff72:	2b1f      	cmp	r3, #31
 800ff74:	f340 811e 	ble.w	80101b4 <_strtod_l+0x824>
 800ff78:	2b34      	cmp	r3, #52	; 0x34
 800ff7a:	bfde      	ittt	le
 800ff7c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ff80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ff84:	4093      	lslle	r3, r2
 800ff86:	f04f 0800 	mov.w	r8, #0
 800ff8a:	bfcc      	ite	gt
 800ff8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ff90:	ea03 0901 	andle.w	r9, r3, r1
 800ff94:	2200      	movs	r2, #0
 800ff96:	2300      	movs	r3, #0
 800ff98:	4640      	mov	r0, r8
 800ff9a:	4649      	mov	r1, r9
 800ff9c:	f7f0 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d1a6      	bne.n	800fef2 <_strtod_l+0x562>
 800ffa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ffaa:	4633      	mov	r3, r6
 800ffac:	465a      	mov	r2, fp
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f7ff f8cc 	bl	800f14c <__s2b>
 800ffb4:	9009      	str	r0, [sp, #36]	; 0x24
 800ffb6:	2800      	cmp	r0, #0
 800ffb8:	f43f af2a 	beq.w	800fe10 <_strtod_l+0x480>
 800ffbc:	9a08      	ldr	r2, [sp, #32]
 800ffbe:	9b05      	ldr	r3, [sp, #20]
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	eba3 0307 	sub.w	r3, r3, r7
 800ffc6:	bfa8      	it	ge
 800ffc8:	2300      	movge	r3, #0
 800ffca:	930c      	str	r3, [sp, #48]	; 0x30
 800ffcc:	2500      	movs	r5, #0
 800ffce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ffd2:	9312      	str	r3, [sp, #72]	; 0x48
 800ffd4:	46ab      	mov	fp, r5
 800ffd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffd8:	4620      	mov	r0, r4
 800ffda:	6859      	ldr	r1, [r3, #4]
 800ffdc:	f7ff f80e 	bl	800effc <_Balloc>
 800ffe0:	9005      	str	r0, [sp, #20]
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	f43f af18 	beq.w	800fe18 <_strtod_l+0x488>
 800ffe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffea:	691a      	ldr	r2, [r3, #16]
 800ffec:	3202      	adds	r2, #2
 800ffee:	f103 010c 	add.w	r1, r3, #12
 800fff2:	0092      	lsls	r2, r2, #2
 800fff4:	300c      	adds	r0, #12
 800fff6:	f7fe f924 	bl	800e242 <memcpy>
 800fffa:	ec49 8b10 	vmov	d0, r8, r9
 800fffe:	aa18      	add	r2, sp, #96	; 0x60
 8010000:	a917      	add	r1, sp, #92	; 0x5c
 8010002:	4620      	mov	r0, r4
 8010004:	f7ff fbd6 	bl	800f7b4 <__d2b>
 8010008:	ec49 8b18 	vmov	d8, r8, r9
 801000c:	9016      	str	r0, [sp, #88]	; 0x58
 801000e:	2800      	cmp	r0, #0
 8010010:	f43f af02 	beq.w	800fe18 <_strtod_l+0x488>
 8010014:	2101      	movs	r1, #1
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff f930 	bl	800f27c <__i2b>
 801001c:	4683      	mov	fp, r0
 801001e:	2800      	cmp	r0, #0
 8010020:	f43f aefa 	beq.w	800fe18 <_strtod_l+0x488>
 8010024:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010026:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010028:	2e00      	cmp	r6, #0
 801002a:	bfab      	itete	ge
 801002c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801002e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010030:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010032:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010036:	bfac      	ite	ge
 8010038:	eb06 0a03 	addge.w	sl, r6, r3
 801003c:	1b9f      	sublt	r7, r3, r6
 801003e:	9b04      	ldr	r3, [sp, #16]
 8010040:	1af6      	subs	r6, r6, r3
 8010042:	4416      	add	r6, r2
 8010044:	4ba0      	ldr	r3, [pc, #640]	; (80102c8 <_strtod_l+0x938>)
 8010046:	3e01      	subs	r6, #1
 8010048:	429e      	cmp	r6, r3
 801004a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801004e:	f280 80c4 	bge.w	80101da <_strtod_l+0x84a>
 8010052:	1b9b      	subs	r3, r3, r6
 8010054:	2b1f      	cmp	r3, #31
 8010056:	eba2 0203 	sub.w	r2, r2, r3
 801005a:	f04f 0101 	mov.w	r1, #1
 801005e:	f300 80b0 	bgt.w	80101c2 <_strtod_l+0x832>
 8010062:	fa01 f303 	lsl.w	r3, r1, r3
 8010066:	930e      	str	r3, [sp, #56]	; 0x38
 8010068:	2300      	movs	r3, #0
 801006a:	930d      	str	r3, [sp, #52]	; 0x34
 801006c:	eb0a 0602 	add.w	r6, sl, r2
 8010070:	9b04      	ldr	r3, [sp, #16]
 8010072:	45b2      	cmp	sl, r6
 8010074:	4417      	add	r7, r2
 8010076:	441f      	add	r7, r3
 8010078:	4653      	mov	r3, sl
 801007a:	bfa8      	it	ge
 801007c:	4633      	movge	r3, r6
 801007e:	42bb      	cmp	r3, r7
 8010080:	bfa8      	it	ge
 8010082:	463b      	movge	r3, r7
 8010084:	2b00      	cmp	r3, #0
 8010086:	bfc2      	ittt	gt
 8010088:	1af6      	subgt	r6, r6, r3
 801008a:	1aff      	subgt	r7, r7, r3
 801008c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010092:	2b00      	cmp	r3, #0
 8010094:	dd17      	ble.n	80100c6 <_strtod_l+0x736>
 8010096:	4659      	mov	r1, fp
 8010098:	461a      	mov	r2, r3
 801009a:	4620      	mov	r0, r4
 801009c:	f7ff f9ae 	bl	800f3fc <__pow5mult>
 80100a0:	4683      	mov	fp, r0
 80100a2:	2800      	cmp	r0, #0
 80100a4:	f43f aeb8 	beq.w	800fe18 <_strtod_l+0x488>
 80100a8:	4601      	mov	r1, r0
 80100aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80100ac:	4620      	mov	r0, r4
 80100ae:	f7ff f8fb 	bl	800f2a8 <__multiply>
 80100b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80100b4:	2800      	cmp	r0, #0
 80100b6:	f43f aeaf 	beq.w	800fe18 <_strtod_l+0x488>
 80100ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80100bc:	4620      	mov	r0, r4
 80100be:	f7fe ffdd 	bl	800f07c <_Bfree>
 80100c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100c4:	9316      	str	r3, [sp, #88]	; 0x58
 80100c6:	2e00      	cmp	r6, #0
 80100c8:	f300 808c 	bgt.w	80101e4 <_strtod_l+0x854>
 80100cc:	9b08      	ldr	r3, [sp, #32]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	dd08      	ble.n	80100e4 <_strtod_l+0x754>
 80100d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100d4:	9905      	ldr	r1, [sp, #20]
 80100d6:	4620      	mov	r0, r4
 80100d8:	f7ff f990 	bl	800f3fc <__pow5mult>
 80100dc:	9005      	str	r0, [sp, #20]
 80100de:	2800      	cmp	r0, #0
 80100e0:	f43f ae9a 	beq.w	800fe18 <_strtod_l+0x488>
 80100e4:	2f00      	cmp	r7, #0
 80100e6:	dd08      	ble.n	80100fa <_strtod_l+0x76a>
 80100e8:	9905      	ldr	r1, [sp, #20]
 80100ea:	463a      	mov	r2, r7
 80100ec:	4620      	mov	r0, r4
 80100ee:	f7ff f9df 	bl	800f4b0 <__lshift>
 80100f2:	9005      	str	r0, [sp, #20]
 80100f4:	2800      	cmp	r0, #0
 80100f6:	f43f ae8f 	beq.w	800fe18 <_strtod_l+0x488>
 80100fa:	f1ba 0f00 	cmp.w	sl, #0
 80100fe:	dd08      	ble.n	8010112 <_strtod_l+0x782>
 8010100:	4659      	mov	r1, fp
 8010102:	4652      	mov	r2, sl
 8010104:	4620      	mov	r0, r4
 8010106:	f7ff f9d3 	bl	800f4b0 <__lshift>
 801010a:	4683      	mov	fp, r0
 801010c:	2800      	cmp	r0, #0
 801010e:	f43f ae83 	beq.w	800fe18 <_strtod_l+0x488>
 8010112:	9a05      	ldr	r2, [sp, #20]
 8010114:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010116:	4620      	mov	r0, r4
 8010118:	f7ff fa52 	bl	800f5c0 <__mdiff>
 801011c:	4605      	mov	r5, r0
 801011e:	2800      	cmp	r0, #0
 8010120:	f43f ae7a 	beq.w	800fe18 <_strtod_l+0x488>
 8010124:	68c3      	ldr	r3, [r0, #12]
 8010126:	930b      	str	r3, [sp, #44]	; 0x2c
 8010128:	2300      	movs	r3, #0
 801012a:	60c3      	str	r3, [r0, #12]
 801012c:	4659      	mov	r1, fp
 801012e:	f7ff fa2b 	bl	800f588 <__mcmp>
 8010132:	2800      	cmp	r0, #0
 8010134:	da60      	bge.n	80101f8 <_strtod_l+0x868>
 8010136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010138:	ea53 0308 	orrs.w	r3, r3, r8
 801013c:	f040 8084 	bne.w	8010248 <_strtod_l+0x8b8>
 8010140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010144:	2b00      	cmp	r3, #0
 8010146:	d17f      	bne.n	8010248 <_strtod_l+0x8b8>
 8010148:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801014c:	0d1b      	lsrs	r3, r3, #20
 801014e:	051b      	lsls	r3, r3, #20
 8010150:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010154:	d978      	bls.n	8010248 <_strtod_l+0x8b8>
 8010156:	696b      	ldr	r3, [r5, #20]
 8010158:	b913      	cbnz	r3, 8010160 <_strtod_l+0x7d0>
 801015a:	692b      	ldr	r3, [r5, #16]
 801015c:	2b01      	cmp	r3, #1
 801015e:	dd73      	ble.n	8010248 <_strtod_l+0x8b8>
 8010160:	4629      	mov	r1, r5
 8010162:	2201      	movs	r2, #1
 8010164:	4620      	mov	r0, r4
 8010166:	f7ff f9a3 	bl	800f4b0 <__lshift>
 801016a:	4659      	mov	r1, fp
 801016c:	4605      	mov	r5, r0
 801016e:	f7ff fa0b 	bl	800f588 <__mcmp>
 8010172:	2800      	cmp	r0, #0
 8010174:	dd68      	ble.n	8010248 <_strtod_l+0x8b8>
 8010176:	9904      	ldr	r1, [sp, #16]
 8010178:	4a54      	ldr	r2, [pc, #336]	; (80102cc <_strtod_l+0x93c>)
 801017a:	464b      	mov	r3, r9
 801017c:	2900      	cmp	r1, #0
 801017e:	f000 8084 	beq.w	801028a <_strtod_l+0x8fa>
 8010182:	ea02 0109 	and.w	r1, r2, r9
 8010186:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801018a:	dc7e      	bgt.n	801028a <_strtod_l+0x8fa>
 801018c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010190:	f77f aeb3 	ble.w	800fefa <_strtod_l+0x56a>
 8010194:	4b4e      	ldr	r3, [pc, #312]	; (80102d0 <_strtod_l+0x940>)
 8010196:	4640      	mov	r0, r8
 8010198:	4649      	mov	r1, r9
 801019a:	2200      	movs	r2, #0
 801019c:	f7f0 fa34 	bl	8000608 <__aeabi_dmul>
 80101a0:	4b4a      	ldr	r3, [pc, #296]	; (80102cc <_strtod_l+0x93c>)
 80101a2:	400b      	ands	r3, r1
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f47f ae3f 	bne.w	800fe2c <_strtod_l+0x49c>
 80101ae:	2322      	movs	r3, #34	; 0x22
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	e63b      	b.n	800fe2c <_strtod_l+0x49c>
 80101b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101b8:	fa02 f303 	lsl.w	r3, r2, r3
 80101bc:	ea03 0808 	and.w	r8, r3, r8
 80101c0:	e6e8      	b.n	800ff94 <_strtod_l+0x604>
 80101c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80101c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80101ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80101ce:	36e2      	adds	r6, #226	; 0xe2
 80101d0:	fa01 f306 	lsl.w	r3, r1, r6
 80101d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80101d8:	e748      	b.n	801006c <_strtod_l+0x6dc>
 80101da:	2100      	movs	r1, #0
 80101dc:	2301      	movs	r3, #1
 80101de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80101e2:	e743      	b.n	801006c <_strtod_l+0x6dc>
 80101e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101e6:	4632      	mov	r2, r6
 80101e8:	4620      	mov	r0, r4
 80101ea:	f7ff f961 	bl	800f4b0 <__lshift>
 80101ee:	9016      	str	r0, [sp, #88]	; 0x58
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f47f af6b 	bne.w	80100cc <_strtod_l+0x73c>
 80101f6:	e60f      	b.n	800fe18 <_strtod_l+0x488>
 80101f8:	46ca      	mov	sl, r9
 80101fa:	d171      	bne.n	80102e0 <_strtod_l+0x950>
 80101fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80101fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010202:	b352      	cbz	r2, 801025a <_strtod_l+0x8ca>
 8010204:	4a33      	ldr	r2, [pc, #204]	; (80102d4 <_strtod_l+0x944>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d12a      	bne.n	8010260 <_strtod_l+0x8d0>
 801020a:	9b04      	ldr	r3, [sp, #16]
 801020c:	4641      	mov	r1, r8
 801020e:	b1fb      	cbz	r3, 8010250 <_strtod_l+0x8c0>
 8010210:	4b2e      	ldr	r3, [pc, #184]	; (80102cc <_strtod_l+0x93c>)
 8010212:	ea09 0303 	and.w	r3, r9, r3
 8010216:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801021a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801021e:	d81a      	bhi.n	8010256 <_strtod_l+0x8c6>
 8010220:	0d1b      	lsrs	r3, r3, #20
 8010222:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010226:	fa02 f303 	lsl.w	r3, r2, r3
 801022a:	4299      	cmp	r1, r3
 801022c:	d118      	bne.n	8010260 <_strtod_l+0x8d0>
 801022e:	4b2a      	ldr	r3, [pc, #168]	; (80102d8 <_strtod_l+0x948>)
 8010230:	459a      	cmp	sl, r3
 8010232:	d102      	bne.n	801023a <_strtod_l+0x8aa>
 8010234:	3101      	adds	r1, #1
 8010236:	f43f adef 	beq.w	800fe18 <_strtod_l+0x488>
 801023a:	4b24      	ldr	r3, [pc, #144]	; (80102cc <_strtod_l+0x93c>)
 801023c:	ea0a 0303 	and.w	r3, sl, r3
 8010240:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010244:	f04f 0800 	mov.w	r8, #0
 8010248:	9b04      	ldr	r3, [sp, #16]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1a2      	bne.n	8010194 <_strtod_l+0x804>
 801024e:	e5ed      	b.n	800fe2c <_strtod_l+0x49c>
 8010250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010254:	e7e9      	b.n	801022a <_strtod_l+0x89a>
 8010256:	4613      	mov	r3, r2
 8010258:	e7e7      	b.n	801022a <_strtod_l+0x89a>
 801025a:	ea53 0308 	orrs.w	r3, r3, r8
 801025e:	d08a      	beq.n	8010176 <_strtod_l+0x7e6>
 8010260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010262:	b1e3      	cbz	r3, 801029e <_strtod_l+0x90e>
 8010264:	ea13 0f0a 	tst.w	r3, sl
 8010268:	d0ee      	beq.n	8010248 <_strtod_l+0x8b8>
 801026a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	4640      	mov	r0, r8
 8010270:	4649      	mov	r1, r9
 8010272:	b1c3      	cbz	r3, 80102a6 <_strtod_l+0x916>
 8010274:	f7ff fb6f 	bl	800f956 <sulp>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	ec51 0b18 	vmov	r0, r1, d8
 8010280:	f7f0 f80c 	bl	800029c <__adddf3>
 8010284:	4680      	mov	r8, r0
 8010286:	4689      	mov	r9, r1
 8010288:	e7de      	b.n	8010248 <_strtod_l+0x8b8>
 801028a:	4013      	ands	r3, r2
 801028c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010290:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8010294:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8010298:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801029c:	e7d4      	b.n	8010248 <_strtod_l+0x8b8>
 801029e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102a0:	ea13 0f08 	tst.w	r3, r8
 80102a4:	e7e0      	b.n	8010268 <_strtod_l+0x8d8>
 80102a6:	f7ff fb56 	bl	800f956 <sulp>
 80102aa:	4602      	mov	r2, r0
 80102ac:	460b      	mov	r3, r1
 80102ae:	ec51 0b18 	vmov	r0, r1, d8
 80102b2:	f7ef fff1 	bl	8000298 <__aeabi_dsub>
 80102b6:	2200      	movs	r2, #0
 80102b8:	2300      	movs	r3, #0
 80102ba:	4680      	mov	r8, r0
 80102bc:	4689      	mov	r9, r1
 80102be:	f7f0 fc0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d0c0      	beq.n	8010248 <_strtod_l+0x8b8>
 80102c6:	e618      	b.n	800fefa <_strtod_l+0x56a>
 80102c8:	fffffc02 	.word	0xfffffc02
 80102cc:	7ff00000 	.word	0x7ff00000
 80102d0:	39500000 	.word	0x39500000
 80102d4:	000fffff 	.word	0x000fffff
 80102d8:	7fefffff 	.word	0x7fefffff
 80102dc:	080124e0 	.word	0x080124e0
 80102e0:	4659      	mov	r1, fp
 80102e2:	4628      	mov	r0, r5
 80102e4:	f7ff fac0 	bl	800f868 <__ratio>
 80102e8:	ec57 6b10 	vmov	r6, r7, d0
 80102ec:	ee10 0a10 	vmov	r0, s0
 80102f0:	2200      	movs	r2, #0
 80102f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102f6:	4639      	mov	r1, r7
 80102f8:	f7f0 fc02 	bl	8000b00 <__aeabi_dcmple>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	d071      	beq.n	80103e4 <_strtod_l+0xa54>
 8010300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010302:	2b00      	cmp	r3, #0
 8010304:	d17c      	bne.n	8010400 <_strtod_l+0xa70>
 8010306:	f1b8 0f00 	cmp.w	r8, #0
 801030a:	d15a      	bne.n	80103c2 <_strtod_l+0xa32>
 801030c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010310:	2b00      	cmp	r3, #0
 8010312:	d15d      	bne.n	80103d0 <_strtod_l+0xa40>
 8010314:	4b90      	ldr	r3, [pc, #576]	; (8010558 <_strtod_l+0xbc8>)
 8010316:	2200      	movs	r2, #0
 8010318:	4630      	mov	r0, r6
 801031a:	4639      	mov	r1, r7
 801031c:	f7f0 fbe6 	bl	8000aec <__aeabi_dcmplt>
 8010320:	2800      	cmp	r0, #0
 8010322:	d15c      	bne.n	80103de <_strtod_l+0xa4e>
 8010324:	4630      	mov	r0, r6
 8010326:	4639      	mov	r1, r7
 8010328:	4b8c      	ldr	r3, [pc, #560]	; (801055c <_strtod_l+0xbcc>)
 801032a:	2200      	movs	r2, #0
 801032c:	f7f0 f96c 	bl	8000608 <__aeabi_dmul>
 8010330:	4606      	mov	r6, r0
 8010332:	460f      	mov	r7, r1
 8010334:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010338:	9606      	str	r6, [sp, #24]
 801033a:	9307      	str	r3, [sp, #28]
 801033c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010340:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010344:	4b86      	ldr	r3, [pc, #536]	; (8010560 <_strtod_l+0xbd0>)
 8010346:	ea0a 0303 	and.w	r3, sl, r3
 801034a:	930d      	str	r3, [sp, #52]	; 0x34
 801034c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801034e:	4b85      	ldr	r3, [pc, #532]	; (8010564 <_strtod_l+0xbd4>)
 8010350:	429a      	cmp	r2, r3
 8010352:	f040 8090 	bne.w	8010476 <_strtod_l+0xae6>
 8010356:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801035a:	ec49 8b10 	vmov	d0, r8, r9
 801035e:	f7ff f9b9 	bl	800f6d4 <__ulp>
 8010362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010366:	ec51 0b10 	vmov	r0, r1, d0
 801036a:	f7f0 f94d 	bl	8000608 <__aeabi_dmul>
 801036e:	4642      	mov	r2, r8
 8010370:	464b      	mov	r3, r9
 8010372:	f7ef ff93 	bl	800029c <__adddf3>
 8010376:	460b      	mov	r3, r1
 8010378:	4979      	ldr	r1, [pc, #484]	; (8010560 <_strtod_l+0xbd0>)
 801037a:	4a7b      	ldr	r2, [pc, #492]	; (8010568 <_strtod_l+0xbd8>)
 801037c:	4019      	ands	r1, r3
 801037e:	4291      	cmp	r1, r2
 8010380:	4680      	mov	r8, r0
 8010382:	d944      	bls.n	801040e <_strtod_l+0xa7e>
 8010384:	ee18 2a90 	vmov	r2, s17
 8010388:	4b78      	ldr	r3, [pc, #480]	; (801056c <_strtod_l+0xbdc>)
 801038a:	429a      	cmp	r2, r3
 801038c:	d104      	bne.n	8010398 <_strtod_l+0xa08>
 801038e:	ee18 3a10 	vmov	r3, s16
 8010392:	3301      	adds	r3, #1
 8010394:	f43f ad40 	beq.w	800fe18 <_strtod_l+0x488>
 8010398:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801056c <_strtod_l+0xbdc>
 801039c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80103a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80103a2:	4620      	mov	r0, r4
 80103a4:	f7fe fe6a 	bl	800f07c <_Bfree>
 80103a8:	9905      	ldr	r1, [sp, #20]
 80103aa:	4620      	mov	r0, r4
 80103ac:	f7fe fe66 	bl	800f07c <_Bfree>
 80103b0:	4659      	mov	r1, fp
 80103b2:	4620      	mov	r0, r4
 80103b4:	f7fe fe62 	bl	800f07c <_Bfree>
 80103b8:	4629      	mov	r1, r5
 80103ba:	4620      	mov	r0, r4
 80103bc:	f7fe fe5e 	bl	800f07c <_Bfree>
 80103c0:	e609      	b.n	800ffd6 <_strtod_l+0x646>
 80103c2:	f1b8 0f01 	cmp.w	r8, #1
 80103c6:	d103      	bne.n	80103d0 <_strtod_l+0xa40>
 80103c8:	f1b9 0f00 	cmp.w	r9, #0
 80103cc:	f43f ad95 	beq.w	800fefa <_strtod_l+0x56a>
 80103d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010528 <_strtod_l+0xb98>
 80103d4:	4f60      	ldr	r7, [pc, #384]	; (8010558 <_strtod_l+0xbc8>)
 80103d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103da:	2600      	movs	r6, #0
 80103dc:	e7ae      	b.n	801033c <_strtod_l+0x9ac>
 80103de:	4f5f      	ldr	r7, [pc, #380]	; (801055c <_strtod_l+0xbcc>)
 80103e0:	2600      	movs	r6, #0
 80103e2:	e7a7      	b.n	8010334 <_strtod_l+0x9a4>
 80103e4:	4b5d      	ldr	r3, [pc, #372]	; (801055c <_strtod_l+0xbcc>)
 80103e6:	4630      	mov	r0, r6
 80103e8:	4639      	mov	r1, r7
 80103ea:	2200      	movs	r2, #0
 80103ec:	f7f0 f90c 	bl	8000608 <__aeabi_dmul>
 80103f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103f2:	4606      	mov	r6, r0
 80103f4:	460f      	mov	r7, r1
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d09c      	beq.n	8010334 <_strtod_l+0x9a4>
 80103fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80103fe:	e79d      	b.n	801033c <_strtod_l+0x9ac>
 8010400:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010530 <_strtod_l+0xba0>
 8010404:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010408:	ec57 6b17 	vmov	r6, r7, d7
 801040c:	e796      	b.n	801033c <_strtod_l+0x9ac>
 801040e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010412:	9b04      	ldr	r3, [sp, #16]
 8010414:	46ca      	mov	sl, r9
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1c2      	bne.n	80103a0 <_strtod_l+0xa10>
 801041a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801041e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010420:	0d1b      	lsrs	r3, r3, #20
 8010422:	051b      	lsls	r3, r3, #20
 8010424:	429a      	cmp	r2, r3
 8010426:	d1bb      	bne.n	80103a0 <_strtod_l+0xa10>
 8010428:	4630      	mov	r0, r6
 801042a:	4639      	mov	r1, r7
 801042c:	f7f0 fc4c 	bl	8000cc8 <__aeabi_d2lz>
 8010430:	f7f0 f8bc 	bl	80005ac <__aeabi_l2d>
 8010434:	4602      	mov	r2, r0
 8010436:	460b      	mov	r3, r1
 8010438:	4630      	mov	r0, r6
 801043a:	4639      	mov	r1, r7
 801043c:	f7ef ff2c 	bl	8000298 <__aeabi_dsub>
 8010440:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010442:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010446:	ea43 0308 	orr.w	r3, r3, r8
 801044a:	4313      	orrs	r3, r2
 801044c:	4606      	mov	r6, r0
 801044e:	460f      	mov	r7, r1
 8010450:	d054      	beq.n	80104fc <_strtod_l+0xb6c>
 8010452:	a339      	add	r3, pc, #228	; (adr r3, 8010538 <_strtod_l+0xba8>)
 8010454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010458:	f7f0 fb48 	bl	8000aec <__aeabi_dcmplt>
 801045c:	2800      	cmp	r0, #0
 801045e:	f47f ace5 	bne.w	800fe2c <_strtod_l+0x49c>
 8010462:	a337      	add	r3, pc, #220	; (adr r3, 8010540 <_strtod_l+0xbb0>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	4630      	mov	r0, r6
 801046a:	4639      	mov	r1, r7
 801046c:	f7f0 fb5c 	bl	8000b28 <__aeabi_dcmpgt>
 8010470:	2800      	cmp	r0, #0
 8010472:	d095      	beq.n	80103a0 <_strtod_l+0xa10>
 8010474:	e4da      	b.n	800fe2c <_strtod_l+0x49c>
 8010476:	9b04      	ldr	r3, [sp, #16]
 8010478:	b333      	cbz	r3, 80104c8 <_strtod_l+0xb38>
 801047a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801047c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010480:	d822      	bhi.n	80104c8 <_strtod_l+0xb38>
 8010482:	a331      	add	r3, pc, #196	; (adr r3, 8010548 <_strtod_l+0xbb8>)
 8010484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010488:	4630      	mov	r0, r6
 801048a:	4639      	mov	r1, r7
 801048c:	f7f0 fb38 	bl	8000b00 <__aeabi_dcmple>
 8010490:	b1a0      	cbz	r0, 80104bc <_strtod_l+0xb2c>
 8010492:	4639      	mov	r1, r7
 8010494:	4630      	mov	r0, r6
 8010496:	f7f0 fb8f 	bl	8000bb8 <__aeabi_d2uiz>
 801049a:	2801      	cmp	r0, #1
 801049c:	bf38      	it	cc
 801049e:	2001      	movcc	r0, #1
 80104a0:	f7f0 f838 	bl	8000514 <__aeabi_ui2d>
 80104a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104a6:	4606      	mov	r6, r0
 80104a8:	460f      	mov	r7, r1
 80104aa:	bb23      	cbnz	r3, 80104f6 <_strtod_l+0xb66>
 80104ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104b0:	9010      	str	r0, [sp, #64]	; 0x40
 80104b2:	9311      	str	r3, [sp, #68]	; 0x44
 80104b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80104b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80104bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80104c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80104c4:	1a9b      	subs	r3, r3, r2
 80104c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80104c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80104cc:	eeb0 0a48 	vmov.f32	s0, s16
 80104d0:	eef0 0a68 	vmov.f32	s1, s17
 80104d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80104d8:	f7ff f8fc 	bl	800f6d4 <__ulp>
 80104dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80104e0:	ec53 2b10 	vmov	r2, r3, d0
 80104e4:	f7f0 f890 	bl	8000608 <__aeabi_dmul>
 80104e8:	ec53 2b18 	vmov	r2, r3, d8
 80104ec:	f7ef fed6 	bl	800029c <__adddf3>
 80104f0:	4680      	mov	r8, r0
 80104f2:	4689      	mov	r9, r1
 80104f4:	e78d      	b.n	8010412 <_strtod_l+0xa82>
 80104f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80104fa:	e7db      	b.n	80104b4 <_strtod_l+0xb24>
 80104fc:	a314      	add	r3, pc, #80	; (adr r3, 8010550 <_strtod_l+0xbc0>)
 80104fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010502:	f7f0 faf3 	bl	8000aec <__aeabi_dcmplt>
 8010506:	e7b3      	b.n	8010470 <_strtod_l+0xae0>
 8010508:	2300      	movs	r3, #0
 801050a:	930a      	str	r3, [sp, #40]	; 0x28
 801050c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801050e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010510:	6013      	str	r3, [r2, #0]
 8010512:	f7ff ba7c 	b.w	800fa0e <_strtod_l+0x7e>
 8010516:	2a65      	cmp	r2, #101	; 0x65
 8010518:	f43f ab75 	beq.w	800fc06 <_strtod_l+0x276>
 801051c:	2a45      	cmp	r2, #69	; 0x45
 801051e:	f43f ab72 	beq.w	800fc06 <_strtod_l+0x276>
 8010522:	2301      	movs	r3, #1
 8010524:	f7ff bbaa 	b.w	800fc7c <_strtod_l+0x2ec>
 8010528:	00000000 	.word	0x00000000
 801052c:	bff00000 	.word	0xbff00000
 8010530:	00000000 	.word	0x00000000
 8010534:	3ff00000 	.word	0x3ff00000
 8010538:	94a03595 	.word	0x94a03595
 801053c:	3fdfffff 	.word	0x3fdfffff
 8010540:	35afe535 	.word	0x35afe535
 8010544:	3fe00000 	.word	0x3fe00000
 8010548:	ffc00000 	.word	0xffc00000
 801054c:	41dfffff 	.word	0x41dfffff
 8010550:	94a03595 	.word	0x94a03595
 8010554:	3fcfffff 	.word	0x3fcfffff
 8010558:	3ff00000 	.word	0x3ff00000
 801055c:	3fe00000 	.word	0x3fe00000
 8010560:	7ff00000 	.word	0x7ff00000
 8010564:	7fe00000 	.word	0x7fe00000
 8010568:	7c9fffff 	.word	0x7c9fffff
 801056c:	7fefffff 	.word	0x7fefffff

08010570 <_strtod_r>:
 8010570:	4b01      	ldr	r3, [pc, #4]	; (8010578 <_strtod_r+0x8>)
 8010572:	f7ff ba0d 	b.w	800f990 <_strtod_l>
 8010576:	bf00      	nop
 8010578:	200000c0 	.word	0x200000c0

0801057c <__ssputs_r>:
 801057c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010580:	688e      	ldr	r6, [r1, #8]
 8010582:	461f      	mov	r7, r3
 8010584:	42be      	cmp	r6, r7
 8010586:	680b      	ldr	r3, [r1, #0]
 8010588:	4682      	mov	sl, r0
 801058a:	460c      	mov	r4, r1
 801058c:	4690      	mov	r8, r2
 801058e:	d82c      	bhi.n	80105ea <__ssputs_r+0x6e>
 8010590:	898a      	ldrh	r2, [r1, #12]
 8010592:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010596:	d026      	beq.n	80105e6 <__ssputs_r+0x6a>
 8010598:	6965      	ldr	r5, [r4, #20]
 801059a:	6909      	ldr	r1, [r1, #16]
 801059c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105a0:	eba3 0901 	sub.w	r9, r3, r1
 80105a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105a8:	1c7b      	adds	r3, r7, #1
 80105aa:	444b      	add	r3, r9
 80105ac:	106d      	asrs	r5, r5, #1
 80105ae:	429d      	cmp	r5, r3
 80105b0:	bf38      	it	cc
 80105b2:	461d      	movcc	r5, r3
 80105b4:	0553      	lsls	r3, r2, #21
 80105b6:	d527      	bpl.n	8010608 <__ssputs_r+0x8c>
 80105b8:	4629      	mov	r1, r5
 80105ba:	f7fc fbe1 	bl	800cd80 <_malloc_r>
 80105be:	4606      	mov	r6, r0
 80105c0:	b360      	cbz	r0, 801061c <__ssputs_r+0xa0>
 80105c2:	6921      	ldr	r1, [r4, #16]
 80105c4:	464a      	mov	r2, r9
 80105c6:	f7fd fe3c 	bl	800e242 <memcpy>
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105d4:	81a3      	strh	r3, [r4, #12]
 80105d6:	6126      	str	r6, [r4, #16]
 80105d8:	6165      	str	r5, [r4, #20]
 80105da:	444e      	add	r6, r9
 80105dc:	eba5 0509 	sub.w	r5, r5, r9
 80105e0:	6026      	str	r6, [r4, #0]
 80105e2:	60a5      	str	r5, [r4, #8]
 80105e4:	463e      	mov	r6, r7
 80105e6:	42be      	cmp	r6, r7
 80105e8:	d900      	bls.n	80105ec <__ssputs_r+0x70>
 80105ea:	463e      	mov	r6, r7
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	4632      	mov	r2, r6
 80105f0:	4641      	mov	r1, r8
 80105f2:	f000 fba3 	bl	8010d3c <memmove>
 80105f6:	68a3      	ldr	r3, [r4, #8]
 80105f8:	1b9b      	subs	r3, r3, r6
 80105fa:	60a3      	str	r3, [r4, #8]
 80105fc:	6823      	ldr	r3, [r4, #0]
 80105fe:	4433      	add	r3, r6
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	2000      	movs	r0, #0
 8010604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010608:	462a      	mov	r2, r5
 801060a:	f000 ff7a 	bl	8011502 <_realloc_r>
 801060e:	4606      	mov	r6, r0
 8010610:	2800      	cmp	r0, #0
 8010612:	d1e0      	bne.n	80105d6 <__ssputs_r+0x5a>
 8010614:	6921      	ldr	r1, [r4, #16]
 8010616:	4650      	mov	r0, sl
 8010618:	f7fe fca4 	bl	800ef64 <_free_r>
 801061c:	230c      	movs	r3, #12
 801061e:	f8ca 3000 	str.w	r3, [sl]
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010628:	81a3      	strh	r3, [r4, #12]
 801062a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801062e:	e7e9      	b.n	8010604 <__ssputs_r+0x88>

08010630 <_svfiprintf_r>:
 8010630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010634:	4698      	mov	r8, r3
 8010636:	898b      	ldrh	r3, [r1, #12]
 8010638:	061b      	lsls	r3, r3, #24
 801063a:	b09d      	sub	sp, #116	; 0x74
 801063c:	4607      	mov	r7, r0
 801063e:	460d      	mov	r5, r1
 8010640:	4614      	mov	r4, r2
 8010642:	d50e      	bpl.n	8010662 <_svfiprintf_r+0x32>
 8010644:	690b      	ldr	r3, [r1, #16]
 8010646:	b963      	cbnz	r3, 8010662 <_svfiprintf_r+0x32>
 8010648:	2140      	movs	r1, #64	; 0x40
 801064a:	f7fc fb99 	bl	800cd80 <_malloc_r>
 801064e:	6028      	str	r0, [r5, #0]
 8010650:	6128      	str	r0, [r5, #16]
 8010652:	b920      	cbnz	r0, 801065e <_svfiprintf_r+0x2e>
 8010654:	230c      	movs	r3, #12
 8010656:	603b      	str	r3, [r7, #0]
 8010658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801065c:	e0d0      	b.n	8010800 <_svfiprintf_r+0x1d0>
 801065e:	2340      	movs	r3, #64	; 0x40
 8010660:	616b      	str	r3, [r5, #20]
 8010662:	2300      	movs	r3, #0
 8010664:	9309      	str	r3, [sp, #36]	; 0x24
 8010666:	2320      	movs	r3, #32
 8010668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801066c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010670:	2330      	movs	r3, #48	; 0x30
 8010672:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010818 <_svfiprintf_r+0x1e8>
 8010676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801067a:	f04f 0901 	mov.w	r9, #1
 801067e:	4623      	mov	r3, r4
 8010680:	469a      	mov	sl, r3
 8010682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010686:	b10a      	cbz	r2, 801068c <_svfiprintf_r+0x5c>
 8010688:	2a25      	cmp	r2, #37	; 0x25
 801068a:	d1f9      	bne.n	8010680 <_svfiprintf_r+0x50>
 801068c:	ebba 0b04 	subs.w	fp, sl, r4
 8010690:	d00b      	beq.n	80106aa <_svfiprintf_r+0x7a>
 8010692:	465b      	mov	r3, fp
 8010694:	4622      	mov	r2, r4
 8010696:	4629      	mov	r1, r5
 8010698:	4638      	mov	r0, r7
 801069a:	f7ff ff6f 	bl	801057c <__ssputs_r>
 801069e:	3001      	adds	r0, #1
 80106a0:	f000 80a9 	beq.w	80107f6 <_svfiprintf_r+0x1c6>
 80106a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106a6:	445a      	add	r2, fp
 80106a8:	9209      	str	r2, [sp, #36]	; 0x24
 80106aa:	f89a 3000 	ldrb.w	r3, [sl]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f000 80a1 	beq.w	80107f6 <_svfiprintf_r+0x1c6>
 80106b4:	2300      	movs	r3, #0
 80106b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106be:	f10a 0a01 	add.w	sl, sl, #1
 80106c2:	9304      	str	r3, [sp, #16]
 80106c4:	9307      	str	r3, [sp, #28]
 80106c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106ca:	931a      	str	r3, [sp, #104]	; 0x68
 80106cc:	4654      	mov	r4, sl
 80106ce:	2205      	movs	r2, #5
 80106d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106d4:	4850      	ldr	r0, [pc, #320]	; (8010818 <_svfiprintf_r+0x1e8>)
 80106d6:	f7ef fd83 	bl	80001e0 <memchr>
 80106da:	9a04      	ldr	r2, [sp, #16]
 80106dc:	b9d8      	cbnz	r0, 8010716 <_svfiprintf_r+0xe6>
 80106de:	06d0      	lsls	r0, r2, #27
 80106e0:	bf44      	itt	mi
 80106e2:	2320      	movmi	r3, #32
 80106e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106e8:	0711      	lsls	r1, r2, #28
 80106ea:	bf44      	itt	mi
 80106ec:	232b      	movmi	r3, #43	; 0x2b
 80106ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106f2:	f89a 3000 	ldrb.w	r3, [sl]
 80106f6:	2b2a      	cmp	r3, #42	; 0x2a
 80106f8:	d015      	beq.n	8010726 <_svfiprintf_r+0xf6>
 80106fa:	9a07      	ldr	r2, [sp, #28]
 80106fc:	4654      	mov	r4, sl
 80106fe:	2000      	movs	r0, #0
 8010700:	f04f 0c0a 	mov.w	ip, #10
 8010704:	4621      	mov	r1, r4
 8010706:	f811 3b01 	ldrb.w	r3, [r1], #1
 801070a:	3b30      	subs	r3, #48	; 0x30
 801070c:	2b09      	cmp	r3, #9
 801070e:	d94d      	bls.n	80107ac <_svfiprintf_r+0x17c>
 8010710:	b1b0      	cbz	r0, 8010740 <_svfiprintf_r+0x110>
 8010712:	9207      	str	r2, [sp, #28]
 8010714:	e014      	b.n	8010740 <_svfiprintf_r+0x110>
 8010716:	eba0 0308 	sub.w	r3, r0, r8
 801071a:	fa09 f303 	lsl.w	r3, r9, r3
 801071e:	4313      	orrs	r3, r2
 8010720:	9304      	str	r3, [sp, #16]
 8010722:	46a2      	mov	sl, r4
 8010724:	e7d2      	b.n	80106cc <_svfiprintf_r+0x9c>
 8010726:	9b03      	ldr	r3, [sp, #12]
 8010728:	1d19      	adds	r1, r3, #4
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	9103      	str	r1, [sp, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	bfbb      	ittet	lt
 8010732:	425b      	neglt	r3, r3
 8010734:	f042 0202 	orrlt.w	r2, r2, #2
 8010738:	9307      	strge	r3, [sp, #28]
 801073a:	9307      	strlt	r3, [sp, #28]
 801073c:	bfb8      	it	lt
 801073e:	9204      	strlt	r2, [sp, #16]
 8010740:	7823      	ldrb	r3, [r4, #0]
 8010742:	2b2e      	cmp	r3, #46	; 0x2e
 8010744:	d10c      	bne.n	8010760 <_svfiprintf_r+0x130>
 8010746:	7863      	ldrb	r3, [r4, #1]
 8010748:	2b2a      	cmp	r3, #42	; 0x2a
 801074a:	d134      	bne.n	80107b6 <_svfiprintf_r+0x186>
 801074c:	9b03      	ldr	r3, [sp, #12]
 801074e:	1d1a      	adds	r2, r3, #4
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	9203      	str	r2, [sp, #12]
 8010754:	2b00      	cmp	r3, #0
 8010756:	bfb8      	it	lt
 8010758:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801075c:	3402      	adds	r4, #2
 801075e:	9305      	str	r3, [sp, #20]
 8010760:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010828 <_svfiprintf_r+0x1f8>
 8010764:	7821      	ldrb	r1, [r4, #0]
 8010766:	2203      	movs	r2, #3
 8010768:	4650      	mov	r0, sl
 801076a:	f7ef fd39 	bl	80001e0 <memchr>
 801076e:	b138      	cbz	r0, 8010780 <_svfiprintf_r+0x150>
 8010770:	9b04      	ldr	r3, [sp, #16]
 8010772:	eba0 000a 	sub.w	r0, r0, sl
 8010776:	2240      	movs	r2, #64	; 0x40
 8010778:	4082      	lsls	r2, r0
 801077a:	4313      	orrs	r3, r2
 801077c:	3401      	adds	r4, #1
 801077e:	9304      	str	r3, [sp, #16]
 8010780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010784:	4825      	ldr	r0, [pc, #148]	; (801081c <_svfiprintf_r+0x1ec>)
 8010786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801078a:	2206      	movs	r2, #6
 801078c:	f7ef fd28 	bl	80001e0 <memchr>
 8010790:	2800      	cmp	r0, #0
 8010792:	d038      	beq.n	8010806 <_svfiprintf_r+0x1d6>
 8010794:	4b22      	ldr	r3, [pc, #136]	; (8010820 <_svfiprintf_r+0x1f0>)
 8010796:	bb1b      	cbnz	r3, 80107e0 <_svfiprintf_r+0x1b0>
 8010798:	9b03      	ldr	r3, [sp, #12]
 801079a:	3307      	adds	r3, #7
 801079c:	f023 0307 	bic.w	r3, r3, #7
 80107a0:	3308      	adds	r3, #8
 80107a2:	9303      	str	r3, [sp, #12]
 80107a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a6:	4433      	add	r3, r6
 80107a8:	9309      	str	r3, [sp, #36]	; 0x24
 80107aa:	e768      	b.n	801067e <_svfiprintf_r+0x4e>
 80107ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80107b0:	460c      	mov	r4, r1
 80107b2:	2001      	movs	r0, #1
 80107b4:	e7a6      	b.n	8010704 <_svfiprintf_r+0xd4>
 80107b6:	2300      	movs	r3, #0
 80107b8:	3401      	adds	r4, #1
 80107ba:	9305      	str	r3, [sp, #20]
 80107bc:	4619      	mov	r1, r3
 80107be:	f04f 0c0a 	mov.w	ip, #10
 80107c2:	4620      	mov	r0, r4
 80107c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107c8:	3a30      	subs	r2, #48	; 0x30
 80107ca:	2a09      	cmp	r2, #9
 80107cc:	d903      	bls.n	80107d6 <_svfiprintf_r+0x1a6>
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d0c6      	beq.n	8010760 <_svfiprintf_r+0x130>
 80107d2:	9105      	str	r1, [sp, #20]
 80107d4:	e7c4      	b.n	8010760 <_svfiprintf_r+0x130>
 80107d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80107da:	4604      	mov	r4, r0
 80107dc:	2301      	movs	r3, #1
 80107de:	e7f0      	b.n	80107c2 <_svfiprintf_r+0x192>
 80107e0:	ab03      	add	r3, sp, #12
 80107e2:	9300      	str	r3, [sp, #0]
 80107e4:	462a      	mov	r2, r5
 80107e6:	4b0f      	ldr	r3, [pc, #60]	; (8010824 <_svfiprintf_r+0x1f4>)
 80107e8:	a904      	add	r1, sp, #16
 80107ea:	4638      	mov	r0, r7
 80107ec:	f7fc fc82 	bl	800d0f4 <_printf_float>
 80107f0:	1c42      	adds	r2, r0, #1
 80107f2:	4606      	mov	r6, r0
 80107f4:	d1d6      	bne.n	80107a4 <_svfiprintf_r+0x174>
 80107f6:	89ab      	ldrh	r3, [r5, #12]
 80107f8:	065b      	lsls	r3, r3, #25
 80107fa:	f53f af2d 	bmi.w	8010658 <_svfiprintf_r+0x28>
 80107fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010800:	b01d      	add	sp, #116	; 0x74
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	ab03      	add	r3, sp, #12
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	462a      	mov	r2, r5
 801080c:	4b05      	ldr	r3, [pc, #20]	; (8010824 <_svfiprintf_r+0x1f4>)
 801080e:	a904      	add	r1, sp, #16
 8010810:	4638      	mov	r0, r7
 8010812:	f7fc ff13 	bl	800d63c <_printf_i>
 8010816:	e7eb      	b.n	80107f0 <_svfiprintf_r+0x1c0>
 8010818:	08012508 	.word	0x08012508
 801081c:	08012512 	.word	0x08012512
 8010820:	0800d0f5 	.word	0x0800d0f5
 8010824:	0801057d 	.word	0x0801057d
 8010828:	0801250e 	.word	0x0801250e

0801082c <__sfputc_r>:
 801082c:	6893      	ldr	r3, [r2, #8]
 801082e:	3b01      	subs	r3, #1
 8010830:	2b00      	cmp	r3, #0
 8010832:	b410      	push	{r4}
 8010834:	6093      	str	r3, [r2, #8]
 8010836:	da08      	bge.n	801084a <__sfputc_r+0x1e>
 8010838:	6994      	ldr	r4, [r2, #24]
 801083a:	42a3      	cmp	r3, r4
 801083c:	db01      	blt.n	8010842 <__sfputc_r+0x16>
 801083e:	290a      	cmp	r1, #10
 8010840:	d103      	bne.n	801084a <__sfputc_r+0x1e>
 8010842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010846:	f7fd bbc6 	b.w	800dfd6 <__swbuf_r>
 801084a:	6813      	ldr	r3, [r2, #0]
 801084c:	1c58      	adds	r0, r3, #1
 801084e:	6010      	str	r0, [r2, #0]
 8010850:	7019      	strb	r1, [r3, #0]
 8010852:	4608      	mov	r0, r1
 8010854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010858:	4770      	bx	lr

0801085a <__sfputs_r>:
 801085a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085c:	4606      	mov	r6, r0
 801085e:	460f      	mov	r7, r1
 8010860:	4614      	mov	r4, r2
 8010862:	18d5      	adds	r5, r2, r3
 8010864:	42ac      	cmp	r4, r5
 8010866:	d101      	bne.n	801086c <__sfputs_r+0x12>
 8010868:	2000      	movs	r0, #0
 801086a:	e007      	b.n	801087c <__sfputs_r+0x22>
 801086c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010870:	463a      	mov	r2, r7
 8010872:	4630      	mov	r0, r6
 8010874:	f7ff ffda 	bl	801082c <__sfputc_r>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	d1f3      	bne.n	8010864 <__sfputs_r+0xa>
 801087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010880 <_vfiprintf_r>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	460d      	mov	r5, r1
 8010886:	b09d      	sub	sp, #116	; 0x74
 8010888:	4614      	mov	r4, r2
 801088a:	4698      	mov	r8, r3
 801088c:	4606      	mov	r6, r0
 801088e:	b118      	cbz	r0, 8010898 <_vfiprintf_r+0x18>
 8010890:	6a03      	ldr	r3, [r0, #32]
 8010892:	b90b      	cbnz	r3, 8010898 <_vfiprintf_r+0x18>
 8010894:	f7fd fa90 	bl	800ddb8 <__sinit>
 8010898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801089a:	07d9      	lsls	r1, r3, #31
 801089c:	d405      	bmi.n	80108aa <_vfiprintf_r+0x2a>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	059a      	lsls	r2, r3, #22
 80108a2:	d402      	bmi.n	80108aa <_vfiprintf_r+0x2a>
 80108a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108a6:	f7fd fcca 	bl	800e23e <__retarget_lock_acquire_recursive>
 80108aa:	89ab      	ldrh	r3, [r5, #12]
 80108ac:	071b      	lsls	r3, r3, #28
 80108ae:	d501      	bpl.n	80108b4 <_vfiprintf_r+0x34>
 80108b0:	692b      	ldr	r3, [r5, #16]
 80108b2:	b99b      	cbnz	r3, 80108dc <_vfiprintf_r+0x5c>
 80108b4:	4629      	mov	r1, r5
 80108b6:	4630      	mov	r0, r6
 80108b8:	f7fd fbca 	bl	800e050 <__swsetup_r>
 80108bc:	b170      	cbz	r0, 80108dc <_vfiprintf_r+0x5c>
 80108be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108c0:	07dc      	lsls	r4, r3, #31
 80108c2:	d504      	bpl.n	80108ce <_vfiprintf_r+0x4e>
 80108c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108c8:	b01d      	add	sp, #116	; 0x74
 80108ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ce:	89ab      	ldrh	r3, [r5, #12]
 80108d0:	0598      	lsls	r0, r3, #22
 80108d2:	d4f7      	bmi.n	80108c4 <_vfiprintf_r+0x44>
 80108d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108d6:	f7fd fcb3 	bl	800e240 <__retarget_lock_release_recursive>
 80108da:	e7f3      	b.n	80108c4 <_vfiprintf_r+0x44>
 80108dc:	2300      	movs	r3, #0
 80108de:	9309      	str	r3, [sp, #36]	; 0x24
 80108e0:	2320      	movs	r3, #32
 80108e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80108ea:	2330      	movs	r3, #48	; 0x30
 80108ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010aa0 <_vfiprintf_r+0x220>
 80108f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108f4:	f04f 0901 	mov.w	r9, #1
 80108f8:	4623      	mov	r3, r4
 80108fa:	469a      	mov	sl, r3
 80108fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010900:	b10a      	cbz	r2, 8010906 <_vfiprintf_r+0x86>
 8010902:	2a25      	cmp	r2, #37	; 0x25
 8010904:	d1f9      	bne.n	80108fa <_vfiprintf_r+0x7a>
 8010906:	ebba 0b04 	subs.w	fp, sl, r4
 801090a:	d00b      	beq.n	8010924 <_vfiprintf_r+0xa4>
 801090c:	465b      	mov	r3, fp
 801090e:	4622      	mov	r2, r4
 8010910:	4629      	mov	r1, r5
 8010912:	4630      	mov	r0, r6
 8010914:	f7ff ffa1 	bl	801085a <__sfputs_r>
 8010918:	3001      	adds	r0, #1
 801091a:	f000 80a9 	beq.w	8010a70 <_vfiprintf_r+0x1f0>
 801091e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010920:	445a      	add	r2, fp
 8010922:	9209      	str	r2, [sp, #36]	; 0x24
 8010924:	f89a 3000 	ldrb.w	r3, [sl]
 8010928:	2b00      	cmp	r3, #0
 801092a:	f000 80a1 	beq.w	8010a70 <_vfiprintf_r+0x1f0>
 801092e:	2300      	movs	r3, #0
 8010930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010938:	f10a 0a01 	add.w	sl, sl, #1
 801093c:	9304      	str	r3, [sp, #16]
 801093e:	9307      	str	r3, [sp, #28]
 8010940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010944:	931a      	str	r3, [sp, #104]	; 0x68
 8010946:	4654      	mov	r4, sl
 8010948:	2205      	movs	r2, #5
 801094a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801094e:	4854      	ldr	r0, [pc, #336]	; (8010aa0 <_vfiprintf_r+0x220>)
 8010950:	f7ef fc46 	bl	80001e0 <memchr>
 8010954:	9a04      	ldr	r2, [sp, #16]
 8010956:	b9d8      	cbnz	r0, 8010990 <_vfiprintf_r+0x110>
 8010958:	06d1      	lsls	r1, r2, #27
 801095a:	bf44      	itt	mi
 801095c:	2320      	movmi	r3, #32
 801095e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010962:	0713      	lsls	r3, r2, #28
 8010964:	bf44      	itt	mi
 8010966:	232b      	movmi	r3, #43	; 0x2b
 8010968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801096c:	f89a 3000 	ldrb.w	r3, [sl]
 8010970:	2b2a      	cmp	r3, #42	; 0x2a
 8010972:	d015      	beq.n	80109a0 <_vfiprintf_r+0x120>
 8010974:	9a07      	ldr	r2, [sp, #28]
 8010976:	4654      	mov	r4, sl
 8010978:	2000      	movs	r0, #0
 801097a:	f04f 0c0a 	mov.w	ip, #10
 801097e:	4621      	mov	r1, r4
 8010980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010984:	3b30      	subs	r3, #48	; 0x30
 8010986:	2b09      	cmp	r3, #9
 8010988:	d94d      	bls.n	8010a26 <_vfiprintf_r+0x1a6>
 801098a:	b1b0      	cbz	r0, 80109ba <_vfiprintf_r+0x13a>
 801098c:	9207      	str	r2, [sp, #28]
 801098e:	e014      	b.n	80109ba <_vfiprintf_r+0x13a>
 8010990:	eba0 0308 	sub.w	r3, r0, r8
 8010994:	fa09 f303 	lsl.w	r3, r9, r3
 8010998:	4313      	orrs	r3, r2
 801099a:	9304      	str	r3, [sp, #16]
 801099c:	46a2      	mov	sl, r4
 801099e:	e7d2      	b.n	8010946 <_vfiprintf_r+0xc6>
 80109a0:	9b03      	ldr	r3, [sp, #12]
 80109a2:	1d19      	adds	r1, r3, #4
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	9103      	str	r1, [sp, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	bfbb      	ittet	lt
 80109ac:	425b      	neglt	r3, r3
 80109ae:	f042 0202 	orrlt.w	r2, r2, #2
 80109b2:	9307      	strge	r3, [sp, #28]
 80109b4:	9307      	strlt	r3, [sp, #28]
 80109b6:	bfb8      	it	lt
 80109b8:	9204      	strlt	r2, [sp, #16]
 80109ba:	7823      	ldrb	r3, [r4, #0]
 80109bc:	2b2e      	cmp	r3, #46	; 0x2e
 80109be:	d10c      	bne.n	80109da <_vfiprintf_r+0x15a>
 80109c0:	7863      	ldrb	r3, [r4, #1]
 80109c2:	2b2a      	cmp	r3, #42	; 0x2a
 80109c4:	d134      	bne.n	8010a30 <_vfiprintf_r+0x1b0>
 80109c6:	9b03      	ldr	r3, [sp, #12]
 80109c8:	1d1a      	adds	r2, r3, #4
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	9203      	str	r2, [sp, #12]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bfb8      	it	lt
 80109d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80109d6:	3402      	adds	r4, #2
 80109d8:	9305      	str	r3, [sp, #20]
 80109da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010ab0 <_vfiprintf_r+0x230>
 80109de:	7821      	ldrb	r1, [r4, #0]
 80109e0:	2203      	movs	r2, #3
 80109e2:	4650      	mov	r0, sl
 80109e4:	f7ef fbfc 	bl	80001e0 <memchr>
 80109e8:	b138      	cbz	r0, 80109fa <_vfiprintf_r+0x17a>
 80109ea:	9b04      	ldr	r3, [sp, #16]
 80109ec:	eba0 000a 	sub.w	r0, r0, sl
 80109f0:	2240      	movs	r2, #64	; 0x40
 80109f2:	4082      	lsls	r2, r0
 80109f4:	4313      	orrs	r3, r2
 80109f6:	3401      	adds	r4, #1
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109fe:	4829      	ldr	r0, [pc, #164]	; (8010aa4 <_vfiprintf_r+0x224>)
 8010a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a04:	2206      	movs	r2, #6
 8010a06:	f7ef fbeb 	bl	80001e0 <memchr>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d03f      	beq.n	8010a8e <_vfiprintf_r+0x20e>
 8010a0e:	4b26      	ldr	r3, [pc, #152]	; (8010aa8 <_vfiprintf_r+0x228>)
 8010a10:	bb1b      	cbnz	r3, 8010a5a <_vfiprintf_r+0x1da>
 8010a12:	9b03      	ldr	r3, [sp, #12]
 8010a14:	3307      	adds	r3, #7
 8010a16:	f023 0307 	bic.w	r3, r3, #7
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	9303      	str	r3, [sp, #12]
 8010a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a20:	443b      	add	r3, r7
 8010a22:	9309      	str	r3, [sp, #36]	; 0x24
 8010a24:	e768      	b.n	80108f8 <_vfiprintf_r+0x78>
 8010a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	e7a6      	b.n	801097e <_vfiprintf_r+0xfe>
 8010a30:	2300      	movs	r3, #0
 8010a32:	3401      	adds	r4, #1
 8010a34:	9305      	str	r3, [sp, #20]
 8010a36:	4619      	mov	r1, r3
 8010a38:	f04f 0c0a 	mov.w	ip, #10
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a42:	3a30      	subs	r2, #48	; 0x30
 8010a44:	2a09      	cmp	r2, #9
 8010a46:	d903      	bls.n	8010a50 <_vfiprintf_r+0x1d0>
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d0c6      	beq.n	80109da <_vfiprintf_r+0x15a>
 8010a4c:	9105      	str	r1, [sp, #20]
 8010a4e:	e7c4      	b.n	80109da <_vfiprintf_r+0x15a>
 8010a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a54:	4604      	mov	r4, r0
 8010a56:	2301      	movs	r3, #1
 8010a58:	e7f0      	b.n	8010a3c <_vfiprintf_r+0x1bc>
 8010a5a:	ab03      	add	r3, sp, #12
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	462a      	mov	r2, r5
 8010a60:	4b12      	ldr	r3, [pc, #72]	; (8010aac <_vfiprintf_r+0x22c>)
 8010a62:	a904      	add	r1, sp, #16
 8010a64:	4630      	mov	r0, r6
 8010a66:	f7fc fb45 	bl	800d0f4 <_printf_float>
 8010a6a:	4607      	mov	r7, r0
 8010a6c:	1c78      	adds	r0, r7, #1
 8010a6e:	d1d6      	bne.n	8010a1e <_vfiprintf_r+0x19e>
 8010a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a72:	07d9      	lsls	r1, r3, #31
 8010a74:	d405      	bmi.n	8010a82 <_vfiprintf_r+0x202>
 8010a76:	89ab      	ldrh	r3, [r5, #12]
 8010a78:	059a      	lsls	r2, r3, #22
 8010a7a:	d402      	bmi.n	8010a82 <_vfiprintf_r+0x202>
 8010a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a7e:	f7fd fbdf 	bl	800e240 <__retarget_lock_release_recursive>
 8010a82:	89ab      	ldrh	r3, [r5, #12]
 8010a84:	065b      	lsls	r3, r3, #25
 8010a86:	f53f af1d 	bmi.w	80108c4 <_vfiprintf_r+0x44>
 8010a8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a8c:	e71c      	b.n	80108c8 <_vfiprintf_r+0x48>
 8010a8e:	ab03      	add	r3, sp, #12
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	462a      	mov	r2, r5
 8010a94:	4b05      	ldr	r3, [pc, #20]	; (8010aac <_vfiprintf_r+0x22c>)
 8010a96:	a904      	add	r1, sp, #16
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f7fc fdcf 	bl	800d63c <_printf_i>
 8010a9e:	e7e4      	b.n	8010a6a <_vfiprintf_r+0x1ea>
 8010aa0:	08012508 	.word	0x08012508
 8010aa4:	08012512 	.word	0x08012512
 8010aa8:	0800d0f5 	.word	0x0800d0f5
 8010aac:	0801085b 	.word	0x0801085b
 8010ab0:	0801250e 	.word	0x0801250e

08010ab4 <__sflush_r>:
 8010ab4:	898a      	ldrh	r2, [r1, #12]
 8010ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aba:	4605      	mov	r5, r0
 8010abc:	0710      	lsls	r0, r2, #28
 8010abe:	460c      	mov	r4, r1
 8010ac0:	d458      	bmi.n	8010b74 <__sflush_r+0xc0>
 8010ac2:	684b      	ldr	r3, [r1, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	dc05      	bgt.n	8010ad4 <__sflush_r+0x20>
 8010ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	dc02      	bgt.n	8010ad4 <__sflush_r+0x20>
 8010ace:	2000      	movs	r0, #0
 8010ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ad6:	2e00      	cmp	r6, #0
 8010ad8:	d0f9      	beq.n	8010ace <__sflush_r+0x1a>
 8010ada:	2300      	movs	r3, #0
 8010adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ae0:	682f      	ldr	r7, [r5, #0]
 8010ae2:	6a21      	ldr	r1, [r4, #32]
 8010ae4:	602b      	str	r3, [r5, #0]
 8010ae6:	d032      	beq.n	8010b4e <__sflush_r+0x9a>
 8010ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010aea:	89a3      	ldrh	r3, [r4, #12]
 8010aec:	075a      	lsls	r2, r3, #29
 8010aee:	d505      	bpl.n	8010afc <__sflush_r+0x48>
 8010af0:	6863      	ldr	r3, [r4, #4]
 8010af2:	1ac0      	subs	r0, r0, r3
 8010af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010af6:	b10b      	cbz	r3, 8010afc <__sflush_r+0x48>
 8010af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010afa:	1ac0      	subs	r0, r0, r3
 8010afc:	2300      	movs	r3, #0
 8010afe:	4602      	mov	r2, r0
 8010b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010b02:	6a21      	ldr	r1, [r4, #32]
 8010b04:	4628      	mov	r0, r5
 8010b06:	47b0      	blx	r6
 8010b08:	1c43      	adds	r3, r0, #1
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	d106      	bne.n	8010b1c <__sflush_r+0x68>
 8010b0e:	6829      	ldr	r1, [r5, #0]
 8010b10:	291d      	cmp	r1, #29
 8010b12:	d82b      	bhi.n	8010b6c <__sflush_r+0xb8>
 8010b14:	4a29      	ldr	r2, [pc, #164]	; (8010bbc <__sflush_r+0x108>)
 8010b16:	410a      	asrs	r2, r1
 8010b18:	07d6      	lsls	r6, r2, #31
 8010b1a:	d427      	bmi.n	8010b6c <__sflush_r+0xb8>
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	6062      	str	r2, [r4, #4]
 8010b20:	04d9      	lsls	r1, r3, #19
 8010b22:	6922      	ldr	r2, [r4, #16]
 8010b24:	6022      	str	r2, [r4, #0]
 8010b26:	d504      	bpl.n	8010b32 <__sflush_r+0x7e>
 8010b28:	1c42      	adds	r2, r0, #1
 8010b2a:	d101      	bne.n	8010b30 <__sflush_r+0x7c>
 8010b2c:	682b      	ldr	r3, [r5, #0]
 8010b2e:	b903      	cbnz	r3, 8010b32 <__sflush_r+0x7e>
 8010b30:	6560      	str	r0, [r4, #84]	; 0x54
 8010b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b34:	602f      	str	r7, [r5, #0]
 8010b36:	2900      	cmp	r1, #0
 8010b38:	d0c9      	beq.n	8010ace <__sflush_r+0x1a>
 8010b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b3e:	4299      	cmp	r1, r3
 8010b40:	d002      	beq.n	8010b48 <__sflush_r+0x94>
 8010b42:	4628      	mov	r0, r5
 8010b44:	f7fe fa0e 	bl	800ef64 <_free_r>
 8010b48:	2000      	movs	r0, #0
 8010b4a:	6360      	str	r0, [r4, #52]	; 0x34
 8010b4c:	e7c0      	b.n	8010ad0 <__sflush_r+0x1c>
 8010b4e:	2301      	movs	r3, #1
 8010b50:	4628      	mov	r0, r5
 8010b52:	47b0      	blx	r6
 8010b54:	1c41      	adds	r1, r0, #1
 8010b56:	d1c8      	bne.n	8010aea <__sflush_r+0x36>
 8010b58:	682b      	ldr	r3, [r5, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d0c5      	beq.n	8010aea <__sflush_r+0x36>
 8010b5e:	2b1d      	cmp	r3, #29
 8010b60:	d001      	beq.n	8010b66 <__sflush_r+0xb2>
 8010b62:	2b16      	cmp	r3, #22
 8010b64:	d101      	bne.n	8010b6a <__sflush_r+0xb6>
 8010b66:	602f      	str	r7, [r5, #0]
 8010b68:	e7b1      	b.n	8010ace <__sflush_r+0x1a>
 8010b6a:	89a3      	ldrh	r3, [r4, #12]
 8010b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b70:	81a3      	strh	r3, [r4, #12]
 8010b72:	e7ad      	b.n	8010ad0 <__sflush_r+0x1c>
 8010b74:	690f      	ldr	r7, [r1, #16]
 8010b76:	2f00      	cmp	r7, #0
 8010b78:	d0a9      	beq.n	8010ace <__sflush_r+0x1a>
 8010b7a:	0793      	lsls	r3, r2, #30
 8010b7c:	680e      	ldr	r6, [r1, #0]
 8010b7e:	bf08      	it	eq
 8010b80:	694b      	ldreq	r3, [r1, #20]
 8010b82:	600f      	str	r7, [r1, #0]
 8010b84:	bf18      	it	ne
 8010b86:	2300      	movne	r3, #0
 8010b88:	eba6 0807 	sub.w	r8, r6, r7
 8010b8c:	608b      	str	r3, [r1, #8]
 8010b8e:	f1b8 0f00 	cmp.w	r8, #0
 8010b92:	dd9c      	ble.n	8010ace <__sflush_r+0x1a>
 8010b94:	6a21      	ldr	r1, [r4, #32]
 8010b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b98:	4643      	mov	r3, r8
 8010b9a:	463a      	mov	r2, r7
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	47b0      	blx	r6
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	dc06      	bgt.n	8010bb2 <__sflush_r+0xfe>
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010baa:	81a3      	strh	r3, [r4, #12]
 8010bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bb0:	e78e      	b.n	8010ad0 <__sflush_r+0x1c>
 8010bb2:	4407      	add	r7, r0
 8010bb4:	eba8 0800 	sub.w	r8, r8, r0
 8010bb8:	e7e9      	b.n	8010b8e <__sflush_r+0xda>
 8010bba:	bf00      	nop
 8010bbc:	dfbffffe 	.word	0xdfbffffe

08010bc0 <_fflush_r>:
 8010bc0:	b538      	push	{r3, r4, r5, lr}
 8010bc2:	690b      	ldr	r3, [r1, #16]
 8010bc4:	4605      	mov	r5, r0
 8010bc6:	460c      	mov	r4, r1
 8010bc8:	b913      	cbnz	r3, 8010bd0 <_fflush_r+0x10>
 8010bca:	2500      	movs	r5, #0
 8010bcc:	4628      	mov	r0, r5
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	b118      	cbz	r0, 8010bda <_fflush_r+0x1a>
 8010bd2:	6a03      	ldr	r3, [r0, #32]
 8010bd4:	b90b      	cbnz	r3, 8010bda <_fflush_r+0x1a>
 8010bd6:	f7fd f8ef 	bl	800ddb8 <__sinit>
 8010bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d0f3      	beq.n	8010bca <_fflush_r+0xa>
 8010be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010be4:	07d0      	lsls	r0, r2, #31
 8010be6:	d404      	bmi.n	8010bf2 <_fflush_r+0x32>
 8010be8:	0599      	lsls	r1, r3, #22
 8010bea:	d402      	bmi.n	8010bf2 <_fflush_r+0x32>
 8010bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bee:	f7fd fb26 	bl	800e23e <__retarget_lock_acquire_recursive>
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	4621      	mov	r1, r4
 8010bf6:	f7ff ff5d 	bl	8010ab4 <__sflush_r>
 8010bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bfc:	07da      	lsls	r2, r3, #31
 8010bfe:	4605      	mov	r5, r0
 8010c00:	d4e4      	bmi.n	8010bcc <_fflush_r+0xc>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	059b      	lsls	r3, r3, #22
 8010c06:	d4e1      	bmi.n	8010bcc <_fflush_r+0xc>
 8010c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c0a:	f7fd fb19 	bl	800e240 <__retarget_lock_release_recursive>
 8010c0e:	e7dd      	b.n	8010bcc <_fflush_r+0xc>

08010c10 <__swhatbuf_r>:
 8010c10:	b570      	push	{r4, r5, r6, lr}
 8010c12:	460c      	mov	r4, r1
 8010c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c18:	2900      	cmp	r1, #0
 8010c1a:	b096      	sub	sp, #88	; 0x58
 8010c1c:	4615      	mov	r5, r2
 8010c1e:	461e      	mov	r6, r3
 8010c20:	da0d      	bge.n	8010c3e <__swhatbuf_r+0x2e>
 8010c22:	89a3      	ldrh	r3, [r4, #12]
 8010c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010c28:	f04f 0100 	mov.w	r1, #0
 8010c2c:	bf0c      	ite	eq
 8010c2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010c32:	2340      	movne	r3, #64	; 0x40
 8010c34:	2000      	movs	r0, #0
 8010c36:	6031      	str	r1, [r6, #0]
 8010c38:	602b      	str	r3, [r5, #0]
 8010c3a:	b016      	add	sp, #88	; 0x58
 8010c3c:	bd70      	pop	{r4, r5, r6, pc}
 8010c3e:	466a      	mov	r2, sp
 8010c40:	f000 f896 	bl	8010d70 <_fstat_r>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	dbec      	blt.n	8010c22 <__swhatbuf_r+0x12>
 8010c48:	9901      	ldr	r1, [sp, #4]
 8010c4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010c4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010c52:	4259      	negs	r1, r3
 8010c54:	4159      	adcs	r1, r3
 8010c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c5a:	e7eb      	b.n	8010c34 <__swhatbuf_r+0x24>

08010c5c <__smakebuf_r>:
 8010c5c:	898b      	ldrh	r3, [r1, #12]
 8010c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c60:	079d      	lsls	r5, r3, #30
 8010c62:	4606      	mov	r6, r0
 8010c64:	460c      	mov	r4, r1
 8010c66:	d507      	bpl.n	8010c78 <__smakebuf_r+0x1c>
 8010c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	6123      	str	r3, [r4, #16]
 8010c70:	2301      	movs	r3, #1
 8010c72:	6163      	str	r3, [r4, #20]
 8010c74:	b002      	add	sp, #8
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	ab01      	add	r3, sp, #4
 8010c7a:	466a      	mov	r2, sp
 8010c7c:	f7ff ffc8 	bl	8010c10 <__swhatbuf_r>
 8010c80:	9900      	ldr	r1, [sp, #0]
 8010c82:	4605      	mov	r5, r0
 8010c84:	4630      	mov	r0, r6
 8010c86:	f7fc f87b 	bl	800cd80 <_malloc_r>
 8010c8a:	b948      	cbnz	r0, 8010ca0 <__smakebuf_r+0x44>
 8010c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c90:	059a      	lsls	r2, r3, #22
 8010c92:	d4ef      	bmi.n	8010c74 <__smakebuf_r+0x18>
 8010c94:	f023 0303 	bic.w	r3, r3, #3
 8010c98:	f043 0302 	orr.w	r3, r3, #2
 8010c9c:	81a3      	strh	r3, [r4, #12]
 8010c9e:	e7e3      	b.n	8010c68 <__smakebuf_r+0xc>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	6020      	str	r0, [r4, #0]
 8010ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ca8:	81a3      	strh	r3, [r4, #12]
 8010caa:	9b00      	ldr	r3, [sp, #0]
 8010cac:	6163      	str	r3, [r4, #20]
 8010cae:	9b01      	ldr	r3, [sp, #4]
 8010cb0:	6120      	str	r0, [r4, #16]
 8010cb2:	b15b      	cbz	r3, 8010ccc <__smakebuf_r+0x70>
 8010cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cb8:	4630      	mov	r0, r6
 8010cba:	f000 f86b 	bl	8010d94 <_isatty_r>
 8010cbe:	b128      	cbz	r0, 8010ccc <__smakebuf_r+0x70>
 8010cc0:	89a3      	ldrh	r3, [r4, #12]
 8010cc2:	f023 0303 	bic.w	r3, r3, #3
 8010cc6:	f043 0301 	orr.w	r3, r3, #1
 8010cca:	81a3      	strh	r3, [r4, #12]
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	431d      	orrs	r5, r3
 8010cd0:	81a5      	strh	r5, [r4, #12]
 8010cd2:	e7cf      	b.n	8010c74 <__smakebuf_r+0x18>

08010cd4 <_putc_r>:
 8010cd4:	b570      	push	{r4, r5, r6, lr}
 8010cd6:	460d      	mov	r5, r1
 8010cd8:	4614      	mov	r4, r2
 8010cda:	4606      	mov	r6, r0
 8010cdc:	b118      	cbz	r0, 8010ce6 <_putc_r+0x12>
 8010cde:	6a03      	ldr	r3, [r0, #32]
 8010ce0:	b90b      	cbnz	r3, 8010ce6 <_putc_r+0x12>
 8010ce2:	f7fd f869 	bl	800ddb8 <__sinit>
 8010ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ce8:	07d8      	lsls	r0, r3, #31
 8010cea:	d405      	bmi.n	8010cf8 <_putc_r+0x24>
 8010cec:	89a3      	ldrh	r3, [r4, #12]
 8010cee:	0599      	lsls	r1, r3, #22
 8010cf0:	d402      	bmi.n	8010cf8 <_putc_r+0x24>
 8010cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cf4:	f7fd faa3 	bl	800e23e <__retarget_lock_acquire_recursive>
 8010cf8:	68a3      	ldr	r3, [r4, #8]
 8010cfa:	3b01      	subs	r3, #1
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	60a3      	str	r3, [r4, #8]
 8010d00:	da05      	bge.n	8010d0e <_putc_r+0x3a>
 8010d02:	69a2      	ldr	r2, [r4, #24]
 8010d04:	4293      	cmp	r3, r2
 8010d06:	db12      	blt.n	8010d2e <_putc_r+0x5a>
 8010d08:	b2eb      	uxtb	r3, r5
 8010d0a:	2b0a      	cmp	r3, #10
 8010d0c:	d00f      	beq.n	8010d2e <_putc_r+0x5a>
 8010d0e:	6823      	ldr	r3, [r4, #0]
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	6022      	str	r2, [r4, #0]
 8010d14:	701d      	strb	r5, [r3, #0]
 8010d16:	b2ed      	uxtb	r5, r5
 8010d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d1a:	07da      	lsls	r2, r3, #31
 8010d1c:	d405      	bmi.n	8010d2a <_putc_r+0x56>
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	059b      	lsls	r3, r3, #22
 8010d22:	d402      	bmi.n	8010d2a <_putc_r+0x56>
 8010d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d26:	f7fd fa8b 	bl	800e240 <__retarget_lock_release_recursive>
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	bd70      	pop	{r4, r5, r6, pc}
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4622      	mov	r2, r4
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7fd f94f 	bl	800dfd6 <__swbuf_r>
 8010d38:	4605      	mov	r5, r0
 8010d3a:	e7ed      	b.n	8010d18 <_putc_r+0x44>

08010d3c <memmove>:
 8010d3c:	4288      	cmp	r0, r1
 8010d3e:	b510      	push	{r4, lr}
 8010d40:	eb01 0402 	add.w	r4, r1, r2
 8010d44:	d902      	bls.n	8010d4c <memmove+0x10>
 8010d46:	4284      	cmp	r4, r0
 8010d48:	4623      	mov	r3, r4
 8010d4a:	d807      	bhi.n	8010d5c <memmove+0x20>
 8010d4c:	1e43      	subs	r3, r0, #1
 8010d4e:	42a1      	cmp	r1, r4
 8010d50:	d008      	beq.n	8010d64 <memmove+0x28>
 8010d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d5a:	e7f8      	b.n	8010d4e <memmove+0x12>
 8010d5c:	4402      	add	r2, r0
 8010d5e:	4601      	mov	r1, r0
 8010d60:	428a      	cmp	r2, r1
 8010d62:	d100      	bne.n	8010d66 <memmove+0x2a>
 8010d64:	bd10      	pop	{r4, pc}
 8010d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d6e:	e7f7      	b.n	8010d60 <memmove+0x24>

08010d70 <_fstat_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d07      	ldr	r5, [pc, #28]	; (8010d90 <_fstat_r+0x20>)
 8010d74:	2300      	movs	r3, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	602b      	str	r3, [r5, #0]
 8010d7e:	f7f2 ff4e 	bl	8003c1e <_fstat>
 8010d82:	1c43      	adds	r3, r0, #1
 8010d84:	d102      	bne.n	8010d8c <_fstat_r+0x1c>
 8010d86:	682b      	ldr	r3, [r5, #0]
 8010d88:	b103      	cbz	r3, 8010d8c <_fstat_r+0x1c>
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}
 8010d8e:	bf00      	nop
 8010d90:	20002e28 	.word	0x20002e28

08010d94 <_isatty_r>:
 8010d94:	b538      	push	{r3, r4, r5, lr}
 8010d96:	4d06      	ldr	r5, [pc, #24]	; (8010db0 <_isatty_r+0x1c>)
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	4608      	mov	r0, r1
 8010d9e:	602b      	str	r3, [r5, #0]
 8010da0:	f7f2 ff4d 	bl	8003c3e <_isatty>
 8010da4:	1c43      	adds	r3, r0, #1
 8010da6:	d102      	bne.n	8010dae <_isatty_r+0x1a>
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	b103      	cbz	r3, 8010dae <_isatty_r+0x1a>
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	bd38      	pop	{r3, r4, r5, pc}
 8010db0:	20002e28 	.word	0x20002e28
 8010db4:	00000000 	.word	0x00000000

08010db8 <nan>:
 8010db8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010dc0 <nan+0x8>
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	00000000 	.word	0x00000000
 8010dc4:	7ff80000 	.word	0x7ff80000

08010dc8 <__assert_func>:
 8010dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dca:	4614      	mov	r4, r2
 8010dcc:	461a      	mov	r2, r3
 8010dce:	4b09      	ldr	r3, [pc, #36]	; (8010df4 <__assert_func+0x2c>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	4605      	mov	r5, r0
 8010dd4:	68d8      	ldr	r0, [r3, #12]
 8010dd6:	b14c      	cbz	r4, 8010dec <__assert_func+0x24>
 8010dd8:	4b07      	ldr	r3, [pc, #28]	; (8010df8 <__assert_func+0x30>)
 8010dda:	9100      	str	r1, [sp, #0]
 8010ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010de0:	4906      	ldr	r1, [pc, #24]	; (8010dfc <__assert_func+0x34>)
 8010de2:	462b      	mov	r3, r5
 8010de4:	f000 fbca 	bl	801157c <fiprintf>
 8010de8:	f000 fbda 	bl	80115a0 <abort>
 8010dec:	4b04      	ldr	r3, [pc, #16]	; (8010e00 <__assert_func+0x38>)
 8010dee:	461c      	mov	r4, r3
 8010df0:	e7f3      	b.n	8010dda <__assert_func+0x12>
 8010df2:	bf00      	nop
 8010df4:	200000bc 	.word	0x200000bc
 8010df8:	08012521 	.word	0x08012521
 8010dfc:	0801252e 	.word	0x0801252e
 8010e00:	0801255c 	.word	0x0801255c

08010e04 <_calloc_r>:
 8010e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e06:	fba1 2402 	umull	r2, r4, r1, r2
 8010e0a:	b94c      	cbnz	r4, 8010e20 <_calloc_r+0x1c>
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	9201      	str	r2, [sp, #4]
 8010e10:	f7fb ffb6 	bl	800cd80 <_malloc_r>
 8010e14:	9a01      	ldr	r2, [sp, #4]
 8010e16:	4605      	mov	r5, r0
 8010e18:	b930      	cbnz	r0, 8010e28 <_calloc_r+0x24>
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	b003      	add	sp, #12
 8010e1e:	bd30      	pop	{r4, r5, pc}
 8010e20:	220c      	movs	r2, #12
 8010e22:	6002      	str	r2, [r0, #0]
 8010e24:	2500      	movs	r5, #0
 8010e26:	e7f8      	b.n	8010e1a <_calloc_r+0x16>
 8010e28:	4621      	mov	r1, r4
 8010e2a:	f7fd f969 	bl	800e100 <memset>
 8010e2e:	e7f4      	b.n	8010e1a <_calloc_r+0x16>

08010e30 <rshift>:
 8010e30:	6903      	ldr	r3, [r0, #16]
 8010e32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010e3e:	f100 0414 	add.w	r4, r0, #20
 8010e42:	dd45      	ble.n	8010ed0 <rshift+0xa0>
 8010e44:	f011 011f 	ands.w	r1, r1, #31
 8010e48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e50:	d10c      	bne.n	8010e6c <rshift+0x3c>
 8010e52:	f100 0710 	add.w	r7, r0, #16
 8010e56:	4629      	mov	r1, r5
 8010e58:	42b1      	cmp	r1, r6
 8010e5a:	d334      	bcc.n	8010ec6 <rshift+0x96>
 8010e5c:	1a9b      	subs	r3, r3, r2
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	1eea      	subs	r2, r5, #3
 8010e62:	4296      	cmp	r6, r2
 8010e64:	bf38      	it	cc
 8010e66:	2300      	movcc	r3, #0
 8010e68:	4423      	add	r3, r4
 8010e6a:	e015      	b.n	8010e98 <rshift+0x68>
 8010e6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e70:	f1c1 0820 	rsb	r8, r1, #32
 8010e74:	40cf      	lsrs	r7, r1
 8010e76:	f105 0e04 	add.w	lr, r5, #4
 8010e7a:	46a1      	mov	r9, r4
 8010e7c:	4576      	cmp	r6, lr
 8010e7e:	46f4      	mov	ip, lr
 8010e80:	d815      	bhi.n	8010eae <rshift+0x7e>
 8010e82:	1a9a      	subs	r2, r3, r2
 8010e84:	0092      	lsls	r2, r2, #2
 8010e86:	3a04      	subs	r2, #4
 8010e88:	3501      	adds	r5, #1
 8010e8a:	42ae      	cmp	r6, r5
 8010e8c:	bf38      	it	cc
 8010e8e:	2200      	movcc	r2, #0
 8010e90:	18a3      	adds	r3, r4, r2
 8010e92:	50a7      	str	r7, [r4, r2]
 8010e94:	b107      	cbz	r7, 8010e98 <rshift+0x68>
 8010e96:	3304      	adds	r3, #4
 8010e98:	1b1a      	subs	r2, r3, r4
 8010e9a:	42a3      	cmp	r3, r4
 8010e9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010ea0:	bf08      	it	eq
 8010ea2:	2300      	moveq	r3, #0
 8010ea4:	6102      	str	r2, [r0, #16]
 8010ea6:	bf08      	it	eq
 8010ea8:	6143      	streq	r3, [r0, #20]
 8010eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eae:	f8dc c000 	ldr.w	ip, [ip]
 8010eb2:	fa0c fc08 	lsl.w	ip, ip, r8
 8010eb6:	ea4c 0707 	orr.w	r7, ip, r7
 8010eba:	f849 7b04 	str.w	r7, [r9], #4
 8010ebe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ec2:	40cf      	lsrs	r7, r1
 8010ec4:	e7da      	b.n	8010e7c <rshift+0x4c>
 8010ec6:	f851 cb04 	ldr.w	ip, [r1], #4
 8010eca:	f847 cf04 	str.w	ip, [r7, #4]!
 8010ece:	e7c3      	b.n	8010e58 <rshift+0x28>
 8010ed0:	4623      	mov	r3, r4
 8010ed2:	e7e1      	b.n	8010e98 <rshift+0x68>

08010ed4 <__hexdig_fun>:
 8010ed4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010ed8:	2b09      	cmp	r3, #9
 8010eda:	d802      	bhi.n	8010ee2 <__hexdig_fun+0xe>
 8010edc:	3820      	subs	r0, #32
 8010ede:	b2c0      	uxtb	r0, r0
 8010ee0:	4770      	bx	lr
 8010ee2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010ee6:	2b05      	cmp	r3, #5
 8010ee8:	d801      	bhi.n	8010eee <__hexdig_fun+0x1a>
 8010eea:	3847      	subs	r0, #71	; 0x47
 8010eec:	e7f7      	b.n	8010ede <__hexdig_fun+0xa>
 8010eee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010ef2:	2b05      	cmp	r3, #5
 8010ef4:	d801      	bhi.n	8010efa <__hexdig_fun+0x26>
 8010ef6:	3827      	subs	r0, #39	; 0x27
 8010ef8:	e7f1      	b.n	8010ede <__hexdig_fun+0xa>
 8010efa:	2000      	movs	r0, #0
 8010efc:	4770      	bx	lr
	...

08010f00 <__gethex>:
 8010f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f04:	4617      	mov	r7, r2
 8010f06:	680a      	ldr	r2, [r1, #0]
 8010f08:	b085      	sub	sp, #20
 8010f0a:	f102 0b02 	add.w	fp, r2, #2
 8010f0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010f12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010f16:	4681      	mov	r9, r0
 8010f18:	468a      	mov	sl, r1
 8010f1a:	9302      	str	r3, [sp, #8]
 8010f1c:	32fe      	adds	r2, #254	; 0xfe
 8010f1e:	eb02 030b 	add.w	r3, r2, fp
 8010f22:	46d8      	mov	r8, fp
 8010f24:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	2830      	cmp	r0, #48	; 0x30
 8010f2c:	d0f7      	beq.n	8010f1e <__gethex+0x1e>
 8010f2e:	f7ff ffd1 	bl	8010ed4 <__hexdig_fun>
 8010f32:	4604      	mov	r4, r0
 8010f34:	2800      	cmp	r0, #0
 8010f36:	d138      	bne.n	8010faa <__gethex+0xaa>
 8010f38:	49a7      	ldr	r1, [pc, #668]	; (80111d8 <__gethex+0x2d8>)
 8010f3a:	2201      	movs	r2, #1
 8010f3c:	4640      	mov	r0, r8
 8010f3e:	f7fd f8e7 	bl	800e110 <strncmp>
 8010f42:	4606      	mov	r6, r0
 8010f44:	2800      	cmp	r0, #0
 8010f46:	d169      	bne.n	801101c <__gethex+0x11c>
 8010f48:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010f4c:	465d      	mov	r5, fp
 8010f4e:	f7ff ffc1 	bl	8010ed4 <__hexdig_fun>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	d064      	beq.n	8011020 <__gethex+0x120>
 8010f56:	465a      	mov	r2, fp
 8010f58:	7810      	ldrb	r0, [r2, #0]
 8010f5a:	2830      	cmp	r0, #48	; 0x30
 8010f5c:	4690      	mov	r8, r2
 8010f5e:	f102 0201 	add.w	r2, r2, #1
 8010f62:	d0f9      	beq.n	8010f58 <__gethex+0x58>
 8010f64:	f7ff ffb6 	bl	8010ed4 <__hexdig_fun>
 8010f68:	2301      	movs	r3, #1
 8010f6a:	fab0 f480 	clz	r4, r0
 8010f6e:	0964      	lsrs	r4, r4, #5
 8010f70:	465e      	mov	r6, fp
 8010f72:	9301      	str	r3, [sp, #4]
 8010f74:	4642      	mov	r2, r8
 8010f76:	4615      	mov	r5, r2
 8010f78:	3201      	adds	r2, #1
 8010f7a:	7828      	ldrb	r0, [r5, #0]
 8010f7c:	f7ff ffaa 	bl	8010ed4 <__hexdig_fun>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d1f8      	bne.n	8010f76 <__gethex+0x76>
 8010f84:	4994      	ldr	r1, [pc, #592]	; (80111d8 <__gethex+0x2d8>)
 8010f86:	2201      	movs	r2, #1
 8010f88:	4628      	mov	r0, r5
 8010f8a:	f7fd f8c1 	bl	800e110 <strncmp>
 8010f8e:	b978      	cbnz	r0, 8010fb0 <__gethex+0xb0>
 8010f90:	b946      	cbnz	r6, 8010fa4 <__gethex+0xa4>
 8010f92:	1c6e      	adds	r6, r5, #1
 8010f94:	4632      	mov	r2, r6
 8010f96:	4615      	mov	r5, r2
 8010f98:	3201      	adds	r2, #1
 8010f9a:	7828      	ldrb	r0, [r5, #0]
 8010f9c:	f7ff ff9a 	bl	8010ed4 <__hexdig_fun>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d1f8      	bne.n	8010f96 <__gethex+0x96>
 8010fa4:	1b73      	subs	r3, r6, r5
 8010fa6:	009e      	lsls	r6, r3, #2
 8010fa8:	e004      	b.n	8010fb4 <__gethex+0xb4>
 8010faa:	2400      	movs	r4, #0
 8010fac:	4626      	mov	r6, r4
 8010fae:	e7e1      	b.n	8010f74 <__gethex+0x74>
 8010fb0:	2e00      	cmp	r6, #0
 8010fb2:	d1f7      	bne.n	8010fa4 <__gethex+0xa4>
 8010fb4:	782b      	ldrb	r3, [r5, #0]
 8010fb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010fba:	2b50      	cmp	r3, #80	; 0x50
 8010fbc:	d13d      	bne.n	801103a <__gethex+0x13a>
 8010fbe:	786b      	ldrb	r3, [r5, #1]
 8010fc0:	2b2b      	cmp	r3, #43	; 0x2b
 8010fc2:	d02f      	beq.n	8011024 <__gethex+0x124>
 8010fc4:	2b2d      	cmp	r3, #45	; 0x2d
 8010fc6:	d031      	beq.n	801102c <__gethex+0x12c>
 8010fc8:	1c69      	adds	r1, r5, #1
 8010fca:	f04f 0b00 	mov.w	fp, #0
 8010fce:	7808      	ldrb	r0, [r1, #0]
 8010fd0:	f7ff ff80 	bl	8010ed4 <__hexdig_fun>
 8010fd4:	1e42      	subs	r2, r0, #1
 8010fd6:	b2d2      	uxtb	r2, r2
 8010fd8:	2a18      	cmp	r2, #24
 8010fda:	d82e      	bhi.n	801103a <__gethex+0x13a>
 8010fdc:	f1a0 0210 	sub.w	r2, r0, #16
 8010fe0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010fe4:	f7ff ff76 	bl	8010ed4 <__hexdig_fun>
 8010fe8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8010fec:	fa5f fc8c 	uxtb.w	ip, ip
 8010ff0:	f1bc 0f18 	cmp.w	ip, #24
 8010ff4:	d91d      	bls.n	8011032 <__gethex+0x132>
 8010ff6:	f1bb 0f00 	cmp.w	fp, #0
 8010ffa:	d000      	beq.n	8010ffe <__gethex+0xfe>
 8010ffc:	4252      	negs	r2, r2
 8010ffe:	4416      	add	r6, r2
 8011000:	f8ca 1000 	str.w	r1, [sl]
 8011004:	b1dc      	cbz	r4, 801103e <__gethex+0x13e>
 8011006:	9b01      	ldr	r3, [sp, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	bf14      	ite	ne
 801100c:	f04f 0800 	movne.w	r8, #0
 8011010:	f04f 0806 	moveq.w	r8, #6
 8011014:	4640      	mov	r0, r8
 8011016:	b005      	add	sp, #20
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	4645      	mov	r5, r8
 801101e:	4626      	mov	r6, r4
 8011020:	2401      	movs	r4, #1
 8011022:	e7c7      	b.n	8010fb4 <__gethex+0xb4>
 8011024:	f04f 0b00 	mov.w	fp, #0
 8011028:	1ca9      	adds	r1, r5, #2
 801102a:	e7d0      	b.n	8010fce <__gethex+0xce>
 801102c:	f04f 0b01 	mov.w	fp, #1
 8011030:	e7fa      	b.n	8011028 <__gethex+0x128>
 8011032:	230a      	movs	r3, #10
 8011034:	fb03 0002 	mla	r0, r3, r2, r0
 8011038:	e7d0      	b.n	8010fdc <__gethex+0xdc>
 801103a:	4629      	mov	r1, r5
 801103c:	e7e0      	b.n	8011000 <__gethex+0x100>
 801103e:	eba5 0308 	sub.w	r3, r5, r8
 8011042:	3b01      	subs	r3, #1
 8011044:	4621      	mov	r1, r4
 8011046:	2b07      	cmp	r3, #7
 8011048:	dc0a      	bgt.n	8011060 <__gethex+0x160>
 801104a:	4648      	mov	r0, r9
 801104c:	f7fd ffd6 	bl	800effc <_Balloc>
 8011050:	4604      	mov	r4, r0
 8011052:	b940      	cbnz	r0, 8011066 <__gethex+0x166>
 8011054:	4b61      	ldr	r3, [pc, #388]	; (80111dc <__gethex+0x2dc>)
 8011056:	4602      	mov	r2, r0
 8011058:	21e4      	movs	r1, #228	; 0xe4
 801105a:	4861      	ldr	r0, [pc, #388]	; (80111e0 <__gethex+0x2e0>)
 801105c:	f7ff feb4 	bl	8010dc8 <__assert_func>
 8011060:	3101      	adds	r1, #1
 8011062:	105b      	asrs	r3, r3, #1
 8011064:	e7ef      	b.n	8011046 <__gethex+0x146>
 8011066:	f100 0a14 	add.w	sl, r0, #20
 801106a:	2300      	movs	r3, #0
 801106c:	495a      	ldr	r1, [pc, #360]	; (80111d8 <__gethex+0x2d8>)
 801106e:	f8cd a004 	str.w	sl, [sp, #4]
 8011072:	469b      	mov	fp, r3
 8011074:	45a8      	cmp	r8, r5
 8011076:	d342      	bcc.n	80110fe <__gethex+0x1fe>
 8011078:	9801      	ldr	r0, [sp, #4]
 801107a:	f840 bb04 	str.w	fp, [r0], #4
 801107e:	eba0 000a 	sub.w	r0, r0, sl
 8011082:	1080      	asrs	r0, r0, #2
 8011084:	6120      	str	r0, [r4, #16]
 8011086:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801108a:	4658      	mov	r0, fp
 801108c:	f7fe f8a8 	bl	800f1e0 <__hi0bits>
 8011090:	683d      	ldr	r5, [r7, #0]
 8011092:	eba8 0000 	sub.w	r0, r8, r0
 8011096:	42a8      	cmp	r0, r5
 8011098:	dd59      	ble.n	801114e <__gethex+0x24e>
 801109a:	eba0 0805 	sub.w	r8, r0, r5
 801109e:	4641      	mov	r1, r8
 80110a0:	4620      	mov	r0, r4
 80110a2:	f7fe fc37 	bl	800f914 <__any_on>
 80110a6:	4683      	mov	fp, r0
 80110a8:	b1b8      	cbz	r0, 80110da <__gethex+0x1da>
 80110aa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80110ae:	1159      	asrs	r1, r3, #5
 80110b0:	f003 021f 	and.w	r2, r3, #31
 80110b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80110b8:	f04f 0b01 	mov.w	fp, #1
 80110bc:	fa0b f202 	lsl.w	r2, fp, r2
 80110c0:	420a      	tst	r2, r1
 80110c2:	d00a      	beq.n	80110da <__gethex+0x1da>
 80110c4:	455b      	cmp	r3, fp
 80110c6:	dd06      	ble.n	80110d6 <__gethex+0x1d6>
 80110c8:	f1a8 0102 	sub.w	r1, r8, #2
 80110cc:	4620      	mov	r0, r4
 80110ce:	f7fe fc21 	bl	800f914 <__any_on>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d138      	bne.n	8011148 <__gethex+0x248>
 80110d6:	f04f 0b02 	mov.w	fp, #2
 80110da:	4641      	mov	r1, r8
 80110dc:	4620      	mov	r0, r4
 80110de:	f7ff fea7 	bl	8010e30 <rshift>
 80110e2:	4446      	add	r6, r8
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	42b3      	cmp	r3, r6
 80110e8:	da41      	bge.n	801116e <__gethex+0x26e>
 80110ea:	4621      	mov	r1, r4
 80110ec:	4648      	mov	r0, r9
 80110ee:	f7fd ffc5 	bl	800f07c <_Bfree>
 80110f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110f4:	2300      	movs	r3, #0
 80110f6:	6013      	str	r3, [r2, #0]
 80110f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80110fc:	e78a      	b.n	8011014 <__gethex+0x114>
 80110fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8011102:	2a2e      	cmp	r2, #46	; 0x2e
 8011104:	d014      	beq.n	8011130 <__gethex+0x230>
 8011106:	2b20      	cmp	r3, #32
 8011108:	d106      	bne.n	8011118 <__gethex+0x218>
 801110a:	9b01      	ldr	r3, [sp, #4]
 801110c:	f843 bb04 	str.w	fp, [r3], #4
 8011110:	f04f 0b00 	mov.w	fp, #0
 8011114:	9301      	str	r3, [sp, #4]
 8011116:	465b      	mov	r3, fp
 8011118:	7828      	ldrb	r0, [r5, #0]
 801111a:	9303      	str	r3, [sp, #12]
 801111c:	f7ff feda 	bl	8010ed4 <__hexdig_fun>
 8011120:	9b03      	ldr	r3, [sp, #12]
 8011122:	f000 000f 	and.w	r0, r0, #15
 8011126:	4098      	lsls	r0, r3
 8011128:	ea4b 0b00 	orr.w	fp, fp, r0
 801112c:	3304      	adds	r3, #4
 801112e:	e7a1      	b.n	8011074 <__gethex+0x174>
 8011130:	45a8      	cmp	r8, r5
 8011132:	d8e8      	bhi.n	8011106 <__gethex+0x206>
 8011134:	2201      	movs	r2, #1
 8011136:	4628      	mov	r0, r5
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	f7fc ffe9 	bl	800e110 <strncmp>
 801113e:	4926      	ldr	r1, [pc, #152]	; (80111d8 <__gethex+0x2d8>)
 8011140:	9b03      	ldr	r3, [sp, #12]
 8011142:	2800      	cmp	r0, #0
 8011144:	d1df      	bne.n	8011106 <__gethex+0x206>
 8011146:	e795      	b.n	8011074 <__gethex+0x174>
 8011148:	f04f 0b03 	mov.w	fp, #3
 801114c:	e7c5      	b.n	80110da <__gethex+0x1da>
 801114e:	da0b      	bge.n	8011168 <__gethex+0x268>
 8011150:	eba5 0800 	sub.w	r8, r5, r0
 8011154:	4621      	mov	r1, r4
 8011156:	4642      	mov	r2, r8
 8011158:	4648      	mov	r0, r9
 801115a:	f7fe f9a9 	bl	800f4b0 <__lshift>
 801115e:	eba6 0608 	sub.w	r6, r6, r8
 8011162:	4604      	mov	r4, r0
 8011164:	f100 0a14 	add.w	sl, r0, #20
 8011168:	f04f 0b00 	mov.w	fp, #0
 801116c:	e7ba      	b.n	80110e4 <__gethex+0x1e4>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	42b3      	cmp	r3, r6
 8011172:	dd73      	ble.n	801125c <__gethex+0x35c>
 8011174:	1b9e      	subs	r6, r3, r6
 8011176:	42b5      	cmp	r5, r6
 8011178:	dc34      	bgt.n	80111e4 <__gethex+0x2e4>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2b02      	cmp	r3, #2
 801117e:	d023      	beq.n	80111c8 <__gethex+0x2c8>
 8011180:	2b03      	cmp	r3, #3
 8011182:	d025      	beq.n	80111d0 <__gethex+0x2d0>
 8011184:	2b01      	cmp	r3, #1
 8011186:	d115      	bne.n	80111b4 <__gethex+0x2b4>
 8011188:	42b5      	cmp	r5, r6
 801118a:	d113      	bne.n	80111b4 <__gethex+0x2b4>
 801118c:	2d01      	cmp	r5, #1
 801118e:	d10b      	bne.n	80111a8 <__gethex+0x2a8>
 8011190:	9a02      	ldr	r2, [sp, #8]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6013      	str	r3, [r2, #0]
 8011196:	2301      	movs	r3, #1
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	f8ca 3000 	str.w	r3, [sl]
 801119e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111a0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80111a4:	601c      	str	r4, [r3, #0]
 80111a6:	e735      	b.n	8011014 <__gethex+0x114>
 80111a8:	1e69      	subs	r1, r5, #1
 80111aa:	4620      	mov	r0, r4
 80111ac:	f7fe fbb2 	bl	800f914 <__any_on>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d1ed      	bne.n	8011190 <__gethex+0x290>
 80111b4:	4621      	mov	r1, r4
 80111b6:	4648      	mov	r0, r9
 80111b8:	f7fd ff60 	bl	800f07c <_Bfree>
 80111bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111be:	2300      	movs	r3, #0
 80111c0:	6013      	str	r3, [r2, #0]
 80111c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80111c6:	e725      	b.n	8011014 <__gethex+0x114>
 80111c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1f2      	bne.n	80111b4 <__gethex+0x2b4>
 80111ce:	e7df      	b.n	8011190 <__gethex+0x290>
 80111d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1dc      	bne.n	8011190 <__gethex+0x290>
 80111d6:	e7ed      	b.n	80111b4 <__gethex+0x2b4>
 80111d8:	080124b4 	.word	0x080124b4
 80111dc:	0801234a 	.word	0x0801234a
 80111e0:	0801255d 	.word	0x0801255d
 80111e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80111e8:	f1bb 0f00 	cmp.w	fp, #0
 80111ec:	d133      	bne.n	8011256 <__gethex+0x356>
 80111ee:	f1b8 0f00 	cmp.w	r8, #0
 80111f2:	d004      	beq.n	80111fe <__gethex+0x2fe>
 80111f4:	4641      	mov	r1, r8
 80111f6:	4620      	mov	r0, r4
 80111f8:	f7fe fb8c 	bl	800f914 <__any_on>
 80111fc:	4683      	mov	fp, r0
 80111fe:	ea4f 1268 	mov.w	r2, r8, asr #5
 8011202:	2301      	movs	r3, #1
 8011204:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011208:	f008 081f 	and.w	r8, r8, #31
 801120c:	fa03 f308 	lsl.w	r3, r3, r8
 8011210:	4213      	tst	r3, r2
 8011212:	4631      	mov	r1, r6
 8011214:	4620      	mov	r0, r4
 8011216:	bf18      	it	ne
 8011218:	f04b 0b02 	orrne.w	fp, fp, #2
 801121c:	1bad      	subs	r5, r5, r6
 801121e:	f7ff fe07 	bl	8010e30 <rshift>
 8011222:	687e      	ldr	r6, [r7, #4]
 8011224:	f04f 0802 	mov.w	r8, #2
 8011228:	f1bb 0f00 	cmp.w	fp, #0
 801122c:	d04a      	beq.n	80112c4 <__gethex+0x3c4>
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2b02      	cmp	r3, #2
 8011232:	d016      	beq.n	8011262 <__gethex+0x362>
 8011234:	2b03      	cmp	r3, #3
 8011236:	d018      	beq.n	801126a <__gethex+0x36a>
 8011238:	2b01      	cmp	r3, #1
 801123a:	d109      	bne.n	8011250 <__gethex+0x350>
 801123c:	f01b 0f02 	tst.w	fp, #2
 8011240:	d006      	beq.n	8011250 <__gethex+0x350>
 8011242:	f8da 3000 	ldr.w	r3, [sl]
 8011246:	ea4b 0b03 	orr.w	fp, fp, r3
 801124a:	f01b 0f01 	tst.w	fp, #1
 801124e:	d10f      	bne.n	8011270 <__gethex+0x370>
 8011250:	f048 0810 	orr.w	r8, r8, #16
 8011254:	e036      	b.n	80112c4 <__gethex+0x3c4>
 8011256:	f04f 0b01 	mov.w	fp, #1
 801125a:	e7d0      	b.n	80111fe <__gethex+0x2fe>
 801125c:	f04f 0801 	mov.w	r8, #1
 8011260:	e7e2      	b.n	8011228 <__gethex+0x328>
 8011262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011264:	f1c3 0301 	rsb	r3, r3, #1
 8011268:	930f      	str	r3, [sp, #60]	; 0x3c
 801126a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801126c:	2b00      	cmp	r3, #0
 801126e:	d0ef      	beq.n	8011250 <__gethex+0x350>
 8011270:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011274:	f104 0214 	add.w	r2, r4, #20
 8011278:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801127c:	9301      	str	r3, [sp, #4]
 801127e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8011282:	2300      	movs	r3, #0
 8011284:	4694      	mov	ip, r2
 8011286:	f852 1b04 	ldr.w	r1, [r2], #4
 801128a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801128e:	d01e      	beq.n	80112ce <__gethex+0x3ce>
 8011290:	3101      	adds	r1, #1
 8011292:	f8cc 1000 	str.w	r1, [ip]
 8011296:	f1b8 0f02 	cmp.w	r8, #2
 801129a:	f104 0214 	add.w	r2, r4, #20
 801129e:	d13d      	bne.n	801131c <__gethex+0x41c>
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	3b01      	subs	r3, #1
 80112a4:	42ab      	cmp	r3, r5
 80112a6:	d10b      	bne.n	80112c0 <__gethex+0x3c0>
 80112a8:	1169      	asrs	r1, r5, #5
 80112aa:	2301      	movs	r3, #1
 80112ac:	f005 051f 	and.w	r5, r5, #31
 80112b0:	fa03 f505 	lsl.w	r5, r3, r5
 80112b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112b8:	421d      	tst	r5, r3
 80112ba:	bf18      	it	ne
 80112bc:	f04f 0801 	movne.w	r8, #1
 80112c0:	f048 0820 	orr.w	r8, r8, #32
 80112c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112c6:	601c      	str	r4, [r3, #0]
 80112c8:	9b02      	ldr	r3, [sp, #8]
 80112ca:	601e      	str	r6, [r3, #0]
 80112cc:	e6a2      	b.n	8011014 <__gethex+0x114>
 80112ce:	4290      	cmp	r0, r2
 80112d0:	f842 3c04 	str.w	r3, [r2, #-4]
 80112d4:	d8d6      	bhi.n	8011284 <__gethex+0x384>
 80112d6:	68a2      	ldr	r2, [r4, #8]
 80112d8:	4593      	cmp	fp, r2
 80112da:	db17      	blt.n	801130c <__gethex+0x40c>
 80112dc:	6861      	ldr	r1, [r4, #4]
 80112de:	4648      	mov	r0, r9
 80112e0:	3101      	adds	r1, #1
 80112e2:	f7fd fe8b 	bl	800effc <_Balloc>
 80112e6:	4682      	mov	sl, r0
 80112e8:	b918      	cbnz	r0, 80112f2 <__gethex+0x3f2>
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <__gethex+0x458>)
 80112ec:	4602      	mov	r2, r0
 80112ee:	2184      	movs	r1, #132	; 0x84
 80112f0:	e6b3      	b.n	801105a <__gethex+0x15a>
 80112f2:	6922      	ldr	r2, [r4, #16]
 80112f4:	3202      	adds	r2, #2
 80112f6:	f104 010c 	add.w	r1, r4, #12
 80112fa:	0092      	lsls	r2, r2, #2
 80112fc:	300c      	adds	r0, #12
 80112fe:	f7fc ffa0 	bl	800e242 <memcpy>
 8011302:	4621      	mov	r1, r4
 8011304:	4648      	mov	r0, r9
 8011306:	f7fd feb9 	bl	800f07c <_Bfree>
 801130a:	4654      	mov	r4, sl
 801130c:	6922      	ldr	r2, [r4, #16]
 801130e:	1c51      	adds	r1, r2, #1
 8011310:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011314:	6121      	str	r1, [r4, #16]
 8011316:	2101      	movs	r1, #1
 8011318:	6151      	str	r1, [r2, #20]
 801131a:	e7bc      	b.n	8011296 <__gethex+0x396>
 801131c:	6921      	ldr	r1, [r4, #16]
 801131e:	4559      	cmp	r1, fp
 8011320:	dd0b      	ble.n	801133a <__gethex+0x43a>
 8011322:	2101      	movs	r1, #1
 8011324:	4620      	mov	r0, r4
 8011326:	f7ff fd83 	bl	8010e30 <rshift>
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	3601      	adds	r6, #1
 801132e:	42b3      	cmp	r3, r6
 8011330:	f6ff aedb 	blt.w	80110ea <__gethex+0x1ea>
 8011334:	f04f 0801 	mov.w	r8, #1
 8011338:	e7c2      	b.n	80112c0 <__gethex+0x3c0>
 801133a:	f015 051f 	ands.w	r5, r5, #31
 801133e:	d0f9      	beq.n	8011334 <__gethex+0x434>
 8011340:	9b01      	ldr	r3, [sp, #4]
 8011342:	441a      	add	r2, r3
 8011344:	f1c5 0520 	rsb	r5, r5, #32
 8011348:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801134c:	f7fd ff48 	bl	800f1e0 <__hi0bits>
 8011350:	42a8      	cmp	r0, r5
 8011352:	dbe6      	blt.n	8011322 <__gethex+0x422>
 8011354:	e7ee      	b.n	8011334 <__gethex+0x434>
 8011356:	bf00      	nop
 8011358:	0801234a 	.word	0x0801234a

0801135c <L_shift>:
 801135c:	f1c2 0208 	rsb	r2, r2, #8
 8011360:	0092      	lsls	r2, r2, #2
 8011362:	b570      	push	{r4, r5, r6, lr}
 8011364:	f1c2 0620 	rsb	r6, r2, #32
 8011368:	6843      	ldr	r3, [r0, #4]
 801136a:	6804      	ldr	r4, [r0, #0]
 801136c:	fa03 f506 	lsl.w	r5, r3, r6
 8011370:	432c      	orrs	r4, r5
 8011372:	40d3      	lsrs	r3, r2
 8011374:	6004      	str	r4, [r0, #0]
 8011376:	f840 3f04 	str.w	r3, [r0, #4]!
 801137a:	4288      	cmp	r0, r1
 801137c:	d3f4      	bcc.n	8011368 <L_shift+0xc>
 801137e:	bd70      	pop	{r4, r5, r6, pc}

08011380 <__match>:
 8011380:	b530      	push	{r4, r5, lr}
 8011382:	6803      	ldr	r3, [r0, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	f811 4b01 	ldrb.w	r4, [r1], #1
 801138a:	b914      	cbnz	r4, 8011392 <__match+0x12>
 801138c:	6003      	str	r3, [r0, #0]
 801138e:	2001      	movs	r0, #1
 8011390:	bd30      	pop	{r4, r5, pc}
 8011392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011396:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801139a:	2d19      	cmp	r5, #25
 801139c:	bf98      	it	ls
 801139e:	3220      	addls	r2, #32
 80113a0:	42a2      	cmp	r2, r4
 80113a2:	d0f0      	beq.n	8011386 <__match+0x6>
 80113a4:	2000      	movs	r0, #0
 80113a6:	e7f3      	b.n	8011390 <__match+0x10>

080113a8 <__hexnan>:
 80113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ac:	680b      	ldr	r3, [r1, #0]
 80113ae:	6801      	ldr	r1, [r0, #0]
 80113b0:	115e      	asrs	r6, r3, #5
 80113b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80113b6:	f013 031f 	ands.w	r3, r3, #31
 80113ba:	b087      	sub	sp, #28
 80113bc:	bf18      	it	ne
 80113be:	3604      	addne	r6, #4
 80113c0:	2500      	movs	r5, #0
 80113c2:	1f37      	subs	r7, r6, #4
 80113c4:	4682      	mov	sl, r0
 80113c6:	4690      	mov	r8, r2
 80113c8:	9301      	str	r3, [sp, #4]
 80113ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80113ce:	46b9      	mov	r9, r7
 80113d0:	463c      	mov	r4, r7
 80113d2:	9502      	str	r5, [sp, #8]
 80113d4:	46ab      	mov	fp, r5
 80113d6:	784a      	ldrb	r2, [r1, #1]
 80113d8:	1c4b      	adds	r3, r1, #1
 80113da:	9303      	str	r3, [sp, #12]
 80113dc:	b342      	cbz	r2, 8011430 <__hexnan+0x88>
 80113de:	4610      	mov	r0, r2
 80113e0:	9105      	str	r1, [sp, #20]
 80113e2:	9204      	str	r2, [sp, #16]
 80113e4:	f7ff fd76 	bl	8010ed4 <__hexdig_fun>
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d14f      	bne.n	801148c <__hexnan+0xe4>
 80113ec:	9a04      	ldr	r2, [sp, #16]
 80113ee:	9905      	ldr	r1, [sp, #20]
 80113f0:	2a20      	cmp	r2, #32
 80113f2:	d818      	bhi.n	8011426 <__hexnan+0x7e>
 80113f4:	9b02      	ldr	r3, [sp, #8]
 80113f6:	459b      	cmp	fp, r3
 80113f8:	dd13      	ble.n	8011422 <__hexnan+0x7a>
 80113fa:	454c      	cmp	r4, r9
 80113fc:	d206      	bcs.n	801140c <__hexnan+0x64>
 80113fe:	2d07      	cmp	r5, #7
 8011400:	dc04      	bgt.n	801140c <__hexnan+0x64>
 8011402:	462a      	mov	r2, r5
 8011404:	4649      	mov	r1, r9
 8011406:	4620      	mov	r0, r4
 8011408:	f7ff ffa8 	bl	801135c <L_shift>
 801140c:	4544      	cmp	r4, r8
 801140e:	d950      	bls.n	80114b2 <__hexnan+0x10a>
 8011410:	2300      	movs	r3, #0
 8011412:	f1a4 0904 	sub.w	r9, r4, #4
 8011416:	f844 3c04 	str.w	r3, [r4, #-4]
 801141a:	f8cd b008 	str.w	fp, [sp, #8]
 801141e:	464c      	mov	r4, r9
 8011420:	461d      	mov	r5, r3
 8011422:	9903      	ldr	r1, [sp, #12]
 8011424:	e7d7      	b.n	80113d6 <__hexnan+0x2e>
 8011426:	2a29      	cmp	r2, #41	; 0x29
 8011428:	d155      	bne.n	80114d6 <__hexnan+0x12e>
 801142a:	3102      	adds	r1, #2
 801142c:	f8ca 1000 	str.w	r1, [sl]
 8011430:	f1bb 0f00 	cmp.w	fp, #0
 8011434:	d04f      	beq.n	80114d6 <__hexnan+0x12e>
 8011436:	454c      	cmp	r4, r9
 8011438:	d206      	bcs.n	8011448 <__hexnan+0xa0>
 801143a:	2d07      	cmp	r5, #7
 801143c:	dc04      	bgt.n	8011448 <__hexnan+0xa0>
 801143e:	462a      	mov	r2, r5
 8011440:	4649      	mov	r1, r9
 8011442:	4620      	mov	r0, r4
 8011444:	f7ff ff8a 	bl	801135c <L_shift>
 8011448:	4544      	cmp	r4, r8
 801144a:	d934      	bls.n	80114b6 <__hexnan+0x10e>
 801144c:	f1a8 0204 	sub.w	r2, r8, #4
 8011450:	4623      	mov	r3, r4
 8011452:	f853 1b04 	ldr.w	r1, [r3], #4
 8011456:	f842 1f04 	str.w	r1, [r2, #4]!
 801145a:	429f      	cmp	r7, r3
 801145c:	d2f9      	bcs.n	8011452 <__hexnan+0xaa>
 801145e:	1b3b      	subs	r3, r7, r4
 8011460:	f023 0303 	bic.w	r3, r3, #3
 8011464:	3304      	adds	r3, #4
 8011466:	3e03      	subs	r6, #3
 8011468:	3401      	adds	r4, #1
 801146a:	42a6      	cmp	r6, r4
 801146c:	bf38      	it	cc
 801146e:	2304      	movcc	r3, #4
 8011470:	4443      	add	r3, r8
 8011472:	2200      	movs	r2, #0
 8011474:	f843 2b04 	str.w	r2, [r3], #4
 8011478:	429f      	cmp	r7, r3
 801147a:	d2fb      	bcs.n	8011474 <__hexnan+0xcc>
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	b91b      	cbnz	r3, 8011488 <__hexnan+0xe0>
 8011480:	4547      	cmp	r7, r8
 8011482:	d126      	bne.n	80114d2 <__hexnan+0x12a>
 8011484:	2301      	movs	r3, #1
 8011486:	603b      	str	r3, [r7, #0]
 8011488:	2005      	movs	r0, #5
 801148a:	e025      	b.n	80114d8 <__hexnan+0x130>
 801148c:	3501      	adds	r5, #1
 801148e:	2d08      	cmp	r5, #8
 8011490:	f10b 0b01 	add.w	fp, fp, #1
 8011494:	dd06      	ble.n	80114a4 <__hexnan+0xfc>
 8011496:	4544      	cmp	r4, r8
 8011498:	d9c3      	bls.n	8011422 <__hexnan+0x7a>
 801149a:	2300      	movs	r3, #0
 801149c:	f844 3c04 	str.w	r3, [r4, #-4]
 80114a0:	2501      	movs	r5, #1
 80114a2:	3c04      	subs	r4, #4
 80114a4:	6822      	ldr	r2, [r4, #0]
 80114a6:	f000 000f 	and.w	r0, r0, #15
 80114aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80114ae:	6020      	str	r0, [r4, #0]
 80114b0:	e7b7      	b.n	8011422 <__hexnan+0x7a>
 80114b2:	2508      	movs	r5, #8
 80114b4:	e7b5      	b.n	8011422 <__hexnan+0x7a>
 80114b6:	9b01      	ldr	r3, [sp, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d0df      	beq.n	801147c <__hexnan+0xd4>
 80114bc:	f1c3 0320 	rsb	r3, r3, #32
 80114c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114c4:	40da      	lsrs	r2, r3
 80114c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80114ca:	4013      	ands	r3, r2
 80114cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80114d0:	e7d4      	b.n	801147c <__hexnan+0xd4>
 80114d2:	3f04      	subs	r7, #4
 80114d4:	e7d2      	b.n	801147c <__hexnan+0xd4>
 80114d6:	2004      	movs	r0, #4
 80114d8:	b007      	add	sp, #28
 80114da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114de <__ascii_mbtowc>:
 80114de:	b082      	sub	sp, #8
 80114e0:	b901      	cbnz	r1, 80114e4 <__ascii_mbtowc+0x6>
 80114e2:	a901      	add	r1, sp, #4
 80114e4:	b142      	cbz	r2, 80114f8 <__ascii_mbtowc+0x1a>
 80114e6:	b14b      	cbz	r3, 80114fc <__ascii_mbtowc+0x1e>
 80114e8:	7813      	ldrb	r3, [r2, #0]
 80114ea:	600b      	str	r3, [r1, #0]
 80114ec:	7812      	ldrb	r2, [r2, #0]
 80114ee:	1e10      	subs	r0, r2, #0
 80114f0:	bf18      	it	ne
 80114f2:	2001      	movne	r0, #1
 80114f4:	b002      	add	sp, #8
 80114f6:	4770      	bx	lr
 80114f8:	4610      	mov	r0, r2
 80114fa:	e7fb      	b.n	80114f4 <__ascii_mbtowc+0x16>
 80114fc:	f06f 0001 	mvn.w	r0, #1
 8011500:	e7f8      	b.n	80114f4 <__ascii_mbtowc+0x16>

08011502 <_realloc_r>:
 8011502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011506:	4680      	mov	r8, r0
 8011508:	4614      	mov	r4, r2
 801150a:	460e      	mov	r6, r1
 801150c:	b921      	cbnz	r1, 8011518 <_realloc_r+0x16>
 801150e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011512:	4611      	mov	r1, r2
 8011514:	f7fb bc34 	b.w	800cd80 <_malloc_r>
 8011518:	b92a      	cbnz	r2, 8011526 <_realloc_r+0x24>
 801151a:	f7fd fd23 	bl	800ef64 <_free_r>
 801151e:	4625      	mov	r5, r4
 8011520:	4628      	mov	r0, r5
 8011522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011526:	f000 f842 	bl	80115ae <_malloc_usable_size_r>
 801152a:	4284      	cmp	r4, r0
 801152c:	4607      	mov	r7, r0
 801152e:	d802      	bhi.n	8011536 <_realloc_r+0x34>
 8011530:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011534:	d812      	bhi.n	801155c <_realloc_r+0x5a>
 8011536:	4621      	mov	r1, r4
 8011538:	4640      	mov	r0, r8
 801153a:	f7fb fc21 	bl	800cd80 <_malloc_r>
 801153e:	4605      	mov	r5, r0
 8011540:	2800      	cmp	r0, #0
 8011542:	d0ed      	beq.n	8011520 <_realloc_r+0x1e>
 8011544:	42bc      	cmp	r4, r7
 8011546:	4622      	mov	r2, r4
 8011548:	4631      	mov	r1, r6
 801154a:	bf28      	it	cs
 801154c:	463a      	movcs	r2, r7
 801154e:	f7fc fe78 	bl	800e242 <memcpy>
 8011552:	4631      	mov	r1, r6
 8011554:	4640      	mov	r0, r8
 8011556:	f7fd fd05 	bl	800ef64 <_free_r>
 801155a:	e7e1      	b.n	8011520 <_realloc_r+0x1e>
 801155c:	4635      	mov	r5, r6
 801155e:	e7df      	b.n	8011520 <_realloc_r+0x1e>

08011560 <__ascii_wctomb>:
 8011560:	b149      	cbz	r1, 8011576 <__ascii_wctomb+0x16>
 8011562:	2aff      	cmp	r2, #255	; 0xff
 8011564:	bf85      	ittet	hi
 8011566:	238a      	movhi	r3, #138	; 0x8a
 8011568:	6003      	strhi	r3, [r0, #0]
 801156a:	700a      	strbls	r2, [r1, #0]
 801156c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011570:	bf98      	it	ls
 8011572:	2001      	movls	r0, #1
 8011574:	4770      	bx	lr
 8011576:	4608      	mov	r0, r1
 8011578:	4770      	bx	lr
	...

0801157c <fiprintf>:
 801157c:	b40e      	push	{r1, r2, r3}
 801157e:	b503      	push	{r0, r1, lr}
 8011580:	4601      	mov	r1, r0
 8011582:	ab03      	add	r3, sp, #12
 8011584:	4805      	ldr	r0, [pc, #20]	; (801159c <fiprintf+0x20>)
 8011586:	f853 2b04 	ldr.w	r2, [r3], #4
 801158a:	6800      	ldr	r0, [r0, #0]
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	f7ff f977 	bl	8010880 <_vfiprintf_r>
 8011592:	b002      	add	sp, #8
 8011594:	f85d eb04 	ldr.w	lr, [sp], #4
 8011598:	b003      	add	sp, #12
 801159a:	4770      	bx	lr
 801159c:	200000bc 	.word	0x200000bc

080115a0 <abort>:
 80115a0:	b508      	push	{r3, lr}
 80115a2:	2006      	movs	r0, #6
 80115a4:	f000 f834 	bl	8011610 <raise>
 80115a8:	2001      	movs	r0, #1
 80115aa:	f7f2 fae9 	bl	8003b80 <_exit>

080115ae <_malloc_usable_size_r>:
 80115ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115b2:	1f18      	subs	r0, r3, #4
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	bfbc      	itt	lt
 80115b8:	580b      	ldrlt	r3, [r1, r0]
 80115ba:	18c0      	addlt	r0, r0, r3
 80115bc:	4770      	bx	lr

080115be <_raise_r>:
 80115be:	291f      	cmp	r1, #31
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4604      	mov	r4, r0
 80115c4:	460d      	mov	r5, r1
 80115c6:	d904      	bls.n	80115d2 <_raise_r+0x14>
 80115c8:	2316      	movs	r3, #22
 80115ca:	6003      	str	r3, [r0, #0]
 80115cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115d0:	bd38      	pop	{r3, r4, r5, pc}
 80115d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80115d4:	b112      	cbz	r2, 80115dc <_raise_r+0x1e>
 80115d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115da:	b94b      	cbnz	r3, 80115f0 <_raise_r+0x32>
 80115dc:	4620      	mov	r0, r4
 80115de:	f000 f831 	bl	8011644 <_getpid_r>
 80115e2:	462a      	mov	r2, r5
 80115e4:	4601      	mov	r1, r0
 80115e6:	4620      	mov	r0, r4
 80115e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115ec:	f000 b818 	b.w	8011620 <_kill_r>
 80115f0:	2b01      	cmp	r3, #1
 80115f2:	d00a      	beq.n	801160a <_raise_r+0x4c>
 80115f4:	1c59      	adds	r1, r3, #1
 80115f6:	d103      	bne.n	8011600 <_raise_r+0x42>
 80115f8:	2316      	movs	r3, #22
 80115fa:	6003      	str	r3, [r0, #0]
 80115fc:	2001      	movs	r0, #1
 80115fe:	e7e7      	b.n	80115d0 <_raise_r+0x12>
 8011600:	2400      	movs	r4, #0
 8011602:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011606:	4628      	mov	r0, r5
 8011608:	4798      	blx	r3
 801160a:	2000      	movs	r0, #0
 801160c:	e7e0      	b.n	80115d0 <_raise_r+0x12>
	...

08011610 <raise>:
 8011610:	4b02      	ldr	r3, [pc, #8]	; (801161c <raise+0xc>)
 8011612:	4601      	mov	r1, r0
 8011614:	6818      	ldr	r0, [r3, #0]
 8011616:	f7ff bfd2 	b.w	80115be <_raise_r>
 801161a:	bf00      	nop
 801161c:	200000bc 	.word	0x200000bc

08011620 <_kill_r>:
 8011620:	b538      	push	{r3, r4, r5, lr}
 8011622:	4d07      	ldr	r5, [pc, #28]	; (8011640 <_kill_r+0x20>)
 8011624:	2300      	movs	r3, #0
 8011626:	4604      	mov	r4, r0
 8011628:	4608      	mov	r0, r1
 801162a:	4611      	mov	r1, r2
 801162c:	602b      	str	r3, [r5, #0]
 801162e:	f7f2 fa97 	bl	8003b60 <_kill>
 8011632:	1c43      	adds	r3, r0, #1
 8011634:	d102      	bne.n	801163c <_kill_r+0x1c>
 8011636:	682b      	ldr	r3, [r5, #0]
 8011638:	b103      	cbz	r3, 801163c <_kill_r+0x1c>
 801163a:	6023      	str	r3, [r4, #0]
 801163c:	bd38      	pop	{r3, r4, r5, pc}
 801163e:	bf00      	nop
 8011640:	20002e28 	.word	0x20002e28

08011644 <_getpid_r>:
 8011644:	f7f2 ba84 	b.w	8003b50 <_getpid>

08011648 <_init>:
 8011648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164a:	bf00      	nop
 801164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801164e:	bc08      	pop	{r3}
 8011650:	469e      	mov	lr, r3
 8011652:	4770      	bx	lr

08011654 <_fini>:
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011656:	bf00      	nop
 8011658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165a:	bc08      	pop	{r3}
 801165c:	469e      	mov	lr, r3
 801165e:	4770      	bx	lr
